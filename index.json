{
  "api/index.html": {
    "href": "api/index.html",
    "title": "PnP Core SDK API documentation | PnP Core SDK",
    "keywords": "PnP Core SDK API documentation Welcome to the API documentation of the PnP Core SDK. If you want to browse our API, in the left side navigation you can filter by namespace. If you're looking for a particular class, it's easier to use the filter and simply type the class name. Note This documentation is auto generated based on the public API surface and code comments (triple slash comments). If you like to submit any changes or to fix any typos, please create a PR against the respective source files with updated code comments. Community rocks!"
  },
  "api/Microsoft.Extensions.DependencyInjection.AuthenticationCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.AuthenticationCollectionExtensions.html",
    "title": "Class AuthenticationCollectionExtensions | PnP Core SDK",
    "keywords": "Class AuthenticationCollectionExtensions Extension methods to assist with setting up the IAuthenticationProvider infrastructure Inheritance Object AuthenticationCollectionExtensions Namespace : Microsoft.Extensions.DependencyInjection Assembly : PnP.Core.Auth.dll Syntax public static class AuthenticationCollectionExtensions : object Methods AddPnPCoreAuthentication(IServiceCollection) Adds all the IAuthenticationProvider flavors to the collection of loaded services Declaration public static IServiceCollection AddPnPCoreAuthentication(this IServiceCollection collection) Parameters IServiceCollection collection Collection of loaded services Returns IServiceCollection Collection of loaded services AddPnPCoreAuthentication(IServiceCollection, Action<PnPCoreAuthenticationOptions>) Adds all the IAuthenticationProvider flavors to the collection of loaded services Declaration public static IServiceCollection AddPnPCoreAuthentication(this IServiceCollection collection, Action<PnPCoreAuthenticationOptions> options) Parameters IServiceCollection collection Collection of loaded services Action < PnPCoreAuthenticationOptions > options PnPCoreAuthenticationOptions options to use for configuration Returns IServiceCollection Collection of loaded services"
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | PnP Core SDK",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes AuthenticationCollectionExtensions Extension methods to assist with setting up the IAuthenticationProvider infrastructure PnPCoreServiceCollectionExtensions Extension methods for setting up PnP Core SDK services in an ."
  },
  "api/Microsoft.Extensions.DependencyInjection.PnPCoreServiceCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.PnPCoreServiceCollectionExtensions.html",
    "title": "Class PnPCoreServiceCollectionExtensions | PnP Core SDK",
    "keywords": "Class PnPCoreServiceCollectionExtensions Extension methods for setting up PnP Core SDK services in an . Inheritance Object PnPCoreServiceCollectionExtensions Namespace : Microsoft.Extensions.DependencyInjection Assembly : PnP.Core.dll Syntax public static class PnPCoreServiceCollectionExtensions : object Methods AddPnPCore(IServiceCollection) Configures PnP Core SDK with default options Declaration public static IPnPCoreBuilder AddPnPCore(this IServiceCollection services) Parameters IServiceCollection services The collection of services in an Returns IPnPCoreBuilder A PnPCoreBuilder instance AddPnPCore(IServiceCollection, Action<PnPCoreOptions>) Configures PnP Core SDK with custom options Declaration public static IPnPCoreBuilder AddPnPCore(this IServiceCollection services, Action<PnPCoreOptions> options) Parameters IServiceCollection services The collection of services in an Action < PnPCoreOptions > options An Action to configure the PnP Core options Returns IPnPCoreBuilder A PnPCoreBuilder instance"
  },
  "api/PnP.Core.Admin.Model.Microsoft365.GeoLocation.html": {
    "href": "api/PnP.Core.Admin.Model.Microsoft365.GeoLocation.html",
    "title": "Enum GeoLocation | PnP Core SDK",
    "keywords": "Enum GeoLocation Microsoft 365 Geo Locations Namespace : PnP.Core.Admin.Model.Microsoft365 Assembly : PnP.Core.Admin.dll Syntax public enum GeoLocation : int APC Asia-Pacific ARE United Arab Emirates AUS Australia BRA Brazil CAN Canada CHE Zwitserland DEU Germany EUR Europe / Middle East / Africa FRA France GBR United Kingdom IND India JPN Japan KOR Korea NAM North America NOR Norway ZAF South Africa"
  },
  "api/PnP.Core.Admin.Model.Microsoft365.html": {
    "href": "api/PnP.Core.Admin.Model.Microsoft365.html",
    "title": "Namespace PnP.Core.Admin.Model.Microsoft365 | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Admin.Model.Microsoft365 Interfaces IGeoLocationInformation Contains information about a geo location IMicrosoft365Admin Microsoft 365 Admin features ISensitivityLabel A Microsoft 365 sensitivity label Enums GeoLocation Microsoft 365 Geo Locations"
  },
  "api/PnP.Core.Admin.Model.Microsoft365.IGeoLocationInformation.html": {
    "href": "api/PnP.Core.Admin.Model.Microsoft365.IGeoLocationInformation.html",
    "title": "Interface IGeoLocationInformation | PnP Core SDK",
    "keywords": "Interface IGeoLocationInformation Contains information about a geo location Namespace : PnP.Core.Admin.Model.Microsoft365 Assembly : PnP.Core.Admin.dll Syntax public interface IGeoLocationInformation Properties DataLocationCode Data location code for the geo location Declaration GeoLocation DataLocationCode { get; } Property Value GeoLocation SharePointAdminUrl SharePoint Admin site url for the geo location Declaration string SharePointAdminUrl { get; } Property Value String SharePointMySiteUrl SharePoint My site url for the geo location Declaration string SharePointMySiteUrl { get; } Property Value String SharePointPortalUrl SharePoint portal url for the geo location Declaration string SharePointPortalUrl { get; } Property Value String"
  },
  "api/PnP.Core.Admin.Model.Microsoft365.IMicrosoft365Admin.html": {
    "href": "api/PnP.Core.Admin.Model.Microsoft365.IMicrosoft365Admin.html",
    "title": "Interface IMicrosoft365Admin | PnP Core SDK",
    "keywords": "Interface IMicrosoft365Admin Microsoft 365 Admin features Namespace : PnP.Core.Admin.Model.Microsoft365 Assembly : PnP.Core.Admin.dll Syntax public interface IMicrosoft365Admin Methods AccessTokenHasRole(String) Checks if the current access token holds the requested role Declaration bool AccessTokenHasRole(string role) Parameters String role Role to check for Returns Boolean True if the token has the role, false otherwise AccessTokenHasRole(String, String) Checks if the provided access token holds the requested role Declaration bool AccessTokenHasRole(string accessToken, string role) Parameters String accessToken Accesstoken to inspect String role Role to check for Returns Boolean True if the token has the role, false otherwise AccessTokenHasRoleAsync(String) Checks if the current access token holds the requested role Declaration Task<bool> AccessTokenHasRoleAsync(string role) Parameters String role Role to check for Returns Task < Boolean > True if the token has the role, false otherwise AccessTokenHasScope(String) Checks if the current access token holds the requested scope Declaration bool AccessTokenHasScope(string scope) Parameters String scope Scope to check for Returns Boolean True if the token has the scope, false otherwise AccessTokenHasScope(String, String) Checks if the provided access token holds the requested scope Declaration bool AccessTokenHasScope(string accessToken, string scope) Parameters String accessToken Accesstoken to inspect String scope Scope to check for Returns Boolean True if the token has the scope, false otherwise AccessTokenHasScopeAsync(String) Checks if the current access token holds the requested scope Declaration Task<bool> AccessTokenHasScopeAsync(string scope) Parameters String scope Scopee to check for Returns Task < Boolean > True if the token has the scope, false otherwise AccessTokenUsesApplicationPermissions() Checks if the current access token uses application permissions Declaration bool AccessTokenUsesApplicationPermissions() Returns Boolean True if using application permissions, false otherwise AccessTokenUsesApplicationPermissions(String) Checks if the provided access token uses application permissions Declaration bool AccessTokenUsesApplicationPermissions(string accessToken) Parameters String accessToken Accesstoken to inspect Returns Boolean True if using application permissions, false otherwise AccessTokenUsesApplicationPermissionsAsync() Checks if the current access token uses application permissions Declaration Task<bool> AccessTokenUsesApplicationPermissionsAsync() Returns Task < Boolean > True if using application permissions, false otherwise GetMultiGeoLocations() Returns a list of multi-geo locations for this tenant Declaration List<IGeoLocationInformation> GetMultiGeoLocations() Returns List < IGeoLocationInformation > List of multi-geo locations if multi-geo, null otherwise GetMultiGeoLocationsAsync() Returns a list of multi-geo locations for this tenant Declaration Task<List<IGeoLocationInformation>> GetMultiGeoLocationsAsync() Returns Task < List < IGeoLocationInformation >> List of multi-geo locations if multi-geo, null otherwise GetSensitivityLabels() Get the available sensitivity labels for the calling user or application Declaration List<ISensitivityLabel> GetSensitivityLabels() Returns List < ISensitivityLabel > List of sensitivity labels GetSensitivityLabelsAsync() Get the available sensitivity labels for the calling user or application Declaration Task<List<ISensitivityLabel>> GetSensitivityLabelsAsync() Returns Task < List < ISensitivityLabel >> List of sensitivity labels IsMultiGeoTenant() Checks if this tenant is a multi-geo tenant Declaration bool IsMultiGeoTenant() Returns Boolean True if multi-geo, false otherwise IsMultiGeoTenantAsync() Checks if this tenant is a multi-geo tenant Declaration Task<bool> IsMultiGeoTenantAsync() Returns Task < Boolean > True if multi-geo, false otherwise"
  },
  "api/PnP.Core.Admin.Model.Microsoft365.ISensitivityLabel.html": {
    "href": "api/PnP.Core.Admin.Model.Microsoft365.ISensitivityLabel.html",
    "title": "Interface ISensitivityLabel | PnP Core SDK",
    "keywords": "Interface ISensitivityLabel A Microsoft 365 sensitivity label Namespace : PnP.Core.Admin.Model.Microsoft365 Assembly : PnP.Core.Admin.dll Syntax public interface ISensitivityLabel Properties Description Description of the sensitivity label Declaration string Description { get; } Property Value String Id Id of the sensitivity label Declaration Guid Id { get; } Property Value Guid IsActive Is this the sensitivity label active? Declaration bool IsActive { get; } Property Value Boolean Name Name of the sensitivity label Declaration string Name { get; } Property Value String Sensitivity The sensitivity setting for this label Declaration int Sensitivity { get; } Property Value Int32 Tooltip Tooltip to use if this label is used in a user interface Declaration string Tooltip { get; } Property Value String"
  },
  "api/PnP.Core.Admin.Model.SharePoint.AnonymousLinkType.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.AnonymousLinkType.html",
    "title": "Enum AnonymousLinkType | PnP Core SDK",
    "keywords": "Enum AnonymousLinkType Indicates whether an anonymous link (also known as share-by-link) should be included in an invitation, and if so, what permissions should be granted via that link. The anonymous link will be created once the invitation is created Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum AnonymousLinkType : int Edit A read/write anonymous link None No anonymous link is desired View A view only anonymous link"
  },
  "api/PnP.Core.Admin.Model.SharePoint.AppViewsPolicy.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.AppViewsPolicy.html",
    "title": "Enum AppViewsPolicy | PnP Core SDK",
    "keywords": "Enum AppViewsPolicy Indicates whether app views are disabled in all the webs of this site Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum AppViewsPolicy : int Disabled Indicates that app views are disabled in all the webs of this site NotDisabled Indicates that app views may be enabled in some of the webs of this site Unknown Internal use only"
  },
  "api/PnP.Core.Admin.Model.SharePoint.BlockDownloadLinksFileTypes.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.BlockDownloadLinksFileTypes.html",
    "title": "Enum BlockDownloadLinksFileTypes | PnP Core SDK",
    "keywords": "Enum BlockDownloadLinksFileTypes Specifies the types of files that can be displayed when the block download links feature is being used Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum BlockDownloadLinksFileTypes : int ServerRenderedFilesOnly Server rendered files only WebPreviewableFiles Web previewable files only"
  },
  "api/PnP.Core.Admin.Model.SharePoint.ChannelMeetingRecordingPermissionType.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.ChannelMeetingRecordingPermissionType.html",
    "title": "Enum ChannelMeetingRecordingPermissionType | PnP Core SDK",
    "keywords": "Enum ChannelMeetingRecordingPermissionType Specifies what channel meeting recording permission type is enabled for the tenant Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum ChannelMeetingRecordingPermissionType : int Editable The Teams Channel Meeting Recording is stored in the default \"Recordings\" folder. Permissions are inherited, which by default allow the users within the channel to edit the video ViewOnly The Teams Channel Meeting Recording is stored in the \"Recordings/View Only\" folder. The View Only folder has Restricted Reader role assignments for Site Members and Visitors preventing editing or download"
  },
  "api/PnP.Core.Admin.Model.SharePoint.ClassicSiteOptions.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.ClassicSiteOptions.html",
    "title": "Class ClassicSiteOptions | PnP Core SDK",
    "keywords": "Class ClassicSiteOptions Contains the available options for creating a classic site collection (e.g. classic team site) Inheritance Object CommonSiteOptions ClassicSiteOptions Inherited Members CommonSiteOptions.Language CommonSiteOptions.WebTemplate Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public class ClassicSiteOptions : CommonSiteOptions Constructors ClassicSiteOptions(Uri, String, String, String, Language, TimeZone) Default constuctor for creating a ClassicSiteOptions object used to define a classic site collection creation Declaration public ClassicSiteOptions(Uri url, string title, string webTemplate, string siteOwnerLogin, Language language, TimeZone timeZone) Parameters Uri url Url of the classic site collection to create String title Title of the classic site collection to create String webTemplate Web template of the classic site collection to create String siteOwnerLogin Owner of the classic site collection to create Language language Language to use for the site TimeZone timeZone Time zone of the classic site collection to create Properties Owner Owner of the classic site Declaration public string Owner { get; set; } Property Value String TimeZone Time zone id for the classic site Declaration public TimeZone TimeZone { get; set; } Property Value TimeZone Title Title of the classic site Declaration public string Title { get; set; } Property Value String Url Url of the classic site Declaration public Uri Url { get; set; } Property Value Uri"
  },
  "api/PnP.Core.Admin.Model.SharePoint.CommonGroupSiteOptions.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.CommonGroupSiteOptions.html",
    "title": "Class CommonGroupSiteOptions | PnP Core SDK",
    "keywords": "Class CommonGroupSiteOptions Generic site collection creation options that apply for all types of site collections that are backed by a Microsoft 365 group Inheritance Object CommonSiteOptions CommonGroupSiteOptions ConnectSiteToGroupOptions TeamSiteOptions Inherited Members CommonSiteOptions.Language CommonSiteOptions.WebTemplate Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public abstract class CommonGroupSiteOptions : CommonSiteOptions Constructors CommonGroupSiteOptions(String, String) Default constructor to configure the common options for group connected sites Declaration public CommonGroupSiteOptions(string alias, string displayName) Parameters String alias Alias for the group to create String displayName Display name for the group to create Properties Alias Alias of the underlying Office 365 Group Declaration public string Alias { get; set; } Property Value String Classification The Site classification to use. For instance 'Contoso Classified'. See https://www.youtube.com/watch?v=E-8Z2ggHcS0 for more information Declaration public string Classification { get; set; } Property Value String Description The description of the site to be created. Declaration public string Description { get; set; } Property Value String DisplayName The title of the site to create Declaration public string DisplayName { get; set; } Property Value String HubSiteId The Guid of the hub site to be used. If specified will associate the modern team site to the hub site. Declaration public Guid HubSiteId { get; set; } Property Value Guid IsPublic Defines whether the Office 365 Group will be public (default), or private. Declaration public bool IsPublic { get; set; } Property Value Boolean PreferredDataLocation The geography in which to create the site collection. Only applicable to multi-geo enabled tenants Declaration public GeoLocation? PreferredDataLocation { get; set; } Property Value Nullable < GeoLocation > SensitivityLabelId The Sensitivity label to use. See https://www.youtube.com/watch?v=NxvUXBiPFcw for more information. Declaration public Guid SensitivityLabelId { get; set; } Property Value Guid SiteAlias SiteAlias of the underlying Office 365 Group, i.e. the site part of the url: https://contoso.sharepoint.com/sites/ <SiteAlias> Declaration public string SiteAlias { get; set; } Property Value String"
  },
  "api/PnP.Core.Admin.Model.SharePoint.CommonNoGroupSiteOptions.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.CommonNoGroupSiteOptions.html",
    "title": "Class CommonNoGroupSiteOptions | PnP Core SDK",
    "keywords": "Class CommonNoGroupSiteOptions Generic site collection creation options that apply for all types of site collections that are not backed by a Microsoft 365 group Inheritance Object CommonSiteOptions CommonNoGroupSiteOptions CommunicationSiteOptions TeamSiteWithoutGroupOptions Inherited Members CommonSiteOptions.Language CommonSiteOptions.WebTemplate Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public abstract class CommonNoGroupSiteOptions : CommonSiteOptions Constructors CommonNoGroupSiteOptions(Uri, String) Default constructor, sets url and title Declaration public CommonNoGroupSiteOptions(Uri url, string title) Parameters Uri url Url of the site to create String title Title of the site to create Properties Classification The Site classification to use. For instance 'Contoso Classified'. See https://www.youtube.com/watch?v=E-8Z2ggHcS0 for more information Declaration public string Classification { get; set; } Property Value String Description The description to use for the site. Declaration public string Description { get; set; } Property Value String HubSiteId The Guid of the hub site to be used. If specified will associate the communication site to the hub site Declaration public Guid HubSiteId { get; set; } Property Value Guid Owner The owner of the site. Reserved for future use. Declaration public string Owner { get; set; } Property Value String SensitivityLabelId The Sensitivity label to use. See https://www.youtube.com/watch?v=NxvUXBiPFcw for more information. Declaration public Guid SensitivityLabelId { get; set; } Property Value Guid ShareByEmailEnabled If set to true sharing files by email is enabled. Defaults to false. Declaration public bool ShareByEmailEnabled { get; set; } Property Value Boolean SiteDesignId The Guid of the site design to be used. Declaration public Guid SiteDesignId { get; set; } Property Value Guid Title The title of the site to create Declaration public string Title { get; set; } Property Value String Url The fully qualified URL (e.g. https://yourtenant.sharepoint.com/sites/mysitecollection ) of the site. Declaration public Uri Url { get; set; } Property Value Uri"
  },
  "api/PnP.Core.Admin.Model.SharePoint.CommonSiteOptions.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.CommonSiteOptions.html",
    "title": "Class CommonSiteOptions | PnP Core SDK",
    "keywords": "Class CommonSiteOptions Generic site collection creation options that apply for all types of site collections Inheritance Object CommonSiteOptions ClassicSiteOptions CommonGroupSiteOptions CommonNoGroupSiteOptions Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public abstract class CommonSiteOptions : object Properties Language The language to use for the site. Declaration public Language Language { get; set; } Property Value Language WebTemplate The Web template to use for the site. Declaration public string WebTemplate { get; protected set; } Property Value String"
  },
  "api/PnP.Core.Admin.Model.SharePoint.CommunicationSiteDesign.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.CommunicationSiteDesign.html",
    "title": "Enum CommunicationSiteDesign | PnP Core SDK",
    "keywords": "Enum CommunicationSiteDesign Default sites designs to be applied to communication sites Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum CommunicationSiteDesign : int Blank Blank site design Showcase Showcase site design Topic Topic site design"
  },
  "api/PnP.Core.Admin.Model.SharePoint.CommunicationSiteOptions.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.CommunicationSiteOptions.html",
    "title": "Class CommunicationSiteOptions | PnP Core SDK",
    "keywords": "Class CommunicationSiteOptions Contains the available options for creating a communication site collection Inheritance Object CommonSiteOptions CommonNoGroupSiteOptions CommunicationSiteOptions Inherited Members CommonNoGroupSiteOptions.Url CommonNoGroupSiteOptions.Title CommonNoGroupSiteOptions.Owner CommonNoGroupSiteOptions.ShareByEmailEnabled CommonNoGroupSiteOptions.Classification CommonNoGroupSiteOptions.Description CommonNoGroupSiteOptions.SiteDesignId CommonNoGroupSiteOptions.HubSiteId CommonNoGroupSiteOptions.SensitivityLabelId CommonSiteOptions.Language CommonSiteOptions.WebTemplate Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public class CommunicationSiteOptions : CommonNoGroupSiteOptions Constructors CommunicationSiteOptions(Uri, String) Default constuctor for creating a CommunicationSiteOptions object used to define a communication site collection creation Declaration public CommunicationSiteOptions(Uri url, string title) Parameters Uri url Url of the communication site to create String title Title of the communication site to create Properties SiteDesign The built-in site design to used. If both SiteDesignId and SiteDesign have been specified, the GUID specified as SiteDesignId will be used. Declaration public CommunicationSiteDesign SiteDesign { get; set; } Property Value CommunicationSiteDesign"
  },
  "api/PnP.Core.Admin.Model.SharePoint.CompanyWideSharingLinksPolicy.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.CompanyWideSharingLinksPolicy.html",
    "title": "Enum CompanyWideSharingLinksPolicy | PnP Core SDK",
    "keywords": "Enum CompanyWideSharingLinksPolicy Indicates whether company wide sharing links are disabled in all the webs of this site. Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum CompanyWideSharingLinksPolicy : int Remarks Note that while this property being Disabled guarantees that no company wide sharing links are available in any of the child webs, the opposite is not the case. In other words, if this property is NotDisabled, it does not guarantee that company wide sharing links are available in all of the child webs. That decision is left up to the individual webs. Disabled Indicates that company wide sharing links are disabled in all the webs of this site NotDisabled Indicates that company wide sharing links may be enabled in some of the webs of this site Unknown Internally used"
  },
  "api/PnP.Core.Admin.Model.SharePoint.ConnectSiteToGroupOptions.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.ConnectSiteToGroupOptions.html",
    "title": "Class ConnectSiteToGroupOptions | PnP Core SDK",
    "keywords": "Class ConnectSiteToGroupOptions Defines the information need to connect a group to an existing site Inheritance Object CommonSiteOptions CommonGroupSiteOptions ConnectSiteToGroupOptions Inherited Members CommonGroupSiteOptions.Alias CommonGroupSiteOptions.DisplayName CommonGroupSiteOptions.IsPublic CommonGroupSiteOptions.Description CommonGroupSiteOptions.Classification CommonGroupSiteOptions.HubSiteId CommonGroupSiteOptions.SensitivityLabelId CommonGroupSiteOptions.SiteAlias CommonGroupSiteOptions.PreferredDataLocation CommonSiteOptions.Language CommonSiteOptions.WebTemplate Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public class ConnectSiteToGroupOptions : CommonGroupSiteOptions Constructors ConnectSiteToGroupOptions(Uri, String, String) Creates an ConnectSiteToGroupOptions class Declaration public ConnectSiteToGroupOptions(Uri url, string alias, string displayName) Parameters Uri url The url for the site to group connect String alias Alias for the group that will be connected to the site String displayName Name of the site Properties KeepOldHomePage If the site already has a modern home page, do we want to keep it? Declaration public bool KeepOldHomePage { get; set; } Property Value Boolean Owners Set the owners of the group connected site. Specify the UPN values in a string array. Declaration public string[] Owners { get; set; } Property Value String [] Url The url for the site to group connect Declaration public Uri Url { get; set; } Property Value Uri"
  },
  "api/PnP.Core.Admin.Model.SharePoint.CreationOptions.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.CreationOptions.html",
    "title": "Class CreationOptions | PnP Core SDK",
    "keywords": "Class CreationOptions Options to control a creation flow Inheritance Object CreationOptions SiteCreationOptions Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public class CreationOptions : object Properties MaxStatusChecks Number of times to check for provisioning complete status. Defaults to 12 if not set. Declaration public int? MaxStatusChecks { get; set; } Property Value Nullable < Int32 > UsingApplicationPermissions The provisioning code will work differently if Application permissions are used. Defaults to live checking of the current access token if not set. Declaration public bool? UsingApplicationPermissions { get; set; } Property Value Nullable < Boolean > WaitAfterStatusCheck Defines the wait time in seconds after a status check. Defaults to 10 if not set. Declaration public int? WaitAfterStatusCheck { get; set; } Property Value Nullable < Int32 >"
  },
  "api/PnP.Core.Admin.Model.SharePoint.DenyAddAndCustomizePagesStatus.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.DenyAddAndCustomizePagesStatus.html",
    "title": "Enum DenyAddAndCustomizePagesStatus | PnP Core SDK",
    "keywords": "Enum DenyAddAndCustomizePagesStatus Represents the status of DenyAddAndCustomizePages on a site collection. Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum DenyAddAndCustomizePagesStatus : int Disabled DenyAddAndCustomizePages is disabled Enabled DenyAddAndCustomizePages is enabled Unknown Value is unknown"
  },
  "api/PnP.Core.Admin.Model.SharePoint.FlowsPolicy.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.FlowsPolicy.html",
    "title": "Enum FlowsPolicy | PnP Core SDK",
    "keywords": "Enum FlowsPolicy Indicates whether flows are disabled in all the webs of this site Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum FlowsPolicy : int Remarks Note that while this property being Disabled guarantees that no flows are available in any of the child webs, the opposite is not the case. In other words, if this property is NotDisabled, it does not guarantee that flows are available in all of the child webs. That decision is left up to the individual webs. Disabled Indicates that flows are disabled in all the webs of this site NotDisabled Indicates that flows may be enabled in some of the webs of this site Unknown Internal use"
  },
  "api/PnP.Core.Admin.Model.SharePoint.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.html",
    "title": "Namespace PnP.Core.Admin.Model.SharePoint | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Admin.Model.SharePoint Classes ClassicSiteOptions Contains the available options for creating a classic site collection (e.g. classic team site) CommonGroupSiteOptions Generic site collection creation options that apply for all types of site collections that are backed by a Microsoft 365 group CommonNoGroupSiteOptions Generic site collection creation options that apply for all types of site collections that are not backed by a Microsoft 365 group CommonSiteOptions Generic site collection creation options that apply for all types of site collections CommunicationSiteOptions Contains the available options for creating a communication site collection ConnectSiteToGroupOptions Defines the information need to connect a group to an existing site CreationOptions Options to control a creation flow SiteCreationOptions Options to control the site collection creation flow TeamSiteOptions Contains the available options for creating a group connected team site collection TeamSiteWithoutGroupOptions Contains the available options for creating a team site collection without a group Interfaces IApp Represents a base interface for an app stored either in tenant or site collection app catalog. IAppCatalogSite Metadata for a site collection catalog response. IAppManager<T> App Admin features IAppOperations Interface for base app operations, like Deploy, Install, etc. IRecycledSiteCollection Defines a site collection living in the tenant's recyle bin ISharePointAdmin SharePoint Admin features ISiteCollection A SharePoint site collection reference ISiteCollectionAdmin Defines a site collection administrator ISiteCollectionApp Represents an interace for an app located at the site collection app catalog. ISiteCollectionAppManager Represents an interface to work with Application Lifecycle Management (ALM) for a site collection app catalog. ISiteCollectionManager SharePoint Site Collection features ISiteCollectionProperties Properties of a site collection ISiteCollectionWithDetails A SharePoint site collection with details reference ITenantApp Represents an interace for an app located at the tenant app catalog. ITenantAppManager Represents an interface to work with Application Lifecycle Management (ALM) for the tenant app catalog. ITenantProperties Tenant properties Enums AnonymousLinkType Indicates whether an anonymous link (also known as share-by-link) should be included in an invitation, and if so, what permissions should be granted via that link. The anonymous link will be created once the invitation is created AppViewsPolicy Indicates whether app views are disabled in all the webs of this site BlockDownloadLinksFileTypes Specifies the types of files that can be displayed when the block download links feature is being used ChannelMeetingRecordingPermissionType Specifies what channel meeting recording permission type is enabled for the tenant CommunicationSiteDesign Default sites designs to be applied to communication sites CompanyWideSharingLinksPolicy Indicates whether company wide sharing links are disabled in all the webs of this site. DenyAddAndCustomizePagesStatus Represents the status of DenyAddAndCustomizePages on a site collection. FlowsPolicy Indicates whether flows are disabled in all the webs of this site ImageTaggingChoice Contains the values of the 3 allowed states for image tagging Language SharePoint Online languages MediaTranscriptionPolicyType Defines the media transcription policy type values PWAEnabledStatus Represents the status of EnableProjectWebInstance on a site collection. RestrictedToRegion Represents the status of RestrictedToRegion on a site collection SensitiveByDefaultState Contains the values of the 2 allowed states for MarkNewFileSensitiveByDefault SharingCapabilities Specifies what type of external user and guest link sharing is enabled for the tenant SharingDomainRestrictionModes Specifies what type of restriction mode is enabled for the tenant SharingLinkType Specifies the type of default sharing link for the tenant SharingPermissionType Specifies the type of default link permission for the tenant SharingState Contains the possible values for the default sharing state SiteUserInfoVisibilityPolicyValue Indicates what the state of the browse user info policy in the site SpecialCharactersState Contains the values of the 3 allowed states for Special Characters SPOConditionalAccessPolicyType Specifies what type of SPO conditional access policy is enabled for the tenant SPOLimitedAccessFileType Specifies what type of files can be viewed when the AllowLimitedAccess is set as the ConditionalAccessPolicy TeamsChannelTypeValue Indicates the type of TeamsCannel a site is connected to TenantBrowseUserInfoPolicyValue Indicates what the state of the browse user info policy in the tenant TimeZone Timezones to use when creating sitecollections Format UTC[PLUS|MINUS][HH:MM]_[DESCRIPTION] Workflows2013State Specifies the state of Workflows 2013 in the tenant"
  },
  "api/PnP.Core.Admin.Model.SharePoint.IApp.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.IApp.html",
    "title": "Interface IApp | PnP Core SDK",
    "keywords": "Interface IApp Represents a base interface for an app stored either in tenant or site collection app catalog. Inherited Members IDataModelWithContext.PnPContext Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public interface IApp : IDataModelWithContext Properties AadAppId Azure Active Directory Id of the SharePoint Online Client Extensibility Web Application Principal. It's not empty if your SPFx solution requests any AAD permissions. Declaration string AadAppId { get; set; } Property Value String AadPermissions The list of Azure Active Directory permissions your SPFx solution requests. Declaration string AadPermissions { get; set; } Property Value String AppCatalogVersion Returns version of the app in the app catalog. Declaration Version AppCatalogVersion { get; set; } Property Value Version CanUpgrade Returns whether an existing instance of the app can be upgraded. True if there's newer version available in the app catalog compared to the instance in the site. Declaration bool CanUpgrade { get; set; } Property Value Boolean CDNLocation Returns the url of CDN if your app is hosted on CDN. If it's hosted inside SharePoint, it returns \"SharePoint Online\". Declaration string CDNLocation { get; set; } Property Value String ContainsTenantWideExtension Indicates whether your app contains tenant wide extensions. Declaration bool ContainsTenantWideExtension { get; set; } Property Value Boolean CurrentVersionDeployed Indicates whether the current version of the app is deployed. Declaration bool CurrentVersionDeployed { get; set; } Property Value Boolean Deployed Indicates whether the app has been deployed to the context site. True if particular app has been installed to the site. Declaration bool Deployed { get; set; } Property Value Boolean ErrorMessage Contains an error message if the app contains any problems during deployment. Declaration string ErrorMessage { get; set; } Property Value String Id Unique ID of the library list item of the app. Declaration Guid Id { get; set; } Property Value Guid InstalledVersion Returns a version of the installed app in the site context. Declaration Version InstalledVersion { get; set; } Property Value Version IsClientSideSolution Indicates whether the app is SharePoint Framework client-side solution. Declaration bool IsClientSideSolution { get; set; } Property Value Boolean IsEnabled Whether the app is enabled. Declaration bool IsEnabled { get; set; } Property Value Boolean IsPackageDefaultSkipFeatureDeployment Returns true, if the app's config (./config/package-solution.json) contains \"skipFeatureDeployment\" setting and it's set to true. Declaration bool IsPackageDefaultSkipFeatureDeployment { get; set; } Property Value Boolean IsValidAppPackage Indicates whether the app package is valid. Declaration bool IsValidAppPackage { get; set; } Property Value Boolean ProductId The app's product id. Declaration Guid ProductId { get; set; } Property Value Guid ShortDescription The short description of the app. Declaration string ShortDescription { get; set; } Property Value String SkipDeploymentFeature Returns true, if the app was globally deployed. Declaration bool SkipDeploymentFeature { get; set; } Property Value Boolean ThumbnailUrl The thumbnail url of the app. Declaration string ThumbnailUrl { get; set; } Property Value String Title Title of the app. Declaration string Title { get; set; } Property Value String Methods Deploy(Boolean) Deploys / trusts an app in the app catalog. Declaration bool Deploy(bool skipFeatureDeployment = true) Parameters Boolean skipFeatureDeployment If set to true will skip the feature deployment for tenant scoped apps. Returns Boolean true if deployment was successful. DeployAsync(Boolean) Deploys / trusts an app in the app catalog. Declaration Task<bool> DeployAsync(bool skipFeatureDeployment = true) Parameters Boolean skipFeatureDeployment If set to true will skip the feature deployment for tenant scoped apps. Returns Task < Boolean > true if deployment was successful. Install() Installs the app from the app catalog in a site. Declaration bool Install() Returns Boolean true if installation was successful. InstallAsync() Installs the app from the app catalog in a site. Declaration Task<bool> InstallAsync() Returns Task < Boolean > true if installation was successful. Remove() Removes the app from the app catalog. Declaration bool Remove() Returns Boolean true if remove was successful. RemoveAsync() Removes the app from the app catalog. Declaration Task<bool> RemoveAsync() Returns Task < Boolean > true if remove was successful. Retract() Retracts the app in the app catalog. Notice that this will not remove the app from the app catalog. Declaration bool Retract() Returns Boolean true if retract was successful. RetractAsync() Retracts the app in the app catalog. Notice that this will not remove the app from the app catalog. Declaration Task<bool> RetractAsync() Returns Task < Boolean > true if retract was successful. Uninstall() Uninstalls the app from a site. Declaration bool Uninstall() Returns Boolean true if uninstall was successful. UninstallAsync() Uninstalls the app from a site. Declaration Task<bool> UninstallAsync() Returns Task < Boolean > true if uninstall was successful. Upgrade() Upgrades the app in a site. Declaration bool Upgrade() Returns Boolean true if upgrade was successful. UpgradeAsync() Upgrades the app in a site. Declaration Task<bool> UpgradeAsync() Returns Task < Boolean > true if upgrade was successful."
  },
  "api/PnP.Core.Admin.Model.SharePoint.IAppCatalogSite.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.IAppCatalogSite.html",
    "title": "Interface IAppCatalogSite | PnP Core SDK",
    "keywords": "Interface IAppCatalogSite Metadata for a site collection catalog response. Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public interface IAppCatalogSite Properties AbsoluteUrl The absolute URL for a site collection app catalog. Declaration string AbsoluteUrl { get; set; } Property Value String SiteID The site collection id of a site collection app catalog. Declaration Guid SiteID { get; set; } Property Value Guid"
  },
  "api/PnP.Core.Admin.Model.SharePoint.IAppManager-1.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.IAppManager-1.html",
    "title": "Interface IAppManager<T> | PnP Core SDK",
    "keywords": "Interface IAppManager<T> App Admin features Inherited Members IAppOperations.Deploy(Guid, Boolean) IAppOperations.DeployAsync(Guid, Boolean) IAppOperations.Retract(Guid) IAppOperations.RetractAsync(Guid) IAppOperations.Remove(Guid) IAppOperations.RemoveAsync(Guid) IAppOperations.Install(Guid) IAppOperations.InstallAsync(Guid) IAppOperations.Upgrade(Guid) IAppOperations.UpgradeAsync(Guid) IAppOperations.Uninstall(Guid) IAppOperations.UninstallAsync(Guid) Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public interface IAppManager<T> : IAppOperations where T : IApp Type Parameters T Methods Add(Byte[], String, Boolean) Uploads a file to the app catalog. Declaration T Add(byte[] file, string fileName, bool overwrite = false) Parameters Byte [] file A byte array containing the file. String fileName The filename (e.g. myapp.sppkg) of the file to upload. Boolean overwrite If true will overwrite an existing entry. Returns T An instance of the app. Add(String, Boolean) Uploads an app file to the app catalog. Declaration T Add(string path, bool overwrite = false) Parameters String path Boolean overwrite If true will overwrite an existing entry. Returns T An instance of the app. AddAsync(Byte[], String, Boolean) Uploads a file to the app catalog. Declaration Task<T> AddAsync(byte[] file, string fileName, bool overwrite = false) Parameters Byte [] file A byte array containing the file. String fileName The filename (e.g. myapp.sppkg) of the file to upload. Boolean overwrite If true will overwrite an existing entry. Returns Task <T> An instance of the app. AddAsync(String, Boolean) Uploads an app file to the app catalog. Declaration Task<T> AddAsync(string path, bool overwrite = false) Parameters String path Boolean overwrite If true will overwrite an existing entry. Returns Task <T> An instance of the app. GetAvailable() Gets all available apps from the app catalog. Declaration IList<T> GetAvailable() Returns IList <T> A collection of apps. GetAvailable(Guid) Gets available app by it's unique id. Declaration T GetAvailable(Guid id) Parameters Guid id The unique id of the app. Notice that this is not the product id as listed in the app catalog. Returns T An instance of the app. GetAvailable(String) Gets available app by it's title. Declaration T GetAvailable(string title) Parameters String title An app's title. Returns T An instance of the app. GetAvailableAsync() Gets all available apps from the app catalog. Declaration Task<IList<T>> GetAvailableAsync() Returns Task < IList <T>> A collection of apps. GetAvailableAsync(Guid) Gets available app by it's unique id. Declaration Task<T> GetAvailableAsync(Guid id) Parameters Guid id The unique id of the app. Notice that this is not the product id as listed in the app catalog. Returns Task <T> An instance of the app. GetAvailableAsync(String) Gets available app by it's title. Declaration Task<T> GetAvailableAsync(string title) Parameters String title An app's title. Returns Task <T> An instance of the app."
  },
  "api/PnP.Core.Admin.Model.SharePoint.IAppOperations.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.IAppOperations.html",
    "title": "Interface IAppOperations | PnP Core SDK",
    "keywords": "Interface IAppOperations Interface for base app operations, like Deploy, Install, etc. Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public interface IAppOperations Methods Deploy(Guid, Boolean) Deploys / trusts an app in the app catalog. Declaration bool Deploy(Guid id, bool skipFeatureDeployment = true) Parameters Guid id The unique id of the app. Notice that this is not the product id as listed in the app catalog. Boolean skipFeatureDeployment If set to true will skip the feature deployment for tenant scoped apps. Returns Boolean true if deployment was successful. DeployAsync(Guid, Boolean) Deploys / trusts an app in the app catalog. Declaration Task<bool> DeployAsync(Guid id, bool skipFeatureDeployment = true) Parameters Guid id The unique id of the app. Notice that this is not the product id as listed in the app catalog. Boolean skipFeatureDeployment If set to true will skip the feature deployment for tenant scoped apps. Returns Task < Boolean > true if deployment was successful. Install(Guid) Installs the app from the app catalog in a site. Declaration bool Install(Guid id) Parameters Guid id The unique id of the app. Notice that this is not the product id as listed in the app catalog. Returns Boolean true if installation was successful. InstallAsync(Guid) Installs the app from the app catalog in a site. Declaration Task<bool> InstallAsync(Guid id) Parameters Guid id The unique id of the app. Notice that this is not the product id as listed in the app catalog. Returns Task < Boolean > true if installation was successful. Remove(Guid) Removes the app from the app catalog. Declaration bool Remove(Guid id) Parameters Guid id The unique id of the app. Notice that this is not the product id as listed in the app catalog. Returns Boolean true if remove was successful. RemoveAsync(Guid) Removes the app from the app catalog. Declaration Task<bool> RemoveAsync(Guid id) Parameters Guid id The unique id of the app. Notice that this is not the product id as listed in the app catalog. Returns Task < Boolean > true if remove was successful. Retract(Guid) Retracts the app in the app catalog. Notice that this will not remove the app from the app catalog. Declaration bool Retract(Guid id) Parameters Guid id The unique id of the app. Notice that this is not the product id as listed in the app catalog. Returns Boolean true if retract was successful. RetractAsync(Guid) Retracts the app in the app catalog. Notice that this will not remove the app from the app catalog. Declaration Task<bool> RetractAsync(Guid id) Parameters Guid id The unique id of the app. Notice that this is not the product id as listed in the app catalog. Returns Task < Boolean > true if retract was successful. Uninstall(Guid) Uninstalls the app from a site. Declaration bool Uninstall(Guid id) Parameters Guid id The unique id of the app. Notice that this is not the product id as listed in the app catalog. Returns Boolean true if uninstall was successful. UninstallAsync(Guid) Uninstalls the app from a site. Declaration Task<bool> UninstallAsync(Guid id) Parameters Guid id The unique id of the app. Notice that this is not the product id as listed in the app catalog. Returns Task < Boolean > true if uninstall was successful. Upgrade(Guid) Upgrades the app in a site. Declaration bool Upgrade(Guid id) Parameters Guid id The unique id of the app. Notice that this is not the product id as listed in the app catalog. Returns Boolean true if upgrade was successful. UpgradeAsync(Guid) Upgrades the app in a site. Declaration Task<bool> UpgradeAsync(Guid id) Parameters Guid id The unique id of the app. Notice that this is not the product id as listed in the app catalog. Returns Task < Boolean > true if upgrade was successful."
  },
  "api/PnP.Core.Admin.Model.SharePoint.ImageTaggingChoice.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.ImageTaggingChoice.html",
    "title": "Enum ImageTaggingChoice | PnP Core SDK",
    "keywords": "Enum ImageTaggingChoice Contains the values of the 3 allowed states for image tagging Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum ImageTaggingChoice : int Basic The image tagging option for the tenant is basic Disabled The image tagging option for the tenant is disabled Enhanced The image tagging option for the tenant is enhanced"
  },
  "api/PnP.Core.Admin.Model.SharePoint.IRecycledSiteCollection.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.IRecycledSiteCollection.html",
    "title": "Interface IRecycledSiteCollection | PnP Core SDK",
    "keywords": "Interface IRecycledSiteCollection Defines a site collection living in the tenant's recyle bin Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public interface IRecycledSiteCollection Properties CreatedBy The user that created this site collection Declaration string CreatedBy { get; } Property Value String DeletedBy The user that deleted this site collection Declaration string DeletedBy { get; } Property Value String GroupId The id of the connected Microsoft 365 group Declaration Guid GroupId { get; } Property Value Guid Id The id of the site collection Declaration Guid Id { get; } Property Value Guid Name Name of the site collection Declaration string Name { get; } Property Value String SiteOwnerEmail Returns the email address of teh site collection owner Declaration string SiteOwnerEmail { get; } Property Value String SiteOwnerName Returns the name of the site collection owner Declaration string SiteOwnerName { get; } Property Value String StorageQuota The storage quota in bytes for this site collection Declaration long StorageQuota { get; } Property Value Int64 StorageUsed The storage quota used for this site collection Declaration long StorageUsed { get; } Property Value Int64 TemplateName The name of the applied template Declaration string TemplateName { get; } Property Value String TimeCreated Date time when this site collection was created Declaration DateTime TimeCreated { get; } Property Value DateTime TimeDeleted Date time when this site collection was deleted Declaration DateTime TimeDeleted { get; } Property Value DateTime Url The URL of the site collection Declaration Uri Url { get; } Property Value Uri"
  },
  "api/PnP.Core.Admin.Model.SharePoint.ISharePointAdmin.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.ISharePointAdmin.html",
    "title": "Interface ISharePointAdmin | PnP Core SDK",
    "keywords": "Interface ISharePointAdmin SharePoint Admin features Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public interface ISharePointAdmin Methods GetTenantAdminCenterContext() Returns a PnPContext for the tenant's SharePoint admin center site Declaration PnPContext GetTenantAdminCenterContext() Returns PnPContext PnPContext for the tenant's SharePoint admin center GetTenantAdminCenterContextAsync() Returns a PnPContext for the tenant's SharePoint admin center site Declaration Task<PnPContext> GetTenantAdminCenterContextAsync() Returns Task < PnPContext > PnPContext for the tenant's SharePoint admin center GetTenantAdminCenterUri() Returns the SharePoint tenant admin center url (e.g. https://contoso-admin.sharepoint.com ) Declaration Uri GetTenantAdminCenterUri() Returns Uri SharePoint tenant admin center url GetTenantAdminCenterUriAsync() Returns the SharePoint tenant admin center url (e.g. https://contoso-admin.sharepoint.com ) Declaration Task<Uri> GetTenantAdminCenterUriAsync() Returns Task < Uri > SharePoint tenant admin center url GetTenantAdmins() Returns a list of ISharePointUser s who are SharePoint Online Tenant admin Declaration List<ISharePointUser> GetTenantAdmins() Returns List < ISharePointUser > List of SharePoint Online Tenant admins GetTenantAdminsAsync() Returns a list of ISharePointUser s who are SharePoint Online Tenant admin Declaration Task<List<ISharePointUser>> GetTenantAdminsAsync() Returns Task < List < ISharePointUser >> List of SharePoint Online Tenant admins GetTenantMySiteHostUri() Returns the SharePoint tenant my site host url (e.g. https://contoso-my.sharepoint.com ) Declaration Uri GetTenantMySiteHostUri() Returns Uri SharePoint tenant my site host url GetTenantMySiteHostUriAsync() Returns the SharePoint tenant my site host url (e.g. https://contoso-my.sharepoint.com ) Declaration Task<Uri> GetTenantMySiteHostUriAsync() Returns Task < Uri > SharePoint tenant my site host url GetTenantPortalUri() Returns the SharePoint tenant portal url (e.g. https://contoso.sharepoint.com ) Declaration Uri GetTenantPortalUri() Returns Uri SharePoint tenant portal url GetTenantPortalUriAsync() Returns the SharePoint tenant portal url (e.g. https://contoso.sharepoint.com ) Declaration Task<Uri> GetTenantPortalUriAsync() Returns Task < Uri > SharePoint tenant portal url GetTenantProperties() Gets the properties of this tenant Declaration ITenantProperties GetTenantProperties() Returns ITenantProperties Properties of the tenant GetTenantPropertiesAsync() Gets the properties of this tenant Declaration Task<ITenantProperties> GetTenantPropertiesAsync() Returns Task < ITenantProperties > Properties of the tenant IsCurrentUserTenantAdmin() Checks if the current user is SharePoint Online tenant admin Declaration bool IsCurrentUserTenantAdmin() Returns Boolean True if the user is a SharePoint Online tenant admin, false otherwise IsCurrentUserTenantAdminAsync() Checks if the current user is SharePoint Online tenant admin Declaration Task<bool> IsCurrentUserTenantAdminAsync() Returns Task < Boolean > True if the user is a SharePoint Online tenant admin, false otherwise"
  },
  "api/PnP.Core.Admin.Model.SharePoint.ISiteCollection.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.ISiteCollection.html",
    "title": "Interface ISiteCollection | PnP Core SDK",
    "keywords": "Interface ISiteCollection A SharePoint site collection reference Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public interface ISiteCollection Properties GraphId Graph id of the site collection Declaration string GraphId { get; } Property Value String Id The id of the site collection Declaration Guid Id { get; } Property Value Guid Name Name of the site collection Declaration string Name { get; } Property Value String RootWebId Id of the root web of the site collection Declaration Guid RootWebId { get; } Property Value Guid Url The URL of the site collection Declaration Uri Url { get; } Property Value Uri"
  },
  "api/PnP.Core.Admin.Model.SharePoint.ISiteCollectionAdmin.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.ISiteCollectionAdmin.html",
    "title": "Interface ISiteCollectionAdmin | PnP Core SDK",
    "keywords": "Interface ISiteCollectionAdmin Defines a site collection administrator Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public interface ISiteCollectionAdmin Properties Id Gets the id of the site collection administrator when the administrator is added due to being an Microsoft 365 Group owner Declaration Guid Id { get; } Property Value Guid IsMicrosoft365GroupOwner Site collection admin is also a Microsoft 365 group owner Declaration bool IsMicrosoft365GroupOwner { get; } Property Value Boolean IsSecondaryAdmin Is this a secondary site collection administator Declaration bool IsSecondaryAdmin { get; } Property Value Boolean LoginName Gets the login name of the site collection administrator when the administrator is added as a SharePoint administrator Declaration string LoginName { get; } Property Value String Mail E-mail address of the site collection administrator SP REST property name: Email Declaration string Mail { get; } Property Value String Name Name of the admin. Declaration string Name { get; } Property Value String UserPrincipalName User principle name (UPN) of the site collection administrator Declaration string UserPrincipalName { get; } Property Value String"
  },
  "api/PnP.Core.Admin.Model.SharePoint.ISiteCollectionApp.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.ISiteCollectionApp.html",
    "title": "Interface ISiteCollectionApp | PnP Core SDK",
    "keywords": "Interface ISiteCollectionApp Represents an interace for an app located at the site collection app catalog. Inherited Members IApp.Id IApp.Title IApp.AadAppId IApp.AadPermissions IApp.AppCatalogVersion IApp.CanUpgrade IApp.CDNLocation IApp.ContainsTenantWideExtension IApp.CurrentVersionDeployed IApp.Deployed IApp.ErrorMessage IApp.InstalledVersion IApp.IsClientSideSolution IApp.IsEnabled IApp.IsPackageDefaultSkipFeatureDeployment IApp.IsValidAppPackage IApp.ProductId IApp.ShortDescription IApp.SkipDeploymentFeature IApp.ThumbnailUrl IApp.Deploy(Boolean) IApp.DeployAsync(Boolean) IApp.Retract() IApp.RetractAsync() IApp.Remove() IApp.RemoveAsync() IApp.Install() IApp.InstallAsync() IApp.Upgrade() IApp.UpgradeAsync() IApp.Uninstall() IApp.UninstallAsync() IDataModelWithContext.PnPContext Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public interface ISiteCollectionApp : IApp, IDataModelWithContext"
  },
  "api/PnP.Core.Admin.Model.SharePoint.ISiteCollectionAppManager.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.ISiteCollectionAppManager.html",
    "title": "Interface ISiteCollectionAppManager | PnP Core SDK",
    "keywords": "Interface ISiteCollectionAppManager Represents an interface to work with Application Lifecycle Management (ALM) for a site collection app catalog. Inherited Members IAppManager<ISiteCollectionApp>.GetAvailable(Guid) IAppManager<ISiteCollectionApp>.GetAvailableAsync(Guid) IAppManager<ISiteCollectionApp>.GetAvailable(String) IAppManager<ISiteCollectionApp>.GetAvailableAsync(String) IAppManager<ISiteCollectionApp>.GetAvailable() IAppManager<ISiteCollectionApp>.GetAvailableAsync() IAppManager<ISiteCollectionApp>.Add(Byte[], String, Boolean) IAppManager<ISiteCollectionApp>.AddAsync(Byte[], String, Boolean) IAppManager<ISiteCollectionApp>.Add(String, Boolean) IAppManager<ISiteCollectionApp>.AddAsync(String, Boolean) IAppOperations.Deploy(Guid, Boolean) IAppOperations.DeployAsync(Guid, Boolean) IAppOperations.Retract(Guid) IAppOperations.RetractAsync(Guid) IAppOperations.Remove(Guid) IAppOperations.RemoveAsync(Guid) IAppOperations.Install(Guid) IAppOperations.InstallAsync(Guid) IAppOperations.Upgrade(Guid) IAppOperations.UpgradeAsync(Guid) IAppOperations.Uninstall(Guid) IAppOperations.UninstallAsync(Guid) Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public interface ISiteCollectionAppManager : IAppManager<ISiteCollectionApp>, IAppOperations"
  },
  "api/PnP.Core.Admin.Model.SharePoint.ISiteCollectionManager.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.ISiteCollectionManager.html",
    "title": "Interface ISiteCollectionManager | PnP Core SDK",
    "keywords": "Interface ISiteCollectionManager SharePoint Site Collection features Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public interface ISiteCollectionManager Methods ConnectSiteCollectionToGroup(ConnectSiteToGroupOptions, CreationOptions) Connects an existing site collection to a new Microsoft 365 group Declaration void ConnectSiteCollectionToGroup(ConnectSiteToGroupOptions siteGroupConnectOptions, CreationOptions creationOptions = null) Parameters ConnectSiteToGroupOptions siteGroupConnectOptions Information needed to handle the connection of the site collection to a new Microsoft 365 group. CreationOptions creationOptions Options to control the connect to site process ConnectSiteCollectionToGroupAsync(ConnectSiteToGroupOptions, CreationOptions) Connects an existing site collection to a new Microsoft 365 group Declaration Task ConnectSiteCollectionToGroupAsync(ConnectSiteToGroupOptions siteGroupConnectOptions, CreationOptions creationOptions = null) Parameters ConnectSiteToGroupOptions siteGroupConnectOptions Information needed to handle the connection of the site collection to a new Microsoft 365 group. CreationOptions creationOptions Options to control the connect to site process Returns Task CreateSiteCollection(CommonSiteOptions, SiteCreationOptions) Creates a site collection and returns a PnPContext to start using the created site collection Declaration PnPContext CreateSiteCollection(CommonSiteOptions siteToCreate, SiteCreationOptions creationOptions = null) Parameters CommonSiteOptions siteToCreate Information about the site collection to create. Pass in a CommunicationSiteOptions , TeamSiteOptions , TeamSiteWithoutGroupOptions or ClassicSiteOptions instance. SiteCreationOptions creationOptions Returns PnPContext A PnPContext to start using the created site collection CreateSiteCollectionAsync(CommonSiteOptions, SiteCreationOptions) Creates a site collection and returns a PnPContext to start using the created site collection Declaration Task<PnPContext> CreateSiteCollectionAsync(CommonSiteOptions siteToCreate, SiteCreationOptions creationOptions = null) Parameters CommonSiteOptions siteToCreate Information about the site collection to create. Pass in a CommunicationSiteOptions , TeamSiteOptions , TeamSiteWithoutGroupOptions or ClassicSiteOptions instance. SiteCreationOptions creationOptions Returns Task < PnPContext > A PnPContext to start using the created site collection DeleteSiteCollection(Uri) Deletes a site collection. The deleted site collection is also removed from the recycle bin! Declaration void DeleteSiteCollection(Uri siteToDelete) Parameters Uri siteToDelete Site collection to delete DeleteSiteCollectionAsync(Uri) Deletes a site collection. The deleted site collection is also removed from the recycle bin! Declaration Task DeleteSiteCollectionAsync(Uri siteToDelete) Parameters Uri siteToDelete Site collection to delete Returns Task EnableCommunicationSiteFeatures(Uri) Enables the communication site features on this team site using the Topic design. Requirements: Only works when the site collection was not connected to an Microsoft 365 group Web is root web of the site collection, cannot be applied to sub sites Web template is \"STS#0\" or \"EHS#1\" (so TeamSite) Declaration void EnableCommunicationSiteFeatures(Uri site) Parameters Uri site Url of the team site collection to enable communication site features for EnableCommunicationSiteFeatures(Uri, Guid) Enables the communication site features on this team site using the Topic design. Requirements: Use 96c933ac-3698-44c7-9f4a-5fd17d71af9e (Topic), 6142d2a0-63a5-4ba0-aede-d9fefca2c767 (Showcase) or f6cc5403-0d63-442e-96c0-285923709ffc (Blank) as design package id Only works when the site collection was not connected to an Microsoft 365 group Web is root web of the site collection, cannot be applied to sub sites Web template is \"STS#0\" or \"EHS#1\" (so TeamSite) Declaration void EnableCommunicationSiteFeatures(Uri site, Guid designPackageId) Parameters Uri site Url of the team site collection to enable communication site features for Guid designPackageId Design package id to apply EnableCommunicationSiteFeaturesAsync(Uri) Enables the communication site features on this team site using the Topic design. Requirements: Only works when the site collection was not connected to an Microsoft 365 group Web is root web of the site collection, cannot be applied to sub sites Web template is \"STS#0\" or \"EHS#1\" (so TeamSite) Declaration Task EnableCommunicationSiteFeaturesAsync(Uri site) Parameters Uri site Url of the team site collection to enable communication site features for Returns Task EnableCommunicationSiteFeaturesAsync(Uri, Guid) Enables the communication site features on this team site using the Topic design. Requirements: Use 96c933ac-3698-44c7-9f4a-5fd17d71af9e (Topic), 6142d2a0-63a5-4ba0-aede-d9fefca2c767 (Showcase) or f6cc5403-0d63-442e-96c0-285923709ffc (Blank) as design package id Only works when the site collection was not connected to an Microsoft 365 group Web is root web of the site collection, cannot be applied to sub sites Web template is \"STS#0\" or \"EHS#1\" (so TeamSite) Declaration Task EnableCommunicationSiteFeaturesAsync(Uri site, Guid designPackageId) Parameters Uri site Url of the team site collection to enable communication site features for Guid designPackageId Design package id to apply Returns Task GetRecycledSiteCollections() Returns a list of the recycled site collections in the current tenant including details about the site. This method queries a hidden list in the SharePoint Tenant Admin site and therefore requires the user or application to have the proper permissions Declaration List<IRecycledSiteCollection> GetRecycledSiteCollections() Returns List < IRecycledSiteCollection > A list of site collections with details GetRecycledSiteCollectionsAsync() Returns a list of the recycled site collections in the current tenant including details about the site. This method queries a hidden list in the SharePoint Tenant Admin site and therefore requires the user or application to have the proper permissions Declaration Task<List<IRecycledSiteCollection>> GetRecycledSiteCollectionsAsync() Returns Task < List < IRecycledSiteCollection >> A list of site collections with details GetSiteCollectionAdmins(Uri) Gets the administrators of the site collection Declaration List<ISiteCollectionAdmin> GetSiteCollectionAdmins(Uri site) Parameters Uri site Url of the site collection to get the administrators for Returns List < ISiteCollectionAdmin > The list of site collection administrators GetSiteCollectionAdminsAsync(Uri) Gets the administrators of the site collection Declaration Task<List<ISiteCollectionAdmin>> GetSiteCollectionAdminsAsync(Uri site) Parameters Uri site Url of the site collection to get the administrators for Returns Task < List < ISiteCollectionAdmin >> The list of site collection administrators GetSiteCollectionProperties(Uri) Returns the properties of a site collection Declaration ISiteCollectionProperties GetSiteCollectionProperties(Uri site) Parameters Uri site Site collection to get the properties for Returns ISiteCollectionProperties The site collection properties GetSiteCollectionPropertiesAsync(Uri) Returns the properties of a site collection Declaration Task<ISiteCollectionProperties> GetSiteCollectionPropertiesAsync(Uri site) Parameters Uri site Site collection to get the properties for Returns Task < ISiteCollectionProperties > The site collection properties GetSiteCollections(Boolean) Returns the list of site collections. When using application permissions or a delegated permissions for a SharePoint admin account all site collections are returned, otherwise only the site collections accessible by the requesting user are returned. Under the covers this method uses different approaches: Application permissions: using the Sites endpoint via Graph Delegated permissions, user is SharePoint Tenant Admin: querying the sites list maintained in the SharePoint Tenant Admin site Delegated permissions, non admin: using the Search endpoint via Graph Declaration List<ISiteCollection> GetSiteCollections(bool ignoreUserIsSharePointAdmin = false) Parameters Boolean ignoreUserIsSharePointAdmin When set to true and when the user is SharePoint admin then only return the site collections accessible by the user Returns List < ISiteCollection > A list of site collections GetSiteCollectionsAsync(Boolean) Returns the list of site collections. When using application permissions or a delegated permissions for a SharePoint admin account all site collections are returned, otherwise only the site collections accessible by the requesting user are returned. Under the covers this method uses different approaches: Application permissions: using the Sites endpoint via Graph Delegated permissions, user is SharePoint Tenant Admin: querying the sites list maintained in the SharePoint Tenant Admin site Delegated permissions, non admin: using the Search endpoint via Graph Declaration Task<List<ISiteCollection>> GetSiteCollectionsAsync(bool ignoreUserIsSharePointAdmin = false) Parameters Boolean ignoreUserIsSharePointAdmin When set to true and when the user is SharePoint admin then only return the site collections accessible by the user Returns Task < List < ISiteCollection >> A list of site collections GetSiteCollectionsWithDetails() Returns a list of the site collections in the current tenant including details about the site. This method queries a hidden list in the SharePoint Tenant Admin site and therefore requires the user or application to have the proper permissions Declaration List<ISiteCollectionWithDetails> GetSiteCollectionsWithDetails() Returns List < ISiteCollectionWithDetails > A list of site collections with details GetSiteCollectionsWithDetailsAsync() Returns a list of the site collections in the current tenant including details about the site. This method queries a hidden list in the SharePoint Tenant Admin site and therefore requires the user or application to have the proper permissions Declaration Task<List<ISiteCollectionWithDetails>> GetSiteCollectionsWithDetailsAsync() Returns Task < List < ISiteCollectionWithDetails >> A list of site collections with details GetSiteCollectionWithDetails(Uri) Returns details about the requested site. This method queries a hidden list in the SharePoint Tenant Admin site and therefore requires the user or application to have the proper permissions Declaration ISiteCollectionWithDetails GetSiteCollectionWithDetails(Uri url) Parameters Uri url Returns ISiteCollectionWithDetails Site collection details, null if the passed site was not found GetSiteCollectionWithDetailsAsync(Uri) Returns details about the requested site. This method queries a hidden list in the SharePoint Tenant Admin site and therefore requires the user or application to have the proper permissions Declaration Task<ISiteCollectionWithDetails> GetSiteCollectionWithDetailsAsync(Uri url) Parameters Uri url Returns Task < ISiteCollectionWithDetails > Site collection details, null if the passed site was not found HideAddTeamsPrompt(Uri) Hides the Add Microsoft Teams banner. Only works when the site collection was already connected to an Microsoft 365 group Declaration bool HideAddTeamsPrompt(Uri site) Parameters Uri site Url of the site collection to hide the Add Teams prompt for Returns Boolean True if hidden HideAddTeamsPromptAsync(Uri) Hides the Add Microsoft Teams banner. Only works when the site collection was already connected to an Microsoft 365 group Declaration Task<bool> HideAddTeamsPromptAsync(Uri site) Parameters Uri site Url of the site collection to hide the Add Teams prompt for Returns Task < Boolean > True if hidden IsAddTeamsPromptHidden(Uri) Checks if the Add Microsoft Teams banner is hidden. Only works when the site collection was already connected to an Microsoft 365 group. Declaration bool IsAddTeamsPromptHidden(Uri site) Parameters Uri site Url of the site collection to check the Add Teams prompt status for Returns Boolean True if hidden, false otherwise. IsAddTeamsPromptHiddenAsync(Uri) Checks if the Add Microsoft Teams banner is hidden. Only works when the site collection was already connected to an Microsoft 365 group Declaration Task<bool> IsAddTeamsPromptHiddenAsync(Uri site) Parameters Uri site Url of the site collection to check the Add Teams prompt status for Returns Task < Boolean > True if hidden, false otherwise. RecycleSiteCollection(Uri) Recycle a site collection. The site collection ends up in the recycle bin and can be restored. When the site collection has a connected group then also that group is automatically recycled Declaration void RecycleSiteCollection(Uri siteToDelete) Parameters Uri siteToDelete Site collection to recycle RecycleSiteCollectionAsync(Uri) Recycle a site collection. The site collection ends up in the recycle bin and can be restored. When the site collection has a connected group then also that group is automatically recycled Declaration Task RecycleSiteCollectionAsync(Uri siteToDelete) Parameters Uri siteToDelete Site collection to recycle Returns Task RestoreSiteCollection(Uri) Restores a site collection from the recycle bin. When the site collection has a connected group then also that group is automatically restored Declaration void RestoreSiteCollection(Uri siteToRestore) Parameters Uri siteToRestore Site collection to restore RestoreSiteCollectionAsync(Uri) Restores a site collection from the recycle bin. When the site collection has a connected group then also that group is automatically restored Declaration Task RestoreSiteCollectionAsync(Uri siteToRestore) Parameters Uri siteToRestore Site collection to restore Returns Task SetSiteCollectionAdmins(Uri, List<String>, List<Guid>) Sets the administrators of the site collection by providing the list of login names. The first in the list will be the primary admin, the others will be secondary admins. When the site collection is group connected you can also opt to set group owners as they are also SharePoint site collection administrators. To stay in sync with with SharePoint Tenant admin center does, when adding a group owner the user is also added as group member. Declaration void SetSiteCollectionAdmins(Uri site, List<string> sharePointAdminLoginNames = null, List<Guid> ownerGroupAzureAdUserIds = null) Parameters Uri site Url of the site collection to set the administrators for List < String > sharePointAdminLoginNames List of SharePoint Admins login names (e.g. i:0#.f|membership|anna@contoso.onmicrosoft.com) to set as admin List < Guid > ownerGroupAzureAdUserIds List of Azure AD user ids to set as admin via adding them to the connected Microsoft 365 group owners SetSiteCollectionAdminsAsync(Uri, List<String>, List<Guid>) Sets the administrators of the site collection by providing the list of login names. The first in the list will be the primary admin, the others will be secondary admins. When the site collection is group connected you can also opt to set group owners as they are also SharePoint site collection administrators. To stay in sync with with SharePoint Tenant admin center does, when adding a group owner the user is also added as group member. Declaration Task SetSiteCollectionAdminsAsync(Uri site, List<string> sharePointAdminLoginNames = null, List<Guid> ownerGroupAzureAdUserIds = null) Parameters Uri site Url of the site collection to set the administrators for List < String > sharePointAdminLoginNames List of SharePoint Admins login names (e.g. i:0#.f|membership|anna@contoso.onmicrosoft.com) to set as admin List < Guid > ownerGroupAzureAdUserIds List of Azure AD user ids to set as admin via adding them to the connected Microsoft 365 group owners Returns Task"
  },
  "api/PnP.Core.Admin.Model.SharePoint.ISiteCollectionProperties.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.ISiteCollectionProperties.html",
    "title": "Interface ISiteCollectionProperties | PnP Core SDK",
    "keywords": "Interface ISiteCollectionProperties Properties of a site collection Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public interface ISiteCollectionProperties Properties AllowDownloadingNonWebViewableFiles Indicates whether end users can download non-viewable files (e.g. zip) from browser. By default, this would be set to true if setting ConditionalAccessPolicy to AllowLimitedAccess. This can be set to false to block automatic download of files that can't be vieweed in the browser Declaration bool AllowDownloadingNonWebViewableFiles { get; set; } Property Value Boolean AllowEditing Indicates whether WAC files should be open in Edit mode. By default, this would be set to true if setting ConditionalAccessPolicy to AllowLimitedAccess. This can be set to false to enable view only mode in WAC. Declaration bool AllowEditing { get; set; } Property Value Boolean AllowSelfServiceUpgrade Flag that indicates is a site supports self-service upgrade Declaration bool AllowSelfServiceUpgrade { get; set; } Property Value Boolean AnonymousLinkExpirationInDays Anonymous link expiration in days Declaration int AnonymousLinkExpirationInDays { get; set; } Property Value Int32 AuthContextStrength Gets or sets the authentication context strength for this site for all the webs Declaration string AuthContextStrength { get; set; } Property Value String AuthenticationContextName Gets or sets the authentication context for this site for all the webs Declaration string AuthenticationContextName { get; set; } Property Value String BlockDownloadLinksFileType Specifies the types of files that can be displayed when the block download links feature is being used Declaration BlockDownloadLinksFileTypes BlockDownloadLinksFileType { get; set; } Property Value BlockDownloadLinksFileTypes CommentsOnSitePagesDisabled Whether comments on site pages are disabled or not Declaration bool CommentsOnSitePagesDisabled { get; set; } Property Value Boolean CompatibilityLevel The compatibility leve of this site Declaration int CompatibilityLevel { get; } Property Value Int32 ConditionalAccessPolicy Flag that controls access from devices that aren't compliant or joined to a domain to have limited access (web-only, without the Download, Print, and Sync commands) Declaration SPOConditionalAccessPolicyType ConditionalAccessPolicy { get; set; } Property Value SPOConditionalAccessPolicyType DefaultLinkPermission The default link permission for this site Declaration SharingPermissionType DefaultLinkPermission { get; set; } Property Value SharingPermissionType DefaultLinkToExistingAccess The default link to existing access for this site Declaration bool DefaultLinkToExistingAccess { get; set; } Property Value Boolean DefaultLinkToExistingAccessReset This is to reset default link to existing access for this site. After resetting, the value will be default (false) or respect the higher level value Declaration bool DefaultLinkToExistingAccessReset { get; set; } Property Value Boolean DefaultSharingLinkType The default link type for this site Declaration SharingLinkType DefaultSharingLinkType { get; set; } Property Value SharingLinkType DenyAddAndCustomizePages Determines whether the site has AddAndCustomizePages denied Declaration DenyAddAndCustomizePagesStatus DenyAddAndCustomizePages { get; set; } Property Value DenyAddAndCustomizePagesStatus Description Site's description Declaration string Description { get; } Property Value String DisableAppViews Indicates whether app views are disabled in all the webs of this site Declaration AppViewsPolicy DisableAppViews { get; set; } Property Value AppViewsPolicy DisableCompanyWideSharingLinks Indicates whether company wide sharing links are disabled in all the webs of this site Declaration CompanyWideSharingLinksPolicy DisableCompanyWideSharingLinks { get; set; } Property Value CompanyWideSharingLinksPolicy DisableFlows Indicates whether flows are disabled in all the webs of this site Declaration FlowsPolicy DisableFlows { get; set; } Property Value FlowsPolicy ExternalUserExpirationInDays External user expiration in days Declaration int ExternalUserExpirationInDays { get; set; } Property Value Int32 GroupId The GroupId of the site Declaration Guid GroupId { get; } Property Value Guid GroupOwnerLoginName The login name of the group owner Declaration string GroupOwnerLoginName { get; } Property Value String HasHolds Flag that indicates a site has Holds Declaration bool HasHolds { get; } Property Value Boolean HubSiteId The HubSiteId of the HubSite this site is associated with Declaration Guid HubSiteId { get; } Property Value Guid IBMode get or Set IBMode (Information Barrier Mode) Declaration string IBMode { get; set; } Property Value String IBSegments Gets or sets the IB (Information Barrier Mode) segment GUIDs Declaration Guid[] IBSegments { get; set; } Property Value Guid [] IBSegmentsToAdd Gets or sets the IB (Information Barrier Mode) segments to add Declaration Guid[] IBSegmentsToAdd { get; set; } Property Value Guid [] IBSegmentsToRemove Gets or sets the IB (Information Barrier Mode) segments to remove Declaration Guid[] IBSegmentsToRemove { get; set; } Property Value Guid [] IsGroupOwnerSiteAdmin Whether group owner is site admin Declaration bool IsGroupOwnerSiteAdmin { get; } Property Value Boolean IsHubSite Whether or not this site is a HubSite Declaration bool IsHubSite { get; } Property Value Boolean IsTeamsChannelConnected Gets if the site is connected to a team channel in Microsoft Teams. Declaration bool IsTeamsChannelConnected { get; } Property Value Boolean IsTeamsConnected Gets if the site is connected to a team in Microsoft Teams Declaration bool IsTeamsConnected { get; } Property Value Boolean LastContentModifiedDate The last time content was modified on the site Declaration DateTime LastContentModifiedDate { get; } Property Value DateTime Lcid The Locale ID of the site Declaration int Lcid { get; set; } Property Value Int32 LimitedAccessFileType Specifies what files can be viewed when ConditionalAccessPolicy is set to AllowLimitedAccess Declaration SPOLimitedAccessFileType LimitedAccessFileType { get; set; } Property Value SPOLimitedAccessFileType LockIssue A description of the lock issue Declaration string LockIssue { get; } Property Value String LockState A string representing the lock state of the site. Valid values are Unlock: the site is not locked, default state NoAccess: the site is locked for all access ReadOnly: the site is set to read only status Declaration string LockState { get; set; } Property Value String MediaTranscription Gets or sets the media transcription policy Declaration MediaTranscriptionPolicyType MediaTranscription { get; set; } Property Value MediaTranscriptionPolicyType OverrideBlockUserInfoVisibility Indicates what the state of the browse user info policy in the site Declaration SiteUserInfoVisibilityPolicyValue OverrideBlockUserInfoVisibility { get; set; } Property Value SiteUserInfoVisibilityPolicyValue OverrideTenantAnonymousLinkExpirationPolicy This site overrides the tenant anonymous link expiration policy Declaration bool OverrideTenantAnonymousLinkExpirationPolicy { get; set; } Property Value Boolean OverrideTenantExternalUserExpirationPolicy This site overrides the tenant external user expiration policy Declaration bool OverrideTenantExternalUserExpirationPolicy { get; set; } Property Value Boolean Owner The decoded login name of the site owner Declaration string Owner { get; set; } Property Value String OwnerEmail The email address of the site owner Declaration string OwnerEmail { get; } Property Value String OwnerLoginName The encoded login name of the site owner Declaration string OwnerLoginName { get; } Property Value String OwnerName The site owner name Declaration string OwnerName { get; } Property Value String PWAEnabled Determines whether PWA is enabled for the site Declaration PWAEnabledStatus PWAEnabled { get; set; } Property Value PWAEnabledStatus RelatedGroupId The GroupId of the group this site is associated with Declaration Guid RelatedGroupId { get; } Property Value Guid RestrictedToRegion Determines whether the site is resticted to a specific geo location Declaration RestrictedToRegion RestrictedToRegion { get; set; } Property Value RestrictedToRegion SensitivityLabel The Guid of an Information Protection label Declaration Guid SensitivityLabel { get; set; } Property Value Guid SensitivityLabel2 The Guid of an Information Protection label Declaration string SensitivityLabel2 { get; set; } Property Value String SetOwnerWithoutUpdatingSecondaryAdmin Whether update secondary admin during setting primary admin Declaration bool SetOwnerWithoutUpdatingSecondaryAdmin { get; set; } Property Value Boolean SharingAllowedDomainList A list of allowed domain names for this site Declaration string SharingAllowedDomainList { get; set; } Property Value String SharingBlockedDomainList A list of blocked domain names for this site Declaration string SharingBlockedDomainList { get; set; } Property Value String SharingCapability Specifies what type of external user and guest link sharing is enabled Declaration SharingCapabilities SharingCapability { get; set; } Property Value SharingCapabilities SharingDomainRestrictionMode Indicates what this site's domain restriction mode is Declaration SharingDomainRestrictionModes SharingDomainRestrictionMode { get; set; } Property Value SharingDomainRestrictionModes ShowPeoplePickerSuggestionsForGuestUsers Flag that controls allowing members to search guest users in the directory Declaration bool ShowPeoplePickerSuggestionsForGuestUsers { get; set; } Property Value Boolean SiteDefinedSharingCapability Specifies what type of external user and guest link sharing is enabled for the site Declaration SharingCapabilities SiteDefinedSharingCapability { get; } Property Value SharingCapabilities SocialBarOnSitePagesDisabled Whether social bar on site pages is enabled or not Declaration bool SocialBarOnSitePagesDisabled { get; set; } Property Value Boolean Status The status of the site, possible values are: Active: default status for a site Recycled: the site is the tenant's site collection recyclebin Declaration string Status { get; } Property Value String StorageMaximumLevel The Storage Quota Declaration long StorageMaximumLevel { get; set; } Property Value Int64 StorageQuotaType The storage quota type for the site Declaration string StorageQuotaType { get; } Property Value String StorageUsage The current usage of storage for the site Declaration long StorageUsage { get; } Property Value Int64 StorageWarningLevel The warning level for storage usage Declaration long StorageWarningLevel { get; set; } Property Value Int64 TeamsChannelType When the site is connected to a team channel in Microsoft Teams, gets the type of channel the site is connected to Declaration TeamsChannelTypeValue TeamsChannelType { get; } Property Value TeamsChannelTypeValue Template The site's web template name Declaration string Template { get; set; } Property Value String TimeZoneId The TimeZone Declaration TimeZone TimeZoneId { get; set; } Property Value TimeZone Title The site's title Declaration string Title { get; set; } Property Value String Url The Url of the site Declaration string Url { get; } Property Value String WebsCount The number of webs in the site Declaration int WebsCount { get; } Property Value Int32 Methods Update() Updates the properties of this site collection Declaration void Update() UpdateAsync() Updates the properties of this site collection Declaration Task UpdateAsync() Returns Task"
  },
  "api/PnP.Core.Admin.Model.SharePoint.ISiteCollectionWithDetails.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.ISiteCollectionWithDetails.html",
    "title": "Interface ISiteCollectionWithDetails | PnP Core SDK",
    "keywords": "Interface ISiteCollectionWithDetails A SharePoint site collection with details reference Inherited Members ISiteCollection.Id ISiteCollection.GraphId ISiteCollection.Url ISiteCollection.RootWebId ISiteCollection.Name Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public interface ISiteCollectionWithDetails : ISiteCollection Properties CreatedBy The user that created this site collection Declaration string CreatedBy { get; } Property Value String ShareByEmailEnabled Indicates whether this site collection can be externally shared via an email Declaration bool ShareByEmailEnabled { get; } Property Value Boolean ShareByLinkEnabled Indicates whether this site collection can be externally shared via a link Declaration bool ShareByLinkEnabled { get; } Property Value Boolean SiteOwnerEmail Returns the email address of teh site collection owner Declaration string SiteOwnerEmail { get; } Property Value String SiteOwnerName Returns the name of the site collection owner Declaration string SiteOwnerName { get; } Property Value String StorageQuota The storage quota in bytes for this site collection Declaration long StorageQuota { get; } Property Value Int64 StorageUsed The storage quota used for this site collection Declaration long StorageUsed { get; } Property Value Int64 TemplateId The id of the applied template (if any) Declaration int TemplateId { get; } Property Value Int32 TemplateName The name of the applied template Declaration string TemplateName { get; } Property Value String TimeCreated Date time when this site collection was created Declaration DateTime TimeCreated { get; } Property Value DateTime"
  },
  "api/PnP.Core.Admin.Model.SharePoint.ITenantApp.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.ITenantApp.html",
    "title": "Interface ITenantApp | PnP Core SDK",
    "keywords": "Interface ITenantApp Represents an interace for an app located at the tenant app catalog. Inherited Members IApp.Id IApp.Title IApp.AadAppId IApp.AadPermissions IApp.AppCatalogVersion IApp.CanUpgrade IApp.CDNLocation IApp.ContainsTenantWideExtension IApp.CurrentVersionDeployed IApp.Deployed IApp.ErrorMessage IApp.InstalledVersion IApp.IsClientSideSolution IApp.IsEnabled IApp.IsPackageDefaultSkipFeatureDeployment IApp.IsValidAppPackage IApp.ProductId IApp.ShortDescription IApp.SkipDeploymentFeature IApp.ThumbnailUrl IApp.Deploy(Boolean) IApp.DeployAsync(Boolean) IApp.Retract() IApp.RetractAsync() IApp.Remove() IApp.RemoveAsync() IApp.Install() IApp.InstallAsync() IApp.Upgrade() IApp.UpgradeAsync() IApp.Uninstall() IApp.UninstallAsync() IDataModelWithContext.PnPContext Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public interface ITenantApp : IApp, IDataModelWithContext"
  },
  "api/PnP.Core.Admin.Model.SharePoint.ITenantAppManager.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.ITenantAppManager.html",
    "title": "Interface ITenantAppManager | PnP Core SDK",
    "keywords": "Interface ITenantAppManager Represents an interface to work with Application Lifecycle Management (ALM) for the tenant app catalog. Inherited Members IAppManager<ITenantApp>.GetAvailable(Guid) IAppManager<ITenantApp>.GetAvailableAsync(Guid) IAppManager<ITenantApp>.GetAvailable(String) IAppManager<ITenantApp>.GetAvailableAsync(String) IAppManager<ITenantApp>.GetAvailable() IAppManager<ITenantApp>.GetAvailableAsync() IAppManager<ITenantApp>.Add(Byte[], String, Boolean) IAppManager<ITenantApp>.AddAsync(Byte[], String, Boolean) IAppManager<ITenantApp>.Add(String, Boolean) IAppManager<ITenantApp>.AddAsync(String, Boolean) IAppOperations.Deploy(Guid, Boolean) IAppOperations.DeployAsync(Guid, Boolean) IAppOperations.Retract(Guid) IAppOperations.RetractAsync(Guid) IAppOperations.Remove(Guid) IAppOperations.RemoveAsync(Guid) IAppOperations.Install(Guid) IAppOperations.InstallAsync(Guid) IAppOperations.Upgrade(Guid) IAppOperations.UpgradeAsync(Guid) IAppOperations.Uninstall(Guid) IAppOperations.UninstallAsync(Guid) Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public interface ITenantAppManager : IAppManager<ITenantApp>, IAppOperations Methods AddAndDeployStoreApp(String, String, Boolean, Boolean) Uploads SharePoint Store app to the tenant app catalog and deploys it. Declaration ITenantApp AddAndDeployStoreApp(string storeAssetId, string cultureName, bool skipFeatureDeployment = true, bool overwrite = true) Parameters String storeAssetId A unique store asset id. If you open the SharePoint Store app's home page, the url will be ...appStore.aspx/appDetail/WA200001111. The last part WA200001111 will be your store asset id. String cultureName 4-letters culture name, i.e. \"en-us\", \"de-de\", etc. Boolean skipFeatureDeployment If set to true will skip the feature deployment and will install the app globally. Boolean overwrite Whether to overwrite if the app is already exisits in the tenant app catalog. Returns ITenantApp AddAndDeployStoreAppAsync(String, String, Boolean, Boolean) Uploads SharePoint Store app to the tenant app catalog and deploys it. Declaration Task<ITenantApp> AddAndDeployStoreAppAsync(string storeAssetId, string cultureName, bool skipFeatureDeployment = true, bool overwrite = true) Parameters String storeAssetId A unique store asset id. If you open the SharePoint Store app's home page, the url will be ...appStore.aspx/appDetail/WA200001111. The last part WA200001111 will be your store asset id. String cultureName 4-letters culture name, i.e. \"en-us\", \"de-de\", etc. Boolean skipFeatureDeployment If set to true will skip the feature deployment and will install the app globally. Boolean overwrite Whether to overwrite if the app is already exisits in the tenant app catalog. Returns Task < ITenantApp > DownloadTeamsSolution(Guid) Downloads MS Teams package from SPFx solution as a stream. You can save the stream to a file with a .zip extension later on. Declaration Stream DownloadTeamsSolution(Guid id) Parameters Guid id The unique id of the app. Notice that this is not the product id as listed in the app catalog. Returns Stream with the MS Teams binary package. DownloadTeamsSolution(Int32) Downloads MS Teams package from SPFx solution as a stream. You can save the stream to a file with a .zip extension later on. Declaration Stream DownloadTeamsSolution(int id) Parameters Int32 id List item id of the app in the AppCatalog list. Returns Stream with the MS Teams binary package. DownloadTeamsSolutionAsync(Guid) Downloads MS Teams package from SPFx solution as a stream. You can save the stream to a file with a .zip extension later on. Declaration Task<Stream> DownloadTeamsSolutionAsync(Guid id) Parameters Guid id The unique id of the app. Notice that this is not the product id as listed in the app catalog. Returns Task < Stream > with the MS Teams binary package. DownloadTeamsSolutionAsync(Int32) Downloads MS Teams package from SPFx solution as a stream. You can save the stream to a file with a .zip extension later on. Declaration Task<Stream> DownloadTeamsSolutionAsync(int id) Parameters Int32 id List item id of the app in the AppCatalog list. Returns Task < Stream > with the MS Teams binary package. EnsureTenantAppCatalog() Ensures there's a tenant app catalog, if not present it will be created. Declaration bool EnsureTenantAppCatalog() Returns Boolean True if the app catalog was created, false if the app catalog already existed. EnsureTenantAppCatalogAsync() Ensures there's a tenant app catalog, if not present it will be created. Declaration Task<bool> EnsureTenantAppCatalogAsync() Returns Task < Boolean > True if the app catalog was created, false if the app catalog already existed. GetSiteCollectionAppCatalogs() Returns a list of site collection app catalogs in the tenant. Declaration IList<IAppCatalogSite> GetSiteCollectionAppCatalogs() Returns IList < IAppCatalogSite > A list of IAppCatalogSite GetSiteCollectionAppCatalogsAsync() Returns a list of site collection app catalogs in the tenant. Declaration Task<IList<IAppCatalogSite>> GetSiteCollectionAppCatalogsAsync() Returns Task < IList < IAppCatalogSite >> A list of IAppCatalogSite GetStoreApps() A list of apps, added to the tenant from the SharePoint Store. Declaration IList<ITenantApp> GetStoreApps() Returns IList < ITenantApp > A list of ITenantApp GetStoreAppsAsync() A list of apps, added to the tenant from the SharePoint Store. Declaration Task<IList<ITenantApp>> GetStoreAppsAsync() Returns Task < IList < ITenantApp >> A list of ITenantApp GetTenantAppCatalogUri() Returns the URI of the current tenant app catalog. Declaration Uri GetTenantAppCatalogUri() Returns Uri GetTenantAppCatalogUriAsync() Returns the URI of the current tenant app catalog. Declaration Task<Uri> GetTenantAppCatalogUriAsync() Returns Task < Uri > IsAppUpgradeAvailable(Guid) Indicates whether the upgrade is available for the specific app on a site. Declaration bool IsAppUpgradeAvailable(Guid id) Parameters Guid id The unique id of the app. Notice that this is not the product id as listed in the app catalog. Returns Boolean true if update is available. IsAppUpgradeAvailable(Int32) Indicates whether the upgrade is available for the specific app on a site. Declaration bool IsAppUpgradeAvailable(int id) Parameters Int32 id List item id of the app in the AppCatalog list. Returns Boolean true if update is available. IsAppUpgradeAvailableAsync(Guid) Indicates whether the upgrade is available for the specific app on a site. Declaration Task<bool> IsAppUpgradeAvailableAsync(Guid id) Parameters Guid id The unique id of the app. Notice that this is not the product id as listed in the app catalog. Returns Task < Boolean > true if update is available. IsAppUpgradeAvailableAsync(Int32) Indicates whether the upgrade is available for the specific app on a site. Declaration Task<bool> IsAppUpgradeAvailableAsync(int id) Parameters Int32 id List item id of the app in the AppCatalog list. Returns Task < Boolean > true if update is available. SolutionContainsTeamsComponent(Guid) Indicates whether a solution contains MS Teams component. Declaration bool SolutionContainsTeamsComponent(Guid id) Parameters Guid id The unique id of the app. Notice that this is not the product id as listed in the app catalog. Returns Boolean true if the solution contains teams component. SolutionContainsTeamsComponentAsync(Guid) Indicates whether a solution contains MS Teams component. Declaration Task<bool> SolutionContainsTeamsComponentAsync(Guid id) Parameters Guid id The unique id of the app. Notice that this is not the product id as listed in the app catalog. Returns Task < Boolean > true if the solution contains teams component."
  },
  "api/PnP.Core.Admin.Model.SharePoint.ITenantProperties.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.ITenantProperties.html",
    "title": "Interface ITenantProperties | PnP Core SDK",
    "keywords": "Interface ITenantProperties Tenant properties Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public interface ITenantProperties Properties AllowCommentsTextOnEmailEnabled Gets or sets a value AllowCommentsTextOnEmail boolean Declaration bool AllowCommentsTextOnEmailEnabled { get; set; } Property Value Boolean AllowDownloadingNonWebViewableFiles Gets or sets a value to specify the advanced setting of the conditional access policy Declaration bool AllowDownloadingNonWebViewableFiles { get; set; } Property Value Boolean AllowedDomainListForSyncClient Get/Set sync client trusted domain guids Declaration IList<Guid> AllowedDomainListForSyncClient { get; set; } Property Value IList < Guid > AllowEditing Gets or sets a value to specify the advanced setting of the conditional access policy. This controls if WAC files should be opened in Edit mode Declaration bool AllowEditing { get; set; } Property Value Boolean AllowGuestUserShareToUsersNotInSiteCollection Gets or sets a value to handle guest sharing to users not in guest users' site collection Declaration bool AllowGuestUserShareToUsersNotInSiteCollection { get; set; } Property Value Boolean AllowLimitedAccessOnUnmanagedDevices Gets or sets a Boolean value that specifies whether the following access setting is enabled: set allow access on unmanaged devices Declaration bool AllowLimitedAccessOnUnmanagedDevices { get; set; } Property Value Boolean AllowOverrideForBlockUserInfoVisibility Gets or sets BlockUserInfoVisibility value Declaration bool AllowOverrideForBlockUserInfoVisibility { get; set; } Property Value Boolean AllowSelectSGsInODBListInTenant Gets or sets a value to handle the tenant allowing select security groups access to ODB setting Declaration IList<string> AllowSelectSGsInODBListInTenant { get; set; } Property Value IList < String > AnyoneLinkTrackUsers Gets or sets a value to specify whether anyone links should track link users Declaration bool AnyoneLinkTrackUsers { get; set; } Property Value Boolean ApplyAppEnforcedRestrictionsToAdHocRecipients Gets or sets whether app-enforced restrictions apply to TOAA users Declaration bool ApplyAppEnforcedRestrictionsToAdHocRecipients { get; set; } Property Value Boolean BccExternalSharingInvitations Gets or sets a value to specify if BCC functionality is enabled for external invitations Declaration bool BccExternalSharingInvitations { get; set; } Property Value Boolean BccExternalSharingInvitationsList Gets or sets list of recipients to be BCC'ed on all external sharing invitations Declaration string BccExternalSharingInvitationsList { get; set; } Property Value String BlockAccessOnUnmanagedDevices Gets or sets a Boolean value that specifies whether the following access setting is enabled: set allow access on unmanaged devices Declaration bool BlockAccessOnUnmanagedDevices { get; set; } Property Value Boolean BlockDownloadLinksFileType Gets or sets the tenant's block download links' file type. There is an equivalent site level policy Declaration BlockDownloadLinksFileTypes BlockDownloadLinksFileType { get; set; } Property Value BlockDownloadLinksFileTypes BlockDownloadOfAllFilesForGuests Gets or sets a Boolean value that specifies whether the following policy is enabled: set block download of all files for guests Declaration bool BlockDownloadOfAllFilesForGuests { get; set; } Property Value Boolean BlockDownloadOfAllFilesOnUnmanagedDevices Gets or sets a Boolean value that specifies whether the following policy is enabled: set block download of all files on unmanaged devices Declaration bool BlockDownloadOfAllFilesOnUnmanagedDevices { get; set; } Property Value Boolean BlockDownloadOfViewableFilesForGuests Gets or sets a Boolean value that specifies whether the following policy is enabled: set block download of browser viewable files for guests Declaration bool BlockDownloadOfViewableFilesForGuests { get; set; } Property Value Boolean BlockDownloadOfViewableFilesOnUnmanagedDevices Gets or sets a Boolean value that specifies whether the following policy is enabled: set block download of browser viewable files on unmanaged devices Declaration bool BlockDownloadOfViewableFilesOnUnmanagedDevices { get; set; } Property Value Boolean BlockMacSync Get/Set whether Mac clients should be blocked from sync Declaration bool BlockMacSync { get; set; } Property Value Boolean BlockSendLabelMismatchEmail Gets or sets the BlockSendLabelMismatchEmail property Declaration bool BlockSendLabelMismatchEmail { get; set; } Property Value Boolean BlockUserInfoVisibilityInOneDrive Gets or sets BlockUserInfoVisibilityInOneDrive value Declaration TenantBrowseUserInfoPolicyValue BlockUserInfoVisibilityInOneDrive { get; set; } Property Value TenantBrowseUserInfoPolicyValue BlockUserInfoVisibilityInSharePoint Gets or sets BlockUserInfoVisibilityInSharePoint value Declaration TenantBrowseUserInfoPolicyValue BlockUserInfoVisibilityInSharePoint { get; set; } Property Value TenantBrowseUserInfoPolicyValue ChannelMeetingRecordingPermission Gets or sets a value to specify the channel meeting recording permission Declaration ChannelMeetingRecordingPermissionType ChannelMeetingRecordingPermission { get; set; } Property Value ChannelMeetingRecordingPermissionType CommentsOnFilesDisabled Whether comments on files are disabled or not Declaration bool CommentsOnFilesDisabled { get; set; } Property Value Boolean CommentsOnListItemsDisabled Whether comments on list items are disabled or not Declaration bool CommentsOnListItemsDisabled { get; set; } Property Value Boolean CommentsOnSitePagesDisabled Whether comments on site pages are disabled or not Declaration bool CommentsOnSitePagesDisabled { get; set; } Property Value Boolean CompatibilityRange Determines which compatibility range is available for new site collections Declaration string CompatibilityRange { get; } Property Value String ConditionalAccessPolicy Gets or sets a value to specify the conditional access policy for the tenant Declaration SPOConditionalAccessPolicyType ConditionalAccessPolicy { get; set; } Property Value SPOConditionalAccessPolicyType ConditionalAccessPolicyErrorHelpLink Gets or sets the link to organization help page in case of access denied due to conditional access policy Declaration string ConditionalAccessPolicyErrorHelpLink { get; set; } Property Value String ContentTypeSyncSiteTemplatesList A list of site templates that the tenant has opted-in to sync Content types Declaration IEnumerable<string> ContentTypeSyncSiteTemplatesList { get; set; } Property Value IEnumerable < String > CustomizedExternalSharingServiceUrl Gets or sets customized external sharing service url Declaration string CustomizedExternalSharingServiceUrl { get; set; } Property Value String DefaultLinkPermission Gets or sets default link permission Declaration SharingPermissionType DefaultLinkPermission { get; set; } Property Value SharingPermissionType DefaultODBMode Gets or sets DefaultODBMode value Declaration string DefaultODBMode { get; set; } Property Value String DefaultSharingLinkType Gets or sets default sharing link type for the tenant Declaration SharingLinkType DefaultSharingLinkType { get; set; } Property Value SharingLinkType DisableAddToOneDrive Gets or sets a value to specify whether Add To OneDrive is disabled Declaration bool DisableAddToOneDrive { get; set; } Property Value Boolean DisableBackToClassic Gets or sets a value to specify whether back to classic link is disabled in Modern UX Declaration bool DisableBackToClassic { get; set; } Property Value Boolean DisableCustomAppAuthentication Gets or sets the value of whether ACS app only tokens are blocked. True means it's blocked Declaration bool DisableCustomAppAuthentication { get; set; } Property Value Boolean DisabledModernListTemplateIds An array of modern List template ids that are disabled on the tenant Declaration Guid[] DisabledModernListTemplateIds { get; set; } Property Value Guid [] DisabledWebPartIds Gets or sets the list to disable web parts. The Guid is the web part Guid defined in web part's manifest Declaration Guid[] DisabledWebPartIds { get; set; } Property Value Guid [] DisableListSync Get/Set whether Nucleus Sync should be disabled for Lists Declaration bool DisableListSync { get; set; } Property Value Boolean DisableOutlookPSTVersionTrimming Gets or sets a value to specify whether Outlook PST version trimming is disabled or not Declaration bool DisableOutlookPSTVersionTrimming { get; set; } Property Value Boolean DisablePersonalListCreation Gets or sets a value to specify whether personal list creation is disabled or not Declaration bool DisablePersonalListCreation { get; set; } Property Value Boolean DisableReportProblemDialog Disable sync client report problem dialog Declaration bool DisableReportProblemDialog { get; set; } Property Value Boolean DisableSpacesActivation Gets or sets a value to specify whether activation of spaces are disabled or not Declaration bool DisableSpacesActivation { get; set; } Property Value Boolean DisallowInfectedFileDownload Don't allow download of files marked as infected Declaration bool DisallowInfectedFileDownload { get; set; } Property Value Boolean DisplayNamesOfFileViewers Get/Set DisplayNamesOfFileViewers Tenant settings for Analytics Privacy property Declaration bool DisplayNamesOfFileViewers { get; set; } Property Value Boolean DisplayNamesOfFileViewersInSpo Get/Set DisplayNamesOfFileViewersInSpo Tenant settings for Analytics Privacy property Declaration bool DisplayNamesOfFileViewersInSpo { get; set; } Property Value Boolean DisplayStartASiteOption Gets or sets a Boolean value that specifies whether tenant users see the \"Start a fresh site\" menu option Declaration bool DisplayStartASiteOption { get; set; } Property Value Boolean True indicates that this menu option is present for tenant users. False indicates the menu option is hidden for tenant users. EmailAttestationEnabled Gets or sets a value to handle email attestation Declaration bool EmailAttestationEnabled { get; set; } Property Value Boolean EmailAttestationReAuthDays Gets or sets the time between reattestation Declaration int EmailAttestationReAuthDays { get; set; } Property Value Int32 EmailAttestationRequired Gets or sets the EmailAttestationRequired setting for the tenant Declaration bool EmailAttestationRequired { get; set; } Property Value Boolean EnableAIPIntegration Gets or sets the AIPIntegrationKey cache property for the tenant Declaration bool EnableAIPIntegration { get; set; } Property Value Boolean EnableAutoNewsDigest Gets or sets a value to specify whether Auto news digest is enabled Declaration bool EnableAutoNewsDigest { get; set; } Property Value Boolean EnableAzureADB2BIntegration Gets or sets a value to specify whether AAD B2B integration is enabled Declaration bool EnableAzureADB2BIntegration { get; set; } Property Value Boolean EnabledFlightAllowAADB2BSkipCheckingOTP Get status of flight AllowAADB2BSkipCheckingOTP Declaration bool EnabledFlightAllowAADB2BSkipCheckingOTP { get; } Property Value Boolean EnableGuestSignInAcceleration Gets or sets a whether we force the auto-acceleration sign-in Declaration bool EnableGuestSignInAcceleration { get; set; } Property Value Boolean EnableMinimumVersionRequirement Gets or sets the MinimumVersioning cache property for the tenant Declaration bool EnableMinimumVersionRequirement { get; set; } Property Value Boolean EnableMipSiteLabel Gets the EnableMipSiteLabel property of the tenant Declaration bool EnableMipSiteLabel { get; set; } Property Value Boolean EnablePromotedFileHandlers Gets or sets a value to specify if promoted file handlers are enabled Declaration bool EnablePromotedFileHandlers { get; set; } Property Value Boolean ExcludedFileExtensionsForSyncClient Get/Set excluded file extensions for sync client Declaration IList<string> ExcludedFileExtensionsForSyncClient { get; set; } Property Value IList < String > ExternalServicesEnabled Determines whether external services are enabled Declaration bool ExternalServicesEnabled { get; set; } Property Value Boolean ExternalUserExpirationRequired Gets or sets whether external user expiration is enabled for the tenant Declaration bool ExternalUserExpirationRequired { get; set; } Property Value Boolean ExternalUserExpireInDays Gets or sets the number of days before external user expiration if not individually extended Declaration int ExternalUserExpireInDays { get; set; } Property Value Int32 FileAnonymousLinkType Gets or sets file anonymous link type for the tenant Declaration AnonymousLinkType FileAnonymousLinkType { get; set; } Property Value AnonymousLinkType FilePickerExternalImageSearchEnabled Gets or sets a value to specify if External Image Search is enabled on the File Picker Declaration bool FilePickerExternalImageSearchEnabled { get; set; } Property Value Boolean FolderAnonymousLinkType Gets or sets folder anonymous link type for the tenant Declaration AnonymousLinkType FolderAnonymousLinkType { get; set; } Property Value AnonymousLinkType GuestSharingGroupAllowListInTenant Gets or sets a value to handle guest sharing group's allow list Declaration string GuestSharingGroupAllowListInTenant { get; set; } Property Value String GuestSharingGroupAllowListInTenantByPrincipalIdentity Gets: a list of PrincipalNames Example output: List of PrincipalNames. e.g. [\"c:0-.f|rolemanager|contoso-all-users/35533f7d-4536-4c82-9dbc-352f9424578b\"] Sets: take a list of principalNames Declaration IList<string> GuestSharingGroupAllowListInTenantByPrincipalIdentity { get; set; } Property Value IList < String > HasAdminCompletedCUConfiguration Gets or sets the value if the tenant admin has completed CU configuration Declaration bool HasAdminCompletedCUConfiguration { get; set; } Property Value Boolean HasIntelligentContentServicesCapability Gets or sets whether the tenant has Intelligent Content Services Capability or not Declaration bool HasIntelligentContentServicesCapability { get; set; } Property Value Boolean HasTopicExperiencesCapability Gets or sets whether the tenant has Topic Experiences Capability or not Declaration bool HasTopicExperiencesCapability { get; set; } Property Value Boolean HideSyncButtonOnDocLib Gets or sets a value to specify whether the sync button on team sites and other ODBs is hidden. (Basically this hides the sync button on all document libraries except the OneDrive for Business that the user owns.) Declaration bool HideSyncButtonOnDocLib { get; set; } Property Value Boolean HideSyncButtonOnODB Get/Set whether to hide the sync button on OneDrive for Business sites Declaration bool HideSyncButtonOnODB { get; set; } Property Value Boolean ImageTaggingOption Gets or sets the value of the image tagging option Declaration ImageTaggingChoice ImageTaggingOption { get; set; } Property Value ImageTaggingChoice IncludeAtAGlanceInShareEmails Gets or sets a value to specify whether to include at a glance in the sharing emails Declaration bool IncludeAtAGlanceInShareEmails { get; set; } Property Value Boolean InformationBarriersSuspension Gets or sets InformationBarriersSuspension value Declaration bool InformationBarriersSuspension { get; set; } Property Value Boolean IPAddressAllowList Enforces incoming requests are coming from the address range in IPAddressAllowList Declaration string IPAddressAllowList { get; set; } Property Value String IPAddressEnforcement nforces incoming requests are coming from the address range in IPAddressAllowList Declaration bool IPAddressEnforcement { get; set; } Property Value Boolean IPAddressWACTokenLifetime The WAC Loopback token lifetime. Default is 15 minutes Declaration int IPAddressWACTokenLifetime { get; set; } Property Value Int32 IsAppBarTemporarilyDisabled Get or sets the IsAppBarTemporarilyDisabled flag Declaration bool IsAppBarTemporarilyDisabled { get; set; } Property Value Boolean IsCollabMeetingNotesFluidEnabled Gets or sets a value to specify whether CollabMeetingNotes Fluid Framework is enabled If IsFluidEnabled disabled, IsCollabMeetingNotesFluidEnabled will be disabled automatically If IsFluidEnabled enabled, IsCollabMeetingNotesFluidEnabled will be enabled automatically IsCollabMeetingNotesFluidEnabled can be enabled only when IsFluidEnabled is already enabled Declaration bool IsCollabMeetingNotesFluidEnabled { get; set; } Property Value Boolean IsFluidEnabled Gets or sets a value to specify whether Fluid Framework is enabled Declaration bool IsFluidEnabled { get; set; } Property Value Boolean IsHubSitesMultiGeoFlightEnabled Get status of HubSitesMultiGeo flight Declaration bool IsHubSitesMultiGeoFlightEnabled { get; } Property Value Boolean IsMnAFlightEnabled Get status of M&A flight Declaration bool IsMnAFlightEnabled { get; } Property Value Boolean IsMultiGeo The property indicates if tenant has multi-geo tenant instances Declaration bool IsMultiGeo { get; } Property Value Boolean IsUnmanagedSyncClientForTenantRestricted Get/Set sync client restrictions Declaration bool IsUnmanagedSyncClientForTenantRestricted { get; set; } Property Value Boolean IsUnmanagedSyncClientRestrictionFlightEnabled Get status of feature sync client restriction allowed Declaration bool IsUnmanagedSyncClientRestrictionFlightEnabled { get; } Property Value Boolean IsWBFluidEnabled Gets or sets a value to specify whether Whiteboard Fluid Framework is enabled If IsFluidEnabled disabled, IsWBFluidEnabled will be disabled automatically If IsFluidEnabled enabled, IsWBFluidEnabled will be enabled automatically IsWBFluidEnabled can be enabled only when IsFluidEnabled is already enabled Declaration bool IsWBFluidEnabled { get; set; } Property Value Boolean LabelMismatchEmailHelpLink Gets or sets the LabelMismatchEmailHelpLink property Declaration string LabelMismatchEmailHelpLink { get; set; } Property Value String LegacyAuthProtocolsEnabled Gets or sets the value if ADAL is disabled in the tenant. True value means it is disabled Declaration bool LegacyAuthProtocolsEnabled { get; set; } Property Value Boolean LimitedAccessFileType Specifies what files can be viewed when ConditionalAccessPolicy is set to AllowLimitedAccess Declaration SPOLimitedAccessFileType LimitedAccessFileType { get; set; } Property Value SPOLimitedAccessFileType MachineLearningCaptureEnabled Gets or sets the value if the ML capture settings should be shown in the tenant. True means that it is shown Declaration bool MachineLearningCaptureEnabled { get; set; } Property Value Boolean MarkNewFilesSensitiveByDefault Gets or sets the MarkNewFilesSensitiveByDefault property Declaration SensitiveByDefaultState MarkNewFilesSensitiveByDefault { get; set; } Property Value SensitiveByDefaultState MediaTranscription Gets or sets the media transcription policy Declaration MediaTranscriptionPolicyType MediaTranscription { get; set; } Property Value MediaTranscriptionPolicyType MobileFriendlyUrlEnabledInTenant Gets or sets a value to specify if user checks handle mobile friendly url Declaration bool MobileFriendlyUrlEnabledInTenant { get; set; } Property Value Boolean NoAccessRedirectUrl When a site in the tenancy is locked it is redirected to this Url Declaration string NoAccessRedirectUrl { get; set; } Property Value String NotificationsInOneDriveForBusinessEnabled Gets or sets a value PushNotificationsEnabled in ODB Declaration bool NotificationsInOneDriveForBusinessEnabled { get; set; } Property Value Boolean NotificationsInSharePointEnabled Gets or sets a value PushNotificationsEnabled in SharePoint Declaration bool NotificationsInSharePointEnabled { get; set; } Property Value Boolean NotifyOwnersWhenInvitationsAccepted Gets or sets a value for owner notification accept Declaration bool NotifyOwnersWhenInvitationsAccepted { get; set; } Property Value Boolean NotifyOwnersWhenItemsReshared Gets or sets a value for owner notification reshare Declaration bool NotifyOwnersWhenItemsReshared { get; set; } Property Value Boolean ODBAccessRequests Gets or sets a value to specify if AccessRequests is On, Off or Unspecified for Onedrive for Business Declaration SharingState ODBAccessRequests { get; set; } Property Value SharingState ODBMembersCanShare Gets or sets a value to specify if MembersCanShare is On, Off or Unspecified for Onedrive for Business Declaration SharingState ODBMembersCanShare { get; set; } Property Value SharingState ODBSharingCapability Gets or sets a value to Onedrive for Business sharing capability Declaration SharingCapabilities ODBSharingCapability { get; set; } Property Value SharingCapabilities OfficeClientADALDisabled Gets or sets the value if ADAL is disabled in the tenant for Office clients. True value means it is disabled Declaration bool OfficeClientADALDisabled { get; set; } Property Value Boolean OneDriveForGuestsEnabled Gets or sets a value to specify if OneDriveForGuestUsers functionality is enabled for the tenant Declaration bool OneDriveForGuestsEnabled { get; set; } Property Value Boolean OneDriveStorageQuota The default OneDrive quota allocated to new OneDrive sites for the tenant's users Declaration long OneDriveStorageQuota { get; set; } Property Value Int64 OrgNewsSiteUrl Gets or sets OrgNewsSiteUrl Declaration string OrgNewsSiteUrl { get; set; } Property Value String OrphanedPersonalSitesRetentionPeriod Gets or Sets The default Retention Days set to Personal Sites for a tenant Declaration int OrphanedPersonalSitesRetentionPeriod { get; set; } Property Value Int32 OwnerAnonymousNotification Gets or sets a value for anonymous owner notification Declaration bool OwnerAnonymousNotification { get; set; } Property Value Boolean PreventExternalUsersFromResharing Gets or sets a value to specify if external users are allowed to reshare, regardless of Members Can Share state Declaration bool PreventExternalUsersFromResharing { get; set; } Property Value Boolean ProvisionSharedWithEveryoneFolder Gets or Sets whether Onedrive for Business sites should have the Shared with Everyone folder automatically provisioned or not Declaration bool ProvisionSharedWithEveryoneFolder { get; set; } Property Value Boolean PublicCdnAllowedFileTypes Gets or sets a value to specify what file types can be exposed through Public CDN Declaration string PublicCdnAllowedFileTypes { get; set; } Property Value String PublicCdnEnabled Gets or sets a value to specify whether Public CDN feature is enabled or disabled for the tenant Declaration bool PublicCdnEnabled { get; set; } Property Value Boolean PublicCdnOrigins Gets a list of the Public CDN origins Declaration IList<string> PublicCdnOrigins { get; } Property Value IList < String > RequireAcceptingAccountMatchInvitedAccount Gets or sets a value to specify if user accepting invitation must use the same email address invitation was sent to Declaration bool RequireAcceptingAccountMatchInvitedAccount { get; set; } Property Value Boolean RequireAnonymousLinksExpireInDays Gets or sets a value to specify what external sharing capabilities are available for the tenant Declaration int RequireAnonymousLinksExpireInDays { get; set; } Property Value Int32 RestrictedOneDriveLicense Gets the info whether tenant has license for Restricted Onedrive for Business Declaration bool RestrictedOneDriveLicense { get; } Property Value Boolean RootSiteUrl The tenant's root site url Declaration string RootSiteUrl { get; } Property Value String SearchResolveExactEmailOrUPN Gets or sets the value if Search and resolve in People Picker use exact match on Email or UPN. False value means default behavior of \"starts with\" matching against common user properties Declaration bool SearchResolveExactEmailOrUPN { get; set; } Property Value Boolean SharingAllowedDomainList Gets or sets list of allowed domains Declaration string SharingAllowedDomainList { get; set; } Property Value String SharingBlockedDomainList Gets or sets list of blocked domains Declaration string SharingBlockedDomainList { get; set; } Property Value String SharingCapability Gets or sets a value to specify what external sharing capabilities are available for the tenant Declaration SharingCapabilities SharingCapability { get; set; } Property Value SharingCapabilities SharingDomainRestrictionMode Gets or sets the restriction mode Declaration SharingDomainRestrictionModes SharingDomainRestrictionMode { get; set; } Property Value SharingDomainRestrictionModes ShowAllUsersClaim Gets or sets the value if AllUsers claim is visible or not in people picker. False value means it is hidden Declaration bool ShowAllUsersClaim { get; set; } Property Value Boolean ShowEveryoneClaim Gets or sets the value if Everyone claim is visible or not in people picker. False value means it is hidden Declaration bool ShowEveryoneClaim { get; set; } Property Value Boolean ShowEveryoneExceptExternalUsersClaim Gets or sets the value if EveryoneExceptExternalUsers claim is visible or not in people picker. False value means it is hidden Declaration bool ShowEveryoneExceptExternalUsersClaim { get; set; } Property Value Boolean ShowPeoplePickerSuggestionsForGuestUsers Gets or sets a value that allows members to search all existing guest users in the directory. When set to true, members can search all existing guest users in the directory. Declaration bool ShowPeoplePickerSuggestionsForGuestUsers { get; set; } Property Value Boolean SignInAccelerationDomain Gets or sets a string which specifies the SignInAccelerationDomain Declaration string SignInAccelerationDomain { get; set; } Property Value String Remarks When set, end-user sign-in will skip the default sign-in page, and will take the user directly to the sign-in page on the ADFS sign-in (OnPremises Active Directory). To be used only by organizations that don’t have Guest Sign-ins enabled. When not set, the behavior of end-user sign-in will be the default behavior as it is today – i.e. the end user will be taken to the default sign-in page, and from there onward to ADFS sign-in. SocialBarOnSitePagesDisabled Whether social bar on site pages is enabled or not Declaration bool SocialBarOnSitePagesDisabled { get; set; } Property Value Boolean SpecialCharactersStateInFileFolderNames Gets or Sets a value to specify whether # and % are valid in file and folder names in SPO document libraries and OneDrive for Business Declaration SpecialCharactersState SpecialCharactersStateInFileFolderNames { get; set; } Property Value SpecialCharactersState StartASiteFormUrl Gets or sets a string which specifies the URL of the form to load in the Start a Site dialog Declaration string StartASiteFormUrl { get; set; } Property Value String StopNew2010Workflows Gets or sets a value to specify whether new 2010 workflows can be created Declaration bool StopNew2010Workflows { get; set; } Property Value Boolean StopNew2013Workflows Gets or sets a value to specify whether new 2013 workflows can be created Declaration bool StopNew2013Workflows { get; set; } Property Value Boolean StorageQuota Storage quota that is available for all sites in the tenant Declaration long StorageQuota { get; } Property Value Int64 StorageQuotaAllocated Storage quota that is allocated for all sites in the tenant Declaration long StorageQuotaAllocated { get; } Property Value Int64 SyncAadB2BManagementPolicy Gets or sets whether or not the AAD B2B management policy will be synced on the next request Declaration bool SyncAadB2BManagementPolicy { get; set; } Property Value Boolean SyncPrivacyProfileProperties Gets or sets whether or not the synced tenant properties will be updated on the next request Declaration bool SyncPrivacyProfileProperties { get; set; } Property Value Boolean UseFindPeopleInPeoplePicker Gets or sets a value to specify if use FindPeople in PeoplePicker Declaration bool UseFindPeopleInPeoplePicker { get; set; } Property Value Boolean UserVoiceForFeedbackEnabled Gets or sets a value to specify if User Voice for customer feedback is enabled Declaration bool UserVoiceForFeedbackEnabled { get; set; } Property Value Boolean ViewersCanCommentOnMediaDisabled Whether viewers commenting on media items is disabled or not Declaration bool ViewersCanCommentOnMediaDisabled { get; set; } Property Value Boolean ViewInFileExplorerEnabled Gets or sets the value of the setting which enables users to view files in Explorer Declaration bool ViewInFileExplorerEnabled { get; set; } Property Value Boolean WhoCanShareAllowListInTenant Gets or sets a value to handle the tenant who can share settings Declaration string WhoCanShareAllowListInTenant { get; set; } Property Value String WhoCanShareAllowListInTenantByPrincipalIdentity Gets: a list of PrincipalNames Example output: List of PrincipalNames. e.g. [\"c:0-.f|rolemanager|contoso-all-users/35533f7d-4536-4c82-9dbc-352f9424578b\"] Sets: take a list of principalNames Declaration IList<string> WhoCanShareAllowListInTenantByPrincipalIdentity { get; set; } Property Value IList < String > Workflow2010Disabled Gets or sets a value to specify whether Workflow 2010 is disabled Declaration bool Workflow2010Disabled { get; set; } Property Value Boolean Workflows2013State Gets whether 2013 workflows are configured and enabled for the tenant Declaration Workflows2013State Workflows2013State { get; } Property Value Workflows2013State Methods Update() Updates the properties of this site collection Declaration void Update() UpdateAsync() Updates the properties of this site collection Declaration Task UpdateAsync() Returns Task"
  },
  "api/PnP.Core.Admin.Model.SharePoint.Language.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.Language.html",
    "title": "Enum Language | PnP Core SDK",
    "keywords": "Enum Language SharePoint Online languages Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum Language : int Arabic Arabic Azerbaijani Azerbaijani Basque Basque Bosnian Bosnian (Latin) Bulgarian Bulgarian Catalan Catalan ChineseSimplified Chinese (Simplified) ChineseTraditional Chinese (Traditional) Croatian Croatian Czech Czech Danish Danish Dari Dari Default Use default tenant language Dutch Dutch English English Estonian Estonian Finnish Finnish French French Galician Galician German German Greek Greek Hebrew Hebrew Hindi Hindi Hungarian Hungarian Indonesian Indonesian Irish Irish Italian Italian Japanese Japanese Kazakh Kazakh Korean Korean Latvian Latvian Lithuanian Lithuanian Macedonian Macedonian Malay Malay Norwegian Norwegian (Bokmål) Polish Polish PortugueseBrazil Portuguese (Brazil) PortuguesePortugal Portuguese (Portugal) Romanian Romanian Russian Russian SerbianCyrillic Serbian (Cyrillic, Serbia) SerbianLatin Serbian (Latin) SerbianLatinSerbia Serbian (Latin, Serbia) Slovak Slovak Slovenian Slovenian Spanish Spanish Swedish Swedish Thai Thai Turkish Turkish Ukrainian Ukrainian Vietnamese Vietnamese Welsh Welsh"
  },
  "api/PnP.Core.Admin.Model.SharePoint.MediaTranscriptionPolicyType.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.MediaTranscriptionPolicyType.html",
    "title": "Enum MediaTranscriptionPolicyType | PnP Core SDK",
    "keywords": "Enum MediaTranscriptionPolicyType Defines the media transcription policy type values Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum MediaTranscriptionPolicyType : int Disabled Transcription is disabled Enabled When enabled, all users on the tenant are able to request transcription on all media files they have edit permissions to"
  },
  "api/PnP.Core.Admin.Model.SharePoint.PWAEnabledStatus.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.PWAEnabledStatus.html",
    "title": "Enum PWAEnabledStatus | PnP Core SDK",
    "keywords": "Enum PWAEnabledStatus Represents the status of EnableProjectWebInstance on a site collection. Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum PWAEnabledStatus : int Disabled The project web app is disabled for this site collection Enabled The project web app is enabled for this site collection Unknown Default value, Project Web App status was never set"
  },
  "api/PnP.Core.Admin.Model.SharePoint.RestrictedToRegion.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.RestrictedToRegion.html",
    "title": "Enum RestrictedToRegion | PnP Core SDK",
    "keywords": "Enum RestrictedToRegion Represents the status of RestrictedToRegion on a site collection Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum RestrictedToRegion : int BlockFull Site move is blocked, also full file content is not cached cross-region BlockMoveOnly Only site move is blocked NoRestriction No restrictions set Unknown Default value, means the property was never set"
  },
  "api/PnP.Core.Admin.Model.SharePoint.SensitiveByDefaultState.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.SensitiveByDefaultState.html",
    "title": "Enum SensitiveByDefaultState | PnP Core SDK",
    "keywords": "Enum SensitiveByDefaultState Contains the values of the 2 allowed states for MarkNewFileSensitiveByDefault Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum SensitiveByDefaultState : int AllowExternalSharing Allows external sharing, default BlockExternalSharing Blocks external sharing"
  },
  "api/PnP.Core.Admin.Model.SharePoint.SharingCapabilities.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.SharingCapabilities.html",
    "title": "Enum SharingCapabilities | PnP Core SDK",
    "keywords": "Enum SharingCapabilities Specifies what type of external user and guest link sharing is enabled for the tenant Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum SharingCapabilities : int Disabled External user sharing (share by email) and guest link sharing are both disabled for all site collections in the tenant. No new external user invitations or sharing links can be created, and any content previously shared becomes inaccessible to external users. ExistingExternalUserSharingOnly External user sharing and guest link sharing are both disabled for the tenant, but AllowGuestUserSignIn is enabled. Each individual site collection's sharing properties govern whether the site collection has sharing disabled or allows existing external user signing in, but a site collection cannot enable guest link sharing and cannot share with new external users. ExternalUserAndGuestSharing External user sharing and guest link sharing are enabled for the tenant. Each individual site collection's sharing properties govern whether the site collection has sharing disabled, allows external user sharing only, or allows both external user sharing and guest link sharing. ExternalUserSharingOnly External user sharing is enabled for the tenancy, but guest link sharing is disabled. Each individual site collection's sharing properties govern whether the site collection has sharing disabled or allows external user sharing, but a site collection cannot enable guest link sharing."
  },
  "api/PnP.Core.Admin.Model.SharePoint.SharingDomainRestrictionModes.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.SharingDomainRestrictionModes.html",
    "title": "Enum SharingDomainRestrictionModes | PnP Core SDK",
    "keywords": "Enum SharingDomainRestrictionModes Specifies what type of restriction mode is enabled for the tenant Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum SharingDomainRestrictionModes : int AllowList Allowed domain list is enabled for the tenant BlockList Blocked domain list is enabled for the tenant None No restriction mode is enable for the tenant"
  },
  "api/PnP.Core.Admin.Model.SharePoint.SharingLinkType.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.SharingLinkType.html",
    "title": "Enum SharingLinkType | PnP Core SDK",
    "keywords": "Enum SharingLinkType Specifies the type of default sharing link for the tenant Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum SharingLinkType : int AnonymousAccess AnonymousEdit sharing link Direct Restricted sharing link Internal OrganizationEdit sharing link None Not set"
  },
  "api/PnP.Core.Admin.Model.SharePoint.SharingPermissionType.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.SharingPermissionType.html",
    "title": "Enum SharingPermissionType | PnP Core SDK",
    "keywords": "Enum SharingPermissionType Specifies the type of default link permission for the tenant Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum SharingPermissionType : int Edit Edit sharing link permission None Not set View View sharing link permission"
  },
  "api/PnP.Core.Admin.Model.SharePoint.SharingState.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.SharingState.html",
    "title": "Enum SharingState | PnP Core SDK",
    "keywords": "Enum SharingState Contains the possible values for the default sharing state Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum SharingState : int Off Implies that Tenant Admin is forcing Sharing Property State to behave as if they are set to False On Implies that Tenant Admin is forcing Sharing Property State to behave as if they are set to True Unspecified Implies that the Tenant Admin is choosing to let Site and Web Owners specify the behavior for Sharing Property State"
  },
  "api/PnP.Core.Admin.Model.SharePoint.SiteCreationOptions.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.SiteCreationOptions.html",
    "title": "Class SiteCreationOptions | PnP Core SDK",
    "keywords": "Class SiteCreationOptions Options to control the site collection creation flow Inheritance Object CreationOptions SiteCreationOptions Inherited Members CreationOptions.MaxStatusChecks CreationOptions.WaitAfterStatusCheck CreationOptions.UsingApplicationPermissions Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public class SiteCreationOptions : CreationOptions Properties MaxAsyncProvisioningStatusChecks Number of times to check for the async provisioning to be completed. Defaults to 80 if not set. Declaration public int? MaxAsyncProvisioningStatusChecks { get; set; } Property Value Nullable < Int32 > WaitAfterAsyncProvisioningStatusCheck Defines the wait time in seconds after an async provisioning complete check. Defaults to 15 if not set. Declaration public int? WaitAfterAsyncProvisioningStatusCheck { get; set; } Property Value Nullable < Int32 > WaitAfterCreation Defines the wait time in seconds after the site collection creation call returns. If specified this overrides the WaitForAsyncProvisioning setting. Declaration public int? WaitAfterCreation { get; set; } Property Value Nullable < Int32 > WaitForAsyncProvisioning Waits for the async provisioning options to be completed. Does not apply to classic site collection creation Declaration public bool? WaitForAsyncProvisioning { get; set; } Property Value Nullable < Boolean >"
  },
  "api/PnP.Core.Admin.Model.SharePoint.SiteUserInfoVisibilityPolicyValue.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.SiteUserInfoVisibilityPolicyValue.html",
    "title": "Enum SiteUserInfoVisibilityPolicyValue | PnP Core SDK",
    "keywords": "Enum SiteUserInfoVisibilityPolicyValue Indicates what the state of the browse user info policy in the site Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum SiteUserInfoVisibilityPolicyValue : int ApplyToGuestAndExternalUsers Apply Block User Info visibility policy to guest and external users ApplyToNoUsers Do not apply Block User Info visibility policy to anyone OrganizationDefault Respect the tenant's default policy for Block User Info visibility"
  },
  "api/PnP.Core.Admin.Model.SharePoint.SpecialCharactersState.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.SpecialCharactersState.html",
    "title": "Enum SpecialCharactersState | PnP Core SDK",
    "keywords": "Enum SpecialCharactersState Contains the values of the 3 allowed states for Special Characters Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum SpecialCharactersState : int Allowed Special characters like #,% are allowed in the names of files and folders Disallowed Special characters like #,% are not allowed in the names of files and folders NoPreference Setting was not set"
  },
  "api/PnP.Core.Admin.Model.SharePoint.SPOConditionalAccessPolicyType.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.SPOConditionalAccessPolicyType.html",
    "title": "Enum SPOConditionalAccessPolicyType | PnP Core SDK",
    "keywords": "Enum SPOConditionalAccessPolicyType Specifies what type of SPO conditional access policy is enabled for the tenant Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum SPOConditionalAccessPolicyType : int AllowFullAccess No conditional access policy is enabled for the tenant. No AAD policy is enabled and both SPO-BlockDownloadOfViewableFilesOnUnmanagedDevicesPolicy and SPO-BlockDownloadOfAllFilesOnUnmanagedDevicesPolicy in SPO are disabled. End users have the full access to the content. AllowLimitedAccess Limited access is enabled for the tenant. We create AAD limited access policy and enable SPO-BlockDownloadOfViewableFilesOnUnmanagedDevicesPolicy in SPO. End users get limited access experience when they access to the content. AuthenticationContext Authentication Context is enabled for the site. We create AAD Authentication context policy and enable it in SPO by running this command: Set-SPOSite - ConditionalAccessPolicy AuthenticationContext -AuthenticationContextName \"Contos MFA\" The user will be redirected to AAD to evaluate this policy if the policy is enabled. BlockAccess Block access is enabled for the tenant. We create AAD block access policy and enable SPO-BlockDownloadOfAllFilesOnUnmanagedDevicesPolicy in SPO. End users would be blocked sign-in by AAD."
  },
  "api/PnP.Core.Admin.Model.SharePoint.SPOLimitedAccessFileType.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.SPOLimitedAccessFileType.html",
    "title": "Enum SPOLimitedAccessFileType | PnP Core SDK",
    "keywords": "Enum SPOLimitedAccessFileType Specifies what type of files can be viewed when the AllowLimitedAccess is set as the ConditionalAccessPolicy Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum SPOLimitedAccessFileType : int OfficeOnlineFilesOnly Users affected by the limited access policy can only view Office Online files OtherFiles Users affected by the limited access policy can view all files types with browser viewers and download any files without previewers WebPreviewableFiles Users affected by the limited access policy can view Office Online files and files which are previewed through the media service"
  },
  "api/PnP.Core.Admin.Model.SharePoint.TeamsChannelTypeValue.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.TeamsChannelTypeValue.html",
    "title": "Enum TeamsChannelTypeValue | PnP Core SDK",
    "keywords": "Enum TeamsChannelTypeValue Indicates the type of TeamsCannel a site is connected to Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum TeamsChannelTypeValue : int None This site is not connected to a teams channel. PrivateChannel This site is connected to a Teams private channel. SharedChannel This site is connected to a Teams shared channel. StandardChannel This site is connected to a Teams standard channel."
  },
  "api/PnP.Core.Admin.Model.SharePoint.TeamSiteOptions.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.TeamSiteOptions.html",
    "title": "Class TeamSiteOptions | PnP Core SDK",
    "keywords": "Class TeamSiteOptions Contains the available options for creating a group connected team site collection Inheritance Object CommonSiteOptions CommonGroupSiteOptions TeamSiteOptions Inherited Members CommonGroupSiteOptions.Alias CommonGroupSiteOptions.DisplayName CommonGroupSiteOptions.IsPublic CommonGroupSiteOptions.Description CommonGroupSiteOptions.Classification CommonGroupSiteOptions.HubSiteId CommonGroupSiteOptions.SensitivityLabelId CommonGroupSiteOptions.SiteAlias CommonGroupSiteOptions.PreferredDataLocation CommonSiteOptions.Language CommonSiteOptions.WebTemplate Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public class TeamSiteOptions : CommonGroupSiteOptions Constructors TeamSiteOptions(String, String) Default constuctor for creating a TeamSiteOptions object used to define a team site collection creation Declaration public TeamSiteOptions(string alias, string displayName) Parameters String alias Alias for the group to create String displayName Displayname for the group to create Properties Owners Set the owners of the team site. Specify the UPN values in a string array. Declaration public string[] Owners { get; set; } Property Value String [] SiteDesignId The ID of the Site Design to apply, if any Declaration public Guid? SiteDesignId { get; set; } Property Value Nullable < Guid >"
  },
  "api/PnP.Core.Admin.Model.SharePoint.TeamSiteWithoutGroupOptions.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.TeamSiteWithoutGroupOptions.html",
    "title": "Class TeamSiteWithoutGroupOptions | PnP Core SDK",
    "keywords": "Class TeamSiteWithoutGroupOptions Contains the available options for creating a team site collection without a group Inheritance Object CommonSiteOptions CommonNoGroupSiteOptions TeamSiteWithoutGroupOptions Inherited Members CommonNoGroupSiteOptions.Url CommonNoGroupSiteOptions.Title CommonNoGroupSiteOptions.Owner CommonNoGroupSiteOptions.ShareByEmailEnabled CommonNoGroupSiteOptions.Classification CommonNoGroupSiteOptions.Description CommonNoGroupSiteOptions.SiteDesignId CommonNoGroupSiteOptions.HubSiteId CommonNoGroupSiteOptions.SensitivityLabelId CommonSiteOptions.Language CommonSiteOptions.WebTemplate Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public class TeamSiteWithoutGroupOptions : CommonNoGroupSiteOptions Constructors TeamSiteWithoutGroupOptions(Uri, String) Default constuctor for creating a TeamSiteWithoutGroupOptions object used to define a team site collection creation Declaration public TeamSiteWithoutGroupOptions(Uri url, string title) Parameters Uri url Url of the team site without group String title Title of the team site without group"
  },
  "api/PnP.Core.Admin.Model.SharePoint.TenantBrowseUserInfoPolicyValue.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.TenantBrowseUserInfoPolicyValue.html",
    "title": "Enum TenantBrowseUserInfoPolicyValue | PnP Core SDK",
    "keywords": "Enum TenantBrowseUserInfoPolicyValue Indicates what the state of the browse user info policy in the tenant Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum TenantBrowseUserInfoPolicyValue : int ApplyToGuestAndExternalUsers Apply Block User Info visibility policy to guest and external users ApplyToNoUsers Do not apply Block User Info visibility policy to anyone"
  },
  "api/PnP.Core.Admin.Model.SharePoint.TimeZone.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.TimeZone.html",
    "title": "Enum TimeZone | PnP Core SDK",
    "keywords": "Enum TimeZone Timezones to use when creating sitecollections Format UTC[PLUS|MINUS][HH:MM]_[DESCRIPTION] Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum TimeZone : int None No Timezone UTC_CASABLANCA Timezone for CASABLANCA UTC_COORDINATED_UNIVERSAL_TIME COORDINATED UNIVERSAL TIME UTC_GREENWICH_MEAN_TIME_DUBLIN_EDINBURGH_LISBON_LONDON Timezone for GREENWICH, DUBLIN, EDINBURGH, LISBON and LONDON UTC_MONROVIA Timezone for MONROVIA UTCMINUS0100_AZORES Timezone for AZORES UTCMINUS0100_CAPE_VERDE_ISLANDS Timezone for CAPE VERDE ISLANDS UTCMINUS0200_MID_ATLANTIC Timezone for MIDATLANTIC UTCMINUS0300_BRASILIA Timezone for BRASILIA UTCMINUS0300_BUENOS_AIRES Timezone for BUENOS AIRES UTCMINUS0300_CAYENNE Timezone for CAYENNE UTCMINUS0300_GREENLAND Timezone for GREENLAND UTCMINUS0300_MONTEVIDEO Timezone for MONTEVIDEO UTCMINUS0330_NEWFOUNDLAND_AND_LABRADOR Timezone for NEWFOUNDLAND and LABRADOR UTCMINUS0400_ASUNCION Timezone for ASUNCION UTCMINUS0400_ATLANTIC_TIME_CANADA Timezone for ATLANTIC CANADA UTCMINUS0400_GEORGETOWN_LA_PAZ_SAN_JUAN Timezone for GEORGETOWN and LA PAZ - SAN JUAN UTCMINUS0400_MANAUS Timezone for MANAUS UTCMINUS0400_SANTIAGO Timezone for SANTIAGO UTCMINUS0430_CARACAS Timezone for CARACAS UTCMINUS0500_BOGOTA_LIMA_QUITO Timezone for BOGOTA, LIMA and QUITO UTCMINUS0500_EASTERN_TIME_US_AND_CANADA Timezone for EASTERN US and CANADA UTCMINUS0500_INDIANA_EAST Timezone for INDIANA EAST UTCMINUS0600_CENTRAL_AMERICA Timezone for CENTRAL AMERICA UTCMINUS0600_CENTRAL_TIME_US_AND_CANADA Timezone for CENTRAL US and CANADA UTCMINUS0600_GUADALAJARA_MEXICO_CITY_MONTERREY Timezone for GUADALAJARA, MEXICO CITY and MONTERREY UTCMINUS0600_SASKATCHEWAN Timezone for SASKATCHEWAN UTCMINUS0700_ARIZONA Timezone for ARIZONA UTCMINUS0700_CHIHUAHUA_LA_PAZ_MAZATLAN Timezone for CHIHUAHUA and LA PAZ - MAZATLAN UTCMINUS0700_MOUNTAIN_TIME_US_AND_CANADA Timezone for MOUNTAIN US and CANADA UTCMINUS0800_PACIFIC_TIME_US_AND_CANADA Timezone for PACIFIC US and CANADA UTCMINUS0800_TIJUANA_BAJA_CALFORNIA Timezone for TIJUANA, BAJA and CALFORNIA UTCMINUS0800_ULAANBAATAR Timezone for ULAANBAATAR UTCMINUS0900_ALASKA Timezone for ALASKA UTCMINUS1000_HAWAII Timezone for HAWAII UTCMINUS1100_MIDWAY_ISLAND_SAMOA Timezone for MIDWAY ISLAND and SAMOA UTCMINUS1200_INTERNATIONAL_DATE_LINE_WEST Timezone for INTERNATIONAL DATE LINE WEST UTCPLUS0100_AMSTERDAM_BERLIN_BERN_ROME_STOCKHOLM_VIENNA Timezone for AMSTERDAM, BERLIN, BERN, ROME, STOCKHOLM and VIENNA UTCPLUS0100_BELGRADE_BRATISLAVA_BUDAPEST_LJUBLJANA_PRAGUE Timezone for BELGRADE, BRATISLAVA, BUDAPEST, LJUBLJANA and PRAGUE UTCPLUS0100_BRUSSELS_COPENHAGEN_MADRID_PARIS Timezone for BRUSSELS, COPENHAGEN, MADRID and PARIS UTCPLUS0100_SARAJEVO_SKOPJE_WARSAW_ZAGREB Timezone for SARAJEVO, SKOPJE, WARSAW and ZAGREB UTCPLUS0100_WEST_CENTRAL_AFRICA Timezone for WEST CENTRAL AFRICA UTCPLUS0200_AMMAN Timezone for AMMAN UTCPLUS0200_ATHENS_BUCHAREST_ISTANBUL Timezone for ATHENS, BUCHAREST and ISTANBUL UTCPLUS0200_BEIRUT Timezone for BEIRUT UTCPLUS0200_CAIRO Timezone for CAIRO UTCPLUS0200_HARARE_PRETORIA Timezone for HARARE and PRETORIA UTCPLUS0200_HELSINKI_KYIV_RIGA_SOFIA_TALLINN_VILNIUS Timezone for HELSINKI, KYIV, RIGA, SOFIA, TALLINN and VILNIUS UTCPLUS0200_JERUSALEM Timezone for JERUSALEM UTCPLUS0200_MINSK Timezone for MINSK UTCPLUS0200_WINDHOEK Timezone for WINDHOEK UTCPLUS0300_BAGHDAD Timezone for BAGHDAD UTCPLUS0300_KUWAIT_RIYADH Timezone for KUWAIT and RIYADH UTCPLUS0300_MOSCOW_STPETERSBURG_VOLGOGRAD Timezone for MOSCOW, ST PETERSBURG and VOLGOGRAD UTCPLUS0300_NAIROBI Timezone for NAIROBI UTCPLUS0330_TEHRAN Timezone for TEHRAN UTCPLUS0400_ABU_DHABI_MUSCAT Timezone for ABU DHABI and MUSCAT UTCPLUS0400_BAKU Timezone for BAKU UTCPLUS0400_PORT_LOUIS Timezone for PORT LOUIS UTCPLUS0400_TBILISI Timezone for TBILISI UTCPLUS0400_YEREVAN Timezone for YEREVAN UTCPLUS0430_KABUL Timezone for KABUL UTCPLUS0500_EKATERINBURG Timezone for EKATERINBURG UTCPLUS0500_ISLAMABAD_KARACHI Timezone for ISLAMABAD and KARACHI UTCPLUS0500_TASHKENT Timezone for TASHKENT UTCPLUS0530_CHENNAI_KOLKATA_MUMBAI_NEW_DELHI Timezone for CHENNAI, KOLKATA, MUMBAI and NEW DELHI UTCPLUS0530_SRI_JAYAWARDENEPURA Timezone for SRI JAYAWARDENEPURA UTCPLUS0545_KATHMANDU Timezone for KATHMANDU UTCPLUS0600_ASTANA_DHAKA Timezone for ASTANA and DHAKA UTCPLUS0600_NOVOSIBIRSK Timezone for NOVOSIBIRSK UTCPLUS0630_YANGON_RANGOON Timezone for YANGON and RANGOON UTCPLUS0700_BANGKOK_HANOI_JAKARTA Timezone for BANGKOK, HANOI and JAKARTA UTCPLUS0700_KRASNOYARSK Timezone for KRASNOYARSK UTCPLUS0800_BEIJING_CHONGQING_HONG_KONG_SAR_URUMQI Timezone for BEIJING, CHONGQING, HONG KONG and SAR URUMQI UTCPLUS0800_IRKUTSK Timezone for IRKUTSK UTCPLUS0800_KUALA_LUMPUR_SINGAPORE Timezone for KUALA LUMPUR and SINGAPORE UTCPLUS0800_PERTH Timezone for PERTH UTCPLUS0800_TAIPEI Timezone for TAIPEI UTCPLUS0900_OSAKA_SAPPORO_TOKYO Timezone for OSAKA, SAPPORO and TOKYO UTCPLUS0900_SEOUL Timezone for SEOUL UTCPLUS0900_YAKUTSK Timezone for YAKUTSK UTCPLUS0930_ADELAIDE Timezone for ADELAIDE UTCPLUS0930_DARWIN Timezone for DARWIN UTCPLUS1000_BRISBANE Timezone for BRISBANE UTCPLUS1000_CANBERRA_MELBOURNE_SYDNEY Timezone for CANBERRA, MELBOURNE and SYDNEY UTCPLUS1000_GUAM_PORT_MORESBY Timezone for GUAM and PORT MORESBY UTCPLUS1000_HOBART Timezone for HOBART UTCPLUS1000_VLADIVOSTOK Timezone for VLADIVOSTOK UTCPLUS1100_MADAGAN_SOLOMON_ISLANDS_NEW_CALENDONIA Timezone for MADAGAN, SOLOMON ISLANDS and NEW CALENDONIA UTCPLUS1200_AUCKLAND_WELLINGTON Timezone for AUCKLAND and WELLINGTON UTCPLUS1200_FIJI_ISLANDS_MARSHALL_ISLANDS Timezone for FIJI ISLANDS and MARSHALL ISLAND UTCPLUS1200_PETROPAVLOVSK_KACHATSKY Timezone for PETROPAVLOVSK and KACHATSKY UTCPLUS1300_NUKU_ALOFA Timezone for NUKU and ALOFA"
  },
  "api/PnP.Core.Admin.Model.SharePoint.Workflows2013State.html": {
    "href": "api/PnP.Core.Admin.Model.SharePoint.Workflows2013State.html",
    "title": "Enum Workflows2013State | PnP Core SDK",
    "keywords": "Enum Workflows2013State Specifies the state of Workflows 2013 in the tenant Namespace : PnP.Core.Admin.Model.SharePoint Assembly : PnP.Core.Admin.dll Syntax public enum Workflows2013State : int Configuring The workflow 2013 status is being configured Disabled Workflow 2013 is disabled Enabled Workflow 2013 is enabled"
  },
  "api/PnP.Core.Admin.Model.Teams.html": {
    "href": "api/PnP.Core.Admin.Model.Teams.html",
    "title": "Namespace PnP.Core.Admin.Model.Teams | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Admin.Model.Teams Classes TeamCreationOptions Options to control the Teams creation flow TeamForGroupOptions Options to configure the created Team TeamOptions Options to configure the created Team Interfaces ITeamManager Teams management features"
  },
  "api/PnP.Core.Admin.Model.Teams.ITeamManager.html": {
    "href": "api/PnP.Core.Admin.Model.Teams.ITeamManager.html",
    "title": "Interface ITeamManager | PnP Core SDK",
    "keywords": "Interface ITeamManager Teams management features Namespace : PnP.Core.Admin.Model.Teams Assembly : PnP.Core.Admin.dll Syntax public interface ITeamManager Methods CreateTeam(TeamOptions, TeamCreationOptions) Creates a Teams team and returns a PnPContext to start using the created Team Declaration PnPContext CreateTeam(TeamOptions teamToCreate, TeamCreationOptions creationOptions = null) Parameters TeamOptions teamToCreate Information about the Team to create TeamCreationOptions creationOptions Options to control the Team creation flow Returns PnPContext CreateTeamAsync(TeamOptions, TeamCreationOptions) Creates a Teams team and returns a PnPContext to start using the created Team Declaration Task<PnPContext> CreateTeamAsync(TeamOptions teamToCreate, TeamCreationOptions creationOptions = null) Parameters TeamOptions teamToCreate Information about the Team to create TeamCreationOptions creationOptions Options to control the Team creation flow Returns Task < PnPContext >"
  },
  "api/PnP.Core.Admin.Model.Teams.TeamCreationOptions.html": {
    "href": "api/PnP.Core.Admin.Model.Teams.TeamCreationOptions.html",
    "title": "Class TeamCreationOptions | PnP Core SDK",
    "keywords": "Class TeamCreationOptions Options to control the Teams creation flow Inheritance Object TeamCreationOptions Namespace : PnP.Core.Admin.Model.Teams Assembly : PnP.Core.Admin.dll Syntax public class TeamCreationOptions : object Properties MaxStatusChecks Number of times to check for provisioning complete status. Defaults to 12 if not set. Declaration public int? MaxStatusChecks { get; set; } Property Value Nullable < Int32 > WaitAfterStatusCheck Defines the wait time in seconds after a status check. Defaults to 10 if not set. Declaration public int? WaitAfterStatusCheck { get; set; } Property Value Nullable < Int32 >"
  },
  "api/PnP.Core.Admin.Model.Teams.TeamForGroupOptions.html": {
    "href": "api/PnP.Core.Admin.Model.Teams.TeamForGroupOptions.html",
    "title": "Class TeamForGroupOptions | PnP Core SDK",
    "keywords": "Class TeamForGroupOptions Options to configure the created Team Inheritance Object TeamOptions TeamForGroupOptions Namespace : PnP.Core.Admin.Model.Teams Assembly : PnP.Core.Admin.dll Syntax public class TeamForGroupOptions : TeamOptions Constructors TeamForGroupOptions(Guid) Default constructor used for creating a Team Declaration public TeamForGroupOptions(Guid groupId) Parameters Guid groupId Id of the Microsoft 365 group to create the Team for Properties GroupId Id of the Microsoft 365 group to create the Team for Declaration public Guid GroupId { get; set; } Property Value Guid"
  },
  "api/PnP.Core.Admin.Model.Teams.TeamOptions.html": {
    "href": "api/PnP.Core.Admin.Model.Teams.TeamOptions.html",
    "title": "Class TeamOptions | PnP Core SDK",
    "keywords": "Class TeamOptions Options to configure the created Team Inheritance Object TeamOptions TeamForGroupOptions Namespace : PnP.Core.Admin.Model.Teams Assembly : PnP.Core.Admin.dll Syntax public class TeamOptions : object"
  },
  "api/PnP.Core.Auth.CredentialManagerAuthenticationProvider.html": {
    "href": "api/PnP.Core.Auth.CredentialManagerAuthenticationProvider.html",
    "title": "Class CredentialManagerAuthenticationProvider | PnP Core SDK",
    "keywords": "Class CredentialManagerAuthenticationProvider Authentication Provider that uses a set of credentials stored in the Credentials Manager of Windows Inheritance Object OAuthAuthenticationProvider CredentialManagerAuthenticationProvider Inherited Members OAuthAuthenticationProvider.ConfigurationName OAuthAuthenticationProvider.ClientId OAuthAuthenticationProvider.TenantId OAuthAuthenticationProvider.DefaultAADAppId Namespace : PnP.Core.Auth Assembly : PnP.Core.Auth.dll Syntax public sealed class CredentialManagerAuthenticationProvider : OAuthAuthenticationProvider, IAuthenticationProvider Constructors CredentialManagerAuthenticationProvider(ILogger<OAuthAuthenticationProvider>, IMsalHttpClientFactory) Public constructor leveraging DI to initialize the ILogger and IMsalHttpClientFactory interfaces Declaration public CredentialManagerAuthenticationProvider(ILogger<OAuthAuthenticationProvider> logger, IMsalHttpClientFactory msalHttpClientFactory) Parameters ILogger < OAuthAuthenticationProvider > logger The instance of the logger service provided by DI IMsalHttpClientFactory msalHttpClientFactory The instance of the Msal Http Client Factory service provided by DI CredentialManagerAuthenticationProvider(String, String, PnPCoreAuthenticationCredentialManagerOptions) Public constructor for external consumers of the library Declaration public CredentialManagerAuthenticationProvider(string clientId, string tenantId, PnPCoreAuthenticationCredentialManagerOptions options) Parameters String clientId The Client ID for the Authentication Provider String tenantId The Tenant ID for the Authentication Provider PnPCoreAuthenticationCredentialManagerOptions options Options for the authentication provider CredentialManagerAuthenticationProvider(String, String, String) Public constructor for external consumers of the library Declaration public CredentialManagerAuthenticationProvider(string clientId, string tenantId, string credentialManagerName) Parameters String clientId The Client ID for the Authentication Provider String tenantId The Tenant ID for the Authentication Provider String credentialManagerName The Name of the Credential Manager item for authentication Properties CredentialManagerName The name of the Windows Credential Manager settings to use Declaration public string CredentialManagerName { get; set; } Property Value String Methods AuthenticateRequestAsync(Uri, HttpRequestMessage) Authenticates the specified request message. Declaration public override Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) Parameters Uri resource Request uri HttpRequestMessage request The to authenticate. Returns Task The task to await. Overrides OAuthAuthenticationProvider.AuthenticateRequestAsync(Uri, HttpRequestMessage) GetAccessTokenAsync(Uri) Gets an access token for the requested resource Declaration public override Task<string> GetAccessTokenAsync(Uri resource) Parameters Uri resource Resource to request an access token for Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri) GetAccessTokenAsync(Uri, String[]) Gets an access token for the requested resource and scope. Provide either scopes or resource parameter. Declaration public override Task<string> GetAccessTokenAsync(Uri resource, string[] scopes) Parameters Uri resource Resource to request an access token for, only used if scopes is null String [] scopes Scopes to request, can be null Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri, String[])"
  },
  "api/PnP.Core.Auth.DeviceCodeAuthenticationProvider.html": {
    "href": "api/PnP.Core.Auth.DeviceCodeAuthenticationProvider.html",
    "title": "Class DeviceCodeAuthenticationProvider | PnP Core SDK",
    "keywords": "Class DeviceCodeAuthenticationProvider Authentication Provider that uses a device code flow for authentication Inheritance Object OAuthAuthenticationProvider DeviceCodeAuthenticationProvider Inherited Members OAuthAuthenticationProvider.ConfigurationName OAuthAuthenticationProvider.ClientId OAuthAuthenticationProvider.TenantId OAuthAuthenticationProvider.DefaultAADAppId Namespace : PnP.Core.Auth Assembly : PnP.Core.Auth.dll Syntax public class DeviceCodeAuthenticationProvider : OAuthAuthenticationProvider, IAuthenticationProvider Constructors DeviceCodeAuthenticationProvider(ILogger<OAuthAuthenticationProvider>, IMsalHttpClientFactory) Public constructor leveraging DI to initialize the ILogger and IMsalHttpClientFactory interfaces Declaration public DeviceCodeAuthenticationProvider(ILogger<OAuthAuthenticationProvider> logger, IMsalHttpClientFactory msalHttpClientFactory) Parameters ILogger < OAuthAuthenticationProvider > logger The instance of the logger service provided by DI IMsalHttpClientFactory msalHttpClientFactory The instance of the Msal Http Client Factory service provided by DI DeviceCodeAuthenticationProvider(String, String, PnPCoreAuthenticationDeviceCodeOptions, Action<DeviceCodeNotification>) Public constructor for external consumers of the library Declaration public DeviceCodeAuthenticationProvider(string clientId, string tenantId, PnPCoreAuthenticationDeviceCodeOptions options, Action<DeviceCodeNotification> deviceCodeVerification) Parameters String clientId The Client ID for the Authentication Provider String tenantId The Tenant ID for the Authentication Provider PnPCoreAuthenticationDeviceCodeOptions options Options for the authentication provider Action < DeviceCodeNotification > deviceCodeVerification External action to manage the Device Code verification DeviceCodeAuthenticationProvider(String, String, Uri, Action<DeviceCodeNotification>) Public constructor for external consumers of the library Declaration public DeviceCodeAuthenticationProvider(string clientId, string tenantId, Uri redirectUri, Action<DeviceCodeNotification> deviceCodeVerification) Parameters String clientId The Client ID for the Authentication Provider String tenantId The Tenant ID for the Authentication Provider Uri redirectUri The Redirect URI for the authentication flow Action < DeviceCodeNotification > deviceCodeVerification External action to manage the Device Code verification Properties DeviceCodeVerification Action to notify the end user about the device code request Declaration public Action<DeviceCodeNotification> DeviceCodeVerification { get; set; } Property Value Action < DeviceCodeNotification > RedirectUri The Redirect URI for the authentication flow Declaration public Uri RedirectUri { get; set; } Property Value Uri Methods AuthenticateRequestAsync(Uri, HttpRequestMessage) Authenticates the specified request message. Declaration public override Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) Parameters Uri resource Request uri HttpRequestMessage request The to authenticate. Returns Task The task to await. Overrides OAuthAuthenticationProvider.AuthenticateRequestAsync(Uri, HttpRequestMessage) GetAccessTokenAsync(Uri) Gets an access token for the requested resource Declaration public override Task<string> GetAccessTokenAsync(Uri resource) Parameters Uri resource Resource to request an access token for Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri) GetAccessTokenAsync(Uri, String[]) Gets an access token for the requested resource and scope Declaration public override Task<string> GetAccessTokenAsync(Uri resource, string[] scopes) Parameters Uri resource Resource to request an access token for (unused) String [] scopes Scopes to request Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri, String[])"
  },
  "api/PnP.Core.Auth.DeviceCodeNotification.html": {
    "href": "api/PnP.Core.Auth.DeviceCodeNotification.html",
    "title": "Class DeviceCodeNotification | PnP Core SDK",
    "keywords": "Class DeviceCodeNotification Provides information about the Device Code authentication request Inheritance Object DeviceCodeNotification Namespace : PnP.Core.Auth Assembly : PnP.Core.Auth.dll Syntax public class DeviceCodeNotification : object Properties Message User friendly text response that can be used for display purpose. Declaration public string Message { get; set; } Property Value String UserCode Device code returned by the service Declaration public string UserCode { get; set; } Property Value String VerificationUrl Verification URL where the user must navigate to authenticate using the device code and credentials Declaration public Uri VerificationUrl { get; set; } Property Value Uri"
  },
  "api/PnP.Core.Auth.ExternalAuthenticationProvider.html": {
    "href": "api/PnP.Core.Auth.ExternalAuthenticationProvider.html",
    "title": "Class ExternalAuthenticationProvider | PnP Core SDK",
    "keywords": "Class ExternalAuthenticationProvider Authentication Provider that relies on an external token provider Inheritance Object OAuthAuthenticationProvider ExternalAuthenticationProvider Inherited Members OAuthAuthenticationProvider.ConfigurationName OAuthAuthenticationProvider.ClientId OAuthAuthenticationProvider.TenantId OAuthAuthenticationProvider.DefaultAADAppId Namespace : PnP.Core.Auth Assembly : PnP.Core.Auth.dll Syntax public sealed class ExternalAuthenticationProvider : OAuthAuthenticationProvider, IAuthenticationProvider Constructors ExternalAuthenticationProvider(Func<Uri, String[], String>) Public constructor for external consumers of the library Declaration public ExternalAuthenticationProvider(Func<Uri, string[], string> accessTokenProvider) Parameters Func < Uri , String [], String > accessTokenProvider A function providing the access token to use ExternalAuthenticationProvider(ILogger<OAuthAuthenticationProvider>) Public constructor leveraging DI to initialize the ILogger interfafce Declaration public ExternalAuthenticationProvider(ILogger<OAuthAuthenticationProvider> logger) Parameters ILogger < OAuthAuthenticationProvider > logger The instance of the logger service provided by DI Properties AccessTokenProvider A function providing the access token to use Declaration public Func<Uri, string[], string> AccessTokenProvider { get; set; } Property Value Func < Uri , String [], String > Methods AuthenticateRequestAsync(Uri, HttpRequestMessage) Authenticates the specified request message. Declaration public override Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) Parameters Uri resource Request uri HttpRequestMessage request The to authenticate. Returns Task The task to await. Overrides OAuthAuthenticationProvider.AuthenticateRequestAsync(Uri, HttpRequestMessage) GetAccessTokenAsync(Uri) Gets an access token for the requested resource Declaration public override Task<string> GetAccessTokenAsync(Uri resource) Parameters Uri resource Resource to request an access token for Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri) GetAccessTokenAsync(Uri, String[]) Gets an access token for the requested resource and scope Declaration public override Task<string> GetAccessTokenAsync(Uri resource, string[] scopes) Parameters Uri resource Resource to request an access token for String [] scopes Scopes to request Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri, String[])"
  },
  "api/PnP.Core.Auth.html": {
    "href": "api/PnP.Core.Auth.html",
    "title": "Namespace PnP.Core.Auth | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Auth Classes CredentialManagerAuthenticationProvider Authentication Provider that uses a set of credentials stored in the Credentials Manager of Windows DeviceCodeAuthenticationProvider Authentication Provider that uses a device code flow for authentication DeviceCodeNotification Provides information about the Device Code authentication request ExternalAuthenticationProvider Authentication Provider that relies on an external token provider InteractiveAuthenticationProvider Authentication Provider that uses an interactive flow prompting the user for credentials OAuthAuthenticationProvider Base authentication provider class OnBehalfOfAuthenticationProvider Authentication Provider based on the OnBehalfOf flow UsernamePasswordAuthenticationProvider Authentication Provider that uses a Resource Owner Password Credentials (ROCP) credential flow X509CertificateAuthenticationProvider Authentication Provider based on the X.509 Certificate"
  },
  "api/PnP.Core.Auth.InteractiveAuthenticationProvider.html": {
    "href": "api/PnP.Core.Auth.InteractiveAuthenticationProvider.html",
    "title": "Class InteractiveAuthenticationProvider | PnP Core SDK",
    "keywords": "Class InteractiveAuthenticationProvider Authentication Provider that uses an interactive flow prompting the user for credentials Inheritance Object OAuthAuthenticationProvider InteractiveAuthenticationProvider Inherited Members OAuthAuthenticationProvider.ConfigurationName OAuthAuthenticationProvider.ClientId OAuthAuthenticationProvider.TenantId OAuthAuthenticationProvider.DefaultAADAppId Namespace : PnP.Core.Auth Assembly : PnP.Core.Auth.dll Syntax public class InteractiveAuthenticationProvider : OAuthAuthenticationProvider, IAuthenticationProvider Constructors InteractiveAuthenticationProvider() Public constructor for external consumers of the library Declaration public InteractiveAuthenticationProvider() InteractiveAuthenticationProvider(ILogger<OAuthAuthenticationProvider>, IMsalHttpClientFactory) Public constructor leveraging DI to initialize the ILogger and IMsalHttpClientFactory interfaces Declaration public InteractiveAuthenticationProvider(ILogger<OAuthAuthenticationProvider> logger, IMsalHttpClientFactory msalHttpClientFactory) Parameters ILogger < OAuthAuthenticationProvider > logger The instance of the logger service provided by DI IMsalHttpClientFactory msalHttpClientFactory The instance of the Msal Http Client Factory service provided by DI InteractiveAuthenticationProvider(String, String, PnPCoreAuthenticationInteractiveOptions) Public constructor for external consumers of the library Declaration public InteractiveAuthenticationProvider(string clientId, string tenantId, PnPCoreAuthenticationInteractiveOptions options) Parameters String clientId The Client ID for the Authentication Provider String tenantId The Tenant ID for the Authentication Provider PnPCoreAuthenticationInteractiveOptions options Options for the authentication provider InteractiveAuthenticationProvider(String, String, Uri) Public constructor for external consumers of the library Declaration public InteractiveAuthenticationProvider(string clientId, string tenantId, Uri redirectUri) Parameters String clientId The Client ID for the Authentication Provider String tenantId The Tenant ID for the Authentication Provider Uri redirectUri The Redirect URI for the authentication flow Properties RedirectUri The Redirect URI for the authentication flow Declaration public Uri RedirectUri { get; set; } Property Value Uri Methods AuthenticateRequestAsync(Uri, HttpRequestMessage) Authenticates the specified request message. Declaration public override Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) Parameters Uri resource Request uri HttpRequestMessage request The to authenticate. Returns Task The task to await. Overrides OAuthAuthenticationProvider.AuthenticateRequestAsync(Uri, HttpRequestMessage) GetAccessTokenAsync(Uri) Gets an access token for the requested resource Declaration public override Task<string> GetAccessTokenAsync(Uri resource) Parameters Uri resource Resource to request an access token for Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri) GetAccessTokenAsync(Uri, String[]) Gets an access token for the requested resource and scope Declaration public override Task<string> GetAccessTokenAsync(Uri resource, string[] scopes) Parameters Uri resource Resource to request an access token for (unused) String [] scopes Scopes to request Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri, String[])"
  },
  "api/PnP.Core.Auth.OAuthAuthenticationProvider.html": {
    "href": "api/PnP.Core.Auth.OAuthAuthenticationProvider.html",
    "title": "Class OAuthAuthenticationProvider | PnP Core SDK",
    "keywords": "Class OAuthAuthenticationProvider Base authentication provider class Inheritance Object OAuthAuthenticationProvider CredentialManagerAuthenticationProvider DeviceCodeAuthenticationProvider ExternalAuthenticationProvider InteractiveAuthenticationProvider OnBehalfOfAuthenticationProvider UsernamePasswordAuthenticationProvider X509CertificateAuthenticationProvider Namespace : PnP.Core.Auth Assembly : PnP.Core.Auth.dll Syntax public abstract class OAuthAuthenticationProvider : object, IAuthenticationProvider Constructors OAuthAuthenticationProvider(ILogger<OAuthAuthenticationProvider>) Public constructor for any OAuth Authentication privider Declaration public OAuthAuthenticationProvider(ILogger<OAuthAuthenticationProvider> logger) Parameters ILogger < OAuthAuthenticationProvider > logger Fields DefaultAADAppId Default Azure AD application id (PnP Management Shell) Declaration protected const string DefaultAADAppId = null Field Value String Properties ClientId The ClientId of the application to use for authentication Declaration public string ClientId { get; set; } Property Value String ConfigurationName The Name of the configuration for the Authentication Provider Declaration public string ConfigurationName { get; set; } Property Value String TenantId The Tenant ID for the application, default value is \"organizations\" for multi-tenant applications Declaration public string TenantId { get; set; } Property Value String Methods AuthenticateRequestAsync(Uri, HttpRequestMessage) Authenticates the specified request message. Declaration public abstract Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) Parameters Uri resource Request uri HttpRequestMessage request The to authenticate. Returns Task The task to await. GetAccessTokenAsync(Uri) Gets an access token for the requested resource Declaration public abstract Task<string> GetAccessTokenAsync(Uri resource) Parameters Uri resource Resource to request an access token for Returns Task < String > An access token GetAccessTokenAsync(Uri, String[]) Gets an access token for the requested resource and scope Declaration public abstract Task<string> GetAccessTokenAsync(Uri resource, string[] scopes) Parameters Uri resource Resource to request an access token for String [] scopes Scopes to request Returns Task < String > An access token"
  },
  "api/PnP.Core.Auth.OnBehalfOfAuthenticationProvider.html": {
    "href": "api/PnP.Core.Auth.OnBehalfOfAuthenticationProvider.html",
    "title": "Class OnBehalfOfAuthenticationProvider | PnP Core SDK",
    "keywords": "Class OnBehalfOfAuthenticationProvider Authentication Provider based on the OnBehalfOf flow Inheritance Object OAuthAuthenticationProvider OnBehalfOfAuthenticationProvider Inherited Members OAuthAuthenticationProvider.ConfigurationName OAuthAuthenticationProvider.ClientId OAuthAuthenticationProvider.TenantId OAuthAuthenticationProvider.DefaultAADAppId Namespace : PnP.Core.Auth Assembly : PnP.Core.Auth.dll Syntax public sealed class OnBehalfOfAuthenticationProvider : OAuthAuthenticationProvider, IAuthenticationProvider Remarks You can find further details about the On-Behalf-Of flow here: https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow Constructors OnBehalfOfAuthenticationProvider(ILogger<OAuthAuthenticationProvider>, IMsalHttpClientFactory) Public constructor leveraging DI to initialize the ILogger and IMsalHttpClientFactory interfaces Declaration public OnBehalfOfAuthenticationProvider(ILogger<OAuthAuthenticationProvider> logger, IMsalHttpClientFactory msalHttpClientFactory) Parameters ILogger < OAuthAuthenticationProvider > logger The instance of the logger service provided by DI IMsalHttpClientFactory msalHttpClientFactory The instance of the Msal Http Client Factory service provided by DI OnBehalfOfAuthenticationProvider(String, String, PnPCoreAuthenticationOnBehalfOfOptions, Func<String>) Public constructor for external consumers of the library Declaration public OnBehalfOfAuthenticationProvider(string clientId, string tenantId, PnPCoreAuthenticationOnBehalfOfOptions options, Func<string> userTokenProvider) Parameters String clientId The Client ID for the Authentication Provider String tenantId The Tenant ID for the Authentication Provider PnPCoreAuthenticationOnBehalfOfOptions options Options for the authentication provider Func < String > userTokenProvider A function providing the consumer user access token to use for the On-Behalf-Of flow OnBehalfOfAuthenticationProvider(String, String, SecureString, Func<String>) Public constructor for external consumers of the library Declaration public OnBehalfOfAuthenticationProvider(string clientId, string tenantId, SecureString clientSecret, Func<string> userTokenProvider) Parameters String clientId The Client ID for the Authentication Provider String tenantId The Tenant ID for the Authentication Provider SecureString clientSecret The Client Secret of the app Func < String > userTokenProvider A function providing the consumer user access token to use for the On-Behalf-Of flow OnBehalfOfAuthenticationProvider(String, String, StoreName, StoreLocation, String, Func<String>) Public constructor for external consumers of the library Declaration public OnBehalfOfAuthenticationProvider(string clientId, string tenantId, StoreName storeName, StoreLocation storeLocation, string thumbprint, Func<string> userTokenProvider) Parameters String clientId The Client ID for the Authentication Provider String tenantId The Tenant ID for the Authentication Provider StoreName storeName The Store Name to get the X.509 certificate from StoreLocation storeLocation The Store Location to get the X.509 certificate from String thumbprint The Thumbprint of the X.509 certificate Func < String > userTokenProvider A function providing the consumer user access token to use for the On-Behalf-Of flow Properties Certificate The X.509 Certificate to use for app authentication Declaration public X509Certificate2 Certificate { get; set; } Property Value X509Certificate2 ClientSecret The ClientSecret to authenticate the app with ClientId Declaration public SecureString ClientSecret { get; set; } Property Value SecureString UserTokenProvider A function providing the consumer user access token to use for the On-Behalf-Of flow Declaration public Func<string> UserTokenProvider { get; set; } Property Value Func < String > Methods AuthenticateRequestAsync(Uri, HttpRequestMessage) Authenticates the specified request message. Declaration public override Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) Parameters Uri resource Request uri HttpRequestMessage request The to authenticate. Returns Task The task to await. Overrides OAuthAuthenticationProvider.AuthenticateRequestAsync(Uri, HttpRequestMessage) GetAccessTokenAsync(Uri) Gets an access token for the requested resource Declaration public override Task<string> GetAccessTokenAsync(Uri resource) Parameters Uri resource Resource to request an access token for Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri) GetAccessTokenAsync(Uri, String[]) Gets an access token for the requested resource and scope Declaration public override Task<string> GetAccessTokenAsync(Uri resource, string[] scopes) Parameters Uri resource Resource to request an access token for (unused) String [] scopes Scopes to request Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri, String[])"
  },
  "api/PnP.Core.Auth.Services.AuthenticationProviderFactory.html": {
    "href": "api/PnP.Core.Auth.Services.AuthenticationProviderFactory.html",
    "title": "Class AuthenticationProviderFactory | PnP Core SDK",
    "keywords": "Class AuthenticationProviderFactory Public factory service to create IAuthenticationProvider object instances Inheritance Object AuthenticationProviderFactory Namespace : PnP.Core.Auth.Services Assembly : PnP.Core.Auth.dll Syntax public class AuthenticationProviderFactory : object, IAuthenticationProviderFactory Constructors AuthenticationProviderFactory(IOptionsMonitor<PnPCoreAuthenticationOptions>, ILogger<PnPContext>, IServiceProvider) AuthenticationProviderFactory constructor Declaration public AuthenticationProviderFactory(IOptionsMonitor<PnPCoreAuthenticationOptions> options, ILogger<PnPContext> logger, IServiceProvider serviceProvider) Parameters IOptionsMonitor < PnPCoreAuthenticationOptions > options Options to configure the AuthenticationProviderFactory ILogger < PnPContext > logger Logger for log output IServiceProvider serviceProvider DI container service Methods Create(String) Creates a new instance of IAuthenticationProvider based on a provided configuration name Declaration public IAuthenticationProvider Create(string name) Parameters String name The name of the IAuthenticationProvider configuration to use Returns IAuthenticationProvider An object that implements IAuthenticationProvider based on the provided configuration name Implements IAuthenticationProviderFactory.Create(String) CreateDefault() Creates the default instance of IAuthenticationProvider based on the configuration Declaration public IAuthenticationProvider CreateDefault() Returns IAuthenticationProvider An object that implements IAuthenticationProvider based on the configuration Implements IAuthenticationProviderFactory.CreateDefault()"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.AuthenticationProvidersOptionsConfigurator.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.AuthenticationProvidersOptionsConfigurator.html",
    "title": "Class AuthenticationProvidersOptionsConfigurator | PnP Core SDK",
    "keywords": "Class AuthenticationProvidersOptionsConfigurator Handles the configuration of PnPCoreOptions based on the AuthenticationOptions settings Inheritance Object AuthenticationProvidersOptionsConfigurator Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class AuthenticationProvidersOptionsConfigurator : IConfigureOptions<PnPCoreOptions> Constructors AuthenticationProvidersOptionsConfigurator(IOptions<PnPCoreAuthenticationOptions>, IAuthenticationProviderFactory) Default constructor Declaration public AuthenticationProvidersOptionsConfigurator(IOptions<PnPCoreAuthenticationOptions> authenticationOptions, IAuthenticationProviderFactory authenticationProviderFactory) Parameters IOptions < PnPCoreAuthenticationOptions > authenticationOptions PnPCoreAuthenticationOptions authentication options IAuthenticationProviderFactory authenticationProviderFactory Authentication factory Methods Configure(PnPCoreOptions) Process the PnPCoreOptions options Declaration public void Configure(PnPCoreOptions options) Parameters PnPCoreOptions options"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.html",
    "title": "Namespace PnP.Core.Auth.Services.Builder.Configuration | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Auth.Services.Builder.Configuration Classes AuthenticationProvidersOptionsConfigurator Handles the configuration of PnPCoreOptions based on the AuthenticationOptions settings PnPCoreAuthenticationBaseOptions Options for the DeviceCodeAuthenticationProvider PnPCoreAuthenticationCredentialConfigurationOptions Options for one configured credentials PnPCoreAuthenticationCredentialManagerOptions Options for the CredentialManagerAuthenticationProvider PnPCoreAuthenticationCredentialsConfigurationsOptions Options for configuring PnP Core SDK PnPCoreAuthenticationCredentialsOptions Defines a collection of credential settings for secure connections to the target resources PnPCoreAuthenticationDeviceCodeOptions Options for the DeviceCodeAuthenticationProvider PnPCoreAuthenticationInteractiveOptions Options for the InteractiveAuthenticationProvider PnPCoreAuthenticationOnBehalfOfOptions Options for the OnBehalfOfAuthenticationProvider PnPCoreAuthenticationOptions Options for configuring the PnP Core SDK Authentication Providers PnPCoreAuthenticationSiteOptions Options for configuring a single site in PnP Core SDK PnPCoreAuthenticationSitesOptions Options for configuring PnP Core SDK PnPCoreAuthenticationUsernamePasswordOptions Options for the UsernamePasswordAuthenticationProvider PnPCoreAuthenticationX509CertificateOptions Options for the X509CertificateAuthenticationProvider"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationBaseOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationBaseOptions.html",
    "title": "Class PnPCoreAuthenticationBaseOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationBaseOptions Options for the DeviceCodeAuthenticationProvider Inheritance Object PnPCoreAuthenticationBaseOptions PnPCoreAuthenticationCredentialManagerOptions PnPCoreAuthenticationDeviceCodeOptions PnPCoreAuthenticationInteractiveOptions PnPCoreAuthenticationOnBehalfOfOptions PnPCoreAuthenticationUsernamePasswordOptions PnPCoreAuthenticationX509CertificateOptions Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public abstract class PnPCoreAuthenticationBaseOptions : object Properties AuthorityUri The Authority URI for the authentication flow Declaration public Uri AuthorityUri { get; set; } Property Value Uri RedirectUri The Redirect URI for the authentication flow Declaration public Uri RedirectUri { get; set; } Property Value Uri"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationCredentialConfigurationOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationCredentialConfigurationOptions.html",
    "title": "Class PnPCoreAuthenticationCredentialConfigurationOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationCredentialConfigurationOptions Options for one configured credentials Inheritance Object PnPCoreAuthenticationCredentialConfigurationOptions Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationCredentialConfigurationOptions : object Properties ClientId The ClientId of the application to use for authentication Declaration public string ClientId { get; set; } Property Value String CredentialManager The options for the Credential Manager Authentication Provider Declaration public PnPCoreAuthenticationCredentialManagerOptions CredentialManager { get; set; } Property Value PnPCoreAuthenticationCredentialManagerOptions DeviceCode The options for the Device Code Provider Declaration public PnPCoreAuthenticationDeviceCodeOptions DeviceCode { get; set; } Property Value PnPCoreAuthenticationDeviceCodeOptions Environment The Microsoft 365 cloud environment that's used Declaration public Microsoft365Environment? Environment { get; set; } Property Value Nullable < Microsoft365Environment > Interactive The options for the Interactive Authentication Provider Declaration public PnPCoreAuthenticationInteractiveOptions Interactive { get; set; } Property Value PnPCoreAuthenticationInteractiveOptions OnBehalfOf The options for the On Behalf Of Authentication Provider Declaration public PnPCoreAuthenticationOnBehalfOfOptions OnBehalfOf { get; set; } Property Value PnPCoreAuthenticationOnBehalfOfOptions TenantId The Tenant ID for the application, can be null Declaration public string TenantId { get; set; } Property Value String UsernamePassword The options for the Username and Password Authentication Provider Declaration public PnPCoreAuthenticationUsernamePasswordOptions UsernamePassword { get; set; } Property Value PnPCoreAuthenticationUsernamePasswordOptions X509Certificate The options for the X509 Certificate Authentication Provider Declaration public PnPCoreAuthenticationX509CertificateOptions X509Certificate { get; set; } Property Value PnPCoreAuthenticationX509CertificateOptions"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationCredentialManagerOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationCredentialManagerOptions.html",
    "title": "Class PnPCoreAuthenticationCredentialManagerOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationCredentialManagerOptions Options for the CredentialManagerAuthenticationProvider Inheritance Object PnPCoreAuthenticationBaseOptions PnPCoreAuthenticationCredentialManagerOptions Inherited Members PnPCoreAuthenticationBaseOptions.RedirectUri PnPCoreAuthenticationBaseOptions.AuthorityUri Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationCredentialManagerOptions : PnPCoreAuthenticationBaseOptions Properties CredentialManagerName The name of the Windows Credential Manager settings to use Declaration public string CredentialManagerName { get; set; } Property Value String"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationCredentialsConfigurationsOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationCredentialsConfigurationsOptions.html",
    "title": "Class PnPCoreAuthenticationCredentialsConfigurationsOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationCredentialsConfigurationsOptions Options for configuring PnP Core SDK Inheritance Object PnPCoreAuthenticationCredentialsConfigurationsOptions Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationCredentialsConfigurationsOptions : Dictionary<string, PnPCoreAuthenticationCredentialConfigurationOptions>"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationCredentialsOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationCredentialsOptions.html",
    "title": "Class PnPCoreAuthenticationCredentialsOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationCredentialsOptions Defines a collection of credential settings for secure connections to the target resources Inheritance Object PnPCoreAuthenticationCredentialsOptions Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationCredentialsOptions : object Properties Configurations The credentials options Declaration public PnPCoreAuthenticationCredentialsConfigurationsOptions Configurations { get; } Property Value PnPCoreAuthenticationCredentialsConfigurationsOptions DefaultConfiguration Defines the name of the default configuration Declaration public string DefaultConfiguration { get; set; } Property Value String"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationDeviceCodeOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationDeviceCodeOptions.html",
    "title": "Class PnPCoreAuthenticationDeviceCodeOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationDeviceCodeOptions Options for the DeviceCodeAuthenticationProvider Inheritance Object PnPCoreAuthenticationBaseOptions PnPCoreAuthenticationDeviceCodeOptions Inherited Members PnPCoreAuthenticationBaseOptions.RedirectUri PnPCoreAuthenticationBaseOptions.AuthorityUri Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationDeviceCodeOptions : PnPCoreAuthenticationBaseOptions"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationInteractiveOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationInteractiveOptions.html",
    "title": "Class PnPCoreAuthenticationInteractiveOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationInteractiveOptions Options for the InteractiveAuthenticationProvider Inheritance Object PnPCoreAuthenticationBaseOptions PnPCoreAuthenticationInteractiveOptions Inherited Members PnPCoreAuthenticationBaseOptions.RedirectUri PnPCoreAuthenticationBaseOptions.AuthorityUri Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationInteractiveOptions : PnPCoreAuthenticationBaseOptions"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationOnBehalfOfOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationOnBehalfOfOptions.html",
    "title": "Class PnPCoreAuthenticationOnBehalfOfOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationOnBehalfOfOptions Options for the OnBehalfOfAuthenticationProvider Inheritance Object PnPCoreAuthenticationBaseOptions PnPCoreAuthenticationOnBehalfOfOptions Inherited Members PnPCoreAuthenticationBaseOptions.RedirectUri PnPCoreAuthenticationBaseOptions.AuthorityUri Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationOnBehalfOfOptions : PnPCoreAuthenticationBaseOptions Properties ClientSecret The ClientSecret to authenticate the app with ClientId Declaration public string ClientSecret { get; set; } Property Value String StoreLocation The location in the certificate store Declaration public StoreLocation StoreLocation { get; set; } Property Value StoreLocation StoreName The name of the certificate store Declaration public StoreName StoreName { get; set; } Property Value StoreName Thumbprint The thumbprint of the certificate Declaration public string Thumbprint { get; set; } Property Value String"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationOptions.html",
    "title": "Class PnPCoreAuthenticationOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationOptions Options for configuring the PnP Core SDK Authentication Providers Inheritance Object PnPCoreAuthenticationOptions Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationOptions : object Properties Credentials The credential options Declaration public PnPCoreAuthenticationCredentialsOptions Credentials { get; set; } Property Value PnPCoreAuthenticationCredentialsOptions Environment The Microsoft 365 cloud environment that's used Declaration public string Environment { get; set; } Property Value String Sites The sites options Declaration public PnPCoreAuthenticationSitesOptions Sites { get; } Property Value PnPCoreAuthenticationSitesOptions"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationSiteOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationSiteOptions.html",
    "title": "Class PnPCoreAuthenticationSiteOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationSiteOptions Options for configuring a single site in PnP Core SDK Inheritance Object PnPCoreAuthenticationSiteOptions Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationSiteOptions : object Properties AuthenticationProviderName The Authentication Provider name Declaration public string AuthenticationProviderName { get; set; } Property Value String"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationSitesOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationSitesOptions.html",
    "title": "Class PnPCoreAuthenticationSitesOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationSitesOptions Options for configuring PnP Core SDK Inheritance Object PnPCoreAuthenticationSitesOptions Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationSitesOptions : Dictionary<string, PnPCoreAuthenticationSiteOptions>"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationUsernamePasswordOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationUsernamePasswordOptions.html",
    "title": "Class PnPCoreAuthenticationUsernamePasswordOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationUsernamePasswordOptions Options for the UsernamePasswordAuthenticationProvider Inheritance Object PnPCoreAuthenticationBaseOptions PnPCoreAuthenticationUsernamePasswordOptions Inherited Members PnPCoreAuthenticationBaseOptions.RedirectUri PnPCoreAuthenticationBaseOptions.AuthorityUri Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationUsernamePasswordOptions : PnPCoreAuthenticationBaseOptions Properties Password The password for authentication Declaration public string Password { get; set; } Property Value String Username The username for authentication Declaration public string Username { get; set; } Property Value String"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationX509CertificateOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationX509CertificateOptions.html",
    "title": "Class PnPCoreAuthenticationX509CertificateOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationX509CertificateOptions Options for the X509CertificateAuthenticationProvider Inheritance Object PnPCoreAuthenticationBaseOptions PnPCoreAuthenticationX509CertificateOptions Inherited Members PnPCoreAuthenticationBaseOptions.RedirectUri PnPCoreAuthenticationBaseOptions.AuthorityUri Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationX509CertificateOptions : PnPCoreAuthenticationBaseOptions Properties Certificate Certificate can be set directly, if required Declaration public X509Certificate2 Certificate { get; set; } Property Value X509Certificate2 StoreLocation The location in the certificate store Declaration public StoreLocation StoreLocation { get; set; } Property Value StoreLocation StoreName The name of the certificate store Declaration public StoreName StoreName { get; set; } Property Value StoreName Thumbprint The thumbprint of the certificate Declaration public string Thumbprint { get; set; } Property Value String"
  },
  "api/PnP.Core.Auth.Services.html": {
    "href": "api/PnP.Core.Auth.Services.html",
    "title": "Namespace PnP.Core.Auth.Services | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Auth.Services Classes AuthenticationProviderFactory Public factory service to create IAuthenticationProvider object instances Interfaces IAuthenticationProviderFactory Public interface for the injectable service to create instances of the interface IAuthenticationProvider IAuthenticationProviderOptions Basic interface for all the Authentication Provider configurations"
  },
  "api/PnP.Core.Auth.Services.Http.html": {
    "href": "api/PnP.Core.Auth.Services.Http.html",
    "title": "Namespace PnP.Core.Auth.Services.Http | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Auth.Services.Http Classes MsalHttpClientFactory Factory responsible for creating HttpClient as .NET recommends to use a single instance of HttpClient."
  },
  "api/PnP.Core.Auth.Services.Http.MsalHttpClientFactory.html": {
    "href": "api/PnP.Core.Auth.Services.Http.MsalHttpClientFactory.html",
    "title": "Class MsalHttpClientFactory | PnP Core SDK",
    "keywords": "Class MsalHttpClientFactory Factory responsible for creating HttpClient as .NET recommends to use a single instance of HttpClient. Inheritance Object MsalHttpClientFactory Namespace : PnP.Core.Auth.Services.Http Assembly : PnP.Core.Auth.dll Syntax public sealed class MsalHttpClientFactory : IMsalHttpClientFactory Constructors MsalHttpClientFactory(IHttpClientFactory) Default Constructor Declaration public MsalHttpClientFactory(IHttpClientFactory httpClientFactory) Parameters IHttpClientFactory httpClientFactory Client factory that will handle the creation Methods GetHttpClient() Returns the configured Declaration public HttpClient GetHttpClient() Returns HttpClient The configured"
  },
  "api/PnP.Core.Auth.Services.IAuthenticationProviderFactory.html": {
    "href": "api/PnP.Core.Auth.Services.IAuthenticationProviderFactory.html",
    "title": "Interface IAuthenticationProviderFactory | PnP Core SDK",
    "keywords": "Interface IAuthenticationProviderFactory Public interface for the injectable service to create instances of the interface IAuthenticationProvider Namespace : PnP.Core.Auth.Services Assembly : PnP.Core.Auth.dll Syntax public interface IAuthenticationProviderFactory Methods Create(String) Creates a new instance of IAuthenticationProvider based on a provided configuration name Declaration IAuthenticationProvider Create(string name) Parameters String name The name of the IAuthenticationProvider configuration to use Returns IAuthenticationProvider An object that implements IAuthenticationProvider based on the provided configuration name CreateDefault() Creates the default instance of IAuthenticationProvider based on the configuration Declaration IAuthenticationProvider CreateDefault() Returns IAuthenticationProvider An object that implements IAuthenticationProvider based on the configuration"
  },
  "api/PnP.Core.Auth.Services.IAuthenticationProviderOptions.html": {
    "href": "api/PnP.Core.Auth.Services.IAuthenticationProviderOptions.html",
    "title": "Interface IAuthenticationProviderOptions | PnP Core SDK",
    "keywords": "Interface IAuthenticationProviderOptions Basic interface for all the Authentication Provider configurations Namespace : PnP.Core.Auth.Services Assembly : PnP.Core.Auth.dll Syntax public interface IAuthenticationProviderOptions Properties AuthenticationProviderType Defines the type of the IAuthenticationProvider to create Declaration Type AuthenticationProviderType { get; } Property Value Type ClientId The ClientId of the application to use for authentication Declaration string ClientId { get; set; } Property Value String TenantId The Tenant ID for the application, can be \"organizations\" for multi-tenant applications Declaration string TenantId { get; set; } Property Value String"
  },
  "api/PnP.Core.Auth.UsernamePasswordAuthenticationProvider.html": {
    "href": "api/PnP.Core.Auth.UsernamePasswordAuthenticationProvider.html",
    "title": "Class UsernamePasswordAuthenticationProvider | PnP Core SDK",
    "keywords": "Class UsernamePasswordAuthenticationProvider Authentication Provider that uses a Resource Owner Password Credentials (ROCP) credential flow Inheritance Object OAuthAuthenticationProvider UsernamePasswordAuthenticationProvider Inherited Members OAuthAuthenticationProvider.ConfigurationName OAuthAuthenticationProvider.ClientId OAuthAuthenticationProvider.TenantId OAuthAuthenticationProvider.DefaultAADAppId Namespace : PnP.Core.Auth Assembly : PnP.Core.Auth.dll Syntax public sealed class UsernamePasswordAuthenticationProvider : OAuthAuthenticationProvider, IAuthenticationProvider Remarks You can find further details about ROPC here: https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth-ropc Constructors UsernamePasswordAuthenticationProvider(ILogger<OAuthAuthenticationProvider>, IMsalHttpClientFactory) Public constructor leveraging DI to initialize the ILogger and IMsalHttpClientFactory interfaces Declaration public UsernamePasswordAuthenticationProvider(ILogger<OAuthAuthenticationProvider> logger, IMsalHttpClientFactory msalHttpClientFactory) Parameters ILogger < OAuthAuthenticationProvider > logger The instance of the logger service provided by DI IMsalHttpClientFactory msalHttpClientFactory The instance of the Msal Http Client Factory service provided by DI UsernamePasswordAuthenticationProvider(String, String, PnPCoreAuthenticationUsernamePasswordOptions) Public constructor for external consumers of the library Declaration public UsernamePasswordAuthenticationProvider(string clientId, string tenantId, PnPCoreAuthenticationUsernamePasswordOptions options) Parameters String clientId The Client ID for the Authentication Provider String tenantId The Tenant ID for the Authentication Provider PnPCoreAuthenticationUsernamePasswordOptions options Options for the authentication provider UsernamePasswordAuthenticationProvider(String, String, String, SecureString) Public constructor for external consumers of the library Declaration public UsernamePasswordAuthenticationProvider(string clientId, string tenantId, string username, SecureString password) Parameters String clientId The Client ID for the Authentication Provider String tenantId The Tenant ID for the Authentication Provider String username The Username for authentication SecureString password The Password for authentication Properties Password The password for authenticating Declaration public SecureString Password { get; set; } Property Value SecureString Username The username for authenticating Declaration public string Username { get; set; } Property Value String Methods AuthenticateRequestAsync(Uri, HttpRequestMessage) Authenticates the specified request message. Declaration public override Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) Parameters Uri resource Request uri HttpRequestMessage request The to authenticate. Returns Task The task to await. Overrides OAuthAuthenticationProvider.AuthenticateRequestAsync(Uri, HttpRequestMessage) GetAccessTokenAsync(Uri) Gets an access token for the requested resource Declaration public override Task<string> GetAccessTokenAsync(Uri resource) Parameters Uri resource Resource to request an access token for Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri) GetAccessTokenAsync(Uri, String[]) Gets an access token for the requested resource and scope Declaration public override Task<string> GetAccessTokenAsync(Uri resource, string[] scopes) Parameters Uri resource Resource to request an access token for (unused) String [] scopes Scopes to request Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri, String[])"
  },
  "api/PnP.Core.Auth.X509CertificateAuthenticationProvider.html": {
    "href": "api/PnP.Core.Auth.X509CertificateAuthenticationProvider.html",
    "title": "Class X509CertificateAuthenticationProvider | PnP Core SDK",
    "keywords": "Class X509CertificateAuthenticationProvider Authentication Provider based on the X.509 Certificate Inheritance Object OAuthAuthenticationProvider X509CertificateAuthenticationProvider Inherited Members OAuthAuthenticationProvider.ConfigurationName OAuthAuthenticationProvider.ClientId OAuthAuthenticationProvider.TenantId OAuthAuthenticationProvider.DefaultAADAppId Namespace : PnP.Core.Auth Assembly : PnP.Core.Auth.dll Syntax public sealed class X509CertificateAuthenticationProvider : OAuthAuthenticationProvider, IAuthenticationProvider Constructors X509CertificateAuthenticationProvider(ILogger<OAuthAuthenticationProvider>, IMsalHttpClientFactory) Public constructor leveraging DI to initialize the ILogger and IMsalHttpClientFactory interfaces Declaration public X509CertificateAuthenticationProvider(ILogger<OAuthAuthenticationProvider> logger, IMsalHttpClientFactory msalHttpClientFactory) Parameters ILogger < OAuthAuthenticationProvider > logger The instance of the logger service provided by DI IMsalHttpClientFactory msalHttpClientFactory The instance of the Msal Http Client Factory service provided by DI X509CertificateAuthenticationProvider(String, String, PnPCoreAuthenticationX509CertificateOptions) Public constructor for external consumers of the library Declaration public X509CertificateAuthenticationProvider(string clientId, string tenantId, PnPCoreAuthenticationX509CertificateOptions options) Parameters String clientId The Client ID for the Authentication Provider String tenantId The Tenant ID for the Authentication Provider PnPCoreAuthenticationX509CertificateOptions options Options for the authentication provider X509CertificateAuthenticationProvider(String, String, StoreName, StoreLocation, String) Public constructor for external consumers of the library Declaration public X509CertificateAuthenticationProvider(string clientId, string tenantId, StoreName storeName, StoreLocation storeLocation, string thumbprint) Parameters String clientId The Client ID for the Authentication Provider String tenantId The Tenant ID for the Authentication Provider StoreName storeName The Store Name to get the X.509 certificate from StoreLocation storeLocation The Store Location to get the X.509 certificate from String thumbprint The Thumbprint of the X.509 certificate X509CertificateAuthenticationProvider(String, String, X509Certificate2) Public constructor for external consumers of the library Declaration public X509CertificateAuthenticationProvider(string clientId, string tenantId, X509Certificate2 certificate) Parameters String clientId The Client ID for the Authentication Provider String tenantId The Tenant ID for the Authentication Provider X509Certificate2 certificate The X.509 certificate to use for authentication Properties Certificate The X.509 Certificate to use for app authentication Declaration public X509Certificate2 Certificate { get; set; } Property Value X509Certificate2 Methods AuthenticateRequestAsync(Uri, HttpRequestMessage) Authenticates the specified request message. Declaration public override Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) Parameters Uri resource Request uri HttpRequestMessage request The to authenticate. Returns Task The task to await. Overrides OAuthAuthenticationProvider.AuthenticateRequestAsync(Uri, HttpRequestMessage) GetAccessTokenAsync(Uri) Gets an access token for the requested resource Declaration public override Task<string> GetAccessTokenAsync(Uri resource) Parameters Uri resource Resource to request an access token for Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri) GetAccessTokenAsync(Uri, String[]) Gets an access token for the requested resource and scope Declaration public override Task<string> GetAccessTokenAsync(Uri resource, string[] scopes) Parameters Uri resource Resource to request an access token for (unused) String [] scopes Scopes to request Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri, String[])"
  },
  "api/PnP.Core.AuthenticationError.html": {
    "href": "api/PnP.Core.AuthenticationError.html",
    "title": "Class AuthenticationError | PnP Core SDK",
    "keywords": "Class AuthenticationError Error class for authentication errors Inheritance Object BaseError AuthenticationError Inherited Members BaseError.Type BaseError.PnPCorrelationId BaseError.AdditionalData BaseError.AddAdditionalData(String, Object) Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class AuthenticationError : BaseError Constructors AuthenticationError(ErrorType, JsonElement) Constructs an AuthenticationError instance Declaration public AuthenticationError(ErrorType type, JsonElement error) Parameters ErrorType type Type of the error JsonElement error Error content as AuthenticationError(ErrorType, String) Constructs an AuthenticationError instance Declaration public AuthenticationError(ErrorType type, string error) Parameters ErrorType type Type of the error String error Error content as Properties Code Error code Declaration public string Code { get; } Property Value String CorrelationId Correlation id Declaration public Guid CorrelationId { get; } Property Value Guid ErrorCodes List of returned error codes Declaration public List<long> ErrorCodes { get; } Property Value List < Int64 > Message Error message Declaration public string Message { get; } Property Value String TimeStamp Time the error happened Declaration public string TimeStamp { get; } Property Value String TraceId Trace id Declaration public Guid TraceId { get; } Property Value Guid Methods ToString() Outputs a AuthenticationError to a string representation Declaration public override string ToString() Returns String String representation"
  },
  "api/PnP.Core.AuthenticationException.html": {
    "href": "api/PnP.Core.AuthenticationException.html",
    "title": "Class AuthenticationException | PnP Core SDK",
    "keywords": "Class AuthenticationException Authentication exception Inheritance Object PnPException AuthenticationException Inherited Members PnPException.Error Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class AuthenticationException : PnPException Constructors AuthenticationException(ErrorType, String) AuthenticationException constructor Declaration public AuthenticationException(ErrorType type, string message) Parameters ErrorType type Type of error String message Error message AuthenticationException(ErrorType, String, Exception) AuthenticationException constructor Declaration public AuthenticationException(ErrorType type, string message, Exception innerException) Parameters ErrorType type Type of error String message Error message Exception innerException Inner exception (if any) Methods ToString() Outputs a AuthenticationException to a string representation Declaration public override string ToString() Returns String String representation"
  },
  "api/PnP.Core.BaseError.html": {
    "href": "api/PnP.Core.BaseError.html",
    "title": "Class BaseError | PnP Core SDK",
    "keywords": "Class BaseError Base error information Inheritance Object BaseError AuthenticationError ClientError ServiceError Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public abstract class BaseError : object Constructors BaseError(ErrorType) Default base constructor/> Declaration public BaseError(ErrorType type) Parameters ErrorType type Type of the error Properties AdditionalData Additional data linked to an error Declaration public IDictionary<string, object> AdditionalData { get; } Property Value IDictionary < String , Object > PnPCorrelationId Correlation for a PnP Core SDK operation Declaration public Guid PnPCorrelationId { get; } Property Value Guid Type ErrorType of the error Declaration public ErrorType Type { get; } Property Value ErrorType Methods AddAdditionalData(String, Object) Adds additional error data to this error as property/value pairs Declaration protected void AddAdditionalData(string propertyName, object propertyValue) Parameters String propertyName Property to add Object propertyValue Value to add"
  },
  "api/PnP.Core.ClientError.html": {
    "href": "api/PnP.Core.ClientError.html",
    "title": "Class ClientError | PnP Core SDK",
    "keywords": "Class ClientError Information about the client error Inheritance Object BaseError ClientError Inherited Members BaseError.Type BaseError.PnPCorrelationId BaseError.AdditionalData BaseError.AddAdditionalData(String, Object) Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class ClientError : BaseError Constructors ClientError(ErrorType, String) ClientError constructor, creates a ClientError for the provided error type and message Declaration public ClientError(ErrorType type, string message) Parameters ErrorType type Type of the error String message Error message Properties Message Error message that was linked to the client error Declaration public string Message { get; } Property Value String"
  },
  "api/PnP.Core.ClientException.html": {
    "href": "api/PnP.Core.ClientException.html",
    "title": "Class ClientException | PnP Core SDK",
    "keywords": "Class ClientException PnP Client exception Inheritance Object PnPException ClientException Inherited Members PnPException.Error Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class ClientException : PnPException Constructors ClientException(ErrorType, String) ClientException constructor Declaration public ClientException(ErrorType type, string message) Parameters ErrorType type Type of the error String message Error message ClientException(ErrorType, String, Exception) ClientException constructor Declaration public ClientException(ErrorType type, string message, Exception innerException) Parameters ErrorType type Type of the error String message Error message Exception innerException Inner exception to link to this exception Methods ToString() Outputs a ClientException to a string representation Declaration public override string ToString() Returns String String representation"
  },
  "api/PnP.Core.CsomError.html": {
    "href": "api/PnP.Core.CsomError.html",
    "title": "Class CsomError | PnP Core SDK",
    "keywords": "Class CsomError Csom service error Inheritance Object BaseError ServiceError CsomError Inherited Members ServiceError.HttpResponseCode ServiceError.Message ServiceError.ClientRequestId ServiceError.Code BaseError.Type BaseError.PnPCorrelationId BaseError.AdditionalData BaseError.AddAdditionalData(String, Object) Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class CsomError : ServiceError Constructors CsomError(ErrorType, Int32, JsonElement) Default constructor for the SharePointRestError error Declaration public CsomError(ErrorType type, int httpResponseCode, JsonElement errorJson) Parameters ErrorType type ErrorType type of the error Int32 httpResponseCode Http response code of the service request that failed JsonElement errorJson Json containing the error information Properties ServerErrorCode SharePoint server error code Declaration public long ServerErrorCode { get; } Property Value Int64 Methods ToString() Outputs a CsomError to a string representation Declaration public override string ToString() Returns String String representation"
  },
  "api/PnP.Core.CsomServiceException.html": {
    "href": "api/PnP.Core.CsomServiceException.html",
    "title": "Class CsomServiceException | PnP Core SDK",
    "keywords": "Class CsomServiceException CSOM Service exception Inheritance Object PnPException ServiceException CsomServiceException Inherited Members PnPException.Error Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class CsomServiceException : ServiceException Constructors CsomServiceException(ErrorType, Int32, JsonElement) Creates a CsomServiceException using the provided error type, http response code and CSOM request response Declaration public CsomServiceException(ErrorType type, int httpResponseCode, JsonElement response) Parameters ErrorType type Type of the error Int32 httpResponseCode Http response code of the executed CSOM request JsonElement response JSON response of the executed CSOM request Methods ToString() Outputs a CsomServiceException to a string representation Declaration public override string ToString() Returns String String representation"
  },
  "api/PnP.Core.ErrorType.html": {
    "href": "api/PnP.Core.ErrorType.html",
    "title": "Enum ErrorType | PnP Core SDK",
    "keywords": "Enum ErrorType List of possible errors that can be thrown Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public enum ErrorType : int AzureADError Authentication call to Azure AD failed CollectionNotLoaded Collection needs to be loaded once before you can use the paging methods for paged data retrieval ConfigurationError There's an issue in the provided configuration data CsomServiceError CSOM request returned an error GraphBetaNotAllowed Making a Graph Beta call is not allowed. See usage docs to learn more GraphServiceError Graph service request returned an error InstanceWasDeleted This model instance was deleted, you can't use it anymore InvalidParameters Invalid parameters are sent it for a request LinqError Something went wrong with issuing a linq query MissingAddApiHandler Adding an item to Microsoft 365 using 'AddAsync' requires that the added model class has an AddApiHandler configured. See contribution docs to learn more ModelMetadataIncorrect There's incomplete model metadata configured. See contribution docs to learn more. OfflineDataError There's an issue with the available offline test data PropertyNotLoaded The property you want to use was not yet loaded, first request it before using it SharePointRestServiceError SharePoint REST request returned an error TeamsAsyncOperationError Something went wrong when doing an Teams async operation TooManyBatchRetries Too many retries of a request in a Graph batch happened TooManyRetries Too many retries of an http request happened UnexpectedMappingType The payload to map to object has an unexpected type UnresolvedTokens The API call still contains unresolved tokens Unsupported Unsupported action UnsupportedViaBatch The requests in this batch are not vald"
  },
  "api/PnP.Core.html": {
    "href": "api/PnP.Core.html",
    "title": "Namespace PnP.Core | PnP Core SDK",
    "keywords": "Namespace PnP.Core Classes AuthenticationError Error class for authentication errors AuthenticationException Authentication exception BaseError Base error information ClientError Information about the client error ClientException PnP Client exception CsomError Csom service error CsomServiceException CSOM Service exception MicrosoftGraphError Microsoft Graph service error MicrosoftGraphServiceException Microsoft Graph Service exception PnPException Base class for the pnp core sdk exceptions ServiceError Error information for a service error ServiceException Abstract class representing service errors SharePointRestError SharePoint Rest service error SharePointRestServiceException Microsoft SharePoint REST Service exception Enums ErrorType List of possible errors that can be thrown"
  },
  "api/PnP.Core.MicrosoftGraphError.html": {
    "href": "api/PnP.Core.MicrosoftGraphError.html",
    "title": "Class MicrosoftGraphError | PnP Core SDK",
    "keywords": "Class MicrosoftGraphError Microsoft Graph service error Inheritance Object BaseError ServiceError MicrosoftGraphError Inherited Members ServiceError.HttpResponseCode ServiceError.Message ServiceError.ClientRequestId ServiceError.Code BaseError.Type BaseError.PnPCorrelationId BaseError.AdditionalData BaseError.AddAdditionalData(String, Object) Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class MicrosoftGraphError : ServiceError Constructors MicrosoftGraphError(ErrorType, Int32, JsonElement) Default constructor for the MicrosoftGraphError error Declaration public MicrosoftGraphError(ErrorType type, int httpResponseCode, JsonElement error) Parameters ErrorType type ErrorType type of the error Int32 httpResponseCode Http response code of the service request that failed JsonElement error holding the json data of the service error MicrosoftGraphError(ErrorType, Int32, String) Default constructor for the MicrosoftGraphError error Declaration public MicrosoftGraphError(ErrorType type, int httpResponseCode, string response) Parameters ErrorType type ErrorType type of the error Int32 httpResponseCode Http response code of the service request that failed String response String holding the information about the failed request Methods ToString() Outputs a MicrosoftGraphError to a string representation Declaration public override string ToString() Returns String String representation"
  },
  "api/PnP.Core.MicrosoftGraphServiceException.html": {
    "href": "api/PnP.Core.MicrosoftGraphServiceException.html",
    "title": "Class MicrosoftGraphServiceException | PnP Core SDK",
    "keywords": "Class MicrosoftGraphServiceException Microsoft Graph Service exception Inheritance Object PnPException ServiceException MicrosoftGraphServiceException Inherited Members PnPException.Error Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class MicrosoftGraphServiceException : ServiceException Constructors MicrosoftGraphServiceException(ErrorType, Int32, JsonElement) Creates a MicrosoftGraphServiceException using the provided error type, http response code and request response Declaration public MicrosoftGraphServiceException(ErrorType type, int httpResponseCode, JsonElement error) Parameters ErrorType type Type of the error Int32 httpResponseCode Http response code of the executed Graph request JsonElement error Json error coming from the executed Graph request MicrosoftGraphServiceException(ErrorType, Int32, String) Creates a MicrosoftGraphServiceException using the provided error type, http response code and request response Declaration public MicrosoftGraphServiceException(ErrorType type, int httpResponseCode, string response) Parameters ErrorType type Type of the error Int32 httpResponseCode Http response code of the executed Graph request String response Response of the executed Graph request Methods ToString() Outputs a MicrosoftGraphServiceException to a string representation Declaration public override string ToString() Returns String String representation"
  },
  "api/PnP.Core.Model.DataModelCollectionLoadExtensions.html": {
    "href": "api/PnP.Core.Model.DataModelCollectionLoadExtensions.html",
    "title": "Class DataModelCollectionLoadExtensions | PnP Core SDK",
    "keywords": "Class DataModelCollectionLoadExtensions Extension methods for IDataModelCollectionLoad<TModel> Inheritance Object DataModelCollectionLoadExtensions Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public static class DataModelCollectionLoadExtensions : object Methods Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) Loads the list from the remote data source, eventually selecting custom properties or using a default set of properties Declaration public static void Load<TModel>(this IDataModelCollectionLoad<TModel> dataModelLoad, params Expression<Func<TModel, object>>[] expressions) Parameters IDataModelCollectionLoad <TModel> dataModelLoad Expression < Func <TModel, Object >>[] expressions The properties to select Type Parameters TModel LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) Batches the load of the list from the remote data source, eventually selecting custom properties or using a default set of properties Declaration public static IBatchResult LoadBatch<TModel>(this IDataModelCollectionLoad<TModel> dataModelLoad, params Expression<Func<TModel, object>>[] expressions) Parameters IDataModelCollectionLoad <TModel> dataModelLoad Expression < Func <TModel, Object >>[] expressions The properties to select Returns IBatchResult The Domain Model object Type Parameters TModel LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) Batches the load of the list from the remote data source, eventually selecting custom properties or using a default set of properties Declaration public static IBatchResult LoadBatch<TModel>(this IDataModelCollectionLoad<TModel> dataModelLoad, Batch batch, params Expression<Func<TModel, object>>[] expressions) Parameters IDataModelCollectionLoad <TModel> dataModelLoad Batch batch Batch add this request to Expression < Func <TModel, Object >>[] expressions The properties to select Returns IBatchResult The Domain Model object Type Parameters TModel LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) Batches the load of the list from the remote data source, eventually selecting custom properties or using a default set of properties Declaration public static Task<IBatchResult> LoadBatchAsync<TModel>(this IDataModelCollectionLoad<TModel> dataModelLoad, params Expression<Func<TModel, object>>[] expressions) Parameters IDataModelCollectionLoad <TModel> dataModelLoad Expression < Func <TModel, Object >>[] expressions The properties to select Returns Task < IBatchResult > The Domain Model object Type Parameters TModel LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) Batches the load of the list from the remote data source, eventually selecting custom properties or using a default set of properties Declaration public static Task<IBatchResult> LoadBatchAsync<TModel>(this IDataModelCollectionLoad<TModel> dataModelLoad, Batch batch, params Expression<Func<TModel, object>>[] expressions) Parameters IDataModelCollectionLoad <TModel> dataModelLoad Batch batch Batch add this request to Expression < Func <TModel, Object >>[] expressions The properties to select Returns Task < IBatchResult > The Domain Model object Type Parameters TModel"
  },
  "api/PnP.Core.Model.DataModelGetExtensions.html": {
    "href": "api/PnP.Core.Model.DataModelGetExtensions.html",
    "title": "Class DataModelGetExtensions | PnP Core SDK",
    "keywords": "Class DataModelGetExtensions Extension methods for PnP.Core.Model.IDataModelProcess Inheritance Object DataModelGetExtensions Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public static class DataModelGetExtensions : object Methods Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) Retrieves a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration public static TModel Get<TModel>(this IDataModelGet<TModel> dataModelGet, params Expression<Func<TModel, object>>[] expressions) Parameters IDataModelGet <TModel> dataModelGet Expression < Func <TModel, Object >>[] expressions The properties to select Returns TModel The Domain Model object Type Parameters TModel GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration public static IBatchSingleResult<TModel> GetBatch<TModel>(this IDataModelGet<TModel> dataModelGet, params Expression<Func<TModel, object>>[] expressions) Parameters IDataModelGet <TModel> dataModelGet Expression < Func <TModel, Object >>[] expressions The properties to select Returns IBatchSingleResult <TModel> The Domain Model object Type Parameters TModel GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration public static IBatchSingleResult<TModel> GetBatch<TModel>(this IDataModelGet<TModel> dataModelGet, Batch batch, params Expression<Func<TModel, object>>[] expressions) Parameters IDataModelGet <TModel> dataModelGet Batch batch Batch add this request to Expression < Func <TModel, Object >>[] expressions The properties to select Returns IBatchSingleResult <TModel> The Domain Model object Type Parameters TModel GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration public static Task<IBatchSingleResult<TModel>> GetBatchAsync<TModel>(this IDataModelGet<TModel> dataModelGet, params Expression<Func<TModel, object>>[] expressions) Parameters IDataModelGet <TModel> dataModelGet Expression < Func <TModel, Object >>[] expressions The properties to select Returns Task < IBatchSingleResult <TModel>> The Domain Model object Type Parameters TModel GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration public static Task<IBatchSingleResult<TModel>> GetBatchAsync<TModel>(this IDataModelGet<TModel> dataModelGet, Batch batch, params Expression<Func<TModel, object>>[] expressions) Parameters IDataModelGet <TModel> dataModelGet Batch batch Batch add this request to Expression < Func <TModel, Object >>[] expressions The properties to select Returns Task < IBatchSingleResult <TModel>> The Domain Model object Type Parameters TModel"
  },
  "api/PnP.Core.Model.DataModelLoadExtensions.html": {
    "href": "api/PnP.Core.Model.DataModelLoadExtensions.html",
    "title": "Class DataModelLoadExtensions | PnP Core SDK",
    "keywords": "Class DataModelLoadExtensions Extension methods for PnP.Core.Model.IDataModelLoad Inheritance Object DataModelLoadExtensions Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public static class DataModelLoadExtensions : object Methods Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) Loads a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration public static void Load<TModel>(this IDataModelLoad<TModel> dataModelLoad, params Expression<Func<TModel, object>>[] expressions) Parameters IDataModelLoad <TModel> dataModelLoad Expression < Func <TModel, Object >>[] expressions The properties to select Type Parameters TModel LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) Batches the load of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration public static IBatchResult LoadBatch<TModel>(this IDataModelLoad<TModel> dataModelLoad, params Expression<Func<TModel, object>>[] expressions) Parameters IDataModelLoad <TModel> dataModelLoad Expression < Func <TModel, Object >>[] expressions The properties to select Returns IBatchResult The Domain Model object Type Parameters TModel LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) Batches the load of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration public static IBatchResult LoadBatch<TModel>(this IDataModelLoad<TModel> dataModelLoad, Batch batch, params Expression<Func<TModel, object>>[] expressions) Parameters IDataModelLoad <TModel> dataModelLoad Batch batch Batch add this request to Expression < Func <TModel, Object >>[] expressions The properties to select Returns IBatchResult The Domain Model object Type Parameters TModel LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) Batches the load of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration public static Task<IBatchResult> LoadBatchAsync<TModel>(this IDataModelLoad<TModel> dataModelLoad, params Expression<Func<TModel, object>>[] expressions) Parameters IDataModelLoad <TModel> dataModelLoad Expression < Func <TModel, Object >>[] expressions The properties to select Returns Task < IBatchResult > The Domain Model object Type Parameters TModel LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) Batches the load of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration public static Task<IBatchResult> LoadBatchAsync<TModel>(this IDataModelLoad<TModel> dataModelLoad, Batch batch, params Expression<Func<TModel, object>>[] expressions) Parameters IDataModelLoad <TModel> dataModelLoad Batch batch Batch add this request to Expression < Func <TModel, Object >>[] expressions The properties to select Returns Task < IBatchResult > The Domain Model object Type Parameters TModel QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) Loads a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration public static TModel QueryProperties<TModel>(this IDataModelLoad<TModel> dataModel, params Expression<Func<TModel, object>>[] expressions) Parameters IDataModelLoad <TModel> dataModel Expression < Func <TModel, Object >>[] expressions The properties to select Returns TModel The Domain Model object Type Parameters TModel"
  },
  "api/PnP.Core.Model.FollowDocumentData.html": {
    "href": "api/PnP.Core.Model.FollowDocumentData.html",
    "title": "Class FollowDocumentData | PnP Core SDK",
    "keywords": "Class FollowDocumentData A follow document request metadata object Inheritance Object FollowData FollowDocumentData Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public class FollowDocumentData : FollowData Properties ActorType Represents an actor type. Can be either a user, site, document or tag Declaration public override SocialActorType ActorType { get; } Property Value SocialActorType Overrides FollowData.ActorType ContentUri The unique url for the site. Declaration public string ContentUri { get; set; } Property Value String"
  },
  "api/PnP.Core.Model.FollowPersonData.html": {
    "href": "api/PnP.Core.Model.FollowPersonData.html",
    "title": "Class FollowPersonData | PnP Core SDK",
    "keywords": "Class FollowPersonData A follow person request metadata object Inheritance Object FollowData FollowPersonData Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public class FollowPersonData : FollowData Properties AccountName The account name in a form of \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot;. Declaration public string AccountName { get; set; } Property Value String ActorType Represents an actor type. Can be either a user, site, document or tag Declaration public override SocialActorType ActorType { get; } Property Value SocialActorType Overrides FollowData.ActorType"
  },
  "api/PnP.Core.Model.FollowSiteData.html": {
    "href": "api/PnP.Core.Model.FollowSiteData.html",
    "title": "Class FollowSiteData | PnP Core SDK",
    "keywords": "Class FollowSiteData A follow site request metadata object Inheritance Object FollowData FollowSiteData Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public class FollowSiteData : FollowData Properties ActorType Represents an actor type. Can be either a user, site, document or tag Declaration public override SocialActorType ActorType { get; } Property Value SocialActorType Overrides FollowData.ActorType ContentUri The unique url for the site. Declaration public string ContentUri { get; set; } Property Value String"
  },
  "api/PnP.Core.Model.FollowTagData.html": {
    "href": "api/PnP.Core.Model.FollowTagData.html",
    "title": "Class FollowTagData | PnP Core SDK",
    "keywords": "Class FollowTagData A follow tag request metadata object Inheritance Object FollowData FollowTagData Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public class FollowTagData : FollowData Properties ActorType Represents an actor type. Can be either a user, site, document or tag Declaration public override SocialActorType ActorType { get; } Property Value SocialActorType Overrides FollowData.ActorType TagGuid The unique Id for the tag. Declaration public Guid TagGuid { get; set; } Property Value Guid"
  },
  "api/PnP.Core.Model.html": {
    "href": "api/PnP.Core.Model.html",
    "title": "Namespace PnP.Core.Model | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Model Classes DataModelCollectionLoadExtensions Extension methods for IDataModelCollectionLoad<TModel> DataModelGetExtensions Extension methods for PnP.Core.Model.IDataModelProcess DataModelLoadExtensions Extension methods for PnP.Core.Model.IDataModelLoad FollowDocumentData A follow document request metadata object FollowPersonData A follow person request metadata object FollowSiteData A follow site request metadata object FollowTagData A follow tag request metadata object RequestModuleExtensions Set of extension methods used to bring request module support TransientDictionary Class for tracking Dictionary changes Interfaces IBatchResult Defines the result of a batch when it is executed IBatchSingleResult Defines a single result of a batch request IBatchSingleResult<T> Defines the result of a batch when it is executed IDataModel<TModel> Defines the very basic interface for every Domain Model object. Add methods are implemented in their respective model interfaces IDataModelCollection<TModel> Defines the very basic interface for every collection of Domain Model objects IDataModelCollectionDeleteByGuidId When implemented it provides a DeleteById method on the collection IDataModelCollectionDeleteByIntegerId When implemented it provides a DeleteById method on the collection IDataModelCollectionDeleteByStringId When implemented it provides a DeleteById method on the collection IDataModelCollectionLoad<TModel> Defines the very basic interface for every collection of Domain Model objects which supports explicit load IDataModelDelete Defines the delete interface for Domain Model objects that need delete. IDataModelGet<TModel> Defines the read interface for Domain Model objects that can be read. IDataModelLoad<TModel> Defines the read interface for Domain Model objects that can be loaded. IDataModelMappingHandler Interface to the define the basic behavior of Domain Model object that can be mapped from a JSON response coming out of a REST request IDataModelParent Interface to implement parent concept on all model objects IDataModelSupportingGetChanges Defines the interface for Domain Model objects that can obtain a change log. IDataModelUpdate Defines the update interface for Domain Model objects that need update. IDataModelWithContext Interface to implement PnPContext concept on all model objects IDataModelWithKey Defines the basic behavior for a Domain Model object with an identifying key IEnumerableBatchResult Provides the result of a batch when is executed IEnumerableBatchResult<T> Provides the result of a batch when is executed IExpandoDataModel Public interface to define an object extensible through a dictionary of properties IManageableCollection Defines the behavior of a collection that can be managed with untyped prototype methods IManageableCollection<TModel> Defines the behavior of a collection that can be managed with fully typed prototype methods IMetadataExtensible Defines the very basic interface for every object that is provided with metadata eventually with deferred loading IQueryableDataModel Interface describing a linq queryable model IRequestable Defines the very basic interface for every object that is somehow requestable through an external querying system IRequestableCollection Defines the very basic interface for every collection that is somehow requestable through an external querying system ISupportModules<TModel> Interface used to attach module support ISupportQuery<TResult> Object supports explicit Query"
  },
  "api/PnP.Core.Model.IBatchResult.html": {
    "href": "api/PnP.Core.Model.IBatchResult.html",
    "title": "Interface IBatchResult | PnP Core SDK",
    "keywords": "Interface IBatchResult Defines the result of a batch when it is executed Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IBatchResult Properties IsAvailable Gets whether the result is available or not Declaration bool IsAvailable { get; } Property Value Boolean"
  },
  "api/PnP.Core.Model.IBatchSingleResult.html": {
    "href": "api/PnP.Core.Model.IBatchSingleResult.html",
    "title": "Interface IBatchSingleResult | PnP Core SDK",
    "keywords": "Interface IBatchSingleResult Defines a single result of a batch request Inherited Members IBatchResult.IsAvailable Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IBatchSingleResult : IBatchResult Properties ObjectResult Gets the result, once the batch is executed Declaration object ObjectResult { get; } Property Value Object"
  },
  "api/PnP.Core.Model.IBatchSingleResult-1.html": {
    "href": "api/PnP.Core.Model.IBatchSingleResult-1.html",
    "title": "Interface IBatchSingleResult<T> | PnP Core SDK",
    "keywords": "Interface IBatchSingleResult<T> Defines the result of a batch when it is executed Inherited Members IBatchSingleResult.ObjectResult IBatchResult.IsAvailable Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IBatchSingleResult<out T> : IBatchSingleResult, IBatchResult Type Parameters T The type of the result Properties Result Gets the result, once the batch is executed Declaration T Result { get; } Property Value T"
  },
  "api/PnP.Core.Model.IDataModel-1.html": {
    "href": "api/PnP.Core.Model.IDataModel-1.html",
    "title": "Interface IDataModel<TModel> | PnP Core SDK",
    "keywords": "Interface IDataModel<TModel> Defines the very basic interface for every Domain Model object. Add methods are implemented in their respective model interfaces Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModel<TModel> : IDataModelParent, IDataModelWithContext, ISupportModules<TModel> Type Parameters TModel The actual type of the Domain Model object Properties Requested Defines whether this model object was requested from the back-end Declaration bool Requested { get; set; } Property Value Boolean Methods ArePropertiesAvailable(Expression<Func<TModel, Object>>[]) Checks if the needed properties were loaded or not Declaration bool ArePropertiesAvailable(params Expression<Func<TModel, object>>[] expressions) Parameters Expression < Func <TModel, Object >>[] expressions Expression listing the properties to check Returns Boolean True if properties were loaded, false otherwise EnsureProperties(Expression<Func<TModel, Object>>[]) Checks if the requested properties are loaded for the given model, if not they're loaded right now Declaration void EnsureProperties(params Expression<Func<TModel, object>>[] expressions) Parameters Expression < Func <TModel, Object >>[] expressions Expressions listing the properties to load EnsurePropertiesAsync(Expression<Func<TModel, Object>>[]) Checks if the requested properties are loaded for the given model, if not they're loaded via a GetAsync call Declaration Task EnsurePropertiesAsync(params Expression<Func<TModel, object>>[] expressions) Parameters Expression < Func <TModel, Object >>[] expressions Expressions listing the properties to load Returns Task ExecuteRequest(ApiRequest) Executes a given API call Declaration ApiRequestResponse ExecuteRequest(ApiRequest request) Parameters ApiRequest request API call to execute Returns ApiRequestResponse The response of the API call ExecuteRequestAsync(ApiRequest) Executes a given API call Declaration Task<ApiRequestResponse> ExecuteRequestAsync(ApiRequest request) Parameters ApiRequest request API call to execute Returns Task < ApiRequestResponse > The response of the API call ExecuteRequestBatch(ApiRequest) Executes a given API call Declaration IBatchSingleResult<BatchResultValue<string>> ExecuteRequestBatch(ApiRequest request) Parameters ApiRequest request API call to execute Returns IBatchSingleResult < BatchResultValue < String >> The response of the API call ExecuteRequestBatch(Batch, ApiRequest) Executes a given API call Declaration IBatchSingleResult<BatchResultValue<string>> ExecuteRequestBatch(Batch batch, ApiRequest request) Parameters Batch batch ApiRequest request API call to execute Returns IBatchSingleResult < BatchResultValue < String >> The response of the API call ExecuteRequestBatchAsync(ApiRequest) Executes a given API call Declaration Task<IBatchSingleResult<BatchResultValue<string>>> ExecuteRequestBatchAsync(ApiRequest request) Parameters ApiRequest request API call to execute Returns Task < IBatchSingleResult < BatchResultValue < String >>> The response of the API call ExecuteRequestBatchAsync(Batch, ApiRequest) Executes a given API call Declaration Task<IBatchSingleResult<BatchResultValue<string>>> ExecuteRequestBatchAsync(Batch batch, ApiRequest request) Parameters Batch batch ApiRequest request API call to execute Returns Task < IBatchSingleResult < BatchResultValue < String >>> The response of the API call HasChanged(String) Checks if a property on this model object has changed Declaration bool HasChanged(string propertyName = \"\") Parameters String propertyName Property to check Returns Boolean True if changed, false otherwise HasValue(String) Checks if a property on this model object has a value set Declaration bool HasValue(string propertyName = \"\") Parameters String propertyName Property to check Returns Boolean True if set, false otherwise IsPropertyAvailable(Expression<Func<TModel, Object>>) Checks if a property is loaded or not Declaration bool IsPropertyAvailable(Expression<Func<TModel, object>> expression) Parameters Expression < Func <TModel, Object >> expression Expression listing the property to load Returns Boolean True if property was loaded, false otherwise Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.IDataModelCollection-1.html": {
    "href": "api/PnP.Core.Model.IDataModelCollection-1.html",
    "title": "Interface IDataModelCollection<TModel> | PnP Core SDK",
    "keywords": "Interface IDataModelCollection<TModel> Defines the very basic interface for every collection of Domain Model objects Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelCollection<TModel> : IEnumerable<TModel>, IDataModelParent, IDataModelWithContext, IRequestableCollection Type Parameters TModel The actual type of the Domain Model objects Extension Methods QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.IDataModelCollectionDeleteByGuidId.html": {
    "href": "api/PnP.Core.Model.IDataModelCollectionDeleteByGuidId.html",
    "title": "Interface IDataModelCollectionDeleteByGuidId | PnP Core SDK",
    "keywords": "Interface IDataModelCollectionDeleteByGuidId When implemented it provides a DeleteById method on the collection Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelCollectionDeleteByGuidId Methods DeleteById(Guid) Delete an item from the collection via it's id Declaration void DeleteById(Guid id) Parameters Guid id Id of the item to delete DeleteByIdAsync(Guid) Delete an item from the collection via it's id Declaration Task DeleteByIdAsync(Guid id) Parameters Guid id Id of the item to delete Returns Task DeleteByIdBatch(Guid) Delete an item from the collection via it's id Declaration void DeleteByIdBatch(Guid id) Parameters Guid id Id of the item to delete DeleteByIdBatch(Batch, Guid) Delete an item from the collection via it's id Declaration void DeleteByIdBatch(Batch batch, Guid id) Parameters Batch batch Batch to add the request to Guid id Id of the item to delete DeleteByIdBatchAsync(Guid) Delete an item from the collection via it's id Declaration Task DeleteByIdBatchAsync(Guid id) Parameters Guid id Id of the item to delete Returns Task DeleteByIdBatchAsync(Batch, Guid) Delete an item from the collection via it's id Declaration Task DeleteByIdBatchAsync(Batch batch, Guid id) Parameters Batch batch Batch to add the request to Guid id Id of the item to delete Returns Task"
  },
  "api/PnP.Core.Model.IDataModelCollectionDeleteByIntegerId.html": {
    "href": "api/PnP.Core.Model.IDataModelCollectionDeleteByIntegerId.html",
    "title": "Interface IDataModelCollectionDeleteByIntegerId | PnP Core SDK",
    "keywords": "Interface IDataModelCollectionDeleteByIntegerId When implemented it provides a DeleteById method on the collection Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelCollectionDeleteByIntegerId Methods DeleteById(Int32) Delete an item from the collection via it's id Declaration void DeleteById(int id) Parameters Int32 id Id of the item to delete DeleteByIdAsync(Int32) Delete an item from the collection via it's id Declaration Task DeleteByIdAsync(int id) Parameters Int32 id Id of the item to delete Returns Task DeleteByIdBatch(Batch, Int32) Delete an item from the collection via it's id Declaration void DeleteByIdBatch(Batch batch, int id) Parameters Batch batch Batch to add the request to Int32 id Id of the item to delete DeleteByIdBatch(Int32) Delete an item from the collection via it's id Declaration void DeleteByIdBatch(int id) Parameters Int32 id Id of the item to delete DeleteByIdBatchAsync(Batch, Int32) Delete an item from the collection via it's id Declaration Task DeleteByIdBatchAsync(Batch batch, int id) Parameters Batch batch Batch to add the request to Int32 id Id of the item to delete Returns Task DeleteByIdBatchAsync(Int32) Delete an item from the collection via it's id Declaration Task DeleteByIdBatchAsync(int id) Parameters Int32 id Id of the item to delete Returns Task"
  },
  "api/PnP.Core.Model.IDataModelCollectionDeleteByStringId.html": {
    "href": "api/PnP.Core.Model.IDataModelCollectionDeleteByStringId.html",
    "title": "Interface IDataModelCollectionDeleteByStringId | PnP Core SDK",
    "keywords": "Interface IDataModelCollectionDeleteByStringId When implemented it provides a DeleteById method on the collection Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelCollectionDeleteByStringId Methods DeleteById(String) Delete an item from the collection via it's id Declaration void DeleteById(string id) Parameters String id Id of the item to delete DeleteByIdAsync(String) Delete an item from the collection via it's id Declaration Task DeleteByIdAsync(string id) Parameters String id Id of the item to delete Returns Task DeleteByIdBatch(Batch, String) Delete an item from the collection via it's id Declaration void DeleteByIdBatch(Batch batch, string id) Parameters Batch batch Batch to add the request to String id Id of the item to delete DeleteByIdBatch(String) Delete an item from the collection via it's id Declaration void DeleteByIdBatch(string id) Parameters String id Id of the item to delete DeleteByIdBatchAsync(Batch, String) Delete an item from the collection via it's id Declaration Task DeleteByIdBatchAsync(Batch batch, string id) Parameters Batch batch Batch to add the request to String id Id of the item to delete Returns Task DeleteByIdBatchAsync(String) Delete an item from the collection via it's id Declaration Task DeleteByIdBatchAsync(string id) Parameters String id Id of the item to delete Returns Task"
  },
  "api/PnP.Core.Model.IDataModelCollectionLoad-1.html": {
    "href": "api/PnP.Core.Model.IDataModelCollectionLoad-1.html",
    "title": "Interface IDataModelCollectionLoad<TModel> | PnP Core SDK",
    "keywords": "Interface IDataModelCollectionLoad<TModel> Defines the very basic interface for every collection of Domain Model objects which supports explicit load Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelCollectionLoad<TModel> Type Parameters TModel The actual type of the Domain Model objects Methods LoadAsync(Expression<Func<TModel, Object>>[]) Loads the list from the remote data source, eventually selecting custom properties or using a default set of properties Declaration Task LoadAsync(params Expression<Func<TModel, object>>[] selectors) Parameters Expression < Func <TModel, Object >>[] selectors The properties to select Returns Task The Domain Model object LoadBatchAsync(Batch, Expression<Func<TModel, Object>>[]) Batches the load of the list from the remote data source, eventually selecting custom properties or using a default set of properties Declaration Task<IBatchResult> LoadBatchAsync(Batch batch, params Expression<Func<TModel, object>>[] selectors) Parameters Batch batch The batch to use Expression < Func <TModel, Object >>[] selectors The properties to select Returns Task < IBatchResult > The Domain Model object Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.IDataModelDelete.html": {
    "href": "api/PnP.Core.Model.IDataModelDelete.html",
    "title": "Interface IDataModelDelete | PnP Core SDK",
    "keywords": "Interface IDataModelDelete Defines the delete interface for Domain Model objects that need delete. Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelDelete Methods Delete() Deletes a Domain Model object into the remote data source Declaration void Delete() DeleteAsync() Deletes a Domain Model object into the remote data source Declaration Task DeleteAsync() Returns Task DeleteBatch() Collects the request to delete a Domain Model object into the remote data source Declaration void DeleteBatch() DeleteBatch(Batch) Collects the request to delete a Domain Model object into the remote data source using a batch Declaration void DeleteBatch(Batch batch) Parameters Batch batch Batch add this request to DeleteBatchAsync() Collects the request to delete a Domain Model object into the remote data source Declaration Task DeleteBatchAsync() Returns Task DeleteBatchAsync(Batch) Collects the request to delete a Domain Model object into the remote data source using a batch Declaration Task DeleteBatchAsync(Batch batch) Parameters Batch batch Batch add this request to Returns Task"
  },
  "api/PnP.Core.Model.IDataModelGet-1.html": {
    "href": "api/PnP.Core.Model.IDataModelGet-1.html",
    "title": "Interface IDataModelGet<TModel> | PnP Core SDK",
    "keywords": "Interface IDataModelGet<TModel> Defines the read interface for Domain Model objects that can be read. Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelGet<TModel> Type Parameters TModel Methods GetAsync(Expression<Func<TModel, Object>>[]) Retrieves a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration Task<TModel> GetAsync(params Expression<Func<TModel, object>>[] expressions) Parameters Expression < Func <TModel, Object >>[] expressions The properties to select Returns Task <TModel> The Domain Model object GetBatchAsync(Batch, Expression<Func<TModel, Object>>[]) Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration Task<IBatchSingleResult<TModel>> GetBatchAsync(Batch batch, params Expression<Func<TModel, object>>[] expressions) Parameters Batch batch Batch add this request to Expression < Func <TModel, Object >>[] expressions The properties to select Returns Task < IBatchSingleResult <TModel>> The Domain Model object Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.IDataModelLoad-1.html": {
    "href": "api/PnP.Core.Model.IDataModelLoad-1.html",
    "title": "Interface IDataModelLoad<TModel> | PnP Core SDK",
    "keywords": "Interface IDataModelLoad<TModel> Defines the read interface for Domain Model objects that can be loaded. Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelLoad<TModel> Type Parameters TModel Methods LoadAsync(Expression<Func<TModel, Object>>[]) Loads a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration Task LoadAsync(params Expression<Func<TModel, object>>[] expressions) Parameters Expression < Func <TModel, Object >>[] expressions The properties to select Returns Task The Domain Model object LoadBatchAsync(Batch, Expression<Func<TModel, Object>>[]) Batches the load of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration Task<IBatchResult> LoadBatchAsync(Batch batch, params Expression<Func<TModel, object>>[] expressions) Parameters Batch batch Batch add this request to Expression < Func <TModel, Object >>[] expressions The properties to select Returns Task < IBatchResult > The Domain Model object Extension Methods DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.IDataModelMappingHandler.html": {
    "href": "api/PnP.Core.Model.IDataModelMappingHandler.html",
    "title": "Interface IDataModelMappingHandler | PnP Core SDK",
    "keywords": "Interface IDataModelMappingHandler Interface to the define the basic behavior of Domain Model object that can be mapped from a JSON response coming out of a REST request Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelMappingHandler Properties MappingHandler Handler that will fire when a property mapping does cannot be done automatically Declaration Func<FromJson, object> MappingHandler { get; set; } Property Value Func < FromJson , Object > PostMappingHandler Handler that will fire after the full json to model operation was done Declaration Action<string> PostMappingHandler { get; set; } Property Value Action < String >"
  },
  "api/PnP.Core.Model.IDataModelParent.html": {
    "href": "api/PnP.Core.Model.IDataModelParent.html",
    "title": "Interface IDataModelParent | PnP Core SDK",
    "keywords": "Interface IDataModelParent Interface to implement parent concept on all model objects Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelParent Properties Parent Represents the parent of the current domain model object Declaration IDataModelParent Parent { get; set; } Property Value IDataModelParent"
  },
  "api/PnP.Core.Model.IDataModelSupportingGetChanges.html": {
    "href": "api/PnP.Core.Model.IDataModelSupportingGetChanges.html",
    "title": "Interface IDataModelSupportingGetChanges | PnP Core SDK",
    "keywords": "Interface IDataModelSupportingGetChanges Defines the interface for Domain Model objects that can obtain a change log. Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelSupportingGetChanges Methods GetChanges(ChangeQueryOptions) Gets the list of changes. Declaration IList<IChange> GetChanges(ChangeQueryOptions query) Parameters ChangeQueryOptions query The query. Returns PnP.Core.Model.SharePoint.IList < IChange > The list of changes. Remarks This does not load the parent object or any properties. It returns a completely separate object. GetChangesAsync(ChangeQueryOptions) Gets the list of changes. Declaration Task<IList<IChange>> GetChangesAsync(ChangeQueryOptions query) Parameters ChangeQueryOptions query The query. Returns Task < PnP.Core.Model.SharePoint.IList < IChange >> The list of changes. Remarks This does not load the parent object or any properties. It returns a completely separate object. GetChangesBatch(ChangeQueryOptions) Gets the list of changes. Declaration IEnumerableBatchResult<IChange> GetChangesBatch(ChangeQueryOptions query) Parameters ChangeQueryOptions query The query. Returns IEnumerableBatchResult < IChange > The list of changes. Remarks This does not load the parent object or any properties. It returns a completely separate object. GetChangesBatch(Batch, ChangeQueryOptions) Gets the list of changes. Declaration IEnumerableBatchResult<IChange> GetChangesBatch(Batch batch, ChangeQueryOptions query) Parameters Batch batch Batch to add this request to ChangeQueryOptions query The query. Returns IEnumerableBatchResult < IChange > The list of changes. Remarks This does not load the parent object or any properties. It returns a completely separate object. GetChangesBatchAsync(ChangeQueryOptions) Gets the list of changes. Declaration Task<IEnumerableBatchResult<IChange>> GetChangesBatchAsync(ChangeQueryOptions query) Parameters ChangeQueryOptions query The query. Returns Task < IEnumerableBatchResult < IChange >> The list of changes. Remarks This does not load the parent object or any properties. It returns a completely separate object. GetChangesBatchAsync(Batch, ChangeQueryOptions) Gets the list of changes. Declaration Task<IEnumerableBatchResult<IChange>> GetChangesBatchAsync(Batch batch, ChangeQueryOptions query) Parameters Batch batch Batch to add this request to ChangeQueryOptions query The query. Returns Task < IEnumerableBatchResult < IChange >> The list of changes. Remarks This does not load the parent object or any properties. It returns a completely separate object."
  },
  "api/PnP.Core.Model.IDataModelUpdate.html": {
    "href": "api/PnP.Core.Model.IDataModelUpdate.html",
    "title": "Interface IDataModelUpdate | PnP Core SDK",
    "keywords": "Interface IDataModelUpdate Defines the update interface for Domain Model objects that need update. Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelUpdate Methods Update() Updates a Domain Model object into the remote data source Declaration void Update() UpdateAsync() Updates a Domain Model object into the remote data source Declaration Task UpdateAsync() Returns Task UpdateBatch() Collects the request to update a Domain Model object into the remote data source Declaration void UpdateBatch() UpdateBatch(Batch) Collects the request to update a Domain Model object into the remote data source using a batch Declaration void UpdateBatch(Batch batch) Parameters Batch batch Batch add this request to UpdateBatchAsync() Collects the request to update a Domain Model object into the remote data source Declaration Task UpdateBatchAsync() Returns Task UpdateBatchAsync(Batch) Collects the request to update a Domain Model object into the remote data source using a batch Declaration Task UpdateBatchAsync(Batch batch) Parameters Batch batch Batch add this request to Returns Task"
  },
  "api/PnP.Core.Model.IDataModelWithContext.html": {
    "href": "api/PnP.Core.Model.IDataModelWithContext.html",
    "title": "Interface IDataModelWithContext | PnP Core SDK",
    "keywords": "Interface IDataModelWithContext Interface to implement PnPContext concept on all model objects Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelWithContext Properties PnPContext PnPContext linked to this model instance Declaration PnPContext PnPContext { get; set; } Property Value PnPContext"
  },
  "api/PnP.Core.Model.IDataModelWithKey.html": {
    "href": "api/PnP.Core.Model.IDataModelWithKey.html",
    "title": "Interface IDataModelWithKey | PnP Core SDK",
    "keywords": "Interface IDataModelWithKey Defines the basic behavior for a Domain Model object with an identifying key Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelWithKey Properties Key Readonly property to get the untyped key of the object Declaration object Key { get; set; } Property Value Object"
  },
  "api/PnP.Core.Model.IEnumerableBatchResult.html": {
    "href": "api/PnP.Core.Model.IEnumerableBatchResult.html",
    "title": "Interface IEnumerableBatchResult | PnP Core SDK",
    "keywords": "Interface IEnumerableBatchResult Provides the result of a batch when is executed Inherited Members IBatchResult.IsAvailable Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IEnumerableBatchResult : IEnumerable, IBatchResult"
  },
  "api/PnP.Core.Model.IEnumerableBatchResult-1.html": {
    "href": "api/PnP.Core.Model.IEnumerableBatchResult-1.html",
    "title": "Interface IEnumerableBatchResult<T> | PnP Core SDK",
    "keywords": "Interface IEnumerableBatchResult<T> Provides the result of a batch when is executed Inherited Members IBatchResult.IsAvailable Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IEnumerableBatchResult<out T> : IEnumerableBatchResult, IEnumerable, IBatchResult, IReadOnlyList<T> Type Parameters T The type of the result"
  },
  "api/PnP.Core.Model.IExpandoDataModel.html": {
    "href": "api/PnP.Core.Model.IExpandoDataModel.html",
    "title": "Interface IExpandoDataModel | PnP Core SDK",
    "keywords": "Interface IExpandoDataModel Public interface to define an object extensible through a dictionary of properties Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IExpandoDataModel Properties Count Gets the count of properties of the current expando type object Declaration int Count { get; } Property Value Int32 Item[String] Gets or sets dynamic properties Declaration object this[string key] { get; set; } Parameters String key The key of the property to get or set Property Value Object The value of the property Values The dictionary of properties Declaration TransientDictionary Values { get; } Property Value TransientDictionary Methods AsDynamic() Transforms the current model instance into a dynamic type Declaration dynamic AsDynamic() Returns Object Dynamic version of current model instance"
  },
  "api/PnP.Core.Model.IManageableCollection.html": {
    "href": "api/PnP.Core.Model.IManageableCollection.html",
    "title": "Interface IManageableCollection | PnP Core SDK",
    "keywords": "Interface IManageableCollection Defines the behavior of a collection that can be managed with untyped prototype methods Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IManageableCollection Methods Add(Object) Method to add a new item to the collection Declaration void Add(object item) Parameters Object item The untyped item to add AddOrUpdate(Object, Predicate<Object>) Method to add a new untyped item or update an already existing one based on a selection predicate Declaration void AddOrUpdate(object newItem, Predicate<object> selector) Parameters Object newItem The untyped item to add Predicate < Object > selector The selection predicate for the already existing item, if any CreateNew() Method to create a new item of the collection, ready to be added to the same collection Declaration object CreateNew() Returns Object The new item, ready to be added to the current collection CreateNewAndAdd() Method to create a new typed item of the collection and immediately add it the collection Declaration object CreateNewAndAdd() Returns Object The new item, added to the collection Remove(Object) Method to remove an untyped item from the collection Declaration bool Remove(object item) Parameters Object item The untyped item to remove Returns Boolean True if the removal is successful Replace(Int32, Object) Replaces an item in the collection with a new one Declaration void Replace(int itemIndex, object newItem) Parameters Int32 itemIndex The index of the item to replace within the collection Object newItem New item to replace the old one with"
  },
  "api/PnP.Core.Model.IManageableCollection-1.html": {
    "href": "api/PnP.Core.Model.IManageableCollection-1.html",
    "title": "Interface IManageableCollection<TModel> | PnP Core SDK",
    "keywords": "Interface IManageableCollection<TModel> Defines the behavior of a collection that can be managed with fully typed prototype methods Inherited Members IManageableCollection.Add(Object) IManageableCollection.AddOrUpdate(Object, Predicate<Object>) IManageableCollection.Remove(Object) IManageableCollection.Replace(Int32, Object) Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IManageableCollection<TModel> : IManageableCollection Type Parameters TModel Methods Add(TModel) Method to add a new item to the collection Declaration void Add(TModel item) Parameters TModel item The untyped item to add AddOrUpdate(TModel, Predicate<TModel>) Method to add a new fully typed item or update an already existing one based on a selection predicate Declaration void AddOrUpdate(TModel newItem, Predicate<TModel> selector) Parameters TModel newItem The fully typed item to add Predicate <TModel> selector The selection predicate for the already existing item, if any CreateNew() Method to create a new typed item of the collection, ready to be added to the same collection Declaration TModel CreateNew() Returns TModel The new item, ready to be added to the current collection CreateNewAndAdd() Method to create a new typed item of the collection and immediately add it the collection Declaration TModel CreateNewAndAdd() Returns TModel The new item, added to the collection Remove(TModel) Method to remove an fully typed item from the collection Declaration bool Remove(TModel item) Parameters TModel item The fully typed item to remove Returns Boolean True if the removal is successful Replace(Int32, TModel) Replaces an item in the collection with a new one Declaration void Replace(int itemIndex, TModel newItem) Parameters Int32 itemIndex The index of the item to replace within the collection TModel newItem New item to replace the old one with"
  },
  "api/PnP.Core.Model.IMetadataExtensible.html": {
    "href": "api/PnP.Core.Model.IMetadataExtensible.html",
    "title": "Interface IMetadataExtensible | PnP Core SDK",
    "keywords": "Interface IMetadataExtensible Defines the very basic interface for every object that is provided with metadata eventually with deferred loading Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IMetadataExtensible Properties Metadata Dictionary to access the domain model object Metadata Declaration Dictionary<string, string> Metadata { get; } Property Value Dictionary < String , String >"
  },
  "api/PnP.Core.Model.IQueryableDataModel.html": {
    "href": "api/PnP.Core.Model.IQueryableDataModel.html",
    "title": "Interface IQueryableDataModel | PnP Core SDK",
    "keywords": "Interface IQueryableDataModel Interface describing a linq queryable model Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IQueryableDataModel"
  },
  "api/PnP.Core.Model.IRequestable.html": {
    "href": "api/PnP.Core.Model.IRequestable.html",
    "title": "Interface IRequestable | PnP Core SDK",
    "keywords": "Interface IRequestable Defines the very basic interface for every object that is somehow requestable through an external querying system Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IRequestable Properties Requested Was this object requested, a collection with 0 items and Requested == false was never loaded Declaration bool Requested { get; set; } Property Value Boolean"
  },
  "api/PnP.Core.Model.IRequestableCollection.html": {
    "href": "api/PnP.Core.Model.IRequestableCollection.html",
    "title": "Interface IRequestableCollection | PnP Core SDK",
    "keywords": "Interface IRequestableCollection Defines the very basic interface for every collection that is somehow requestable through an external querying system Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IRequestableCollection Properties Length Returns the size of the collection Declaration int Length { get; } Property Value Int32 Requested Was this collection requested, a collection with 0 items and Requested == false was never loaded Declaration bool Requested { get; set; } Property Value Boolean RequestedItems Represents the items already requested from the back-end service Declaration Collections.IEnumerable RequestedItems { get; } Property Value Collections.IEnumerable Methods Clear() Clears the collection allowing it to be freshly loaded again Declaration void Clear()"
  },
  "api/PnP.Core.Model.ISupportModules-1.html": {
    "href": "api/PnP.Core.Model.ISupportModules-1.html",
    "title": "Interface ISupportModules<TModel> | PnP Core SDK",
    "keywords": "Interface ISupportModules<TModel> Interface used to attach module support Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface ISupportModules<TModel> Type Parameters TModel Model to attach module support to Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.ISupportQuery-1.html": {
    "href": "api/PnP.Core.Model.ISupportQuery-1.html",
    "title": "Interface ISupportQuery<TResult> | PnP Core SDK",
    "keywords": "Interface ISupportQuery<TResult> Object supports explicit Query Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface ISupportQuery<TResult> Type Parameters TResult Extension Methods QueryableExtensions.QueryProperties<TResult>(ISupportQuery<TResult>, Expression<Func<TResult, Object>>[])"
  },
  "api/PnP.Core.Model.RequestModuleExtensions.html": {
    "href": "api/PnP.Core.Model.RequestModuleExtensions.html",
    "title": "Class RequestModuleExtensions | PnP Core SDK",
    "keywords": "Class RequestModuleExtensions Set of extension methods used to bring request module support Inheritance Object RequestModuleExtensions Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public static class RequestModuleExtensions : object Methods WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) Executes this request with additional request headers Declaration public static TModel WithHeaders<TModel>(this ISupportModules<TModel> dataModel, Dictionary<string, string> headers, Action<Dictionary<string, string>> responseHeaders = null) Parameters ISupportModules <TModel> dataModel Model instance to operate on Dictionary < String , String > headers Collection of headers to add to add to the request Action < Dictionary < String , String >> responseHeaders Delegate that can be invoked to pass along the response headers Returns TModel The passed model instance Type Parameters TModel Model type"
  },
  "api/PnP.Core.Model.Security.GroupVisibility.html": {
    "href": "api/PnP.Core.Model.Security.GroupVisibility.html",
    "title": "Enum GroupVisibility | PnP Core SDK",
    "keywords": "Enum GroupVisibility Group visibility Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public enum GroupVisibility : int Hiddenmembership Group is a hidden membership group Private Group is a private group Public Group is a public group"
  },
  "api/PnP.Core.Model.Security.html": {
    "href": "api/PnP.Core.Model.Security.html",
    "title": "Namespace PnP.Core.Model.Security | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Model.Security Interfaces IGraphGroup A Microsoft 365 Group IGraphGroupCollection Public interface to define a collection of Microsoft 365 Groups IGraphPrincipal Represents a Microsoft 365 user or group IGraphUser Public interface to define a Microsoft 365 user IGraphUserCollection Public interface to define a collection of Microsoft 365 users IIdentity The Identity resource represents an identity of an actor. For example, an actor can be a user, device, or application. IRoleAssignment Defines a single role definition, including a name, description, and set of rights. IRoleAssignmentCollection Public interface to define a collection of SharePoint groups IRoleDefinition Defines a single role definition, including a name, description, and set of rights. IRoleDefinitionCollection Public interface to define a collection of SharePoint RoleDefinitions ISharePointGroup Public interface to define a SharePoint Group ISharePointGroupCollection Public interface to define a collection of SharePoint groups ISharePointPrincipal Represents a SharePoint user or group that can be assigned permissions to control security. ISharePointSharingPrincipal Represents a SharePoint sharing principal. ISharePointUser Public interface to define a SharePoint User ISharePointUserCollection Public interface to define a collection of SharePoint users Enums GroupVisibility Group visibility PrincipalType Specifies the type of a principal. This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values."
  },
  "api/PnP.Core.Model.Security.IGraphGroup.html": {
    "href": "api/PnP.Core.Model.Security.IGraphGroup.html",
    "title": "Interface IGraphGroup | PnP Core SDK",
    "keywords": "Interface IGraphGroup A Microsoft 365 Group Inherited Members IDataModel<IGraphGroup>.Requested IDataModel<IGraphGroup>.HasValue(String) IDataModel<IGraphGroup>.HasChanged(String) IDataModel<IGraphGroup>.IsPropertyAvailable(Expression<Func<IGraphGroup, Object>>) IDataModel<IGraphGroup>.ArePropertiesAvailable(Expression<Func<IGraphGroup, Object>>[]) IDataModel<IGraphGroup>.EnsureProperties(Expression<Func<IGraphGroup, Object>>[]) IDataModel<IGraphGroup>.EnsurePropertiesAsync(Expression<Func<IGraphGroup, Object>>[]) IDataModel<IGraphGroup>.ExecuteRequestAsync(ApiRequest) IDataModel<IGraphGroup>.ExecuteRequest(ApiRequest) IDataModel<IGraphGroup>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IGraphGroup>.ExecuteRequestBatch(ApiRequest) IDataModel<IGraphGroup>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IGraphGroup>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IGraphGroup>.GetBatchAsync(Batch, Expression<Func<IGraphGroup, Object>>[]) IDataModelGet<IGraphGroup>.GetAsync(Expression<Func<IGraphGroup, Object>>[]) IDataModelLoad<IGraphGroup>.LoadBatchAsync(Batch, Expression<Func<IGraphGroup, Object>>[]) IDataModelLoad<IGraphGroup>.LoadAsync(Expression<Func<IGraphGroup, Object>>[]) IGraphPrincipal.Id Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface IGraphGroup : IDataModel<IGraphGroup>, IDataModelParent, IDataModelWithContext, ISupportModules<IGraphGroup>, IDataModelGet<IGraphGroup>, IDataModelLoad<IGraphGroup>, IGraphPrincipal, IQueryableDataModel Properties Classification Classification of this group Declaration string Classification { get; set; } Property Value String CreatedDateTime When was this group created Declaration DateTimeOffset CreatedDateTime { get; } Property Value DateTimeOffset Description Description of the Microsoft 365 Group Declaration string Description { get; set; } Property Value String DisplayName Name of the Microsoft 365 Group Declaration string DisplayName { get; set; } Property Value String Mail Email address of this Microsoft 365 group Declaration string Mail { get; } Property Value String MailEnabled Is this group mail enabled Declaration bool MailEnabled { get; set; } Property Value Boolean MailNickname Mail nickname of this Microsoft 365 group Declaration string MailNickname { get; } Property Value String Visibility Visibility of this group Declaration GroupVisibility Visibility { get; set; } Property Value GroupVisibility WebUrl Url of the SharePoint site connected to this Microsoft 365 group Declaration Uri WebUrl { get; } Property Value Uri Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Security.IGraphGroupCollection.html": {
    "href": "api/PnP.Core.Model.Security.IGraphGroupCollection.html",
    "title": "Interface IGraphGroupCollection | PnP Core SDK",
    "keywords": "Interface IGraphGroupCollection Public interface to define a collection of Microsoft 365 Groups Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<IGraphGroup>.LoadAsync(Expression<Func<IGraphGroup, Object>>[]) IDataModelCollectionLoad<IGraphGroup>.LoadBatchAsync(Batch, Expression<Func<IGraphGroup, Object>>[]) Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface IGraphGroupCollection : IQueryable<IGraphGroup>, IAsyncEnumerable<IGraphGroup>, IDataModelCollection<IGraphGroup>, IEnumerable<IGraphGroup>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<IGraphGroup>, ISupportModules<IGraphGroupCollection> Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.Security.IGraphPrincipal.html": {
    "href": "api/PnP.Core.Model.Security.IGraphPrincipal.html",
    "title": "Interface IGraphPrincipal | PnP Core SDK",
    "keywords": "Interface IGraphPrincipal Represents a Microsoft 365 user or group Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface IGraphPrincipal Properties Id Gets a value that specifies the member identifier for the user or group. Declaration string Id { get; set; } Property Value String"
  },
  "api/PnP.Core.Model.Security.IGraphUser.html": {
    "href": "api/PnP.Core.Model.Security.IGraphUser.html",
    "title": "Interface IGraphUser | PnP Core SDK",
    "keywords": "Interface IGraphUser Public interface to define a Microsoft 365 user Inherited Members IDataModel<IGraphUser>.Requested IDataModel<IGraphUser>.HasValue(String) IDataModel<IGraphUser>.HasChanged(String) IDataModel<IGraphUser>.IsPropertyAvailable(Expression<Func<IGraphUser, Object>>) IDataModel<IGraphUser>.ArePropertiesAvailable(Expression<Func<IGraphUser, Object>>[]) IDataModel<IGraphUser>.EnsureProperties(Expression<Func<IGraphUser, Object>>[]) IDataModel<IGraphUser>.EnsurePropertiesAsync(Expression<Func<IGraphUser, Object>>[]) IDataModel<IGraphUser>.ExecuteRequestAsync(ApiRequest) IDataModel<IGraphUser>.ExecuteRequest(ApiRequest) IDataModel<IGraphUser>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IGraphUser>.ExecuteRequestBatch(ApiRequest) IDataModel<IGraphUser>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IGraphUser>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IGraphUser>.GetBatchAsync(Batch, Expression<Func<IGraphUser, Object>>[]) IDataModelGet<IGraphUser>.GetAsync(Expression<Func<IGraphUser, Object>>[]) IDataModelLoad<IGraphUser>.LoadBatchAsync(Batch, Expression<Func<IGraphUser, Object>>[]) IDataModelLoad<IGraphUser>.LoadAsync(Expression<Func<IGraphUser, Object>>[]) IGraphPrincipal.Id Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface IGraphUser : IDataModel<IGraphUser>, IDataModelParent, IDataModelWithContext, ISupportModules<IGraphUser>, IDataModelGet<IGraphUser>, IDataModelLoad<IGraphUser>, IGraphPrincipal, IQueryableDataModel Properties Mail Email adress of the user Declaration string Mail { get; set; } Property Value String OfficeLocation Office location of the user Declaration string OfficeLocation { get; set; } Property Value String UserPrincipalName User principle name (UPN) of the user Declaration string UserPrincipalName { get; set; } Property Value String Methods AsSharePointUser() Returns this Graph user as a SharePoint user for the connected site collection Declaration ISharePointUser AsSharePointUser() Returns ISharePointUser AsSharePointUserAsync() Returns this Graph user as a SharePoint user for the connected site collection Declaration Task<ISharePointUser> AsSharePointUserAsync() Returns Task < ISharePointUser > Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Security.IGraphUserCollection.html": {
    "href": "api/PnP.Core.Model.Security.IGraphUserCollection.html",
    "title": "Interface IGraphUserCollection | PnP Core SDK",
    "keywords": "Interface IGraphUserCollection Public interface to define a collection of Microsoft 365 users Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<IGraphUser>.LoadAsync(Expression<Func<IGraphUser, Object>>[]) IDataModelCollectionLoad<IGraphUser>.LoadBatchAsync(Batch, Expression<Func<IGraphUser, Object>>[]) Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface IGraphUserCollection : IQueryable<IGraphUser>, IAsyncEnumerable<IGraphUser>, IDataModelCollection<IGraphUser>, IEnumerable<IGraphUser>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<IGraphUser>, ISupportModules<IGraphUserCollection> Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.Security.IIdentity.html": {
    "href": "api/PnP.Core.Model.Security.IIdentity.html",
    "title": "Interface IIdentity | PnP Core SDK",
    "keywords": "Interface IIdentity The Identity resource represents an identity of an actor. For example, an actor can be a user, device, or application. Inherited Members IDataModel<IIdentity>.Requested IDataModel<IIdentity>.HasValue(String) IDataModel<IIdentity>.HasChanged(String) IDataModel<IIdentity>.IsPropertyAvailable(Expression<Func<IIdentity, Object>>) IDataModel<IIdentity>.ArePropertiesAvailable(Expression<Func<IIdentity, Object>>[]) IDataModel<IIdentity>.EnsureProperties(Expression<Func<IIdentity, Object>>[]) IDataModel<IIdentity>.EnsurePropertiesAsync(Expression<Func<IIdentity, Object>>[]) IDataModel<IIdentity>.ExecuteRequestAsync(ApiRequest) IDataModel<IIdentity>.ExecuteRequest(ApiRequest) IDataModel<IIdentity>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IIdentity>.ExecuteRequestBatch(ApiRequest) IDataModel<IIdentity>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IIdentity>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface IIdentity : IDataModel<IIdentity>, IDataModelParent, IDataModelWithContext, ISupportModules<IIdentity> Properties DisplayName The identity's display name. Note that this may not always be available or up to date. For example, if a user changes their display name, the API may show the new value in a future response, but the items associated with the user won't show up as having changed when using delta. Declaration string DisplayName { get; set; } Property Value String Id Unique identifier for the identity. Declaration string Id { get; } Property Value String TenantId Unique identity of the tenant (optional). Declaration string TenantId { get; set; } Property Value String UserIdentityType In case the identity is a user this property contains the user type of the user Declaration string UserIdentityType { get; set; } Property Value String Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Security.IRoleAssignment.html": {
    "href": "api/PnP.Core.Model.Security.IRoleAssignment.html",
    "title": "Interface IRoleAssignment | PnP Core SDK",
    "keywords": "Interface IRoleAssignment Defines a single role definition, including a name, description, and set of rights. Inherited Members IDataModel<IRoleAssignment>.Requested IDataModel<IRoleAssignment>.HasValue(String) IDataModel<IRoleAssignment>.HasChanged(String) IDataModel<IRoleAssignment>.IsPropertyAvailable(Expression<Func<IRoleAssignment, Object>>) IDataModel<IRoleAssignment>.ArePropertiesAvailable(Expression<Func<IRoleAssignment, Object>>[]) IDataModel<IRoleAssignment>.EnsureProperties(Expression<Func<IRoleAssignment, Object>>[]) IDataModel<IRoleAssignment>.EnsurePropertiesAsync(Expression<Func<IRoleAssignment, Object>>[]) IDataModel<IRoleAssignment>.ExecuteRequestAsync(ApiRequest) IDataModel<IRoleAssignment>.ExecuteRequest(ApiRequest) IDataModel<IRoleAssignment>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IRoleAssignment>.ExecuteRequestBatch(ApiRequest) IDataModel<IRoleAssignment>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IRoleAssignment>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IRoleAssignment>.GetBatchAsync(Batch, Expression<Func<IRoleAssignment, Object>>[]) IDataModelGet<IRoleAssignment>.GetAsync(Expression<Func<IRoleAssignment, Object>>[]) IDataModelLoad<IRoleAssignment>.LoadBatchAsync(Batch, Expression<Func<IRoleAssignment, Object>>[]) IDataModelLoad<IRoleAssignment>.LoadAsync(Expression<Func<IRoleAssignment, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface IRoleAssignment : IDataModel<IRoleAssignment>, IDataModelParent, IDataModelWithContext, ISupportModules<IRoleAssignment>, IDataModelGet<IRoleAssignment>, IDataModelLoad<IRoleAssignment>, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object PrincipalId Gets or sets a value that specifies the base permissions for the role definition. Declaration int PrincipalId { get; set; } Property Value Int32 RoleDefinitions Role definitions for this assignment Declaration IRoleDefinitionCollection RoleDefinitions { get; } Property Value IRoleDefinitionCollection Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Security.IRoleAssignmentCollection.html": {
    "href": "api/PnP.Core.Model.Security.IRoleAssignmentCollection.html",
    "title": "Interface IRoleAssignmentCollection | PnP Core SDK",
    "keywords": "Interface IRoleAssignmentCollection Public interface to define a collection of SharePoint groups Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<IRoleAssignment>.LoadAsync(Expression<Func<IRoleAssignment, Object>>[]) IDataModelCollectionLoad<IRoleAssignment>.LoadBatchAsync(Batch, Expression<Func<IRoleAssignment, Object>>[]) Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface IRoleAssignmentCollection : IQueryable<IRoleAssignment>, IAsyncEnumerable<IRoleAssignment>, IDataModelCollection<IRoleAssignment>, IEnumerable<IRoleAssignment>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<IRoleAssignment>, ISupportModules<IRoleAssignmentCollection> Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.Security.IRoleDefinition.html": {
    "href": "api/PnP.Core.Model.Security.IRoleDefinition.html",
    "title": "Interface IRoleDefinition | PnP Core SDK",
    "keywords": "Interface IRoleDefinition Defines a single role definition, including a name, description, and set of rights. Inherited Members IDataModel<IRoleDefinition>.Requested IDataModel<IRoleDefinition>.HasValue(String) IDataModel<IRoleDefinition>.HasChanged(String) IDataModel<IRoleDefinition>.IsPropertyAvailable(Expression<Func<IRoleDefinition, Object>>) IDataModel<IRoleDefinition>.ArePropertiesAvailable(Expression<Func<IRoleDefinition, Object>>[]) IDataModel<IRoleDefinition>.EnsureProperties(Expression<Func<IRoleDefinition, Object>>[]) IDataModel<IRoleDefinition>.EnsurePropertiesAsync(Expression<Func<IRoleDefinition, Object>>[]) IDataModel<IRoleDefinition>.ExecuteRequestAsync(ApiRequest) IDataModel<IRoleDefinition>.ExecuteRequest(ApiRequest) IDataModel<IRoleDefinition>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IRoleDefinition>.ExecuteRequestBatch(ApiRequest) IDataModel<IRoleDefinition>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IRoleDefinition>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IRoleDefinition>.GetBatchAsync(Batch, Expression<Func<IRoleDefinition, Object>>[]) IDataModelGet<IRoleDefinition>.GetAsync(Expression<Func<IRoleDefinition, Object>>[]) IDataModelLoad<IRoleDefinition>.LoadBatchAsync(Batch, Expression<Func<IRoleDefinition, Object>>[]) IDataModelLoad<IRoleDefinition>.LoadAsync(Expression<Func<IRoleDefinition, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface IRoleDefinition : IDataModel<IRoleDefinition>, IDataModelParent, IDataModelWithContext, ISupportModules<IRoleDefinition>, IDataModelGet<IRoleDefinition>, IDataModelLoad<IRoleDefinition>, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object BasePermissions Gets or sets a value that specifies the base permissions for the role definition. Declaration IBasePermissions BasePermissions { get; set; } Property Value IBasePermissions Description Gets or sets a value that specifies the description of the role definition. Declaration string Description { get; set; } Property Value String Hidden Gets a value that specifies whether the role definition is displayed. Declaration bool Hidden { get; set; } Property Value Boolean Id Gets a value that specifies the Id of the role definition. Declaration int Id { get; } Property Value Int32 Name Gets or sets a value that specifies the role definition name. Declaration string Name { get; set; } Property Value String Order Gets or sets a value that specifies the order position of the object in the site collection Permission Levels page. Declaration int Order { get; set; } Property Value Int32 RoleTypeKind Gets a value that specifies the type of the role definition. Declaration RoleType RoleTypeKind { get; set; } Property Value RoleType Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Security.IRoleDefinitionCollection.html": {
    "href": "api/PnP.Core.Model.Security.IRoleDefinitionCollection.html",
    "title": "Interface IRoleDefinitionCollection | PnP Core SDK",
    "keywords": "Interface IRoleDefinitionCollection Public interface to define a collection of SharePoint RoleDefinitions Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<IRoleDefinition>.LoadAsync(Expression<Func<IRoleDefinition, Object>>[]) IDataModelCollectionLoad<IRoleDefinition>.LoadBatchAsync(Batch, Expression<Func<IRoleDefinition, Object>>[]) Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface IRoleDefinitionCollection : IQueryable<IRoleDefinition>, IAsyncEnumerable<IRoleDefinition>, IDataModelCollection<IRoleDefinition>, IEnumerable<IRoleDefinition>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<IRoleDefinition>, ISupportModules<IRoleDefinitionCollection> Methods Add(String, RoleType, PermissionKind[], String, Boolean, Int32) Adds a new role definition Declaration IRoleDefinition Add(string name, RoleType roleTypeKind, PermissionKind[] permissions, string description = null, bool hidden = false, int order = 0) Parameters String name RoleType roleTypeKind PermissionKind [] permissions String description Boolean hidden Int32 order Returns IRoleDefinition AddAsync(String, RoleType, PermissionKind[], String, Boolean, Int32) Adds a new role definition Declaration Task<IRoleDefinition> AddAsync(string name, RoleType roleTypeKind, PermissionKind[] permissions, string description = null, bool hidden = false, int order = 0) Parameters String name RoleType roleTypeKind PermissionKind [] permissions String description Boolean hidden Int32 order Returns Task < IRoleDefinition > AddBatch(Batch, String, RoleType, PermissionKind[], String, Boolean, Int32) Adds a new role definition Declaration IRoleDefinition AddBatch(Batch batch, string name, RoleType roleTypeKind, PermissionKind[] permissions, string description = null, bool hidden = false, int order = 0) Parameters Batch batch String name RoleType roleTypeKind PermissionKind [] permissions String description Boolean hidden Int32 order Returns IRoleDefinition AddBatch(String, RoleType, PermissionKind[], String, Boolean, Int32) Adds a new role definition Declaration IRoleDefinition AddBatch(string name, RoleType roleTypeKind, PermissionKind[] permissions, string description = null, bool hidden = false, int order = 0) Parameters String name RoleType roleTypeKind PermissionKind [] permissions String description Boolean hidden Int32 order Returns IRoleDefinition AddBatchAsync(Batch, String, RoleType, PermissionKind[], String, Boolean, Int32) Adds a new role definition Declaration Task<IRoleDefinition> AddBatchAsync(Batch batch, string name, RoleType roleTypeKind, PermissionKind[] permissions, string description = null, bool hidden = false, int order = 0) Parameters Batch batch String name RoleType roleTypeKind PermissionKind [] permissions String description Boolean hidden Int32 order Returns Task < IRoleDefinition > AddBatchAsync(String, RoleType, PermissionKind[], String, Boolean, Int32) Adds a new role definition Declaration Task<IRoleDefinition> AddBatchAsync(string name, RoleType roleTypeKind, PermissionKind[] permissions, string description = null, bool hidden = false, int order = 0) Parameters String name RoleType roleTypeKind PermissionKind [] permissions String description Boolean hidden Int32 order Returns Task < IRoleDefinition > Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.Security.ISharePointGroup.html": {
    "href": "api/PnP.Core.Model.Security.ISharePointGroup.html",
    "title": "Interface ISharePointGroup | PnP Core SDK",
    "keywords": "Interface ISharePointGroup Public interface to define a SharePoint Group Inherited Members IDataModel<ISharePointGroup>.Requested IDataModel<ISharePointGroup>.HasValue(String) IDataModel<ISharePointGroup>.HasChanged(String) IDataModel<ISharePointGroup>.IsPropertyAvailable(Expression<Func<ISharePointGroup, Object>>) IDataModel<ISharePointGroup>.ArePropertiesAvailable(Expression<Func<ISharePointGroup, Object>>[]) IDataModel<ISharePointGroup>.EnsureProperties(Expression<Func<ISharePointGroup, Object>>[]) IDataModel<ISharePointGroup>.EnsurePropertiesAsync(Expression<Func<ISharePointGroup, Object>>[]) IDataModel<ISharePointGroup>.ExecuteRequestAsync(ApiRequest) IDataModel<ISharePointGroup>.ExecuteRequest(ApiRequest) IDataModel<ISharePointGroup>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ISharePointGroup>.ExecuteRequestBatch(ApiRequest) IDataModel<ISharePointGroup>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ISharePointGroup>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ISharePointGroup>.GetBatchAsync(Batch, Expression<Func<ISharePointGroup, Object>>[]) IDataModelGet<ISharePointGroup>.GetAsync(Expression<Func<ISharePointGroup, Object>>[]) IDataModelLoad<ISharePointGroup>.LoadBatchAsync(Batch, Expression<Func<ISharePointGroup, Object>>[]) IDataModelLoad<ISharePointGroup>.LoadAsync(Expression<Func<ISharePointGroup, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() ISharePointPrincipal.Id ISharePointPrincipal.IsHiddenInUI ISharePointPrincipal.PrincipalType ISharePointPrincipal.LoginName ISharePointPrincipal.Title Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface ISharePointGroup : IDataModel<ISharePointGroup>, IDataModelParent, IDataModelWithContext, ISupportModules<ISharePointGroup>, IDataModelGet<ISharePointGroup>, IDataModelLoad<ISharePointGroup>, IDataModelUpdate, IDataModelDelete, ISharePointPrincipal, IQueryableDataModel Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object AllowMembersEditMembership Allow members to edit the group members Declaration bool AllowMembersEditMembership { get; set; } Property Value Boolean AllowRequestToJoinLeave Allow requests to join or leave the group Declaration bool AllowRequestToJoinLeave { get; set; } Property Value Boolean AutoAcceptRequestToJoinLeave Automatically accept requests to join or leave the group Declaration bool AutoAcceptRequestToJoinLeave { get; set; } Property Value Boolean CanCurrentUserEditMembership Can the current user edit the group members Declaration bool CanCurrentUserEditMembership { get; set; } Property Value Boolean CanCurrentUserManageGroup Can the current user manage the group Declaration bool CanCurrentUserManageGroup { get; set; } Property Value Boolean CanCurrentUserViewMembership Can the current user view the group membership Declaration bool CanCurrentUserViewMembership { get; set; } Property Value Boolean Description Group description. Note that HTML tags will be stripped and that the max length of the description will be limited to 511 characters Declaration string Description { get; set; } Property Value String OnlyAllowMembersViewMembership Only members can see other group members Declaration bool OnlyAllowMembersViewMembership { get; set; } Property Value Boolean OwnerTitle Group owner title Declaration string OwnerTitle { get; } Property Value String RequestToJoinLeaveEmailSetting Email configuration for the group join or leave operations Declaration string RequestToJoinLeaveEmailSetting { get; set; } Property Value String Users Members of this group Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration ISharePointUserCollection Users { get; } Property Value ISharePointUserCollection Methods AddRoleDefinitions(String[]) Adds role definitions for this group Declaration bool AddRoleDefinitions(params string[] names) Parameters String [] names Returns Boolean AddRoleDefinitionsAsync(String[]) Adds role definitions for this group Declaration Task<bool> AddRoleDefinitionsAsync(params string[] names) Parameters String [] names Returns Task < Boolean > AddUser(String) Adds a user to this group. Specify the full username, e.g. \"i:0#.f|membership|user@domain.com&quot; Declaration void AddUser(string loginName) Parameters String loginName AddUserAsync(String) Adds a user to this group. Specify the full username, e.g. \"i:0#.f|membership|user@domain.com&quot; Declaration Task AddUserAsync(string loginName) Parameters String loginName Returns Task AddUserBatch(Batch, String) Adds a user to this group. Specify the full username, e.g. \"i:0#.f|membership|user@domain.com&quot; Declaration void AddUserBatch(Batch batch, string loginName) Parameters Batch batch String loginName AddUserBatch(String) Adds a user to this group. Specify the full username, e.g. \"i:0#.f|membership|user@domain.com&quot; Declaration void AddUserBatch(string loginName) Parameters String loginName AddUserBatchAsync(Batch, String) Adds a user to this group. Specify the full username, e.g. \"i:0#.f|membership|user@domain.com&quot; Declaration Task AddUserBatchAsync(Batch batch, string loginName) Parameters Batch batch String loginName Returns Task AddUserBatchAsync(String) Adds a user to this group. Specify the full username, e.g. \"i:0#.f|membership|user@domain.com&quot; Declaration Task AddUserBatchAsync(string loginName) Parameters String loginName Returns Task GetRoleDefinitions() Retrieves the role definitions for this group Declaration IRoleDefinitionCollection GetRoleDefinitions() Returns IRoleDefinitionCollection GetRoleDefinitionsAsync() Retrieves the role definitions for this group Declaration Task<IRoleDefinitionCollection> GetRoleDefinitionsAsync() Returns Task < IRoleDefinitionCollection > RemoveRoleDefinitions(String[]) Removes role definitions for this group Declaration bool RemoveRoleDefinitions(params string[] names) Parameters String [] names Returns Boolean RemoveRoleDefinitionsAsync(String[]) Removes role definitions for this group Declaration Task<bool> RemoveRoleDefinitionsAsync(params string[] names) Parameters String [] names Returns Task < Boolean > RemoveUser(Int32) Removes a user given its id from a group. Declaration void RemoveUser(int userId) Parameters Int32 userId RemoveUserAsync(Int32) Removes a user given its id from a group. Declaration Task RemoveUserAsync(int userId) Parameters Int32 userId Returns Task RemoveUserBatch(Batch, Int32) Removes a user given its id from a group. Declaration void RemoveUserBatch(Batch batch, int userId) Parameters Batch batch Int32 userId RemoveUserBatch(Int32) Removes a user given its id from a group. Declaration void RemoveUserBatch(int userId) Parameters Int32 userId RemoveUserBatchAsync(Batch, Int32) Removes a user given its id from a group. Declaration Task RemoveUserBatchAsync(Batch batch, int userId) Parameters Batch batch Int32 userId Returns Task RemoveUserBatchAsync(Int32) Removes a user given its id from a group. Declaration Task RemoveUserBatchAsync(int userId) Parameters Int32 userId Returns Task Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Security.ISharePointGroupCollection.html": {
    "href": "api/PnP.Core.Model.Security.ISharePointGroupCollection.html",
    "title": "Interface ISharePointGroupCollection | PnP Core SDK",
    "keywords": "Interface ISharePointGroupCollection Public interface to define a collection of SharePoint groups Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<ISharePointGroup>.LoadAsync(Expression<Func<ISharePointGroup, Object>>[]) IDataModelCollectionLoad<ISharePointGroup>.LoadBatchAsync(Batch, Expression<Func<ISharePointGroup, Object>>[]) Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface ISharePointGroupCollection : IQueryable<ISharePointGroup>, IAsyncEnumerable<ISharePointGroup>, IDataModelCollection<ISharePointGroup>, IEnumerable<ISharePointGroup>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<ISharePointGroup>, ISupportModules<ISharePointGroupCollection> Methods Add(String) Adds a new group Declaration ISharePointGroup Add(string name) Parameters String name Returns ISharePointGroup AddAsync(String) Adds a new group Declaration Task<ISharePointGroup> AddAsync(string name) Parameters String name Returns Task < ISharePointGroup > AddBatch(Batch, String) Adds a new group Declaration ISharePointGroup AddBatch(Batch batch, string name) Parameters Batch batch String name Returns ISharePointGroup AddBatch(String) Adds a new group Declaration ISharePointGroup AddBatch(string name) Parameters String name Returns ISharePointGroup AddBatchAsync(Batch, String) Adds a new group Declaration Task<ISharePointGroup> AddBatchAsync(Batch batch, string name) Parameters Batch batch String name Returns Task < ISharePointGroup > AddBatchAsync(String) Adds a new group Declaration Task<ISharePointGroup> AddBatchAsync(string name) Parameters String name Returns Task < ISharePointGroup > Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.Security.ISharePointPrincipal.html": {
    "href": "api/PnP.Core.Model.Security.ISharePointPrincipal.html",
    "title": "Interface ISharePointPrincipal | PnP Core SDK",
    "keywords": "Interface ISharePointPrincipal Represents a SharePoint user or group that can be assigned permissions to control security. Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface ISharePointPrincipal Properties Id Gets a value that specifies the member identifier for the principal (user/group). Declaration int Id { get; } Property Value Int32 IsHiddenInUI Gets a value that indicates whether this member should be hidden in the UI. Declaration bool IsHiddenInUI { get; set; } Property Value Boolean LoginName Gets the login name of the principal (user/group). Declaration string LoginName { get; } Property Value String PrincipalType Gets a value containing the type of the principal. Declaration PrincipalType PrincipalType { get; } Property Value PrincipalType Title Name of the principal (user/group). Declaration string Title { get; set; } Property Value String"
  },
  "api/PnP.Core.Model.Security.ISharePointSharingPrincipal.html": {
    "href": "api/PnP.Core.Model.Security.ISharePointSharingPrincipal.html",
    "title": "Interface ISharePointSharingPrincipal | PnP Core SDK",
    "keywords": "Interface ISharePointSharingPrincipal Represents a SharePoint sharing principal. Inherited Members IDataModel<ISharePointSharingPrincipal>.Requested IDataModel<ISharePointSharingPrincipal>.HasValue(String) IDataModel<ISharePointSharingPrincipal>.HasChanged(String) IDataModel<ISharePointSharingPrincipal>.IsPropertyAvailable(Expression<Func<ISharePointSharingPrincipal, Object>>) IDataModel<ISharePointSharingPrincipal>.ArePropertiesAvailable(Expression<Func<ISharePointSharingPrincipal, Object>>[]) IDataModel<ISharePointSharingPrincipal>.EnsureProperties(Expression<Func<ISharePointSharingPrincipal, Object>>[]) IDataModel<ISharePointSharingPrincipal>.EnsurePropertiesAsync(Expression<Func<ISharePointSharingPrincipal, Object>>[]) IDataModel<ISharePointSharingPrincipal>.ExecuteRequestAsync(ApiRequest) IDataModel<ISharePointSharingPrincipal>.ExecuteRequest(ApiRequest) IDataModel<ISharePointSharingPrincipal>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ISharePointSharingPrincipal>.ExecuteRequestBatch(ApiRequest) IDataModel<ISharePointSharingPrincipal>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ISharePointSharingPrincipal>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface ISharePointSharingPrincipal : IDataModel<ISharePointSharingPrincipal>, IDataModelParent, IDataModelWithContext, ISupportModules<ISharePointSharingPrincipal> Properties Expiration When does this sharing principal expire? Declaration string Expiration { get; } Property Value String Id Gets a value that specifies the member identifier for the user or group. Declaration int Id { get; } Property Value Int32 IsActive Is this user still active? Declaration bool IsActive { get; } Property Value Boolean IsExternal Is this user an external user? Declaration bool IsExternal { get; } Property Value Boolean JobTitle Gets the job title of the user. Declaration string JobTitle { get; } Property Value String LoginName Gets the login name of the user. Declaration string LoginName { get; } Property Value String Mail E-mail address of the user. SP REST property name: Email Declaration string Mail { get; } Property Value String Name Gets the name of the user. Declaration string Name { get; } Property Value String PrincipalType Gets a value containing the type of the principal. Declaration PrincipalType PrincipalType { get; } Property Value PrincipalType UserPrincipalName User principle name (UPN) of the user. Declaration string UserPrincipalName { get; } Property Value String Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Security.ISharePointUser.html": {
    "href": "api/PnP.Core.Model.Security.ISharePointUser.html",
    "title": "Interface ISharePointUser | PnP Core SDK",
    "keywords": "Interface ISharePointUser Public interface to define a SharePoint User Inherited Members IDataModel<ISharePointUser>.Requested IDataModel<ISharePointUser>.HasValue(String) IDataModel<ISharePointUser>.HasChanged(String) IDataModel<ISharePointUser>.IsPropertyAvailable(Expression<Func<ISharePointUser, Object>>) IDataModel<ISharePointUser>.ArePropertiesAvailable(Expression<Func<ISharePointUser, Object>>[]) IDataModel<ISharePointUser>.EnsureProperties(Expression<Func<ISharePointUser, Object>>[]) IDataModel<ISharePointUser>.EnsurePropertiesAsync(Expression<Func<ISharePointUser, Object>>[]) IDataModel<ISharePointUser>.ExecuteRequestAsync(ApiRequest) IDataModel<ISharePointUser>.ExecuteRequest(ApiRequest) IDataModel<ISharePointUser>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ISharePointUser>.ExecuteRequestBatch(ApiRequest) IDataModel<ISharePointUser>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ISharePointUser>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ISharePointUser>.GetBatchAsync(Batch, Expression<Func<ISharePointUser, Object>>[]) IDataModelGet<ISharePointUser>.GetAsync(Expression<Func<ISharePointUser, Object>>[]) IDataModelLoad<ISharePointUser>.LoadBatchAsync(Batch, Expression<Func<ISharePointUser, Object>>[]) IDataModelLoad<ISharePointUser>.LoadAsync(Expression<Func<ISharePointUser, Object>>[]) ISharePointPrincipal.Id ISharePointPrincipal.IsHiddenInUI ISharePointPrincipal.PrincipalType ISharePointPrincipal.LoginName ISharePointPrincipal.Title Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface ISharePointUser : IDataModel<ISharePointUser>, IDataModelParent, IDataModelWithContext, ISupportModules<ISharePointUser>, IDataModelGet<ISharePointUser>, IDataModelLoad<ISharePointUser>, ISharePointPrincipal, IQueryableDataModel Properties AadObjectId Id of the underlying graph object (if any) Declaration string AadObjectId { get; set; } Property Value String All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object Department Department of the user Declaration string Department { get; set; } Property Value String Expiration A date/time string for which the format conforms to the ISO8601 time format YYYY-MM-DDTHH:MM:SSZ and which represents the time and date of expiry for the user. A null value indicates no expiry. Declaration string Expiration { get; } Property Value String IsEmailAuthenticationGuestUser Indicates whether the user is a guest user authenticated via an e-mail address Declaration bool IsEmailAuthenticationGuestUser { get; } Property Value Boolean IsShareByEmailGuestUser Indicates whether the user is a guest user shared by e-mail Declaration bool IsShareByEmailGuestUser { get; } Property Value Boolean IsSiteAdmin Indicates whether the user is a site collection administrator Declaration bool IsSiteAdmin { get; } Property Value Boolean Mail E-mail address of the user. SP REST property name: Email Declaration string Mail { get; set; } Property Value String UserPrincipalName User principle name (UPN) of the user Declaration string UserPrincipalName { get; set; } Property Value String Methods AsGraphUser() Returns this SharePoint user as a Graph user Declaration IGraphUser AsGraphUser() Returns IGraphUser AsGraphUserAsync() Returns this SharePoint user as a Graph user Declaration Task<IGraphUser> AsGraphUserAsync() Returns Task < IGraphUser > Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Security.ISharePointUserCollection.html": {
    "href": "api/PnP.Core.Model.Security.ISharePointUserCollection.html",
    "title": "Interface ISharePointUserCollection | PnP Core SDK",
    "keywords": "Interface ISharePointUserCollection Public interface to define a collection of SharePoint users Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<ISharePointUser>.LoadAsync(Expression<Func<ISharePointUser, Object>>[]) IDataModelCollectionLoad<ISharePointUser>.LoadBatchAsync(Batch, Expression<Func<ISharePointUser, Object>>[]) Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface ISharePointUserCollection : IQueryable<ISharePointUser>, IAsyncEnumerable<ISharePointUser>, IDataModelCollection<ISharePointUser>, IEnumerable<ISharePointUser>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<ISharePointUser>, ISupportModules<ISharePointUserCollection> Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.Security.PrincipalType.html": {
    "href": "api/PnP.Core.Model.Security.PrincipalType.html",
    "title": "Enum PrincipalType | PnP Core SDK",
    "keywords": "Enum PrincipalType Specifies the type of a principal. This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values. Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public enum PrincipalType : int All Enumeration whose value specifies all principal types. Value = 15. DistributionList Enumeration whose value specifies a distribution list as the principal type. Value = 2. None Enumeration whose value specifies no principal type. Value = 0. SecurityGroup Enumeration whose value specifies a security group as the principal type. Value = 4. SharePointGroup Enumeration whose value specifies a group (2) as the principal type. Value = 8. User Enumeration whose value specifies a user as the principal type. Value = 1."
  },
  "api/PnP.Core.Model.SharePoint.AddFieldOptionsFlags.html": {
    "href": "api/PnP.Core.Model.SharePoint.AddFieldOptionsFlags.html",
    "title": "Enum AddFieldOptionsFlags | PnP Core SDK",
    "keywords": "Enum AddFieldOptionsFlags Specifies the control settings while adding a field. This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum AddFieldOptionsFlags : int AddFieldCheckDisplayName Enumeration whose values specify to confirm that no other field has the same display name. The value = 32. /// AddFieldInternalNameHint Enumeration whose values specify adding an internal field name hint for the purpose of avoiding possible database locking or field renaming operations.The value = 8. AddFieldToDefaultView Enumeration whose values specify that a new field that is added to the specified list must also be added to the default list view.The value = 16. AddToAllContentTypes Enumeration whose values specify that a new field that is added to the specified list must also be added to all content types in the site collection.The value = 4. AddToDefaultContentType Enumeration whose values specify that a new field added to the list must also be added to the default content type in the site collection.The value = 1. AddToNoContentType Enumeration whose values specify that a new field must not be added to any other content type.The value = 2. DefaultValue Enumeration whose values specify that a new field added to the list must also be added to the default content type in the site collection.The value = 0."
  },
  "api/PnP.Core.Model.SharePoint.AddUserCustomActionOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.AddUserCustomActionOptions.html",
    "title": "Class AddUserCustomActionOptions | PnP Core SDK",
    "keywords": "Class AddUserCustomActionOptions Options to specify when adding User Custom Action Inheritance Object AddUserCustomActionOptions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class AddUserCustomActionOptions : object Properties ClientSideComponentId Gets or sets the unique identifier of the associated client side component. Declaration public Guid? ClientSideComponentId { get; set; } Property Value Nullable < Guid > ClientSideComponentProperties Gets or sets the JSON formatted properties of the associated client side component. Declaration public string ClientSideComponentProperties { get; set; } Property Value String CommandUIExtension Gets or sets a value that specifies an implementation specific XML fragment that determines user interface properties of the custom action. Declaration public string CommandUIExtension { get; set; } Property Value String Description Gets or sets the description of the custom action. Declaration public string Description { get; set; } Property Value String Group Gets or sets a value that specifies an implementation-specific value that determines the position of the custom action in the page. Declaration public string Group { get; set; } Property Value String HostProperties This property is only used when an application customizer is created and preallocated placeholders are specified. It is optional. If non-empty, the string must contain a JSON object with one or two properties for the height amount needed to be preallocated. Declaration public string HostProperties { get; set; } Property Value String ImageUrl Gets or sets the URL of the image associated with the custom action. Declaration public string ImageUrl { get; set; } Property Value String Location Gets or sets the location of the custom action. Declaration public string Location { get; set; } Property Value String Name Gets or sets the name of the custom action. Declaration public string Name { get; set; } Property Value String RegistrationId Gets or sets the value that specifies the identifier of the object associated with the custom action. Declaration public string RegistrationId { get; set; } Property Value String RegistrationType Gets or sets the value that specifies the type of object associated with the custom action. Declaration public UserCustomActionRegistrationType? RegistrationType { get; set; } Property Value Nullable < UserCustomActionRegistrationType > Rights Gets or sets the Rights for this action. Declaration public IBasePermissions Rights { get; set; } Property Value IBasePermissions ScriptBlock Gets or sets the value that specifies the ECMAScript to be executed when the custom action is performed. Declaration public string ScriptBlock { get; set; } Property Value String ScriptSrc Gets or sets a value that specifies the URI of a file which contains the ECMAScript to execute on the page. Declaration public string ScriptSrc { get; set; } Property Value String Sequence Gets or sets the value that specifies an implementation-specific value that determines the order of the custom action that appears on the page. Declaration public int? Sequence { get; set; } Property Value Nullable < Int32 > Title Gets or sets the display title of the custom action. Declaration public string Title { get; set; } Property Value String Url Gets or sets the URL, URI, or ECMAScript (JScript, JavaScript) function associated with the action. Declaration public string Url { get; set; } Property Value String"
  },
  "api/PnP.Core.Model.SharePoint.CalendarType.html": {
    "href": "api/PnP.Core.Model.SharePoint.CalendarType.html",
    "title": "Enum CalendarType | PnP Core SDK",
    "keywords": "Enum CalendarType A calendar type is a 2-byte integer value that specifies the type of calendar to use in a particular context. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee543260%28v%3doffice.15%29 Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum CalendarType : int ChineseLunar Specifies Chinese Lunar calendar type. Gregorian Specifies Gregorian (localized) calendar type. GregorianArabic Specifies a Gregorian (Arabic) calendar type. GregorianMEFrench Specifies a Gregorian (Middle East French) calendar type. GregorianXLITEnglish Specifies a Gregorian (transliterated English) calendar type. GregorianXLITFrench Specifies a Gregorian (transliterated French) calendar type. Hebrew Specifies a Hebrew (Lunar) calendar type. Hijri Specifies a Hijri (Arabic Lunar) calendar type. Japan Specifies a Japanese Emperor Era calendar type. Korea Specifies a Korean Tangun Era calendar type. KoreaJapanLunar Specifies a Korean and Japanese Lunar calendar type. None The calendar type is not specified. SakaEra Specifies a Saka Era calendar type. Taiwan Specifies a Year of Taiwan calendar type. Thai Specifies a Thai calendar type."
  },
  "api/PnP.Core.Model.SharePoint.CamlQueryOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.CamlQueryOptions.html",
    "title": "Class CamlQueryOptions | PnP Core SDK",
    "keywords": "Class CamlQueryOptions Options for making a CAML query to SharePoint Online Inheritance Object CamlQueryOptions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class CamlQueryOptions : object Properties AllowIncrementalResults Can the query return incremental results Declaration public bool? AllowIncrementalResults { get; set; } Property Value Nullable < Boolean > DatesInUtc Return dates in UTC format Declaration public bool? DatesInUtc { get; set; } Property Value Nullable < Boolean > FolderServerRelativeUrl Specifies the server relative URL of a list folder from which results will be returned Declaration public string FolderServerRelativeUrl { get; set; } Property Value String PagingInfo Value that specifies information, as name-value pairs, required to get the next page of data for a list view Declaration public string PagingInfo { get; set; } Property Value String ViewXml Caml query to execute Declaration public string ViewXml { get; set; } Property Value String"
  },
  "api/PnP.Core.Model.SharePoint.CanvasSectionTemplate.html": {
    "href": "api/PnP.Core.Model.SharePoint.CanvasSectionTemplate.html",
    "title": "Enum CanvasSectionTemplate | PnP Core SDK",
    "keywords": "Enum CanvasSectionTemplate The type of canvas being used Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum CanvasSectionTemplate : int OneColumn One column OneColumnFullWidth One column, full browser width. This one only works for sites having communication sites features enabled in combination with image or hero webparts OneColumnVerticalSection One column + one vertical section column ThreeColumn Three columns of the same size ThreeColumnVerticalSection Three columns of the size + one vertical section column TwoColumn Two columns of the same size TwoColumnLeft Two columns, left one is 2/3, right one 1/3 TwoColumnLeftVerticalSection Two columns, left 2/3, right 1/3 + one vertical section column TwoColumnRight Two columns, left one is 1/3, right one 2/3 TwoColumnRightVerticalSection Two columns, left 1/3, right 2/3 + one vertical section column TwoColumnVerticalSection Two columns of the same size + one vertical section column"
  },
  "api/PnP.Core.Model.SharePoint.ChangeActivityType.html": {
    "href": "api/PnP.Core.Model.SharePoint.ChangeActivityType.html",
    "title": "Enum ChangeActivityType | PnP Core SDK",
    "keywords": "Enum ChangeActivityType Change activity types Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum ChangeActivityType : int Comment Comment activity Hashtag Hashtag activity NoActivity No activity Spotlight Spotlight activity"
  },
  "api/PnP.Core.Model.SharePoint.ChangeQueryOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.ChangeQueryOptions.html",
    "title": "Class ChangeQueryOptions | PnP Core SDK",
    "keywords": "Class ChangeQueryOptions Defines a query that is performed against the change log. Inheritance Object ChangeQueryOptions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class ChangeQueryOptions : object Constructors ChangeQueryOptions() Initializes a new instance of the ChangeQueryOptions class. Declaration public ChangeQueryOptions() ChangeQueryOptions(Boolean, Boolean) Initializes a new instance of the ChangeQueryOptions class. Declaration public ChangeQueryOptions(bool allChangeObjectTypes, bool allChangeTypes) Parameters Boolean allChangeObjectTypes If true , get changes for all change object types. Boolean allChangeTypes If true , get all change types. Properties Activity Specifies whether activity is included in the query. Declaration public bool Activity { get; set; } Property Value Boolean Add Gets or sets a value that specifies whether add changes are included in the query. Declaration public bool Add { get; set; } Property Value Boolean Alert Gets or sets a value that specifies whether changes to alerts are included in the query. Declaration public bool Alert { get; set; } Property Value Boolean ChangeTokenEnd Gets or sets a value that specifies the end date and end time for changes that are returned through the query. Declaration public IChangeToken ChangeTokenEnd { get; set; } Property Value IChangeToken ChangeTokenStart Gets or sets a value that specifies the start date and start time for changes that are returned through the query. Changes after this change token are returned. Declaration public IChangeToken ChangeTokenStart { get; set; } Property Value IChangeToken ContentType Gets or sets a value that specifies whether changes to content types are included in the query. Declaration public bool ContentType { get; set; } Property Value Boolean DeleteObject Gets or sets a value that specifies whether delete changes are included in the query. Declaration public bool DeleteObject { get; set; } Property Value Boolean FetchLimit The maximum number of items to return (defaults to 1000). Declaration public long FetchLimit { get; set; } Property Value Int64 Field Gets or sets a value that specifies whether changes to site columns are included in the query. Declaration public bool Field { get; set; } Property Value Boolean File Gets or sets a value that specifies whether changes to files are included in the query. Declaration public bool File { get; set; } Property Value Boolean Folder Gets or sets value that specifies whether changes to folders are included in the query. Declaration public bool Folder { get; set; } Property Value Boolean Group Gets or sets a value that specifies whether changes to groups are included in the query. Declaration public bool Group { get; set; } Property Value Boolean GroupMembershipAdd Gets or sets a value that specifies whether adding users to groups is included in the query. Declaration public bool GroupMembershipAdd { get; set; } Property Value Boolean GroupMembershipDelete Gets or sets a value that specifies whether deleting users from the groups is included in the query. Declaration public bool GroupMembershipDelete { get; set; } Property Value Boolean IgnoreStartTokenNotFoundError Ignore errors when calling GetChanges if the caller's start ChangeToken is not found in the database (exact match) or if there are no changes in the database. Declaration public bool IgnoreStartTokenNotFoundError { get; set; } Property Value Boolean Item Gets or sets a value that specifies whether general changes to list items are included in the query. Declaration public bool Item { get; set; } Property Value Boolean LatestFirst Gets or sets a value that specifies whether to order the results by Modified By date, most recent first. Declaration public bool LatestFirst { get; set; } Property Value Boolean List Gets or sets a value that specifies whether changes to lists are included in the query. Declaration public bool List { get; set; } Property Value Boolean Move Gets or sets a value that specifies whether move changes are included in the query. Declaration public bool Move { get; set; } Property Value Boolean Navigation Gets or sets a value that specifies whether changes to the navigation structure of a site collection are included in the query. Declaration public bool Navigation { get; set; } Property Value Boolean RecursiveAll specifies whether we return all the change logs for folder scoped query. The flag will only work for Folder query. If true, all changes in the current folder and all sub folders will be returned. Otherwise, only changes in the current folder will be returned. Declaration public bool RecursiveAll { get; set; } Property Value Boolean Rename Gets or sets a value that specifies whether renaming changes are included in the query. Declaration public bool Rename { get; set; } Property Value Boolean RequireSecurityTrim Specifies whether we return log with security trimming. If true, we'll return the events with security trimming. Declaration public bool RequireSecurityTrim { get; set; } Property Value Boolean Restore Gets or sets a value that specifies whether restoring items from the recycle bin or from backups is included in the query. Declaration public bool Restore { get; set; } Property Value Boolean RoleAssignmentAdd Gets or sets a value that specifies whether adding role assignments is included in the query. Declaration public bool RoleAssignmentAdd { get; set; } Property Value Boolean RoleAssignmentDelete Gets or sets a value that specifies whether deleting role assignments is included in the query. Declaration public bool RoleAssignmentDelete { get; set; } Property Value Boolean RoleDefinitionAdd Gets or sets a value that specifies whether adding role definitions is included in the query. Declaration public bool RoleDefinitionAdd { get; set; } Property Value Boolean RoleDefinitionDelete Gets or sets a value that specifies whether deleting role definitions is included in the query. Declaration public bool RoleDefinitionDelete { get; set; } Property Value Boolean RoleDefinitionUpdate Gets or sets a value that specifies whether modifying role definitions is included in the query. Declaration public bool RoleDefinitionUpdate { get; set; } Property Value Boolean SecurityPolicy Gets or sets a value that specifies whether modifications to security policies are included in the query. Declaration public bool SecurityPolicy { get; set; } Property Value Boolean Site Gets or sets a value that specifies whether changes to site collections are included in the query. Declaration public bool Site { get; set; } Property Value Boolean SystemUpdate Gets or sets a value that specifies whether updates made using the item SystemUpdate method are included in the query. Declaration public bool SystemUpdate { get; set; } Property Value Boolean Update Gets or sets a value that specifies whether update changes are included in the query. Declaration public bool Update { get; set; } Property Value Boolean User Gets or sets a value that specifies whether changes to users are included in the query. Declaration public bool User { get; set; } Property Value Boolean View Gets or sets a value that specifies whether changes to views are included in the query. Declaration public bool View { get; set; } Property Value Boolean Web Gets or sets a value that specifies whether changes to Web sites are included in the query. Declaration public bool Web { get; set; } Property Value Boolean"
  },
  "api/PnP.Core.Model.SharePoint.ChangeTokenOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.ChangeTokenOptions.html",
    "title": "Class ChangeTokenOptions | PnP Core SDK",
    "keywords": "Class ChangeTokenOptions Represents a change token that is usable in ChangeQueryOptions . Inheritance Object ChangeTokenOptions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class ChangeTokenOptions : object, IChangeToken Constructors ChangeTokenOptions() Initializes a new instance of the ChangeTokenOptions class. Declaration public ChangeTokenOptions() ChangeTokenOptions(String) Initializes a new instance of the ChangeTokenOptions class. Declaration public ChangeTokenOptions(string stringValue) Parameters String stringValue The string value. Properties StringValue Gets or sets a string value that contains the serialized representation of the change token generated by the protocol server. Declaration public string StringValue { get; set; } Property Value String Implements IChangeToken.StringValue Methods ToString() Converts to string. Declaration public override string ToString() Returns String A that represents this instance. See Also IChangeToken"
  },
  "api/PnP.Core.Model.SharePoint.ChangeType.html": {
    "href": "api/PnP.Core.Model.SharePoint.ChangeType.html",
    "title": "Enum ChangeType | PnP Core SDK",
    "keywords": "Enum ChangeType Enumeration of the possible types of changes. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum ChangeType : int Activity Add Enumeration whose values specify that an object has been added within the scope of a list, site, site collection, or content database. AssignmentAdd Enumeration whose values specify that a user has been given permissions to a list. The list must have unique permissions enabled. AssignmentDelete Enumeration whose values specify that a user has lost permissions to a list. The list must have unique permissions enabled. DeleteObject Enumeration whose values specify that an object has been deleted within the scope of a list, site, site collection, or content database. Dirty ListContentTypeAdd ListContentTypeDelete MemberAdd Enumeration whose values specify that a user has been added to a group. MemberDelete Enumeration whose values specify that a user has been removed from a group. MoveAway Enumeration whose values specify that a non-leaf section within a URL has been renamed. The object was moved away from the location within the site specified by the change. MoveInto Enumeration whose values specify that a non-leaf section within a URL has been renamed. The object was moved into the location within the site specified by the change. Navigation Enumeration whose values specify that a change in the navigation structure of a site collection has been made. NoChange Enumeration whose values indicate that no change has taken place. Rename Enumeration whose values specify that the leaf in a URL has been renamed. Restore Enumeration whose values specify that an object has restored from a backup or from the recycle bin. RoleAdd Enumeration whose values specify that a role definition has been added. RoleDelete Enumeration whose values specify that a role definition has been deleted. RoleUpdate Enumeration whose values specify that a role definition has been updated. ScopeAdd Enumeration whose values specify that a change in permissions scope has been made to break inheritance from an object's parent. ScopeDelete Enumeration whose values specify that a change in permissions scope has been made to revert back to inheriting permissions from an object's parent. SystemUpdate Enumeration whose values specify that a change has been made to an item using the SystemUpdate method. Update Enumeration whose values specify that an object has been modified within the scope of a list, site, site collection, or content database."
  },
  "api/PnP.Core.Model.SharePoint.CheckinType.html": {
    "href": "api/PnP.Core.Model.SharePoint.CheckinType.html",
    "title": "Enum CheckinType | PnP Core SDK",
    "keywords": "Enum CheckinType Specifies the type of check-in for a file. (see https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/ee542953(v=office.15) ) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum CheckinType : int MajorCheckIn Enumeration whose values are incremented as a major version. The value = 1. MinorCheckIn Enumeration whose values are incremented as minor version. The value = 0. OverwriteCheckIn Enumeration whose values overwrite the file. The value = 2."
  },
  "api/PnP.Core.Model.SharePoint.CheckOutType.html": {
    "href": "api/PnP.Core.Model.SharePoint.CheckOutType.html",
    "title": "Enum CheckOutType | PnP Core SDK",
    "keywords": "Enum CheckOutType Enumeration that describes the different checkout states of a file, independent of the lock state of the file. (e.g. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/ee538918(v=office.15) ) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum CheckOutType : int None The file is not checked out. Offline The file is checked out for editing on the local computer. Online The file is checked out for editing on the server."
  },
  "api/PnP.Core.Model.SharePoint.ChoiceFormatType.html": {
    "href": "api/PnP.Core.Model.SharePoint.ChoiceFormatType.html",
    "title": "Enum ChoiceFormatType | PnP Core SDK",
    "keywords": "Enum ChoiceFormatType Enumeration that specifies how options are displayed for the selections in a choice field. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee536424%28v%3doffice.15%29 Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum ChoiceFormatType : int Dropdown A drop-down list box. RadioButtons Option buttons (also known as radio buttons)."
  },
  "api/PnP.Core.Model.SharePoint.CommentsDisabledScope.html": {
    "href": "api/PnP.Core.Model.SharePoint.CommentsDisabledScope.html",
    "title": "Enum CommentsDisabledScope | PnP Core SDK",
    "keywords": "Enum CommentsDisabledScope An enum to determine the scope for which comments are disabled. https://docs.microsoft.com/en-us/dotnet/api/microsoft.sharepoint.comments.commentsdisabledscope?view=sharepoint-csom Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum CommentsDisabledScope : int Item Item Scoped None No Scope Site Site Scoped Tenant Tenant Scoped Web Web Scoped"
  },
  "api/PnP.Core.Model.SharePoint.CommonFieldOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.CommonFieldOptions.html",
    "title": "Class CommonFieldOptions | PnP Core SDK",
    "keywords": "Class CommonFieldOptions Available options for adding most of SharePoint fields (Excepted Lookup fields) Inheritance Object CommonFieldOptions FieldBooleanOptions FieldCalculatedOptions FieldChoiceMultiOptions FieldCurrencyOptions FieldDateTimeOptions FieldLookupOptions FieldMultilineTextOptions FieldNumberOptions FieldTaxonomyOptions FieldTextOptions FieldUrlOptions FieldUserOptions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public abstract class CommonFieldOptions : object Properties AddToDefaultView Add this field to the default view Declaration public bool AddToDefaultView { get; set; } Property Value Boolean CustomFormatter Allows you to set custom formatting JSON ( https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/column-formatting#supported-column-types ) on the field Declaration public string CustomFormatter { get; set; } Property Value String DefaultFormula Sets the default formula of the field Declaration public string DefaultFormula { get; set; } Property Value String Description Sets the description of the field Declaration public string Description { get; set; } Property Value String EnforceUniqueValues Sets whether the field enforces unique values Declaration public bool? EnforceUniqueValues { get; set; } Property Value Nullable < Boolean > Group Sets the group of the field Declaration public string Group { get; set; } Property Value String Hidden Sets whether the field is hidden Declaration public bool? Hidden { get; set; } Property Value Nullable < Boolean > Id Guid of the field Declaration public Guid? Id { get; set; } Property Value Nullable < Guid > Indexed Sets whether the field is indexed Declaration public bool? Indexed { get; set; } Property Value Nullable < Boolean > Options An AddFieldOptionsFlags flag that specifies the field options to be applied during add Declaration public AddFieldOptionsFlags Options { get; set; } Property Value AddFieldOptionsFlags Required Sets whether the field is required Declaration public bool? Required { get; set; } Property Value Nullable < Boolean > ShowInEditForm Show this field on the list's edit form Declaration public bool? ShowInEditForm { get; set; } Property Value Nullable < Boolean > ShowInNewForm Show this field on the list's new form Declaration public bool? ShowInNewForm { get; set; } Property Value Nullable < Boolean > ShowInViewForms Show this field on the list's view forms Declaration public bool? ShowInViewForms { get; set; } Property Value Nullable < Boolean > ValidationFormula Sets the validation formula of the field Declaration public string ValidationFormula { get; set; } Property Value String ValidationMessage Sets the validation message of the field Declaration public string ValidationMessage { get; set; } Property Value String"
  },
  "api/PnP.Core.Model.SharePoint.CustomizedPageStatus.html": {
    "href": "api/PnP.Core.Model.SharePoint.CustomizedPageStatus.html",
    "title": "Enum CustomizedPageStatus | PnP Core SDK",
    "keywords": "Enum CustomizedPageStatus Specifies the cache and customization status for a page. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum CustomizedPageStatus : int Customized Enumeration whose values specify that the page was cached and has been customized. The value = 2. None Enumeration whose values specify that the page was never cached. The value = 0. Uncustomized Enumeration whose values specify that the page is cached and has not been customized. The value = 1."
  },
  "api/PnP.Core.Model.SharePoint.DateTimeFieldFormatType.html": {
    "href": "api/PnP.Core.Model.SharePoint.DateTimeFieldFormatType.html",
    "title": "Enum DateTimeFieldFormatType | PnP Core SDK",
    "keywords": "Enum DateTimeFieldFormatType Specifies the display format for date and time fields. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee537367%28v%3doffice.15%29 Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum DateTimeFieldFormatType : int DateOnly Displays only the date. DateTime Displays the date and time."
  },
  "api/PnP.Core.Model.SharePoint.DateTimeFieldFriendlyFormatType.html": {
    "href": "api/PnP.Core.Model.SharePoint.DateTimeFieldFriendlyFormatType.html",
    "title": "Enum DateTimeFieldFriendlyFormatType | PnP Core SDK",
    "keywords": "Enum DateTimeFieldFriendlyFormatType Specifies a friendly format to use in displaying date and time fields. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/jj168261%28v%3doffice.15%29 Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum DateTimeFieldFriendlyFormatType : int Disabled The standard absolute representation will be used. Value = 1. Relative The standard friendly relative representation will be used (for example, \"today at 3:00 PM\"). Value = 2. Unspecified Undefined. The default rendering will be used. Value = 0."
  },
  "api/PnP.Core.Model.SharePoint.DefaultWebPart.html": {
    "href": "api/PnP.Core.Model.SharePoint.DefaultWebPart.html",
    "title": "Enum DefaultWebPart | PnP Core SDK",
    "keywords": "Enum DefaultWebPart List of possible OOB web parts Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum DefaultWebPart : int BingMap Bing Map webpart Button Button web part CallToAction Call to Action web part ClientWebPart Web part to host SharePoint Add-In parts CodeSnippet Web part to show code ContentEmbed Content Embed webpart ContentRollup Content Rollup webpart CountDown CountDown web part CustomMessageRegion Custom Message Region web part Divider Divider web part DocumentEmbed Document Embed webpart Events Events webpart GroupCalendar Group Calendar webpart Hero Hero webpart Image Image webpart ImageGallery Image Gallery webpart Kindle Kindle preview web part LinkPreview Link Preview webpart List List webpart ListProperties List properties web part MarkDown MarkDown web part MicrosoftForms Microsoft Forms web part MyDocuments My documents web part MyFeed My Feed web part News News webpart (the \"new\" version of NewsReel) - they look the same but this one supports filtering properly NewsFeed News Feed webpart NewsReel News Reel webpart OrgChart Organization chart web part PageFields Web part to show one or more properties of the page as page content PageTitle Page Title webpart People People webpart Planner Planner web part PowerApps Web part to host PowerApps PowerBIReportEmbed PowerBI Report Embed webpart QuickChart Quick Chart webpart QuickLinks Quick Links webpart SavedForLater Saved for later web part SiteActivity Site Activity webpart Sites Sites web part Spacer Spacer web part SpacesDocLib Spaces document library web part SpacesFileViewer Spaces file viewer web part SpacesImageThreeSixty Spaces Image 360° viewer SpacesImageViewer Spaces image viewer web part SpacesModelViewer Spaces 3D model viewer SpacesPeople Spaces People web part SpacesText2D Spaces text SpacesVideoPlayer Spaces video player SpacesVideoThreeSixty Spaces Video 360° viewer ThirdParty Third party webpart Twitter Twitter web part VideoEmbed Video Embed webpart Weather Weather web part WorldClock World clock web part YammerEmbed Yammer Embed webpart YammerFullFeed Yammer feed web part YouTube YouTube embed web part"
  },
  "api/PnP.Core.Model.SharePoint.FieldBooleanOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldBooleanOptions.html",
    "title": "Class FieldBooleanOptions | PnP Core SDK",
    "keywords": "Class FieldBooleanOptions Options for a boolean field Inheritance Object CommonFieldOptions FieldBooleanOptions Inherited Members CommonFieldOptions.Id CommonFieldOptions.Required CommonFieldOptions.AddToDefaultView CommonFieldOptions.Options CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage CommonFieldOptions.ShowInEditForm CommonFieldOptions.ShowInViewForms CommonFieldOptions.ShowInNewForm CommonFieldOptions.CustomFormatter Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldBooleanOptions : CommonFieldOptions"
  },
  "api/PnP.Core.Model.SharePoint.FieldCalculatedOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldCalculatedOptions.html",
    "title": "Class FieldCalculatedOptions | PnP Core SDK",
    "keywords": "Class FieldCalculatedOptions Available options for SharePoint Calculated fields Inheritance Object CommonFieldOptions FieldCalculatedOptions Inherited Members CommonFieldOptions.Id CommonFieldOptions.Required CommonFieldOptions.AddToDefaultView CommonFieldOptions.Options CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage CommonFieldOptions.ShowInEditForm CommonFieldOptions.ShowInViewForms CommonFieldOptions.ShowInNewForm CommonFieldOptions.CustomFormatter Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldCalculatedOptions : CommonFieldOptions Properties CurrencyLocaleId Gets or sets a value that specifies the language code identifier (LCID) used to format the value of the field. Declaration public int? CurrencyLocaleId { get; set; } Property Value Nullable < Int32 > DateFormat Gets or sets the type of date and time format that is used in the field. Declaration public DateTimeFieldFormatType? DateFormat { get; set; } Property Value Nullable < DateTimeFieldFormatType > Formula Gets or sets a value that specifies the formula for the field. Declaration public string Formula { get; set; } Property Value String OutputType Gets or sets a value that specifies the output format for the field. Declaration public FieldType OutputType { get; set; } Property Value FieldType ShowAsPercentage Gets or sets whether the field must be shown as percentage. Declaration public bool? ShowAsPercentage { get; set; } Property Value Nullable < Boolean >"
  },
  "api/PnP.Core.Model.SharePoint.FieldChoiceMultiOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldChoiceMultiOptions.html",
    "title": "Class FieldChoiceMultiOptions | PnP Core SDK",
    "keywords": "Class FieldChoiceMultiOptions Available options for SharePoint Multi Choice fields Inheritance Object CommonFieldOptions FieldChoiceMultiOptions FieldChoiceOptions Inherited Members CommonFieldOptions.Id CommonFieldOptions.Required CommonFieldOptions.AddToDefaultView CommonFieldOptions.Options CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage CommonFieldOptions.ShowInEditForm CommonFieldOptions.ShowInViewForms CommonFieldOptions.ShowInNewForm CommonFieldOptions.CustomFormatter Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldChoiceMultiOptions : CommonFieldOptions Properties Choices Gets or sets a value that specifies values that are available for selection in the field. Declaration public string[] Choices { get; set; } Property Value String [] DefaultChoice Gets or sets the default choice value Declaration public string DefaultChoice { get; set; } Property Value String FillInChoice Gets or sets a value that specifies whether the field can accept values other than those specified in Choices. Declaration public bool? FillInChoice { get; set; } Property Value Nullable < Boolean >"
  },
  "api/PnP.Core.Model.SharePoint.FieldChoiceOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldChoiceOptions.html",
    "title": "Class FieldChoiceOptions | PnP Core SDK",
    "keywords": "Class FieldChoiceOptions Available options for SharePoint Choice fields Inheritance Object CommonFieldOptions FieldChoiceMultiOptions FieldChoiceOptions Inherited Members FieldChoiceMultiOptions.FillInChoice FieldChoiceMultiOptions.DefaultChoice FieldChoiceMultiOptions.Choices CommonFieldOptions.Id CommonFieldOptions.Required CommonFieldOptions.AddToDefaultView CommonFieldOptions.Options CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage CommonFieldOptions.ShowInEditForm CommonFieldOptions.ShowInViewForms CommonFieldOptions.ShowInNewForm CommonFieldOptions.CustomFormatter Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldChoiceOptions : FieldChoiceMultiOptions Properties EditFormat Determines whether to display the choice field as option buttons (also known as “radio buttons”) or as a drop-down list. Declaration public ChoiceFormatType EditFormat { get; set; } Property Value ChoiceFormatType"
  },
  "api/PnP.Core.Model.SharePoint.FieldCurrencyOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldCurrencyOptions.html",
    "title": "Class FieldCurrencyOptions | PnP Core SDK",
    "keywords": "Class FieldCurrencyOptions Available options for SharePoint Currency fields Inheritance Object CommonFieldOptions FieldCurrencyOptions Inherited Members CommonFieldOptions.Id CommonFieldOptions.Required CommonFieldOptions.AddToDefaultView CommonFieldOptions.Options CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage CommonFieldOptions.ShowInEditForm CommonFieldOptions.ShowInViewForms CommonFieldOptions.ShowInNewForm CommonFieldOptions.CustomFormatter Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldCurrencyOptions : CommonFieldOptions Properties CurrencyLocaleId Gets or sets a value that specifies the language code identifier (LCID) used to format the value of the field. Declaration public int? CurrencyLocaleId { get; set; } Property Value Nullable < Int32 > Decimals How many decimals to show Declaration public int? Decimals { get; set; } Property Value Nullable < Int32 >"
  },
  "api/PnP.Core.Model.SharePoint.FieldDateTimeOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldDateTimeOptions.html",
    "title": "Class FieldDateTimeOptions | PnP Core SDK",
    "keywords": "Class FieldDateTimeOptions Available options for SharePoint DateTime fields Inheritance Object CommonFieldOptions FieldDateTimeOptions Inherited Members CommonFieldOptions.Id CommonFieldOptions.Required CommonFieldOptions.AddToDefaultView CommonFieldOptions.Options CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage CommonFieldOptions.ShowInEditForm CommonFieldOptions.ShowInViewForms CommonFieldOptions.ShowInNewForm CommonFieldOptions.CustomFormatter Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldDateTimeOptions : CommonFieldOptions Properties DateTimeCalendarType Gets or sets a value that specifies the calendar type of the field. Declaration public CalendarType DateTimeCalendarType { get; set; } Property Value CalendarType DisplayFormat Gets or sets the type of date and time format that is used in the field. Declaration public DateTimeFieldFormatType DisplayFormat { get; set; } Property Value DateTimeFieldFormatType FriendlyDisplayFormat Gets or sets the type of friendly display format that is used in the field. Declaration public DateTimeFieldFriendlyFormatType FriendlyDisplayFormat { get; set; } Property Value DateTimeFieldFriendlyFormatType"
  },
  "api/PnP.Core.Model.SharePoint.FieldIndexStatus.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldIndexStatus.html",
    "title": "Enum FieldIndexStatus | PnP Core SDK",
    "keywords": "Enum FieldIndexStatus Describes whether a field is indexed, and whether the data in the index is complete Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum FieldIndexStatus : int Disabling The field index definition has been deleted, but its data is in the process of being removed. Enabling The field index definition has been created, but its data is in the process of being populated. Indexed The field is indexed. None The field is not indexed."
  },
  "api/PnP.Core.Model.SharePoint.FieldLookupOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldLookupOptions.html",
    "title": "Class FieldLookupOptions | PnP Core SDK",
    "keywords": "Class FieldLookupOptions Available options for SharePoint lookup fields Inheritance Object CommonFieldOptions FieldLookupOptions Inherited Members CommonFieldOptions.Id CommonFieldOptions.Required CommonFieldOptions.AddToDefaultView CommonFieldOptions.Options CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage CommonFieldOptions.ShowInEditForm CommonFieldOptions.ShowInViewForms CommonFieldOptions.ShowInNewForm CommonFieldOptions.CustomFormatter Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldLookupOptions : CommonFieldOptions Properties LookupFieldName Gets or sets a value that specifies the internal field name of the field used as the lookup values. Declaration public string LookupFieldName { get; set; } Property Value String LookupListId Gets or sets a value that specifies the list identifier of the list that contains the field to use as the lookup values. Declaration public Guid LookupListId { get; set; } Property Value Guid LookupWebId Gets or sets a value that specifies the GUID that identifies the site containing the list which contains the field used as the lookup values. Declaration public Guid LookupWebId { get; set; } Property Value Guid"
  },
  "api/PnP.Core.Model.SharePoint.FieldMultilineTextOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldMultilineTextOptions.html",
    "title": "Class FieldMultilineTextOptions | PnP Core SDK",
    "keywords": "Class FieldMultilineTextOptions Available options for SharePoint Multiline Text fields Inheritance Object CommonFieldOptions FieldMultilineTextOptions Inherited Members CommonFieldOptions.Id CommonFieldOptions.Required CommonFieldOptions.AddToDefaultView CommonFieldOptions.Options CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage CommonFieldOptions.ShowInEditForm CommonFieldOptions.ShowInViewForms CommonFieldOptions.ShowInNewForm CommonFieldOptions.CustomFormatter Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldMultilineTextOptions : CommonFieldOptions Properties AllowHyperlink Gets or sets a value that specifies whether a hyperlink is allowed as a value of the field. Declaration public bool? AllowHyperlink { get; set; } Property Value Nullable < Boolean > AppendOnly Gets or sets a value that specifies whether all changes to the value of the field are displayed in list forms. Declaration public bool? AppendOnly { get; set; } Property Value Nullable < Boolean > NumberOfLines Gets or sets a value that specifies the number of lines of text to display for the field. Declaration public int? NumberOfLines { get; set; } Property Value Nullable < Int32 > RestrictedMode Gets or sets a value that specifies whether the field supports a subset of rich formatting. Declaration public bool? RestrictedMode { get; set; } Property Value Nullable < Boolean > RichText Gets or sets a value that specifies whether the field supports rich formatting. Declaration public bool? RichText { get; set; } Property Value Nullable < Boolean > UnlimitedLengthInDocumentLibrary Gets or sets a value that specifies whether the field supports unlimited length in document libraries. Declaration public bool? UnlimitedLengthInDocumentLibrary { get; set; } Property Value Nullable < Boolean >"
  },
  "api/PnP.Core.Model.SharePoint.FieldNumberOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldNumberOptions.html",
    "title": "Class FieldNumberOptions | PnP Core SDK",
    "keywords": "Class FieldNumberOptions Available options for SharePoint Number fields Inheritance Object CommonFieldOptions FieldNumberOptions Inherited Members CommonFieldOptions.Id CommonFieldOptions.Required CommonFieldOptions.AddToDefaultView CommonFieldOptions.Options CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage CommonFieldOptions.ShowInEditForm CommonFieldOptions.ShowInViewForms CommonFieldOptions.ShowInNewForm CommonFieldOptions.CustomFormatter Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldNumberOptions : CommonFieldOptions Properties Decimals How many decimals to show Declaration public int? Decimals { get; set; } Property Value Nullable < Int32 > DefaultValue Default value set on the field Declaration public double? DefaultValue { get; set; } Property Value Nullable < Double > MaximumValue Gets or sets a value that specifies the maximum allowed value for the field. Declaration public double? MaximumValue { get; set; } Property Value Nullable < Double > MinimumValue Gets or sets a value that specifies the minimum allowed value for the field. Declaration public double? MinimumValue { get; set; } Property Value Nullable < Double > ShowAsPercentage Gets or sets whether the field must be shown as percentage. Declaration public bool? ShowAsPercentage { get; set; } Property Value Nullable < Boolean >"
  },
  "api/PnP.Core.Model.SharePoint.FieldTaxonomyOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldTaxonomyOptions.html",
    "title": "Class FieldTaxonomyOptions | PnP Core SDK",
    "keywords": "Class FieldTaxonomyOptions Options for configuring a Taxonomy field Inheritance Object CommonFieldOptions FieldTaxonomyOptions Inherited Members CommonFieldOptions.Id CommonFieldOptions.Required CommonFieldOptions.AddToDefaultView CommonFieldOptions.Options CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage CommonFieldOptions.ShowInEditForm CommonFieldOptions.ShowInViewForms CommonFieldOptions.ShowInNewForm CommonFieldOptions.CustomFormatter Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldTaxonomyOptions : CommonFieldOptions Properties TermSetId TermSet id Declaration public Guid TermSetId { get; set; } Property Value Guid TermStoreId Term store id Declaration public Guid TermStoreId { get; set; } Property Value Guid"
  },
  "api/PnP.Core.Model.SharePoint.FieldTextOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldTextOptions.html",
    "title": "Class FieldTextOptions | PnP Core SDK",
    "keywords": "Class FieldTextOptions Available options for SharePoint Text fields Inheritance Object CommonFieldOptions FieldTextOptions Inherited Members CommonFieldOptions.Id CommonFieldOptions.Required CommonFieldOptions.AddToDefaultView CommonFieldOptions.Options CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage CommonFieldOptions.ShowInEditForm CommonFieldOptions.ShowInViewForms CommonFieldOptions.ShowInNewForm CommonFieldOptions.CustomFormatter Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldTextOptions : CommonFieldOptions Properties MaxLength Gets or sets the maximum length of the text field. Declaration public int? MaxLength { get; set; } Property Value Nullable < Int32 >"
  },
  "api/PnP.Core.Model.SharePoint.FieldType.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldType.html",
    "title": "Enum FieldType | PnP Core SDK",
    "keywords": "Enum FieldType Specifies the type of the field. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/ee540543(v=office.15) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum FieldType : int AllDayEvent Specifies that the field indicates whether a meeting in a calendar list is an all-day event. The value = 29. Attachments Specifies that the field indicates whether the list item has attachments. The value = 19. Boolean Specifies that the field contains a Boolean value. The value = 8. Calculated Specifies that the field is a calculated field. The value = 17. Choice Specifies that the field contains a single value from a set of specified values. The value = 6. Computed Specifies that the field is a computed field. The value = 12. ContentTypeId Specifies that the field contains a content type identifier as a value. The value = 25. Counter Specifies that the field contains a monotonically increasing integer. The value = 5. CrossProjectLink Specifies that the field contains a link between projects in a Meeting Workspace site. The value = 22. Currency Specifies that the field contains a currency value. The value = 10. DateTime Specifies that the field contains a date and time value or a date-only value. The value = 4. Error Specifies that the type of the field was set to an invalid value. The value = 24. File Specifies that the field contains the leaf name of a document as a value. The value = 18. GridChoice Specifies that the field contains rating scale values for a survey list. The value = 16. Guid Specifies that the field contains a GUID value. The value = 14. Integer Specifies that the field contains an integer value. The value = 1. Invalid Must not be used. The value = 0. Lookup Specifies that the field is a lookup field. The value = 7. MaxItems Must not be used. The value = 31. ModStat Specifies that the field indicates moderation status. The value = 23. MultiChoice Specifies that the field contains one or more values from a set of specified values. The value = 15. Note Specifies that the field contains multiple lines of text. The value = 3. Number Specifies that the field contains a floating-point number value. The value = 9. PageSeparator Specifies that the field separates questions in a survey list onto multiple pages. The value = 26. Recurrence Specifies that the field indicates whether a meeting in a calendar list recurs. The value = 21. Text Specifies that the field contains a single line of text. The value = 2. ThreadIndex Specifies that the field indicates the position of a discussion item in a threaded view of a discussion board. The value = 27. Threading Specifies that the field indicates the thread for a discussion item in a threaded view of a discussion board. The value = 13. URL Specifies that the field contains a URI and an optional description of the URI. The value = 11. User Specifies that the field contains one or more users and groups as values. The value = 20. WorkflowEventType Specifies that the field contains the most recent event in a workflow instance. The value = 30. WorkflowStatus Specifies that the field indicates the status of a workflow instance on a list item. The value = 28."
  },
  "api/PnP.Core.Model.SharePoint.FieldUrlOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldUrlOptions.html",
    "title": "Class FieldUrlOptions | PnP Core SDK",
    "keywords": "Class FieldUrlOptions Available options for SharePoint URL fields Inheritance Object CommonFieldOptions FieldUrlOptions Inherited Members CommonFieldOptions.Id CommonFieldOptions.Required CommonFieldOptions.AddToDefaultView CommonFieldOptions.Options CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage CommonFieldOptions.ShowInEditForm CommonFieldOptions.ShowInViewForms CommonFieldOptions.ShowInNewForm CommonFieldOptions.CustomFormatter Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldUrlOptions : CommonFieldOptions Properties DisplayFormat Gets or sets a value that specifies the display format for the value in the field. Declaration public UrlFieldFormatType DisplayFormat { get; set; } Property Value UrlFieldFormatType"
  },
  "api/PnP.Core.Model.SharePoint.FieldUserOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldUserOptions.html",
    "title": "Class FieldUserOptions | PnP Core SDK",
    "keywords": "Class FieldUserOptions Available options for SharePoint user fields Inheritance Object CommonFieldOptions FieldUserOptions Inherited Members CommonFieldOptions.Id CommonFieldOptions.Required CommonFieldOptions.AddToDefaultView CommonFieldOptions.Options CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage CommonFieldOptions.ShowInEditForm CommonFieldOptions.ShowInViewForms CommonFieldOptions.ShowInNewForm CommonFieldOptions.CustomFormatter Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldUserOptions : CommonFieldOptions Properties AllowDisplay Gets or sets a value that specifies whether to display the name of the user in a survey list. Declaration public bool? AllowDisplay { get; set; } Property Value Nullable < Boolean > Presence Gets or sets a value that specifies whether presence is enabled on the field. Declaration public bool? Presence { get; set; } Property Value Nullable < Boolean > SelectionGroup Gets or sets a value that specifies the identifier of the SharePoint group whose members can be selected as values of the field. Declaration public int? SelectionGroup { get; set; } Property Value Nullable < Int32 > SelectionMode Gets or sets a value that specifies whether users and groups or only users can be selected. Declaration public FieldUserSelectionMode SelectionMode { get; set; } Property Value FieldUserSelectionMode"
  },
  "api/PnP.Core.Model.SharePoint.FieldUserSelectionMode.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldUserSelectionMode.html",
    "title": "Enum FieldUserSelectionMode | PnP Core SDK",
    "keywords": "Enum FieldUserSelectionMode Specifies whether users and groups or only users can be selected. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee545809%28v%3doffice.15%29 Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum FieldUserSelectionMode : int PeopleAndGroups Enumeration whose value specifies that users and groups can be selected. The value = 1. PeopleOnly Enumeration whose value specifies that only users can be selected. The value = 0."
  },
  "api/PnP.Core.Model.SharePoint.FileLevel.html": {
    "href": "api/PnP.Core.Model.SharePoint.FileLevel.html",
    "title": "Enum FileLevel | PnP Core SDK",
    "keywords": "Enum FileLevel Publis level of this file Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum FileLevel : int Checkout File was checked out Draft File is in draft status Published File is published"
  },
  "api/PnP.Core.Model.SharePoint.FileSystemObjectType.html": {
    "href": "api/PnP.Core.Model.SharePoint.FileSystemObjectType.html",
    "title": "Enum FileSystemObjectType | PnP Core SDK",
    "keywords": "Enum FileSystemObjectType Specifies the file system object type. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum FileSystemObjectType : int File Enumeration whose values specify whether the object is a file. The value = 0. Folder Enumeration whose values specify whether the object is a folder. The value = 1. Invalid Enumeration whose values specify whether the object is invalid. The value = -1. Web Enumeration whose values specify whether the object is a site. The values = 2."
  },
  "api/PnP.Core.Model.SharePoint.FollowData.html": {
    "href": "api/PnP.Core.Model.SharePoint.FollowData.html",
    "title": "Class FollowData | PnP Core SDK",
    "keywords": "Class FollowData A metadata object following requests Inheritance Object FollowData FollowDocumentData FollowPersonData FollowSiteData FollowTagData Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public abstract class FollowData : object Properties ActorType Represents an actor type. Can be either a user, site, document or tag Declaration public abstract SocialActorType ActorType { get; } Property Value SocialActorType"
  },
  "api/PnP.Core.Model.SharePoint.FooterLayoutType.html": {
    "href": "api/PnP.Core.Model.SharePoint.FooterLayoutType.html",
    "title": "Enum FooterLayoutType | PnP Core SDK",
    "keywords": "Enum FooterLayoutType Available footer layouts for modern sites Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum FooterLayoutType : int Extended Extended footer. This layout type supports columns of links with multiple links in each column. ( Value = 1 ) Simple Simple footer. This is the default layout type with one single row of links. ( Value = 0 ) Stacked Stacked footer. This layout type is a combination of simple and extended, with the extended stacked above the simple. ( Value = 2 )"
  },
  "api/PnP.Core.Model.SharePoint.FooterVariantThemeType.html": {
    "href": "api/PnP.Core.Model.SharePoint.FooterVariantThemeType.html",
    "title": "Enum FooterVariantThemeType | PnP Core SDK",
    "keywords": "Enum FooterVariantThemeType Variants documentation: https://github.com/OfficeDev/office-ui-fabric-react/tree/master/packages/variants Note that this definition is similar to SPVariantThemeType, but with the strong and none variants switched. This is because we want strong to be the default for footer. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum FooterVariantThemeType : int Neutral neutral variant - light shade of original background as background ( Value = 1 ) None no emphasis - appears as normal ( Value = 3 ) Soft soft variant - light tint of the primary color as background ( Value = 2 ) Strong strong variant - primary color as background, text uses original background color; white on brand blue by default ( Value = 0 )"
  },
  "api/PnP.Core.Model.SharePoint.HeaderLayoutType.html": {
    "href": "api/PnP.Core.Model.SharePoint.HeaderLayoutType.html",
    "title": "Enum HeaderLayoutType | PnP Core SDK",
    "keywords": "Enum HeaderLayoutType Available header layouts for modern sites Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum HeaderLayoutType : int Compact medium/compact header ( Value = 2 ) Extended extended header ( Value = 4 ) Minimal small/minimal header [not currently used] ( Value = 3 ) None use the original header [deprecated, now reverts to large/standard] ( Value = 0 ) Standard large/standard header ( Value = 1 )"
  },
  "api/PnP.Core.Model.SharePoint.html": {
    "href": "api/PnP.Core.Model.SharePoint.html",
    "title": "Namespace PnP.Core.Model.SharePoint | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Model.SharePoint Classes AddUserCustomActionOptions Options to specify when adding User Custom Action CamlQueryOptions Options for making a CAML query to SharePoint Online ChangeQueryOptions Defines a query that is performed against the change log. ChangeTokenOptions Represents a change token that is usable in ChangeQueryOptions . CommonFieldOptions Available options for adding most of SharePoint fields (Excepted Lookup fields) FieldBooleanOptions Options for a boolean field FieldCalculatedOptions Available options for SharePoint Calculated fields FieldChoiceMultiOptions Available options for SharePoint Multi Choice fields FieldChoiceOptions Available options for SharePoint Choice fields FieldCurrencyOptions Available options for SharePoint Currency fields FieldDateTimeOptions Available options for SharePoint DateTime fields FieldLookupOptions Available options for SharePoint lookup fields FieldMultilineTextOptions Available options for SharePoint Multiline Text fields FieldNumberOptions Available options for SharePoint Number fields FieldTaxonomyOptions Options for configuring a Taxonomy field FieldTextOptions Available options for SharePoint Text fields FieldUrlOptions Available options for SharePoint URL fields FieldUserOptions Available options for SharePoint user fields FollowData A metadata object following requests MoveCopyOptions Options for move and copy operations PageImageOptions Defines the options to configure an image PageTranslationOptions Class that defines the languages for which a translation must be generated RenderListDataOptions Options to configure the rendering of list data via the RenderListDataAsStream method of IList See https://docs.microsoft.com/en-us/sharepoint/dev/sp-add-ins/working-with-lists-and-list-items-with-rest#renderlistdataasstream-body-parameter-properties SyntexModelPublishOptions Information about the library to publish a Syntex model to SyntexModelUnPublishOptions Information about the library to unpublish a Syntex model from ViewOptions Options for creating a view WebOptions Options to set when creating a new web Interfaces IAttachment A list item attachment IAttachmentCollection Collection of list item attachments IBasePermissions Defines the granted permission mask IBrandingManager Enables branding changes for the site (the options that appear under \"change the look\" under the gear icon in SharePoint) ICanvasColumn A column in a ICanvasSection ICanvasControl Base interface for a canvas control ICanvasSection Represents a section on the canvas IChange Base interface for a description of a change to an object. IChangeAlert Indicates a change to an Alert object. IChangeContentType Indicates a change to a IContentType object. IChangeField Indicates a change to a IField object. IChangeFile Indicates a change to a IFile object. IChangeFolder Indicates a change to a IFolder object. IChangeGroup Indicates a change to a ISharePointGroup object. IChangeItem Indicates a change to a IListItem object; IChangeList Indicates a change to a IList object. IChangeSite Indicates a change to a ISite object. IChangeToken Represents the unique sequential location of a change within the change log. IChangeUser Indicates a change to a ISharePointUser object. IChangeView Indicates a change to a IView object. IChangeWeb Indicates a change to a IWeb object. IChromeOptions Defines the chrome (header/footer) options of a web IComment Public interface to define a comment. ICommentCollection Public interface to define a collection of comment objects. ICommentLikeUserEntity Represents a single user within a comment's likedBy list in the comments API. ICommentLikeUserEntityCollection Public interface to define a collection of userEntity objects IComplianceTag Public interface to define a ComplianceTag / Retention label object of SharePoint Online IContentType Public interface to define a Content Type object of SharePoint Online IContentTypeCollection Public interface to define a collection of ContentType objects of SharePoint Online IEffectiveInformationRightsManagementSettings Public interface to define a EffectiveInformationRightsManagementSettings object IFeature Represents a Feature in SharePoint Online IFeatureCollection Collection of site or web scoped features IField Public interface to define a Field object of SharePoint Online IFieldCollection Public interface to define a collection of Field objects of SharePoint Online IFieldLink Public interface to define a FieldLink object IFieldLinkCollection Public interface to define a collection of FieldLink objects of SharePoint Online IFieldLocationValue Represents a location field value IFieldLookupValue Represents a lookup field value IFieldStringValues Public interface to define a FieldStringValues object IFieldTaxonomyValue Represents a taxonomy field value IFieldUrlValue Represents the value in a field of type Url IFieldUserValue Represents a user retrieved via a list item field IFieldValue Represents a field value object IFieldValueCollection Collection of 'special' field values IFile Public interface to define a File object IFileCollection Public interface to define a collection of File objects IFileVersion Public interface to define a FileVersion object IFileVersionCollection Collection of file versions IFileVersionEvent Represents an event object happened on a file IFileVersionEventCollection Collection of file version events IFolder Public interface to define a Folder object IFolderCollection Public interface to define a collection of Folder objects IFollowing An entry point to the social following APIs IFollowingInfo Represents metadata information about your following data IFooterOptions Options to configure a the site footer chrome. IHeaderOptions Options to configure a the site header chrome IHubSite Public interface to define a HubSite object IInformationRightsManagementFileSettings Public interface to define a InformationRightsManagementFileSettings object IInformationRightsManagementSettings Public interface to define a InformationRightsManagementSettings object ILikedByInformation Defines if and who liked a list item. IList Public interface to define a List object of SharePoint Online IListCollection Public interface to define a collection of List objects of SharePoint Online IListItem Public interface to define a SharePoint Online list item IListItemCollection Public interface to define a collection of ListItem objects of SharePoint Online IListItemVersion Public interface to define a ListItemVersion object IListItemVersionCollection Collection of file versions IListSubscription Defines a structure for a webhook subscription IListSubscriptionCollection A collection of list webhook subscriptions INavigationOptions Options to configure a the site navigation chrome. IPage A modern SharePoint Page IPageComponent Client side webpart object (retrieved via the _api/web/GetClientSideWebParts REST call) IPageHeader Class that implements the modern page header IPageText Text web part IPageTranslationStatus Translation status for a page IPageTranslationStatusCollection Translation status of a page IPageWebPart This class is used to instantiate modern web parts. Using this class you can instantiate a control and add it on a IPage . IPersonProperties A metadata for a person IPropertyValues Public interface to define a PropertyValues object IRecycleBinItem Public interface to define a RecycleBinItem object IRecycleBinItemCollection Public interface to define a collection of RecycleBinItem objects IRegionalSettings Public interface to define a RegionalSettings object ISecurableObject Defines the properties and methods for securable object (Web, List, ListItem) ISite Public interface to define a Site object of SharePoint Online ISocial Entry point for the social-related APIs ISocialActor An entity, which represents a following object. The type of the object can be identified based on the ActorType property IStorageMetrics Public interface to define a StorageMetrics object ISyntexClassifyAndExtractResult Result of a classify and extract operation requested for a file ISyntexContentCenter Syntex Content Center site ISyntexModel Syntex model ISyntexModelPublication Defines a model publication ISyntexModelPublicationResult The result of a SharePoint Syntex model publication ITerm Represents a term used in a term store. A term can be used to represent an object which can then be used as a metadata to tag conent. Multiple terms can be organized in a hierarchical manner within a set. ITermCollection Collection of terms ITermGroup Microsoft 365 Term group ITermGroupCollection Collection of term groups ITermLocalizedDescription Represents the localized name used in the term store, which identifies the name in the localized language. ITermLocalizedDescriptionCollection Collection of localized termset labels ITermLocalizedLabel Represents the localized label used in the term store, which identifies the name in the localized language. ITermLocalizedLabelCollection Collection of localized termset labels ITermProperty Key/Value term property ITermPropertyCollection Collection of localized termset labels ITermRelation Represents the relationship between terms in a term store.Currently two types of relationships are supported: pin and reuse. In a pin relationship, a term can be pinned under a different term in a different term set.In a pinned relationship, new children to the term can only be added in the term set in which the term was created.Any change in the hierarchy under the term is reflected across the sets in which the term was pinned. The reuse relationship is similar to the pinned relationship except that changes to the reused term can be made from any hierarchy in which the term is reused.Also, a change in hierarchy made to the reused term does not get reflected in the other term sets in which the term is reused. ITermRelationCollection Collection of terms ITermSet Represents the set used in a term store. The set represents a unit which contains a collection of hierarchical terms. A group can contain multiple sets. ITermSetCollection Collection of term sets ITermSetLocalizedName Represents the localized name used in the term store, which identifies the name in the localized language. ITermSetLocalizedNameCollection Collection of localized termset labels ITermSetProperty Key/Value term set property ITermSetPropertyCollection Collection of localized termset labels ITermStore Microsoft 365 Term store ITheme Defines a theme that can be applied to a site ITimeZone Public interface to define a TimeZone object ITimeZoneCollection Public interface to define a collection of TimeZone objects IUserCustomAction Public interface to define a UserCustomAction object IUserCustomActionCollection Public interface to define a collection of UserCustomAction objects IUserProfile An entry point for the user profile APIs IView Public interface to define a View object IViewCollection Public interface to define a collection of View objects IViewFieldCollection Public interface to define a ViewFieldCollection object IWeb Public interface to define a Web object of SharePoint Online IWebCollection Public interface to define a collection of Web objects of SharePoint Online Enums AddFieldOptionsFlags Specifies the control settings while adding a field. This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values. CalendarType A calendar type is a 2-byte integer value that specifies the type of calendar to use in a particular context. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee543260%28v%3doffice.15%29 CanvasSectionTemplate The type of canvas being used ChangeActivityType Change activity types ChangeType Enumeration of the possible types of changes. CheckinType Specifies the type of check-in for a file. (see https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/ee542953(v=office.15) ) CheckOutType Enumeration that describes the different checkout states of a file, independent of the lock state of the file. (e.g. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/ee538918(v=office.15) ) ChoiceFormatType Enumeration that specifies how options are displayed for the selections in a choice field. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee536424%28v%3doffice.15%29 CommentsDisabledScope An enum to determine the scope for which comments are disabled. https://docs.microsoft.com/en-us/dotnet/api/microsoft.sharepoint.comments.commentsdisabledscope?view=sharepoint-csom CustomizedPageStatus Specifies the cache and customization status for a page. DateTimeFieldFormatType Specifies the display format for date and time fields. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee537367%28v%3doffice.15%29 DateTimeFieldFriendlyFormatType Specifies a friendly format to use in displaying date and time fields. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/jj168261%28v%3doffice.15%29 DefaultWebPart List of possible OOB web parts FieldIndexStatus Describes whether a field is indexed, and whether the data in the index is complete FieldType Specifies the type of the field. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/ee540543(v=office.15) FieldUserSelectionMode Specifies whether users and groups or only users can be selected. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee545809%28v%3doffice.15%29 FileLevel Publis level of this file FileSystemObjectType Specifies the file system object type. FooterLayoutType Available footer layouts for modern sites FooterVariantThemeType Variants documentation: https://github.com/OfficeDev/office-ui-fabric-react/tree/master/packages/variants Note that this definition is similar to SPVariantThemeType, but with the strong and none variants switched. This is because we want strong to be the default for footer. HeaderLayoutType Available header layouts for modern sites IconAlignment Alignment of the collapsible section icon ListExperience List experience, determines how a list is presented (modern or classic) ListPageRenderType List Page Render Type (e.g. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/mt796270(v=office.15) ) ListReadingDirection Reading direction of the list ListTemplateType Enumeration to define the list template types for SharePoint LogoAlignment Logo alignment in extended header layout MachineLearningPublicationViewOption Options that define how adding a classifier will impact the library's views MoveOperations Specifies criteria for how to move files. This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values. (see https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/ee542328(v=office.15) ) PageHeaderLayoutType Layout of the page header PageHeaderTitleAlignment Alignment of the title in a page header PageHeaderType Types of pages headers that a page can use PageImageAlignment Image alignment options PageLayoutType Types of pages that can be created PermissionKind Index to check if flag for a permission is set or not in SPBasePermissions enumeration PromotedState Page promotion state PublishedStatus Indicates if a file was published, draft or checked out RecycleBinItemState Specifies the Recycle Bin stage of the Recycle Bin item. RecycleBinItemType Specifies the type of the Recycle Bin item. RelationshipDeleteBehaviorType Specifies the optional relationship behavior of a relationship lookup field. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee537368%28v%3doffice.15%29 RenderListDataOptionsFlags Options to setup on the RenderListDataOptions RenderOptions property See https://docs.microsoft.com/en-us/sharepoint/dev/sp-add-ins/working-with-lists-and-list-items-with-rest#sprenderlistdataoptions-options RoleType RoleType enumeration used in Role Definitions SearchBoxInNavBar Searchbox in navigation options SearchScope Search scopes of the site SharePointTheme Out of the Box SharePoint themes SharingState Contains the values of the 3 allowed states for Sharing properties. ShowInFiltersPaneStatus Represents status to determine whether filters pane will show the field SocialActorType An actor type in following APIs SocialActorTypes Represents an actor type, which defines types of following content to return SocialFollowResult The result of the follow operation SocialStatusCode A status code of the following item, a property of ISocialActor SPEffectiveInformationRightsManagementSettingsSource The source of settings for the effective IRM of a file. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/mt684131(v=office.15) TemplateFileType Types of pages that can be created using the AddTemplateFile method TermGroupScope Returns type of group. Possible values are 'global', 'system' and 'siteCollection'. TermRelationType Type of relationship between two terms UrlFieldFormatType Format of the Url field UserCustomActionRegistrationType Specifies the type of object associated with the custom action. UserCustomActionScope Specifies the scope of the custom action. VariantThemeType Footer Variant theme type (see https://github.com/microsoft/fluentui/tree/master/packages/variants ) ViewScope Specifies the recursive scope of a view for a document library. ViewType Value that specifies the type of the list view. ViewType2 Modern List View Types ViewTypeKind Value that specifies the type of the list view."
  },
  "api/PnP.Core.Model.SharePoint.IAttachment.html": {
    "href": "api/PnP.Core.Model.SharePoint.IAttachment.html",
    "title": "Interface IAttachment | PnP Core SDK",
    "keywords": "Interface IAttachment A list item attachment Inherited Members IDataModel<IAttachment>.Requested IDataModel<IAttachment>.HasValue(String) IDataModel<IAttachment>.HasChanged(String) IDataModel<IAttachment>.IsPropertyAvailable(Expression<Func<IAttachment, Object>>) IDataModel<IAttachment>.ArePropertiesAvailable(Expression<Func<IAttachment, Object>>[]) IDataModel<IAttachment>.EnsureProperties(Expression<Func<IAttachment, Object>>[]) IDataModel<IAttachment>.EnsurePropertiesAsync(Expression<Func<IAttachment, Object>>[]) IDataModel<IAttachment>.ExecuteRequestAsync(ApiRequest) IDataModel<IAttachment>.ExecuteRequest(ApiRequest) IDataModel<IAttachment>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IAttachment>.ExecuteRequestBatch(ApiRequest) IDataModel<IAttachment>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IAttachment>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IAttachment>.GetBatchAsync(Batch, Expression<Func<IAttachment, Object>>[]) IDataModelGet<IAttachment>.GetAsync(Expression<Func<IAttachment, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IAttachment : IDataModel<IAttachment>, IDataModelParent, IDataModelWithContext, ISupportModules<IAttachment>, IDataModelGet<IAttachment>, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object FileName Name of the attachment Declaration string FileName { get; set; } Property Value String FileNameAsPath Name of the attachment as path Declaration string FileNameAsPath { get; set; } Property Value String ServerRelativePath Server relative URL of the attachment as path Declaration string ServerRelativePath { get; set; } Property Value String ServerRelativeUrl Server relative URL of the attachment Declaration string ServerRelativeUrl { get; set; } Property Value String Methods GetContent(Boolean) Get the content of this attachment. Declaration Stream GetContent(bool streamContent = false) Parameters Boolean streamContent Already return the content before all bytes are read, needed for large file downloads Returns Stream Stream containing the binary content of the attachment GetContentAsync(Boolean) Get the content of this attachment. Declaration Task<Stream> GetContentAsync(bool streamContent = false) Parameters Boolean streamContent Already return the content before all bytes are read, needed for large file downloads Returns Task < Stream > Stream containing the binary content of the attachment GetContentBytes() Get the content of the attachment. Declaration byte[] GetContentBytes() Returns Byte [] The binary content of the attachment GetContentBytesAsync() Get the content of this attachment. Declaration Task<byte[]> GetContentBytesAsync() Returns Task < Byte []> The binary content of the attachment Recycle() Recycle this list attachment Declaration void Recycle() RecycleAsync() Recycle this list attachment Declaration Task RecycleAsync() Returns Task Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IAttachmentCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IAttachmentCollection.html",
    "title": "Interface IAttachmentCollection | PnP Core SDK",
    "keywords": "Interface IAttachmentCollection Collection of list item attachments Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IAttachmentCollection : IQueryable<IAttachment>, IDataModelCollection<IAttachment>, IEnumerable<IAttachment>, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportModules<IAttachment> Methods Add(String, Stream) Adds a list item attachment Declaration IAttachment Add(string name, Stream content) Parameters String name Name of the list item attachment Stream content File contents Returns IAttachment The added list item attachment AddAsync(String, Stream) Adds a list item attachment Declaration Task<IAttachment> AddAsync(string name, Stream content) Parameters String name Name of the list item attachment Stream content File contents Returns Task < IAttachment > The added list item attachment Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.IBasePermissions.html": {
    "href": "api/PnP.Core.Model.SharePoint.IBasePermissions.html",
    "title": "Interface IBasePermissions | PnP Core SDK",
    "keywords": "Interface IBasePermissions Defines the granted permission mask Inherited Members IDataModel<IBasePermissions>.Requested IDataModel<IBasePermissions>.HasValue(String) IDataModel<IBasePermissions>.HasChanged(String) IDataModel<IBasePermissions>.IsPropertyAvailable(Expression<Func<IBasePermissions, Object>>) IDataModel<IBasePermissions>.ArePropertiesAvailable(Expression<Func<IBasePermissions, Object>>[]) IDataModel<IBasePermissions>.EnsureProperties(Expression<Func<IBasePermissions, Object>>[]) IDataModel<IBasePermissions>.EnsurePropertiesAsync(Expression<Func<IBasePermissions, Object>>[]) IDataModel<IBasePermissions>.ExecuteRequestAsync(ApiRequest) IDataModel<IBasePermissions>.ExecuteRequest(ApiRequest) IDataModel<IBasePermissions>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IBasePermissions>.ExecuteRequestBatch(ApiRequest) IDataModel<IBasePermissions>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IBasePermissions>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IBasePermissions : IDataModel<IBasePermissions>, IDataModelParent, IDataModelWithContext, ISupportModules<IBasePermissions> Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object High Maximum granted permission mask Declaration long High { get; set; } Property Value Int64 Low Minimal granted permission mask Declaration long Low { get; set; } Property Value Int64 Methods Clear(PermissionKind) Clears the specified permission for the current instance. Declaration void Clear(PermissionKind permissionKind) Parameters PermissionKind permissionKind ClearAll() Clears all permissions for the current instance. Declaration void ClearAll() Has(PermissionKind) Is this requested PermissionKind include? Declaration bool Has(PermissionKind perm) Parameters PermissionKind perm PermissionKind permisson Returns Boolean True if included, false otherwise HasPermissions(UInt32, UInt32) Are the requested permission masks included? Declaration bool HasPermissions(uint high, uint low) Parameters UInt32 high High end mask UInt32 low Low end mask Returns Boolean True if included, false otherwise Set(PermissionKind) Sets the specified permission for the current instance. Declaration void Set(PermissionKind permissionKind) Parameters PermissionKind permissionKind Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IBrandingManager.html": {
    "href": "api/PnP.Core.Model.SharePoint.IBrandingManager.html",
    "title": "Interface IBrandingManager | PnP Core SDK",
    "keywords": "Interface IBrandingManager Enables branding changes for the site (the options that appear under \"change the look\" under the gear icon in SharePoint) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IBrandingManager Methods GetAvailableThemes() Lists the available themes for this web Declaration List<ITheme> GetAvailableThemes() Returns PnP.Core.Model.SharePoint.List < ITheme > List of ITheme instances GetAvailableThemesAsync() Lists the available themes for this web Declaration Task<List<ITheme>> GetAvailableThemesAsync() Returns Task < PnP.Core.Model.SharePoint.List < ITheme >> List of ITheme instances GetAvailableThemesBatch() Lists the available themes for this web Declaration IEnumerableBatchResult<ITheme> GetAvailableThemesBatch() Returns IEnumerableBatchResult < ITheme > List of ITheme instances GetAvailableThemesBatch(Batch) Lists the available themes for this web Declaration IEnumerableBatchResult<ITheme> GetAvailableThemesBatch(Batch batch) Parameters Batch batch Batch to add this request to Returns IEnumerableBatchResult < ITheme > List of ITheme instances GetAvailableThemesBatchAsync() Lists the available themes for this web Declaration Task<IEnumerableBatchResult<ITheme>> GetAvailableThemesBatchAsync() Returns Task < IEnumerableBatchResult < ITheme >> List of ITheme instances GetAvailableThemesBatchAsync(Batch) Lists the available themes for this web Declaration Task<IEnumerableBatchResult<ITheme>> GetAvailableThemesBatchAsync(Batch batch) Parameters Batch batch Batch to add this request to Returns Task < IEnumerableBatchResult < ITheme >> List of ITheme instances GetChromeOptions() Gets the site's chrome (header/footer/navigation) options Declaration IChromeOptions GetChromeOptions() Returns IChromeOptions Site's IChromeOptions GetChromeOptionsAsync() Gets the site's chrome (header/footer/navigation) options Declaration Task<IChromeOptions> GetChromeOptionsAsync() Returns Task < IChromeOptions > Site's IChromeOptions GetChromeOptionsBatch() Gets the site's chrome (header/footer/navigation) options Declaration IBatchSingleResult<IChromeOptions> GetChromeOptionsBatch() Returns IBatchSingleResult < IChromeOptions > Site's IChromeOptions GetChromeOptionsBatch(Batch) Gets the site's chrome (header/footer/navigation) options Declaration IBatchSingleResult<IChromeOptions> GetChromeOptionsBatch(Batch batch) Parameters Batch batch Batch to add this request to Returns IBatchSingleResult < IChromeOptions > Site's IChromeOptions GetChromeOptionsBatchAsync() Gets the site's chrome (header/footer/navigation) options Declaration Task<IBatchSingleResult<IChromeOptions>> GetChromeOptionsBatchAsync() Returns Task < IBatchSingleResult < IChromeOptions >> Site's IChromeOptions GetChromeOptionsBatchAsync(Batch) Gets the site's chrome (header/footer/navigation) options Declaration Task<IBatchSingleResult<IChromeOptions>> GetChromeOptionsBatchAsync(Batch batch) Parameters Batch batch Batch to add this request to Returns Task < IBatchSingleResult < IChromeOptions >> Site's IChromeOptions SetChromeOptions(IChromeOptions) Sets the site's chrome (header/footer/navigation) options Declaration void SetChromeOptions(IChromeOptions chromeOptions) Parameters IChromeOptions chromeOptions Site chrome options to apply SetChromeOptionsAsync(IChromeOptions) Sets the site's chrome (header/footer/navigation) options Declaration Task SetChromeOptionsAsync(IChromeOptions chromeOptions) Parameters IChromeOptions chromeOptions Site chrome options to apply Returns Task SetChromeOptionsBatch(IChromeOptions) Sets the site's chrome (header/footer/navigation) options Declaration void SetChromeOptionsBatch(IChromeOptions chromeOptions) Parameters IChromeOptions chromeOptions Site chrome options to apply SetChromeOptionsBatch(Batch, IChromeOptions) Sets the site's chrome (header/footer/navigation) options Declaration void SetChromeOptionsBatch(Batch batch, IChromeOptions chromeOptions) Parameters Batch batch Batch to add this request to IChromeOptions chromeOptions Site chrome options to apply SetChromeOptionsBatchAsync(IChromeOptions) Sets the site's chrome (header/footer/navigation) options Declaration Task SetChromeOptionsBatchAsync(IChromeOptions chromeOptions) Parameters IChromeOptions chromeOptions Site chrome options to apply Returns Task SetChromeOptionsBatchAsync(Batch, IChromeOptions) Sets the site's chrome (header/footer/navigation) options Declaration Task SetChromeOptionsBatchAsync(Batch batch, IChromeOptions chromeOptions) Parameters Batch batch Batch to add this request to IChromeOptions chromeOptions Site chrome options to apply Returns Task SetTheme(ITheme) Sets a custom theme Declaration void SetTheme(ITheme theme) Parameters ITheme theme Theme to apply SetTheme(SharePointTheme) Sets a an out of the box theme Declaration void SetTheme(SharePointTheme theme) Parameters SharePointTheme theme Theme to apply SetThemeAsync(ITheme) Sets a custom theme Declaration Task SetThemeAsync(ITheme theme) Parameters ITheme theme Theme to apply Returns Task SetThemeAsync(SharePointTheme) Sets a an out of the box theme Declaration Task SetThemeAsync(SharePointTheme theme) Parameters SharePointTheme theme Theme to apply Returns Task SetThemeBatch(ITheme) Sets a custom theme Declaration void SetThemeBatch(ITheme theme) Parameters ITheme theme Theme to apply SetThemeBatch(SharePointTheme) Sets a an out of the box theme Declaration void SetThemeBatch(SharePointTheme theme) Parameters SharePointTheme theme Theme to apply SetThemeBatch(Batch, ITheme) Sets a custom theme Declaration void SetThemeBatch(Batch batch, ITheme theme) Parameters Batch batch Batch to add this request to ITheme theme Theme to apply SetThemeBatch(Batch, SharePointTheme) Sets a an out of the box theme Declaration void SetThemeBatch(Batch batch, SharePointTheme theme) Parameters Batch batch Batch to add this request to SharePointTheme theme Theme to apply SetThemeBatchAsync(ITheme) Sets a custom theme Declaration Task SetThemeBatchAsync(ITheme theme) Parameters ITheme theme Theme to apply Returns Task SetThemeBatchAsync(SharePointTheme) Sets a an out of the box theme Declaration Task SetThemeBatchAsync(SharePointTheme theme) Parameters SharePointTheme theme Theme to apply Returns Task SetThemeBatchAsync(Batch, ITheme) Sets a custom theme Declaration Task SetThemeBatchAsync(Batch batch, ITheme theme) Parameters Batch batch Batch to add this request to ITheme theme Theme to apply Returns Task SetThemeBatchAsync(Batch, SharePointTheme) Sets a an out of the box theme Declaration Task SetThemeBatchAsync(Batch batch, SharePointTheme theme) Parameters Batch batch Batch to add this request to SharePointTheme theme Theme to apply Returns Task"
  },
  "api/PnP.Core.Model.SharePoint.ICanvasColumn.html": {
    "href": "api/PnP.Core.Model.SharePoint.ICanvasColumn.html",
    "title": "Interface ICanvasColumn | PnP Core SDK",
    "keywords": "Interface ICanvasColumn A column in a ICanvasSection Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ICanvasColumn Properties ColumnFactor Column size factor. Max value is 12 (= one column), other options are 8,6,4 or 0 Declaration int ColumnFactor { get; } Property Value Int32 Controls List of ICanvasControl instances that are hosted in this section Declaration List<ICanvasControl> Controls { get; } Property Value PnP.Core.Model.SharePoint.List < ICanvasControl > IsVerticalSectionColumn Is this a vertical section column? Declaration bool IsVerticalSectionColumn { get; } Property Value Boolean LayoutIndex Returns the layout index. Defaults to 1, except for the vertical section column this is 2 Declaration int LayoutIndex { get; } Property Value Int32 Order Column order Declaration int Order { get; } Property Value Int32 Section ICanvasSection this section belongs to Declaration ICanvasSection Section { get; } Property Value ICanvasSection VerticalSectionEmphasis Color emphasis of the column (used for the vertical section column) Declaration int? VerticalSectionEmphasis { get; } Property Value Nullable < Int32 > Methods ResetColumn(Int32, Int32) Resets the column, used in scenarios where a section is changed from type (e.g. from 3 column to 2 column) Declaration void ResetColumn(int order, int columnFactor) Parameters Int32 order Column order to set Int32 columnFactor Column factor to set"
  },
  "api/PnP.Core.Model.SharePoint.ICanvasControl.html": {
    "href": "api/PnP.Core.Model.SharePoint.ICanvasControl.html",
    "title": "Interface ICanvasControl | PnP Core SDK",
    "keywords": "Interface ICanvasControl Base interface for a canvas control Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ICanvasControl Properties CanvasControlData Value of the control's \"data-sp-canvascontrol\" attribute Declaration string CanvasControlData { get; } Property Value String CanvasDataVersion The internal canvas storage version used Declaration string CanvasDataVersion { get; } Property Value String Column The ICanvasColumn hosting this control Declaration ICanvasColumn Column { get; } Property Value ICanvasColumn ControlType Type of the control: 4 is a text part, 3 is a client side web part Declaration int ControlType { get; } Property Value Int32 DataVersion The internal storage version used for this control Declaration string DataVersion { get; set; } Property Value String InstanceId Instance ID of the control Declaration Guid InstanceId { get; set; } Property Value Guid JsonControlData Value of the control's \"data-sp-controldata\" attribute Declaration string JsonControlData { get; } Property Value String Order Order of the control in the control collection Declaration int Order { get; set; } Property Value Int32 Section The ICanvasSection hosting this control Declaration ICanvasSection Section { get; } Property Value ICanvasSection Type Type if the control ( IPageText or IPageWebPart ) Declaration Type Type { get; } Property Value Type Methods Delete() Removes the control from the page Declaration void Delete() Move(ICanvasColumn) Moves the control to another section and column Declaration void Move(ICanvasColumn newColumn) Parameters ICanvasColumn newColumn New column that will host the control Move(ICanvasColumn, Int32) Moves the control to another section and column Declaration void Move(ICanvasColumn newColumn, int order) Parameters ICanvasColumn newColumn New column that will host the control Int32 order New order for the control in the new column Move(ICanvasSection) Moves the control to another section and column Declaration void Move(ICanvasSection newSection) Parameters ICanvasSection newSection New section that will host the control Move(ICanvasSection, Int32) Moves the control to another section and column Declaration void Move(ICanvasSection newSection, int order) Parameters ICanvasSection newSection New section that will host the control Int32 order New order for the control in the new section MovePosition(ICanvasColumn) Moves the control to another section and column while keeping it's current position Declaration void MovePosition(ICanvasColumn newColumn) Parameters ICanvasColumn newColumn New column that will host the control MovePosition(ICanvasColumn, Int32) Moves the control to another section and column in the given position Declaration void MovePosition(ICanvasColumn newColumn, int position) Parameters ICanvasColumn newColumn New column that will host the control Int32 position New position for the control in the new column MovePosition(ICanvasSection) Moves the control to another section and column while keeping it's current position Declaration void MovePosition(ICanvasSection newSection) Parameters ICanvasSection newSection New section that will host the control MovePosition(ICanvasSection, Int32) Moves the control to another section and column in the given position Declaration void MovePosition(ICanvasSection newSection, int position) Parameters ICanvasSection newSection New section that will host the control Int32 position New position for the control in the new section MovePosition(Int32) Moves the control inside the current column to a new position Declaration void MovePosition(int position) Parameters Int32 position New position for this control"
  },
  "api/PnP.Core.Model.SharePoint.ICanvasSection.html": {
    "href": "api/PnP.Core.Model.SharePoint.ICanvasSection.html",
    "title": "Interface ICanvasSection | PnP Core SDK",
    "keywords": "Interface ICanvasSection Represents a section on the canvas Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ICanvasSection Properties Collapsible Is this section collapsible? Declaration bool Collapsible { get; set; } Property Value Boolean Columns PnP.Core.Model.SharePoint.CanvasColumn instances that are part of this section Declaration List<ICanvasColumn> Columns { get; } Property Value PnP.Core.Model.SharePoint.List < ICanvasColumn > Controls Controls hosted in this section Declaration List<ICanvasControl> Controls { get; } Property Value PnP.Core.Model.SharePoint.List < ICanvasControl > DefaultColumn The default PnP.Core.Model.SharePoint.CanvasColumn of this section Declaration ICanvasColumn DefaultColumn { get; } Property Value ICanvasColumn DisplayName DisplayName of the collapsible section Declaration string DisplayName { get; set; } Property Value String IconAlignment Sets the alignment of the collaps icon, left/right or not configured Declaration IconAlignment? IconAlignment { get; set; } Property Value Nullable < IconAlignment > IsExpanded Is the collapsible section expanded? Declaration bool IsExpanded { get; set; } Property Value Boolean Order Order in which this section is presented on the page Declaration float Order { get; set; } Property Value Single Page The IPage instance holding this section Declaration IPage Page { get; } Property Value IPage ShowDividerLine Show a devided line for this collapsible section? Declaration bool ShowDividerLine { get; set; } Property Value Boolean Type Type of the section Declaration CanvasSectionTemplate Type { get; set; } Property Value CanvasSectionTemplate VerticalSectionColumn A page can contain one section that has a vertical section column...use this attribute to get that column Declaration ICanvasColumn VerticalSectionColumn { get; } Property Value ICanvasColumn ZoneEmphasis Color emphasis of the section Declaration int ZoneEmphasis { get; set; } Property Value Int32"
  },
  "api/PnP.Core.Model.SharePoint.IChange.html": {
    "href": "api/PnP.Core.Model.SharePoint.IChange.html",
    "title": "Interface IChange | PnP Core SDK",
    "keywords": "Interface IChange Base interface for a description of a change to an object. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IChange Properties ChangeToken Gets a value that specifies a change token that identifies the changed object. Declaration IChangeToken ChangeToken { get; } Property Value IChangeToken ChangeType Gets a value that specifies the type of the change that has been made to the object. Declaration ChangeType ChangeType { get; } Property Value ChangeType SiteId Gets a value that identifies the site that contains the changed object. Declaration Guid SiteId { get; } Property Value Guid Time Gets a value that specifies the time that the object was modified. Declaration DateTime Time { get; } Property Value DateTime Methods IsPropertyAvailable<TModel>(Expression<Func<TModel, Object>>) Checks if a property was loaded or not Declaration bool IsPropertyAvailable<TModel>(Expression<Func<TModel, object>> expression) Parameters Expression < Func <TModel, Object >> expression An expression defining the property to check (e.g. p => p.Property) Returns Boolean Type Parameters TModel The entity derived from IChange that you're checking the property for"
  },
  "api/PnP.Core.Model.SharePoint.IChangeAlert.html": {
    "href": "api/PnP.Core.Model.SharePoint.IChangeAlert.html",
    "title": "Interface IChangeAlert | PnP Core SDK",
    "keywords": "Interface IChangeAlert Indicates a change to an Alert object. Inherited Members IChange.ChangeToken IChange.ChangeType IChange.SiteId IChange.Time IChange.IsPropertyAvailable<TModel>(Expression<Func<TModel, Object>>) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IChangeAlert : IChange Properties AlertId Gets a value that identifies the changed alert. Declaration Guid AlertId { get; } Property Value Guid WebId Gets a value that identifies the web that contains the changed alert. Declaration Guid WebId { get; } Property Value Guid See Also IChange"
  },
  "api/PnP.Core.Model.SharePoint.IChangeContentType.html": {
    "href": "api/PnP.Core.Model.SharePoint.IChangeContentType.html",
    "title": "Interface IChangeContentType | PnP Core SDK",
    "keywords": "Interface IChangeContentType Indicates a change to a IContentType object. Inherited Members IChange.ChangeToken IChange.ChangeType IChange.SiteId IChange.Time IChange.IsPropertyAvailable<TModel>(Expression<Func<TModel, Object>>) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IChangeContentType : IChange Properties ContentTypeId Gets a value that identifies the changed content type. Declaration IContentType ContentTypeId { get; } Property Value IContentType WebId Gets a value that identifies the web that contains the changed content type. Declaration Guid WebId { get; } Property Value Guid See Also IChange"
  },
  "api/PnP.Core.Model.SharePoint.IChangeField.html": {
    "href": "api/PnP.Core.Model.SharePoint.IChangeField.html",
    "title": "Interface IChangeField | PnP Core SDK",
    "keywords": "Interface IChangeField Indicates a change to a IField object. Inherited Members IChange.ChangeToken IChange.ChangeType IChange.SiteId IChange.Time IChange.IsPropertyAvailable<TModel>(Expression<Func<TModel, Object>>) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IChangeField : IChange Properties FieldId Gets a value that identifies the changed field. Declaration Guid FieldId { get; } Property Value Guid WebId Gets a value that identifies the web that contains the changed field. Declaration Guid WebId { get; } Property Value Guid See Also IChange"
  },
  "api/PnP.Core.Model.SharePoint.IChangeFile.html": {
    "href": "api/PnP.Core.Model.SharePoint.IChangeFile.html",
    "title": "Interface IChangeFile | PnP Core SDK",
    "keywords": "Interface IChangeFile Indicates a change to a IFile object. Inherited Members IChange.ChangeToken IChange.ChangeType IChange.SiteId IChange.Time IChange.IsPropertyAvailable<TModel>(Expression<Func<TModel, Object>>) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IChangeFile : IChange Properties UniqueId Gets a value that identifies the changed file. Declaration Guid UniqueId { get; } Property Value Guid WebId Gets a value that identifies the web that contains the changed file. Declaration Guid WebId { get; } Property Value Guid See Also IChange"
  },
  "api/PnP.Core.Model.SharePoint.IChangeFolder.html": {
    "href": "api/PnP.Core.Model.SharePoint.IChangeFolder.html",
    "title": "Interface IChangeFolder | PnP Core SDK",
    "keywords": "Interface IChangeFolder Indicates a change to a IFolder object. Inherited Members IChange.ChangeToken IChange.ChangeType IChange.SiteId IChange.Time IChange.IsPropertyAvailable<TModel>(Expression<Func<TModel, Object>>) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IChangeFolder : IChange Properties UniqueId Gets a value that identifies the changed folder. Declaration Guid UniqueId { get; } Property Value Guid WebId Gets a value that identifies the web that contains the changed folder. Declaration Guid WebId { get; } Property Value Guid See Also IChange"
  },
  "api/PnP.Core.Model.SharePoint.IChangeGroup.html": {
    "href": "api/PnP.Core.Model.SharePoint.IChangeGroup.html",
    "title": "Interface IChangeGroup | PnP Core SDK",
    "keywords": "Interface IChangeGroup Indicates a change to a ISharePointGroup object. Inherited Members IChange.ChangeToken IChange.ChangeType IChange.SiteId IChange.Time IChange.IsPropertyAvailable<TModel>(Expression<Func<TModel, Object>>) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IChangeGroup : IChange Properties GroupId Gets a value that identifies the changed group. Declaration int GroupId { get; } Property Value Int32 See Also IChange"
  },
  "api/PnP.Core.Model.SharePoint.IChangeItem.html": {
    "href": "api/PnP.Core.Model.SharePoint.IChangeItem.html",
    "title": "Interface IChangeItem | PnP Core SDK",
    "keywords": "Interface IChangeItem Indicates a change to a IListItem object; Inherited Members IChange.ChangeToken IChange.ChangeType IChange.SiteId IChange.Time IChange.IsPropertyAvailable<TModel>(Expression<Func<TModel, Object>>) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IChangeItem : IChange Properties ActivityType Gets the change activity type Declaration ChangeActivityType ActivityType { get; } Property Value ChangeActivityType ContentTypeId Gets a value that identifies the content type ID of the the changed item. Declaration IContentType ContentTypeId { get; } Property Value IContentType Editor Gets a value that specifies the editor of the the changed item. Declaration string Editor { get; } Property Value String EditorEmailHint Gets a value that specifies the email of the editor of the the changed item. Declaration string EditorEmailHint { get; } Property Value String EditorLoginName Gets a value that specifies the login name of the editor of the the changed item. Declaration string EditorLoginName { get; } Property Value String FileSystemObjectType Gets a value that specifies the file system object type of the the changed item. Declaration FileSystemObjectType FileSystemObjectType { get; } Property Value FileSystemObjectType FileType Gets a value that specifies the file type of the the changed item. Declaration string FileType { get; } Property Value String Hashtag Gets a value that specifies the hash tag of the the changed item. Declaration string Hashtag { get; } Property Value String Hidden Returns a Boolean value that indicates whether the parent list is a hidden list. Declaration bool Hidden { get; } Property Value Boolean ItemId Gets a value that identifies the changed item. Declaration int ItemId { get; } Property Value Int32 ListId Gets a value that identifies the list that contains the changed file. Declaration Guid ListId { get; } Property Value Guid ListTitle Gets a value that specifies the title of the list that contains the changed item. Declaration string ListTitle { get; } Property Value String MoveWasForRecycle Indicates that this is a move which is part of a recycle operation. Declaration bool MoveWasForRecycle { get; } Property Value Boolean MoveWasForRestore Indicates that this is a move which is part of a restore from recycle bin operation. Declaration bool MoveWasForRestore { get; } Property Value Boolean ServerRelativeUrl Gets a value that specifies the server relative URL of the changed item. Declaration string ServerRelativeUrl { get; } Property Value String TemplateType Gets a value that specifies the template type of the list that contains the changed item. Declaration ListTemplateType TemplateType { get; } Property Value ListTemplateType Title Gets a value that specifies the title of the changed item. Declaration string Title { get; } Property Value String UniqueId Gets a value that uniquely identifies the changed item. Declaration Guid UniqueId { get; } Property Value Guid WebId Gets a value that identifies the web that contains the changed file. Declaration Guid WebId { get; } Property Value Guid See Also IChange"
  },
  "api/PnP.Core.Model.SharePoint.IChangeList.html": {
    "href": "api/PnP.Core.Model.SharePoint.IChangeList.html",
    "title": "Interface IChangeList | PnP Core SDK",
    "keywords": "Interface IChangeList Indicates a change to a IList object. Inherited Members IChange.ChangeToken IChange.ChangeType IChange.SiteId IChange.Time IChange.IsPropertyAvailable<TModel>(Expression<Func<TModel, Object>>) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IChangeList : IChange Properties Editor A string that returns the name of the person who modified the list. Declaration string Editor { get; } Property Value String Hidden Returns a Boolean value that indicates whether a list is a hidden list. Declaration bool Hidden { get; } Property Value Boolean ListId Gets a value that identifies the changed list. Declaration Guid ListId { get; } Property Value Guid TemplateType Gets a value that specifies the template type of the the changed list. SP REST property name: BaseTemplate Declaration ListTemplateType TemplateType { get; } Property Value ListTemplateType Title Gets a value that specifies the title of the the changed list. Declaration string Title { get; } Property Value String WebId Gets a value that identifies the web that contains the changed list. Declaration Guid WebId { get; } Property Value Guid See Also IChange"
  },
  "api/PnP.Core.Model.SharePoint.IChangeSite.html": {
    "href": "api/PnP.Core.Model.SharePoint.IChangeSite.html",
    "title": "Interface IChangeSite | PnP Core SDK",
    "keywords": "Interface IChangeSite Indicates a change to a ISite object. Inherited Members IChange.ChangeToken IChange.ChangeType IChange.SiteId IChange.Time IChange.IsPropertyAvailable<TModel>(Expression<Func<TModel, Object>>) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IChangeSite : IChange See Also IChange"
  },
  "api/PnP.Core.Model.SharePoint.IChangeToken.html": {
    "href": "api/PnP.Core.Model.SharePoint.IChangeToken.html",
    "title": "Interface IChangeToken | PnP Core SDK",
    "keywords": "Interface IChangeToken Represents the unique sequential location of a change within the change log. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IChangeToken Properties StringValue Gets or sets a string value that contains the serialized representation of the change token generated by the protocol server. Declaration string StringValue { get; } Property Value String"
  },
  "api/PnP.Core.Model.SharePoint.IChangeUser.html": {
    "href": "api/PnP.Core.Model.SharePoint.IChangeUser.html",
    "title": "Interface IChangeUser | PnP Core SDK",
    "keywords": "Interface IChangeUser Indicates a change to a ISharePointUser object. Inherited Members IChange.ChangeToken IChange.ChangeType IChange.SiteId IChange.Time IChange.IsPropertyAvailable<TModel>(Expression<Func<TModel, Object>>) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IChangeUser : IChange Properties Activate Gets a value that specifies whether a user has changed from an inactive state to an active state. Declaration bool Activate { get; } Property Value Boolean UserId Gets a value that identifies the changed user. Declaration int UserId { get; } Property Value Int32 See Also IChange"
  },
  "api/PnP.Core.Model.SharePoint.IChangeView.html": {
    "href": "api/PnP.Core.Model.SharePoint.IChangeView.html",
    "title": "Interface IChangeView | PnP Core SDK",
    "keywords": "Interface IChangeView Indicates a change to a IView object. Inherited Members IChange.ChangeToken IChange.ChangeType IChange.SiteId IChange.Time IChange.IsPropertyAvailable<TModel>(Expression<Func<TModel, Object>>) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IChangeView : IChange Properties ListId Gets a value that identifies the list that contains the changed view. Declaration Guid ListId { get; } Property Value Guid ViewId Gets a value that identifies the changed view. Declaration Guid ViewId { get; } Property Value Guid WebId Gets a value that identifies the web that contains the changed view. Declaration Guid WebId { get; } Property Value Guid See Also IChange"
  },
  "api/PnP.Core.Model.SharePoint.IChangeWeb.html": {
    "href": "api/PnP.Core.Model.SharePoint.IChangeWeb.html",
    "title": "Interface IChangeWeb | PnP Core SDK",
    "keywords": "Interface IChangeWeb Indicates a change to a IWeb object. Inherited Members IChange.ChangeToken IChange.ChangeType IChange.SiteId IChange.Time IChange.IsPropertyAvailable<TModel>(Expression<Func<TModel, Object>>) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IChangeWeb : IChange Properties WebId Gets a value that identifies the changed web. Declaration Guid WebId { get; } Property Value Guid See Also IChange"
  },
  "api/PnP.Core.Model.SharePoint.IChromeOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.IChromeOptions.html",
    "title": "Interface IChromeOptions | PnP Core SDK",
    "keywords": "Interface IChromeOptions Defines the chrome (header/footer) options of a web Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IChromeOptions Properties Footer Site footer chrome configuration Declaration IFooterOptions Footer { get; } Property Value IFooterOptions Header Site header chrome configuration Declaration IHeaderOptions Header { get; } Property Value IHeaderOptions Navigation Site navigation chrome options Declaration INavigationOptions Navigation { get; } Property Value INavigationOptions"
  },
  "api/PnP.Core.Model.SharePoint.IComment.html": {
    "href": "api/PnP.Core.Model.SharePoint.IComment.html",
    "title": "Interface IComment | PnP Core SDK",
    "keywords": "Interface IComment Public interface to define a comment. Inherited Members IDataModel<IComment>.Requested IDataModel<IComment>.HasValue(String) IDataModel<IComment>.HasChanged(String) IDataModel<IComment>.IsPropertyAvailable(Expression<Func<IComment, Object>>) IDataModel<IComment>.ArePropertiesAvailable(Expression<Func<IComment, Object>>[]) IDataModel<IComment>.EnsureProperties(Expression<Func<IComment, Object>>[]) IDataModel<IComment>.EnsurePropertiesAsync(Expression<Func<IComment, Object>>[]) IDataModel<IComment>.ExecuteRequestAsync(ApiRequest) IDataModel<IComment>.ExecuteRequest(ApiRequest) IDataModel<IComment>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IComment>.ExecuteRequestBatch(ApiRequest) IDataModel<IComment>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IComment>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IComment>.GetBatchAsync(Batch, Expression<Func<IComment, Object>>[]) IDataModelGet<IComment>.GetAsync(Expression<Func<IComment, Object>>[]) IDataModelLoad<IComment>.LoadBatchAsync(Batch, Expression<Func<IComment, Object>>[]) IDataModelLoad<IComment>.LoadAsync(Expression<Func<IComment, Object>>[]) IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IComment : IDataModel<IComment>, IDataModelParent, IDataModelWithContext, ISupportModules<IComment>, IDataModelGet<IComment>, IDataModelLoad<IComment>, IDataModelDelete, IQueryableDataModel Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object Author Comment author. Declaration ISharePointSharingPrincipal Author { get; } Property Value ISharePointSharingPrincipal CreatedDate Comment creation date. Declaration DateTime CreatedDate { get; } Property Value DateTime Id Comment id. Declaration string Id { get; } Property Value String IsLikedByUser Flag that indicates whether the user in the current context liked the comment. Declaration bool IsLikedByUser { get; } Property Value Boolean IsReply Comment is a reply to another comment. Declaration bool IsReply { get; } Property Value Boolean ItemId Comment item id. Declaration int ItemId { get; } Property Value Int32 LikeCount Number of likes for the comment. Declaration int LikeCount { get; } Property Value Int32 LikedBy List of users who have liked the comment. Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration ICommentLikeUserEntityCollection LikedBy { get; } Property Value ICommentLikeUserEntityCollection ListId Comment list id. Declaration Guid ListId { get; } Property Value Guid Mentions List of users who are at mentioned in this comment. Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration ICommentLikeUserEntityCollection Mentions { get; } Property Value ICommentLikeUserEntityCollection ParentId Comment parent ID (0 if not a reply). Declaration string ParentId { get; } Property Value String RelativeCreatedDate Gets a string that represents the relative value of the comment's creation date. Declaration string RelativeCreatedDate { get; } Property Value String Replies Replies to the comment. Declaration ICommentCollection Replies { get; } Property Value ICommentCollection ReplyCount Number of replies to the comment. Declaration int ReplyCount { get; } Property Value Int32 Text Comment text. Declaration string Text { get; set; } Property Value String Methods Like() Likes the comment for the user in the current context. Declaration void Like() LikeAsync() Likes the comment for the user in the current context. Declaration Task LikeAsync() Returns Task Unlike() Unlikes the comment for the user in the current context. Declaration void Unlike() UnlikeAsync() Unlikes the comment for the user in the current context. Declaration Task UnlikeAsync() Returns Task Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.ICommentCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.ICommentCollection.html",
    "title": "Interface ICommentCollection | PnP Core SDK",
    "keywords": "Interface ICommentCollection Public interface to define a collection of comment objects. Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ICommentCollection : IQueryable<IComment>, IDataModelCollection<IComment>, IEnumerable<IComment>, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportModules<ICommentCollection> Methods Add(String) Adds a comment to a list item. Declaration IComment Add(string text) Parameters String text Comment to add Returns IComment Newly added comment AddAsync(String) Adds a comment to a list item. Declaration Task<IComment> AddAsync(string text) Parameters String text Comment to add Returns Task < IComment > Newly added comment AddBatch(Batch, String) Adds a comment to a list item. Declaration IComment AddBatch(Batch batch, string text) Parameters Batch batch Batch to use String text Comment to add Returns IComment Newly added comment AddBatch(String) Adds a comment to a list item. Declaration IComment AddBatch(string text) Parameters String text Comment to add Returns IComment Newly added comment AddBatchAsync(Batch, String) Adds a comment to a list item. Declaration Task<IComment> AddBatchAsync(Batch batch, string text) Parameters Batch batch Batch to use String text Comment to add Returns Task < IComment > Newly added comment AddBatchAsync(String) Adds a comment to a list item. Declaration Task<IComment> AddBatchAsync(string text) Parameters String text Comment to add Returns Task < IComment > Newly added comment DeleteAll() Delete all comments in this collection. Declaration void DeleteAll() DeleteAllAsync() Delete all comments in this collection. Declaration Task DeleteAllAsync() Returns Task GetAtMentioningString(String, String, String) Constructs the at mentioning string to be used when at mentioning someone in a comment or reply Declaration string GetAtMentioningString(string userName, string userPrincipalName, string email = null) Parameters String userName Name of the user to show in front of the @ (e.g. @Bert) String userPrincipalName The UPN of the user represented in the at mentioning String email The email of the user represented in the at mentioning. If not specified the UPN is used for email as well Returns String The formatted at mentioning html Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.ICommentLikeUserEntity.html": {
    "href": "api/PnP.Core.Model.SharePoint.ICommentLikeUserEntity.html",
    "title": "Interface ICommentLikeUserEntity | PnP Core SDK",
    "keywords": "Interface ICommentLikeUserEntity Represents a single user within a comment's likedBy list in the comments API. Inherited Members IDataModel<ICommentLikeUserEntity>.Requested IDataModel<ICommentLikeUserEntity>.HasValue(String) IDataModel<ICommentLikeUserEntity>.HasChanged(String) IDataModel<ICommentLikeUserEntity>.IsPropertyAvailable(Expression<Func<ICommentLikeUserEntity, Object>>) IDataModel<ICommentLikeUserEntity>.ArePropertiesAvailable(Expression<Func<ICommentLikeUserEntity, Object>>[]) IDataModel<ICommentLikeUserEntity>.EnsureProperties(Expression<Func<ICommentLikeUserEntity, Object>>[]) IDataModel<ICommentLikeUserEntity>.EnsurePropertiesAsync(Expression<Func<ICommentLikeUserEntity, Object>>[]) IDataModel<ICommentLikeUserEntity>.ExecuteRequestAsync(ApiRequest) IDataModel<ICommentLikeUserEntity>.ExecuteRequest(ApiRequest) IDataModel<ICommentLikeUserEntity>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ICommentLikeUserEntity>.ExecuteRequestBatch(ApiRequest) IDataModel<ICommentLikeUserEntity>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ICommentLikeUserEntity>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ICommentLikeUserEntity : IDataModel<ICommentLikeUserEntity>, IDataModelParent, IDataModelWithContext, ISupportModules<ICommentLikeUserEntity> Properties CreationDate when did the user do the \"like\". Declaration DateTime CreationDate { get; } Property Value DateTime Id The user's numerical ID. Declaration int Id { get; } Property Value Int32 LoginName The user's loginName. Declaration string LoginName { get; } Property Value String Mail The user's email. SPO REST property : Email Declaration string Mail { get; } Property Value String Name The user's name. Declaration string Name { get; } Property Value String Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.ICommentLikeUserEntityCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.ICommentLikeUserEntityCollection.html",
    "title": "Interface ICommentLikeUserEntityCollection | PnP Core SDK",
    "keywords": "Interface ICommentLikeUserEntityCollection Public interface to define a collection of userEntity objects Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ICommentLikeUserEntityCollection : IQueryable<ICommentLikeUserEntity>, IDataModelCollection<ICommentLikeUserEntity>, IEnumerable<ICommentLikeUserEntity>, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportModules<ICommentLikeUserEntity> Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.IComplianceTag.html": {
    "href": "api/PnP.Core.Model.SharePoint.IComplianceTag.html",
    "title": "Interface IComplianceTag | PnP Core SDK",
    "keywords": "Interface IComplianceTag Public interface to define a ComplianceTag / Retention label object of SharePoint Online Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IComplianceTag Properties AcceptMessagesOnlyFromSendersOrMembers Specifies AcceptMessagesOnlyFromSendersOrMembers for the tag Declaration bool AcceptMessagesOnlyFromSendersOrMembers { get; } Property Value Boolean AccessType Specifies AccessType for the tag Declaration string AccessType { get; } Property Value String AllowAccessFromUnmanagedDevice Specifies AllowAccessFromUnmanagedDevice for the tag Declaration string AllowAccessFromUnmanagedDevice { get; } Property Value String AutoDelete Specifies \"Will we auto Delete after the Retention Period passed\" Declaration bool AutoDelete { get; } Property Value Boolean BlockDelete Specifies ComplianceTag BlockDelete Declaration bool BlockDelete { get; } Property Value Boolean BlockEdit Specifies ComplianceTag Enable Block edits Declaration bool BlockEdit { get; } Property Value Boolean ContainsSiteLabel Specifies whether this tag contains siteLabeling Declaration bool ContainsSiteLabel { get; } Property Value Boolean DisplayName Specifies the Display name for the tag in UI Declaration string DisplayName { get; } Property Value String EncryptionRMSTemplateId Specifies the RMS Template id for the tag Declaration string EncryptionRMSTemplateId { get; } Property Value String HasRetentionAction Specifies whether this tag has retention action Declaration bool HasRetentionAction { get; } Property Value Boolean IsEventTag Specifies if this is an event tag Declaration bool IsEventTag { get; } Property Value Boolean Notes Specifies notes for the tag Declaration string Notes { get; } Property Value String RequireSenderAuthenticationEnabled Specifies RequireSenderAuthenticationEnabled for the tag Declaration bool RequireSenderAuthenticationEnabled { get; } Property Value Boolean ReviewerEmail Specifies ReviewerEmail for the tag Declaration string ReviewerEmail { get; } Property Value String SharingCapabilities Specifies SharingCapabilities for the tag Declaration string SharingCapabilities { get; } Property Value String SuperLock Specifies if this is an event tag Declaration bool SuperLock { get; } Property Value Boolean TagDuration Specifies ComplianceTag TagDuration Declaration int TagDuration { get; } Property Value Int32 TagId Specifies ComplianceTag ID Declaration Guid TagId { get; } Property Value Guid TagName Specifies ComplianceTag Name Declaration string TagName { get; } Property Value String TagRetentionBasedOn Specifies ComplianceTag Retention Based on Field Declaration string TagRetentionBasedOn { get; } Property Value String"
  },
  "api/PnP.Core.Model.SharePoint.IconAlignment.html": {
    "href": "api/PnP.Core.Model.SharePoint.IconAlignment.html",
    "title": "Enum IconAlignment | PnP Core SDK",
    "keywords": "Enum IconAlignment Alignment of the collapsible section icon Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum IconAlignment : int Left Icon appears left of the collapsible section display name Right Icon appears right of the collapsible section display name"
  },
  "api/PnP.Core.Model.SharePoint.IContentType.html": {
    "href": "api/PnP.Core.Model.SharePoint.IContentType.html",
    "title": "Interface IContentType | PnP Core SDK",
    "keywords": "Interface IContentType Public interface to define a Content Type object of SharePoint Online Inherited Members IDataModel<IContentType>.Requested IDataModel<IContentType>.HasValue(String) IDataModel<IContentType>.HasChanged(String) IDataModel<IContentType>.IsPropertyAvailable(Expression<Func<IContentType, Object>>) IDataModel<IContentType>.ArePropertiesAvailable(Expression<Func<IContentType, Object>>[]) IDataModel<IContentType>.EnsureProperties(Expression<Func<IContentType, Object>>[]) IDataModel<IContentType>.EnsurePropertiesAsync(Expression<Func<IContentType, Object>>[]) IDataModel<IContentType>.ExecuteRequestAsync(ApiRequest) IDataModel<IContentType>.ExecuteRequest(ApiRequest) IDataModel<IContentType>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IContentType>.ExecuteRequestBatch(ApiRequest) IDataModel<IContentType>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IContentType>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IContentType>.GetBatchAsync(Batch, Expression<Func<IContentType, Object>>[]) IDataModelGet<IContentType>.GetAsync(Expression<Func<IContentType, Object>>[]) IDataModelLoad<IContentType>.LoadBatchAsync(Batch, Expression<Func<IContentType, Object>>[]) IDataModelLoad<IContentType>.LoadAsync(Expression<Func<IContentType, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IContentType : IDataModel<IContentType>, IDataModelParent, IDataModelWithContext, ISupportModules<IContentType>, IDataModelGet<IContentType>, IDataModelLoad<IContentType>, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object ClientFormCustomFormatter Gets or Sets the Client Form Custom Formatter of the Content Type Declaration string ClientFormCustomFormatter { get; set; } Property Value String Description Gets or Sets the description of the Content Type Declaration string Description { get; set; } Property Value String DisplayFormTemplateName Gets or Sets the Display Form template name of the Content Type Declaration string DisplayFormTemplateName { get; set; } Property Value String DisplayFormUrl Gets or Sets the Display Form URL of the Content Type Declaration string DisplayFormUrl { get; set; } Property Value String DocumentTemplate Gets or Sets the Document Template of the Content Type Declaration string DocumentTemplate { get; set; } Property Value String DocumentTemplateUrl Gets or Sets the DocumentTemplate URL of the Content Type Declaration string DocumentTemplateUrl { get; set; } Property Value String EditFormTemplateName Gets or Sets the Edit Form template name of the Content Type Declaration string EditFormTemplateName { get; set; } Property Value String EditFormUrl Gets or Sets the Edit Form URL of the Content Type Declaration string EditFormUrl { get; set; } Property Value String FieldLinks Gets the collection of field links of the Content Type. Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IFieldLinkCollection FieldLinks { get; } Property Value IFieldLinkCollection Fields Gets the collection of fields of the Content Type. Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IFieldCollection Fields { get; } Property Value IFieldCollection Group Gets or Sets the group of the Content Type Declaration string Group { get; set; } Property Value String Hidden Gets or Sets that specifies whether the Content Type is hidden Declaration bool Hidden { get; set; } Property Value Boolean Id The unique ID of the Content Type as object Declaration string Id { get; } Property Value String JSLink Gets or Sets the JS Link of the Content Type Declaration string JSLink { get; set; } Property Value String MobileDisplayFormUrl Gets or Sets the Mobile Display Form URL of the Content Type Declaration string MobileDisplayFormUrl { get; set; } Property Value String MobileEditFormUrl Gets or Sets the Mobile Edit Form URL of the Content Type Declaration string MobileEditFormUrl { get; set; } Property Value String MobileNewFormUrl Gets or Sets the Mobile New Form URL of the Content Type Declaration string MobileNewFormUrl { get; set; } Property Value String Name Gets or Sets the name of the Content Type Declaration string Name { get; set; } Property Value String NewFormTemplateName Gets or Sets the New Form template's name of the Content Type Declaration string NewFormTemplateName { get; set; } Property Value String NewFormUrl Gets or Sets the New Form URL of the Content Type Declaration string NewFormUrl { get; set; } Property Value String ReadOnly Gets or Sets whether the Content Type is read only Declaration bool ReadOnly { get; set; } Property Value Boolean SchemaXml Gets or Sets the Schema XML of the Content Type Declaration string SchemaXml { get; set; } Property Value String SchemaXmlWithResourceTokens Gets or Sets the Schema XML with resource tokens of the Content Type Declaration string SchemaXmlWithResourceTokens { get; set; } Property Value String Scope Gets or Sets the scope of the Content Type Declaration string Scope { get; set; } Property Value String Sealed Gets or Sets whether the Content Type is sealed Declaration bool Sealed { get; set; } Property Value Boolean StringId The unique ID of the Content Type as string Declaration string StringId { get; } Property Value String Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IContentTypeCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IContentTypeCollection.html",
    "title": "Interface IContentTypeCollection | PnP Core SDK",
    "keywords": "Interface IContentTypeCollection Public interface to define a collection of ContentType objects of SharePoint Online Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<IContentType>.LoadAsync(Expression<Func<IContentType, Object>>[]) IDataModelCollectionLoad<IContentType>.LoadBatchAsync(Batch, Expression<Func<IContentType, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IContentTypeCollection : IQueryable<IContentType>, IAsyncEnumerable<IContentType>, IDataModelCollection<IContentType>, IEnumerable<IContentType>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<IContentType>, ISupportModules<IContentTypeCollection> Methods Add(String, String, String, String) Add a content type Check the documentation for a well formed Content Type Id: https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/aa543822(v=office.14) Declaration IContentType Add(string id, string name, string description = null, string group = null) Parameters String id Id of the content type String name Name of the content type String description Description of the content type String group Group of the content type Returns IContentType The newly added content type AddAsync(String, String, String, String) Add a content type Check the documentation for a well formed Content Type Id: https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/aa543822(v=office.14) Declaration Task<IContentType> AddAsync(string id, string name, string description = null, string group = null) Parameters String id Id of the content type String name Name of the content type String description Description of the content type String group Group of the content type Returns Task < IContentType > The newly added content type AddAvailableContentType(String) Add an existing content type Declaration IContentType AddAvailableContentType(string id) Parameters String id Id of the content type Returns IContentType The newly added content type AddAvailableContentTypeAsync(String) Add an existing content type Declaration Task<IContentType> AddAvailableContentTypeAsync(string id) Parameters String id Id of the content type Returns Task < IContentType > The newly added content type AddAvailableContentTypeBatch(Batch, String) Add an existing content type Declaration IContentType AddAvailableContentTypeBatch(Batch batch, string id) Parameters Batch batch Batch to use String id Id of the content type Returns IContentType The newly added content type AddAvailableContentTypeBatch(String) Add an existing content type Declaration IContentType AddAvailableContentTypeBatch(string id) Parameters String id Id of the content type Returns IContentType The newly added content type AddAvailableContentTypeBatchAsync(Batch, String) Add an existing content type Declaration Task<IContentType> AddAvailableContentTypeBatchAsync(Batch batch, string id) Parameters Batch batch Batch to use String id Id of the content type Returns Task < IContentType > The newly added content type AddAvailableContentTypeBatchAsync(String) Add an existing content type Declaration Task<IContentType> AddAvailableContentTypeBatchAsync(string id) Parameters String id Id of the content type Returns Task < IContentType > The newly added content type AddBatch(Batch, String, String, String, String) Add a content type Check the documentation for a well formed Content Type Id: https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/aa543822(v=office.14) Declaration IContentType AddBatch(Batch batch, string id, string name, string description = null, string group = null) Parameters Batch batch Batch to use String id Id of the content type String name Name of the content type String description Description of the content type String group Group of the content type Returns IContentType The newly added content type AddBatch(String, String, String, String) Add a content type Check the documentation for a well formed Content Type Id: https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/aa543822(v=office.14) Declaration IContentType AddBatch(string id, string name, string description = null, string group = null) Parameters String id Id of the content type String name Name of the content type String description Description of the content type String group Group of the content type Returns IContentType The newly added content type AddBatchAsync(Batch, String, String, String, String) Add a content type Check the documentation for a well formed Content Type Id: https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/aa543822(v=office.14) Declaration Task<IContentType> AddBatchAsync(Batch batch, string id, string name, string description = null, string group = null) Parameters Batch batch Batch to use String id Id of the content type String name Name of the content type String description Description of the content type String group Group of the content type Returns Task < IContentType > The newly added content type AddBatchAsync(String, String, String, String) Add a content type Check the documentation for a well formed Content Type Id: https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/aa543822(v=office.14) Declaration Task<IContentType> AddBatchAsync(string id, string name, string description = null, string group = null) Parameters String id Id of the content type String name Name of the content type String description Description of the content type String group Group of the content type Returns Task < IContentType > The newly added content type Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.IEffectiveInformationRightsManagementSettings.html": {
    "href": "api/PnP.Core.Model.SharePoint.IEffectiveInformationRightsManagementSettings.html",
    "title": "Interface IEffectiveInformationRightsManagementSettings | PnP Core SDK",
    "keywords": "Interface IEffectiveInformationRightsManagementSettings Public interface to define a EffectiveInformationRightsManagementSettings object Inherited Members IDataModel<IEffectiveInformationRightsManagementSettings>.Requested IDataModel<IEffectiveInformationRightsManagementSettings>.HasValue(String) IDataModel<IEffectiveInformationRightsManagementSettings>.HasChanged(String) IDataModel<IEffectiveInformationRightsManagementSettings>.IsPropertyAvailable(Expression<Func<IEffectiveInformationRightsManagementSettings, Object>>) IDataModel<IEffectiveInformationRightsManagementSettings>.ArePropertiesAvailable(Expression<Func<IEffectiveInformationRightsManagementSettings, Object>>[]) IDataModel<IEffectiveInformationRightsManagementSettings>.EnsureProperties(Expression<Func<IEffectiveInformationRightsManagementSettings, Object>>[]) IDataModel<IEffectiveInformationRightsManagementSettings>.EnsurePropertiesAsync(Expression<Func<IEffectiveInformationRightsManagementSettings, Object>>[]) IDataModel<IEffectiveInformationRightsManagementSettings>.ExecuteRequestAsync(ApiRequest) IDataModel<IEffectiveInformationRightsManagementSettings>.ExecuteRequest(ApiRequest) IDataModel<IEffectiveInformationRightsManagementSettings>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IEffectiveInformationRightsManagementSettings>.ExecuteRequestBatch(ApiRequest) IDataModel<IEffectiveInformationRightsManagementSettings>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IEffectiveInformationRightsManagementSettings>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelLoad<IEffectiveInformationRightsManagementSettings>.LoadBatchAsync(Batch, Expression<Func<IEffectiveInformationRightsManagementSettings, Object>>[]) IDataModelLoad<IEffectiveInformationRightsManagementSettings>.LoadAsync(Expression<Func<IEffectiveInformationRightsManagementSettings, Object>>[]) IDataModelGet<IEffectiveInformationRightsManagementSettings>.GetBatchAsync(Batch, Expression<Func<IEffectiveInformationRightsManagementSettings, Object>>[]) IDataModelGet<IEffectiveInformationRightsManagementSettings>.GetAsync(Expression<Func<IEffectiveInformationRightsManagementSettings, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IEffectiveInformationRightsManagementSettings : IDataModel<IEffectiveInformationRightsManagementSettings>, IDataModelParent, IDataModelWithContext, ISupportModules<IEffectiveInformationRightsManagementSettings>, IDataModelLoad<IEffectiveInformationRightsManagementSettings>, IDataModelGet<IEffectiveInformationRightsManagementSettings> Properties AllowPrint Gets whether print is allowed for this file. Declaration bool AllowPrint { get; } Property Value Boolean AllowScript Gets whether script is alloed for this file. Declaration bool AllowScript { get; } Property Value Boolean AllowWriteCopy Gets whether writing copy is allowed for this file. Declaration bool AllowWriteCopy { get; } Property Value Boolean DisableDocumentBrowserView Gets whether document browser view is disabled for this file. Declaration bool DisableDocumentBrowserView { get; } Property Value Boolean DocumentAccessExpireDays Gets the access expiry in days for this file. Declaration int DocumentAccessExpireDays { get; } Property Value Int32 DocumentLibraryProtectionExpireDate Gets the document library protection expiry date. Declaration DateTime DocumentLibraryProtectionExpireDate { get; } Property Value DateTime EnableDocumentAccessExpire Gets access expiry for this file. Declaration bool EnableDocumentAccessExpire { get; } Property Value Boolean EnableDocumentBrowserPublishingView Gets whether document browser publishing view is enabled for this file. Declaration bool EnableDocumentBrowserPublishingView { get; } Property Value Boolean EnableGroupProtection Gets whether group protection is enabled on this file. Declaration bool EnableGroupProtection { get; } Property Value Boolean EnableLicenseCacheExpire Gets whether license cache expiry is enabled on this file. Declaration bool EnableLicenseCacheExpire { get; } Property Value Boolean GroupName Gets the IRM group name of the file. Declaration string GroupName { get; } Property Value String IrmEnabled Gets whether IRM is enabled on this file. Declaration bool IrmEnabled { get; } Property Value Boolean LicenseCacheExpireDays Gets the license cache expiry in days for this file. Declaration int LicenseCacheExpireDays { get; } Property Value Int32 PolicyDescription Gets the policy description for this file. Declaration string PolicyDescription { get; } Property Value String PolicyTitle Gets the policy title for this file. Declaration string PolicyTitle { get; } Property Value String SettingSource Gets the source of this setting. Declaration SPEffectiveInformationRightsManagementSettingsSource SettingSource { get; } Property Value SPEffectiveInformationRightsManagementSettingsSource TemplateId Gets the IRM template id for this file. Declaration string TemplateId { get; } Property Value String Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IFeature.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFeature.html",
    "title": "Interface IFeature | PnP Core SDK",
    "keywords": "Interface IFeature Represents a Feature in SharePoint Online Inherited Members IDataModel<IFeature>.Requested IDataModel<IFeature>.HasValue(String) IDataModel<IFeature>.HasChanged(String) IDataModel<IFeature>.IsPropertyAvailable(Expression<Func<IFeature, Object>>) IDataModel<IFeature>.ArePropertiesAvailable(Expression<Func<IFeature, Object>>[]) IDataModel<IFeature>.EnsureProperties(Expression<Func<IFeature, Object>>[]) IDataModel<IFeature>.EnsurePropertiesAsync(Expression<Func<IFeature, Object>>[]) IDataModel<IFeature>.ExecuteRequestAsync(ApiRequest) IDataModel<IFeature>.ExecuteRequest(ApiRequest) IDataModel<IFeature>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IFeature>.ExecuteRequestBatch(ApiRequest) IDataModel<IFeature>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IFeature>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IFeature>.GetBatchAsync(Batch, Expression<Func<IFeature, Object>>[]) IDataModelGet<IFeature>.GetAsync(Expression<Func<IFeature, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFeature : IDataModel<IFeature>, IDataModelParent, IDataModelWithContext, ISupportModules<IFeature>, IDataModelGet<IFeature>, IQueryableDataModel Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object DefinitionId The ID of the Feature Declaration Guid DefinitionId { get; } Property Value Guid DisplayName The name of the feature Declaration string DisplayName { get; } Property Value String Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IFeatureCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFeatureCollection.html",
    "title": "Interface IFeatureCollection | PnP Core SDK",
    "keywords": "Interface IFeatureCollection Collection of site or web scoped features Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFeatureCollection : IQueryable<IFeature>, IDataModelCollection<IFeature>, IEnumerable<IFeature>, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportModules<IFeatureCollection> Methods Disable(Guid) Disable a feature Declaration void Disable(Guid id) Parameters Guid id Id of the feature to disable DisableAsync(Guid) Disable a feature Declaration Task DisableAsync(Guid id) Parameters Guid id Id of the feature to disable Returns Task DisableBatch(Guid) Disable a feature in batch Declaration void DisableBatch(Guid id) Parameters Guid id Id of the feature to disable DisableBatch(Batch, Guid) Disable a feature in batch Declaration void DisableBatch(Batch batch, Guid id) Parameters Batch batch Batch to add this feature disable request to Guid id Id of the feature to disable DisableBatchAsync(Guid) Disable a feature in batch Declaration Task DisableBatchAsync(Guid id) Parameters Guid id Id of the feature to disable Returns Task DisableBatchAsync(Batch, Guid) Disable a feature in batch Declaration Task DisableBatchAsync(Batch batch, Guid id) Parameters Batch batch Batch to add this feature disable request to Guid id Id of the feature to disable Returns Task Enable(Guid) Enable a feature Declaration IFeature Enable(Guid id) Parameters Guid id Id of the feature to enable Returns IFeature Enabled feature EnableAsync(Guid) Enable a feature Declaration Task<IFeature> EnableAsync(Guid id) Parameters Guid id Id of the feature to enable Returns Task < IFeature > Enabled feature EnableBatch(Guid) Enable a feature in batch Declaration IFeature EnableBatch(Guid id) Parameters Guid id Id of the feature to enable Returns IFeature Enabled feature EnableBatch(Batch, Guid) Enable a feature in batch Declaration IFeature EnableBatch(Batch batch, Guid id) Parameters Batch batch Batch to add this feature enable request to Guid id Id of the feature to enable Returns IFeature Enabled feature EnableBatchAsync(Guid) Enable a feature in batch Declaration Task<IFeature> EnableBatchAsync(Guid id) Parameters Guid id Id of the feature to enable Returns Task < IFeature > Enabled feature EnableBatchAsync(Batch, Guid) Enable a feature in batch Declaration Task<IFeature> EnableBatchAsync(Batch batch, Guid id) Parameters Batch batch Batch to add this feature enable request to Guid id Id of the feature to enable Returns Task < IFeature > Enabled feature Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.IField.html": {
    "href": "api/PnP.Core.Model.SharePoint.IField.html",
    "title": "Interface IField | PnP Core SDK",
    "keywords": "Interface IField Public interface to define a Field object of SharePoint Online Inherited Members IDataModel<IField>.Requested IDataModel<IField>.HasValue(String) IDataModel<IField>.HasChanged(String) IDataModel<IField>.IsPropertyAvailable(Expression<Func<IField, Object>>) IDataModel<IField>.ArePropertiesAvailable(Expression<Func<IField, Object>>[]) IDataModel<IField>.EnsureProperties(Expression<Func<IField, Object>>[]) IDataModel<IField>.EnsurePropertiesAsync(Expression<Func<IField, Object>>[]) IDataModel<IField>.ExecuteRequestAsync(ApiRequest) IDataModel<IField>.ExecuteRequest(ApiRequest) IDataModel<IField>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IField>.ExecuteRequestBatch(ApiRequest) IDataModel<IField>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IField>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IField>.GetBatchAsync(Batch, Expression<Func<IField, Object>>[]) IDataModelGet<IField>.GetAsync(Expression<Func<IField, Object>>[]) IDataModelLoad<IField>.LoadBatchAsync(Batch, Expression<Func<IField, Object>>[]) IDataModelLoad<IField>.LoadAsync(Expression<Func<IField, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IField : IDataModel<IField>, IDataModelParent, IDataModelWithContext, ISupportModules<IField>, IDataModelGet<IField>, IDataModelLoad<IField>, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object AllowDisplay Gets or sets whether to allow display if the user name Declaration bool AllowDisplay { get; set; } Property Value Boolean AllowHyperlink Gets or sets a value that specifies whether a hyperlink is allowed as a value of the field. Declaration bool AllowHyperlink { get; set; } Property Value Boolean AllowMultipleValues Gets or sets whether the lookup fields allows multiple values Declaration bool AllowMultipleValues { get; set; } Property Value Boolean AnchorId Gets or sets the GUID of the anchor Term object for a TaxonomyField Declaration Guid AnchorId { get; set; } Property Value Guid AppendOnly Gets or sets a value that specifies whether all changes to the value of the field are displayed in list forms. Declaration bool AppendOnly { get; set; } Property Value Boolean AutoIndexed Gets or sets a Boolean value that specifies whether the field is auto-indexed Declaration bool AutoIndexed { get; set; } Property Value Boolean CanBeDeleted Specifies whether or not the field can be deleted Declaration bool CanBeDeleted { get; } Property Value Boolean Choices Gets or sets the choices of choice field Declaration string[] Choices { get; set; } Property Value String [] ClientSideComponentId Gets or Sets the client side component Id associated with the field Declaration Guid ClientSideComponentId { get; set; } Property Value Guid ClientSideComponentProperties Gets or Sets the properties of the client side component associated with the field Declaration string ClientSideComponentProperties { get; set; } Property Value String ClientValidationFormula Gets or Sets the validation formula Declaration string ClientValidationFormula { get; set; } Property Value String ClientValidationMessage Gets or Sets the client validation message of the field Declaration string ClientValidationMessage { get; set; } Property Value String CreateValuesInEditForm Gets or sets a Boolean value that specifies whether the new Term objects can be added to the TermSet while typing in the TaxonomyField editor control. Declaration bool CreateValuesInEditForm { get; set; } Property Value Boolean CurrencyLocaleId Gets or Sets the Locale Id of the currency Declaration int CurrencyLocaleId { get; set; } Property Value Int32 CustomFormatter Gets or Sets custom formatter of the field Declaration string CustomFormatter { get; set; } Property Value String DateFormat Gets or Sets the Date Format Valid for DateTime field, Calculated field Declaration DateTimeFieldFormatType DateFormat { get; set; } Property Value DateTimeFieldFormatType DateTimeCalendarType Gets or sets the type of calendar to use of a DateTime field Declaration CalendarType DateTimeCalendarType { get; set; } Property Value CalendarType DefaultFormula Gets or sets the default formula for a calculated field Declaration string DefaultFormula { get; set; } Property Value String DefaultValue Gets or Sets the default value of the field Declaration object DefaultValue { get; set; } Property Value Object DependentLookupInternalNames Gets the dependent lookup internal names of a lookup field Declaration string[] DependentLookupInternalNames { get; } Property Value String [] Description Gets or Sets the description of the field Declaration string Description { get; set; } Property Value String Direction Specifies the direction of the reading order for the field. A string that contains LTR if the reading order is left-to-right, RTL if it is right-to-left or none Declaration string Direction { get; set; } Property Value String DisplayFormat Gets or Sets the display format of the field CAUTION: Is an integer value since according to field type, the display format enum may change Declaration int DisplayFormat { get; set; } Property Value Int32 EditFormat Determines whether to display the choice field as radio buttons or as a drop-down list Declaration ChoiceFormatType EditFormat { get; set; } Property Value ChoiceFormatType EnableLookup Gets or sets whether the lookup should be enabled for computed field Declaration bool EnableLookup { get; set; } Property Value Boolean EnforceUniqueValues Gets or Sets whether the field enforces unique values Declaration bool EnforceUniqueValues { get; set; } Property Value Boolean EntityPropertyName Gets the name of the entity property for the list item entity that uses this field Declaration string EntityPropertyName { get; } Property Value String FieldTypeKind Gets or Sets the field type kind of the field https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/ee540543%28v%3doffice.15%29 Declaration FieldType FieldTypeKind { get; } Property Value FieldType FillInChoice Gets or sets whether choice field can be filled in by user Declaration bool FillInChoice { get; set; } Property Value Boolean Filterable Returns whether the field can be filtered Declaration bool Filterable { get; } Property Value Boolean Formula Specifies the formula that is used for calculation in the field Declaration string Formula { get; set; } Property Value String FriendlyDisplayFormat Gets or sets the friendly format type of a DateTime field Declaration DateTimeFieldFriendlyFormatType FriendlyDisplayFormat { get; set; } Property Value DateTimeFieldFriendlyFormatType FromBaseType Gets a Boolean value that indicates whether the field derives from a base field type. Declaration bool FromBaseType { get; } Property Value Boolean Group Gets or Sets the group of the field Declaration string Group { get; set; } Property Value String Hidden Specifies whether the field is displayed in the list Declaration bool Hidden { get; set; } Property Value Boolean Id Provides the id of the field Declaration Guid Id { get; } Property Value Guid Indexed Gets or Sets whether the field is indexed Declaration bool Indexed { get; set; } Property Value Boolean IndexStatus Describes whether a field is indexed, and whether the data in the index is complete Declaration FieldIndexStatus IndexStatus { get; } Property Value FieldIndexStatus InternalName Specifies the internal name of the field Declaration string InternalName { get; } Property Value String IsAnchorValid Gets a Boolean value that specifies whether the Term object identified by the AnchorId property is valid. Declaration bool IsAnchorValid { get; } Property Value Boolean IsDependentLookup Check whether a lookup field is a dependent lookup field Declaration bool IsDependentLookup { get; } Property Value Boolean IsKeyword Gets or sets a Boolean value that indicates whether the TaxonomyField value points to the Enterprise Keywords TermSet object. Declaration bool IsKeyword { get; set; } Property Value Boolean IsPathRendered Gets or sets a Boolean value that specifies whether the default Label objects of all the parent Term objects of a Term in the TaxonomyField object will be rendered in addition to the default label of that Term. Declaration bool IsPathRendered { get; set; } Property Value Boolean IsRelationship Specifies whether this Lookup field is discoverable from the List being looked up to Declaration bool IsRelationship { get; set; } Property Value Boolean IsTermSetValid Gets a Boolean value that specifies whether the TermSet object identified by the TermSetId property exists and is available for tagging. Declaration bool IsTermSetValid { get; } Property Value Boolean JSLink Gets or sets the name of an external JS file containing any client rendering logic for fields of this type Declaration string JSLink { get; set; } Property Value String LookupField Specifies the name of the Field used as the lookup values Declaration string LookupField { get; set; } Property Value String LookupList Specifies the id (GUID) of the List that contains the Field to use as the lookup values Declaration string LookupList { get; set; } Property Value String LookupWebId Specifies the id of the Site that contains the List which contains the Field used as the lookup values Declaration Guid LookupWebId { get; set; } Property Value Guid Mappings Gets the mappings of a choice field Declaration string Mappings { get; } Property Value String MaximumValue Gets or sets the maximum value of a number field Declaration double MaximumValue { get; set; } Property Value Double MaxLength Specifies the maximum number of characters that can be typed in the field Declaration int MaxLength { get; set; } Property Value Int32 MinimumValue Gets or sets the minimum value of a number field Declaration double MinimumValue { get; set; } Property Value Double NumberOfLines Gets or sets a value that specifies the number of lines of text to display for the field. Declaration int NumberOfLines { get; set; } Property Value Int32 Open Gets or sets a Boolean value that specifies whether the new Term objects can be added to the TermSet while typing in the TaxonomyField editor control. Declaration bool Open { get; set; } Property Value Boolean OutputType Gets or sets the type of a calculated field output Declaration FieldType OutputType { get; set; } Property Value FieldType Presence Gets or sets whether to display the presence indicator of the user Declaration bool Presence { get; set; } Property Value Boolean PrimaryFieldId Specifies the GUID of the primary lookup field if this is a dependent lookup field. Otherwise, it is empty string Declaration string PrimaryFieldId { get; set; } Property Value String ReadOnlyField Specifies whether values in the field can be modified Declaration bool ReadOnlyField { get; set; } Property Value Boolean RelationshipDeleteBehavior Specifies the Delete Behavior of the Lookup Field Declaration RelationshipDeleteBehaviorType RelationshipDeleteBehavior { get; set; } Property Value RelationshipDeleteBehaviorType Required Gets or Sets whether the field is required Declaration bool Required { get; set; } Property Value Boolean RestrictedMode Gets or sets a value that specifies whether the field supports a subset of rich formatting. Declaration bool RestrictedMode { get; set; } Property Value Boolean RichText Gets or sets a value that specifies whether the field supports rich formatting. Declaration bool RichText { get; set; } Property Value Boolean SchemaXml Specifies the schema that defines the field Declaration string SchemaXml { get; set; } Property Value String Scope Specifies the ServerRelativeUrl of the of the web site folder in which the field belongs to Declaration string Scope { get; } Property Value String Sealed Specifies whether the field can be changed or deleted Declaration bool Sealed { get; set; } Property Value Boolean SelectionGroup Gets or sets the Id of the group to which the users to select belong to Declaration int SelectionGroup { get; set; } Property Value Int32 SelectionMode Gets or sets the selection mode of the user field Declaration FieldUserSelectionMode SelectionMode { get; set; } Property Value FieldUserSelectionMode ShowAsPercentage Gets or Sets whether the field should be shown as percentage Valid for Number field, Calculated field Declaration bool ShowAsPercentage { get; set; } Property Value Boolean ShowInFiltersPane Represents status to determine whether filters pane will show the field Declaration ShowInFiltersPaneStatus ShowInFiltersPane { get; set; } Property Value ShowInFiltersPaneStatus Sortable Returns whether the field can be sorted Declaration bool Sortable { get; } Property Value Boolean SspId Gets or sets the GUID that identifies the TermStore object, which contains the Enterprise Keywords for the site that the current TaxonomyField belongs to. Declaration Guid SspId { get; set; } Property Value Guid StaticName Specifies the static name of the field Declaration string StaticName { get; } Property Value String TargetTemplate Gets or sets the Web-relative URL of the target page that is used to construct the hyperlink on each Term object when the TaxonomyField object is rendered. Declaration string TargetTemplate { get; set; } Property Value String TermSetId Gets or sets the GUID of the TermSet object that contains the Term objects used by the current TaxonomyField object. Declaration Guid TermSetId { get; set; } Property Value Guid TextField Gets or sets the GUID that identifies the hidden text field in an item. Declaration Guid TextField { get; set; } Property Value Guid Title Gets or Sets the title of the field Declaration string Title { get; set; } Property Value String TypeAsString Specifies the FieldTypeKind of the field as a string value Declaration string TypeAsString { get; } Property Value String TypeDisplayName Specifies the display name for FieldTypeKind of the field Declaration string TypeDisplayName { get; } Property Value String TypeShortDescription Specifies the description of the FieldTypeKind of the field Declaration string TypeShortDescription { get; } Property Value String UnlimitedLengthInDocumentLibrary Gets or sets a value that specifies whether the field supports unlimited length in document libraries. Declaration bool UnlimitedLengthInDocumentLibrary { get; set; } Property Value Boolean UserCreated Gets or sets a Boolean value that specifies whether the TaxonomyField object is linked to a customized TermSet object. Declaration bool UserCreated { get; set; } Property Value Boolean ValidationFormula Specifies the formula referred by the field and gets evaluated when a list item is added or updated in the list Declaration string ValidationFormula { get; set; } Property Value String ValidationMessage Specifies the message to display if validation formula fails for the field when a list item is added or updated in the list Declaration string ValidationMessage { get; set; } Property Value String Methods NewFieldLookupValue(Int32) Creates a new IFieldLookupValue object Declaration IFieldLookupValue NewFieldLookupValue(int lookupId) Parameters Int32 lookupId Id of the lookup value Returns IFieldLookupValue Configured IFieldLookupValue object NewFieldTaxonomyValue(Guid, String, Int32) Creates a new IFieldTaxonomyValue object Declaration IFieldTaxonomyValue NewFieldTaxonomyValue(Guid termId, string label, int wssId = null) Parameters Guid termId Name of the term to set String label Label of the term to set Int32 wssId Optionally provide the wssId value Returns IFieldTaxonomyValue Configured IFieldTaxonomyValue object NewFieldUrlValue(String, String) Creates a new IFieldUrlValue object Declaration IFieldUrlValue NewFieldUrlValue(string url, string description = null) Parameters String url Url value String description Optional description value Returns IFieldUrlValue Configured IFieldUrlValue object NewFieldUserValue(ISharePointPrincipal) Creates a new IFieldUserValue object Declaration IFieldUserValue NewFieldUserValue(ISharePointPrincipal principal) Parameters ISharePointPrincipal principal ISharePointUser or ISharePointGroup Returns IFieldUserValue Configured IFieldUserValue object NewFieldUserValue(Int32) Creates a new IFieldUserValue object Declaration IFieldUserValue NewFieldUserValue(int userId) Parameters Int32 userId Id of the user Returns IFieldUserValue Configured IFieldUserValue object NewFieldValueCollection() Creates a new collection to hold IFieldValue objects Declaration IFieldValueCollection NewFieldValueCollection() Returns IFieldValueCollection NewFieldValueCollection(IEnumerable<KeyValuePair<Guid, String>>) Creates a new collection to hold IFieldTaxonomyValue objects Declaration IFieldValueCollection NewFieldValueCollection(IEnumerable<KeyValuePair<Guid, string>> fieldValues) Parameters IEnumerable < KeyValuePair < Guid , String >> fieldValues Collection of field values to add Returns IFieldValueCollection NewFieldValueCollection(IEnumerable<IFieldValue>) Creates a new collection to hold IFieldValue objects Declaration IFieldValueCollection NewFieldValueCollection(IEnumerable<IFieldValue> fieldValues) Parameters IEnumerable < IFieldValue > fieldValues Collection of field values to add Returns IFieldValueCollection Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IFieldCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFieldCollection.html",
    "title": "Interface IFieldCollection | PnP Core SDK",
    "keywords": "Interface IFieldCollection Public interface to define a collection of Field objects of SharePoint Online Inherited Members IDataModelCollectionLoad<IField>.LoadAsync(Expression<Func<IField, Object>>[]) IDataModelCollectionLoad<IField>.LoadBatchAsync(Batch, Expression<Func<IField, Object>>[]) IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionDeleteByGuidId.DeleteById(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdAsync(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatch(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatchAsync(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatch(Batch, Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatchAsync(Batch, Guid) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFieldCollection : IQueryable<IField>, IAsyncEnumerable<IField>, IDataModelCollectionLoad<IField>, IDataModelCollection<IField>, IEnumerable<IField>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionDeleteByGuidId, ISupportModules<IFieldCollection> Methods AddBoolean(String, FieldBooleanOptions) Adds a new Boolean field to the collection Declaration IField AddBoolean(string title, FieldBooleanOptions options) Parameters String title The title of the field FieldBooleanOptions options The specific options for field creation Returns IField The added field AddBooleanAsync(String, FieldBooleanOptions) Adds a new Boolean field to the collection Declaration Task<IField> AddBooleanAsync(string title, FieldBooleanOptions options) Parameters String title The title of the field FieldBooleanOptions options The specific options for field creation Returns Task < IField > The added field AddBooleanBatch(Batch, String, FieldBooleanOptions) Adds a new Boolean field to the collection Declaration IField AddBooleanBatch(Batch batch, string title, FieldBooleanOptions options) Parameters Batch batch Batch to use String title The title of the field FieldBooleanOptions options The specific options for field creation Returns IField The added field AddBooleanBatch(String, FieldBooleanOptions) Adds a new Boolean field to the collection Declaration IField AddBooleanBatch(string title, FieldBooleanOptions options) Parameters String title The title of the field FieldBooleanOptions options The specific options for field creation Returns IField The added field AddBooleanBatchAsync(Batch, String, FieldBooleanOptions) Adds a new Boolean field to the collection Declaration Task<IField> AddBooleanBatchAsync(Batch batch, string title, FieldBooleanOptions options) Parameters Batch batch Batch to use String title The title of the field FieldBooleanOptions options The specific options for field creation Returns Task < IField > The added field AddBooleanBatchAsync(String, FieldBooleanOptions) Adds a new Boolean field to the collection Declaration Task<IField> AddBooleanBatchAsync(string title, FieldBooleanOptions options) Parameters String title The title of the field FieldBooleanOptions options The specific options for field creation Returns Task < IField > The added field AddCalculated(String, FieldCalculatedOptions) Adds a new Calculated field to the collection Declaration IField AddCalculated(string title, FieldCalculatedOptions options) Parameters String title The title of the field FieldCalculatedOptions options The specific options for field creation Returns IField The added field AddCalculatedAsync(String, FieldCalculatedOptions) Adds a new Calculated field to the collection Declaration Task<IField> AddCalculatedAsync(string title, FieldCalculatedOptions options) Parameters String title The title of the field FieldCalculatedOptions options The specific options for field creation Returns Task < IField > The added field AddCalculatedBatch(Batch, String, FieldCalculatedOptions) Adds a new Calculated field to the collection Declaration IField AddCalculatedBatch(Batch batch, string title, FieldCalculatedOptions options) Parameters Batch batch Batch to use String title The title of the field FieldCalculatedOptions options The specific options for field creation Returns IField The added field AddCalculatedBatch(String, FieldCalculatedOptions) Adds a new Calculated field to the collection Declaration IField AddCalculatedBatch(string title, FieldCalculatedOptions options) Parameters String title The title of the field FieldCalculatedOptions options The specific options for field creation Returns IField The added field AddCalculatedBatchAsync(Batch, String, FieldCalculatedOptions) Adds a new Calculated field to the collection Declaration Task<IField> AddCalculatedBatchAsync(Batch batch, string title, FieldCalculatedOptions options) Parameters Batch batch Batch to use String title The title of the field FieldCalculatedOptions options The specific options for field creation Returns Task < IField > The added field AddCalculatedBatchAsync(String, FieldCalculatedOptions) Adds a new Calculated field to the collection Declaration Task<IField> AddCalculatedBatchAsync(string title, FieldCalculatedOptions options) Parameters String title The title of the field FieldCalculatedOptions options The specific options for field creation Returns Task < IField > The added field AddChoice(String, FieldChoiceOptions) Adds a new Choice field to the collection Declaration IField AddChoice(string title, FieldChoiceOptions options) Parameters String title The title of the field FieldChoiceOptions options The specific options for field creation Returns IField The added field AddChoiceAsync(String, FieldChoiceOptions) Adds a new Choice field to the collection Declaration Task<IField> AddChoiceAsync(string title, FieldChoiceOptions options) Parameters String title The title of the field FieldChoiceOptions options The specific options for field creation Returns Task < IField > The added field AddChoiceBatch(Batch, String, FieldChoiceOptions) Adds a new Choice field to the collection Declaration IField AddChoiceBatch(Batch batch, string title, FieldChoiceOptions options) Parameters Batch batch Batch to use String title The title of the field FieldChoiceOptions options The specific options for field creation Returns IField The added field AddChoiceBatch(String, FieldChoiceOptions) Adds a new Choice field to the collection Declaration IField AddChoiceBatch(string title, FieldChoiceOptions options) Parameters String title The title of the field FieldChoiceOptions options The specific options for field creation Returns IField The added field AddChoiceBatchAsync(Batch, String, FieldChoiceOptions) Adds a new Choice field to the collection Declaration Task<IField> AddChoiceBatchAsync(Batch batch, string title, FieldChoiceOptions options) Parameters Batch batch Batch to use String title The title of the field FieldChoiceOptions options The specific options for field creation Returns Task < IField > The added field AddChoiceBatchAsync(String, FieldChoiceOptions) Adds a new Choice field to the collection Declaration Task<IField> AddChoiceBatchAsync(string title, FieldChoiceOptions options) Parameters String title The title of the field FieldChoiceOptions options The specific options for field creation Returns Task < IField > The added field AddChoiceMulti(String, FieldChoiceMultiOptions) Adds a new MultiChoice field to the collection Declaration IField AddChoiceMulti(string title, FieldChoiceMultiOptions options) Parameters String title The title of the field FieldChoiceMultiOptions options The specific options for field creation Returns IField The added field AddChoiceMultiAsync(String, FieldChoiceMultiOptions) Adds a new MultiChoice field to the collection Declaration Task<IField> AddChoiceMultiAsync(string title, FieldChoiceMultiOptions options) Parameters String title The title of the field FieldChoiceMultiOptions options The specific options for field creation Returns Task < IField > The added field AddChoiceMultiBatch(Batch, String, FieldChoiceMultiOptions) Adds a new MultiChoice field to the collection Declaration IField AddChoiceMultiBatch(Batch batch, string title, FieldChoiceMultiOptions options) Parameters Batch batch Batch to use String title The title of the field FieldChoiceMultiOptions options The specific options for field creation Returns IField The added field AddChoiceMultiBatch(String, FieldChoiceMultiOptions) Adds a new MultiChoice field to the collection Declaration IField AddChoiceMultiBatch(string title, FieldChoiceMultiOptions options) Parameters String title The title of the field FieldChoiceMultiOptions options The specific options for field creation Returns IField The added field AddChoiceMultiBatchAsync(Batch, String, FieldChoiceMultiOptions) Adds a new MultiChoice field to the collection Declaration Task<IField> AddChoiceMultiBatchAsync(Batch batch, string title, FieldChoiceMultiOptions options) Parameters Batch batch Batch to use String title The title of the field FieldChoiceMultiOptions options The specific options for field creation Returns Task < IField > The added field AddChoiceMultiBatchAsync(String, FieldChoiceMultiOptions) Adds a new MultiChoice field to the collection Declaration Task<IField> AddChoiceMultiBatchAsync(string title, FieldChoiceMultiOptions options) Parameters String title The title of the field FieldChoiceMultiOptions options The specific options for field creation Returns Task < IField > The added field AddCurrency(String, FieldCurrencyOptions) Adds a new Currency field to the collection Declaration IField AddCurrency(string title, FieldCurrencyOptions options) Parameters String title The title of the field FieldCurrencyOptions options The specific options for field creation Returns IField The added field AddCurrencyAsync(String, FieldCurrencyOptions) Adds a new Currency field to the collection Declaration Task<IField> AddCurrencyAsync(string title, FieldCurrencyOptions options) Parameters String title The title of the field FieldCurrencyOptions options The specific options for field creation Returns Task < IField > The added field AddCurrencyBatch(Batch, String, FieldCurrencyOptions) Adds a new Currency field to the collection Declaration IField AddCurrencyBatch(Batch batch, string title, FieldCurrencyOptions options) Parameters Batch batch Batch to use String title The title of the field FieldCurrencyOptions options The specific options for field creation Returns IField The added field AddCurrencyBatch(String, FieldCurrencyOptions) Adds a new Currency field to the collection Declaration IField AddCurrencyBatch(string title, FieldCurrencyOptions options) Parameters String title The title of the field FieldCurrencyOptions options The specific options for field creation Returns IField The added field AddCurrencyBatchAsync(Batch, String, FieldCurrencyOptions) Adds a new Currency field to the collection Declaration Task<IField> AddCurrencyBatchAsync(Batch batch, string title, FieldCurrencyOptions options) Parameters Batch batch Batch to use String title The title of the field FieldCurrencyOptions options The specific options for field creation Returns Task < IField > The added field AddCurrencyBatchAsync(String, FieldCurrencyOptions) Adds a new Currency field to the collection Declaration Task<IField> AddCurrencyBatchAsync(string title, FieldCurrencyOptions options) Parameters String title The title of the field FieldCurrencyOptions options The specific options for field creation Returns Task < IField > The added field AddDateTime(String, FieldDateTimeOptions) Adds a new DateTime field to the collection Declaration IField AddDateTime(string title, FieldDateTimeOptions options) Parameters String title The title of the field FieldDateTimeOptions options The specific options for field creation Returns IField The added field AddDateTimeAsync(String, FieldDateTimeOptions) Adds a new DateTime field to the collection Declaration Task<IField> AddDateTimeAsync(string title, FieldDateTimeOptions options) Parameters String title The title of the field FieldDateTimeOptions options The specific options for field creation Returns Task < IField > The added field AddDateTimeBatch(Batch, String, FieldDateTimeOptions) Adds a new DateTime field to the collection Declaration IField AddDateTimeBatch(Batch batch, string title, FieldDateTimeOptions options) Parameters Batch batch Batch to use String title The title of the field FieldDateTimeOptions options The specific options for field creation Returns IField The added field AddDateTimeBatch(String, FieldDateTimeOptions) Adds a new DateTime field to the collection Declaration IField AddDateTimeBatch(string title, FieldDateTimeOptions options) Parameters String title The title of the field FieldDateTimeOptions options The specific options for field creation Returns IField The added field AddDateTimeBatchAsync(Batch, String, FieldDateTimeOptions) Adds a new DateTime field to the collection Declaration Task<IField> AddDateTimeBatchAsync(Batch batch, string title, FieldDateTimeOptions options) Parameters Batch batch Batch to use String title The title of the field FieldDateTimeOptions options The specific options for field creation Returns Task < IField > The added field AddDateTimeBatchAsync(String, FieldDateTimeOptions) Adds a new DateTime field to the collection Declaration Task<IField> AddDateTimeBatchAsync(string title, FieldDateTimeOptions options) Parameters String title The title of the field FieldDateTimeOptions options The specific options for field creation Returns Task < IField > The added field AddFieldAsXml(String, Boolean, AddFieldOptionsFlags) Adds a new field from its XML schema Declaration IField AddFieldAsXml(string schemaXml, bool addToDefaultView = false, AddFieldOptionsFlags options = default(AddFieldOptionsFlags)) Parameters String schemaXml A Collaborative Application Markup Language (CAML) string that contains the schema. It must not be a null reference(Nothing in Visual Basic). It must not be empty.It must be a valid Collaborative Application Markup Language(CAML) string according to the schema specified in [MS-WSSFO2], section 2.2.9.3.3.1. Boolean addToDefaultView Specifies to add the field to the default list view. true if the field is added to the default list view; otherwise, false . AddFieldOptionsFlags options An AddFieldOptionsFlags value that specifies the field options. Returns IField The added field AddFieldAsXmlAsync(String, Boolean, AddFieldOptionsFlags) Adds a new field from its XML schema Declaration Task<IField> AddFieldAsXmlAsync(string schemaXml, bool addToDefaultView = false, AddFieldOptionsFlags options = default(AddFieldOptionsFlags)) Parameters String schemaXml A Collaborative Application Markup Language (CAML) string that contains the schema. It must not be a null reference(Nothing in Visual Basic). It must not be empty.It must be a valid Collaborative Application Markup Language(CAML) string according to the schema specified in [MS-WSSFO2], section 2.2.9.3.3.1. Boolean addToDefaultView Specifies to add the field to the default list view. true if the field is added to the default list view; otherwise, false . AddFieldOptionsFlags options An AddFieldOptionsFlags value that specifies the field options. Returns Task < IField > The added field AddFieldAsXmlBatch(Batch, String, Boolean, AddFieldOptionsFlags) Adds a new field from its XML schema Declaration IField AddFieldAsXmlBatch(Batch batch, string schemaXml, bool addToDefaultView = false, AddFieldOptionsFlags options = default(AddFieldOptionsFlags)) Parameters Batch batch Batch to use String schemaXml A Collaborative Application Markup Language (CAML) string that contains the schema. It must not be a null reference(Nothing in Visual Basic). It must not be empty.It must be a valid Collaborative Application Markup Language(CAML) string according to the schema specified in [MS-WSSFO2], section 2.2.9.3.3.1. Boolean addToDefaultView Specifies to add the field to the default list view. true if the field is added to the default list view; otherwise, false . AddFieldOptionsFlags options An AddFieldOptionsFlags value that specifies the field options. Returns IField The added field AddFieldAsXmlBatch(String, Boolean, AddFieldOptionsFlags) Adds a new field from its XML schema Declaration IField AddFieldAsXmlBatch(string schemaXml, bool addToDefaultView = false, AddFieldOptionsFlags options = default(AddFieldOptionsFlags)) Parameters String schemaXml A Collaborative Application Markup Language (CAML) string that contains the schema. It must not be a null reference(Nothing in Visual Basic). It must not be empty.It must be a valid Collaborative Application Markup Language(CAML) string according to the schema specified in [MS-WSSFO2], section 2.2.9.3.3.1. Boolean addToDefaultView Specifies to add the field to the default list view. true if the field is added to the default list view; otherwise, false . AddFieldOptionsFlags options An AddFieldOptionsFlags value that specifies the field options. Returns IField The added field AddFieldAsXmlBatchAsync(Batch, String, Boolean, AddFieldOptionsFlags) Adds a new field from its XML schema Declaration Task<IField> AddFieldAsXmlBatchAsync(Batch batch, string schemaXml, bool addToDefaultView = false, AddFieldOptionsFlags options = default(AddFieldOptionsFlags)) Parameters Batch batch Batch to use String schemaXml A Collaborative Application Markup Language (CAML) string that contains the schema. It must not be a null reference(Nothing in Visual Basic). It must not be empty.It must be a valid Collaborative Application Markup Language(CAML) string according to the schema specified in [MS-WSSFO2], section 2.2.9.3.3.1. Boolean addToDefaultView Specifies to add the field to the default list view. true if the field is added to the default list view; otherwise, false . AddFieldOptionsFlags options An AddFieldOptionsFlags value that specifies the field options. Returns Task < IField > The added field AddFieldAsXmlBatchAsync(String, Boolean, AddFieldOptionsFlags) Adds a new field from its XML schema Declaration Task<IField> AddFieldAsXmlBatchAsync(string schemaXml, bool addToDefaultView = false, AddFieldOptionsFlags options = default(AddFieldOptionsFlags)) Parameters String schemaXml A Collaborative Application Markup Language (CAML) string that contains the schema. It must not be a null reference(Nothing in Visual Basic). It must not be empty.It must be a valid Collaborative Application Markup Language(CAML) string according to the schema specified in [MS-WSSFO2], section 2.2.9.3.3.1. Boolean addToDefaultView Specifies to add the field to the default list view. true if the field is added to the default list view; otherwise, false . AddFieldOptionsFlags options An AddFieldOptionsFlags value that specifies the field options. Returns Task < IField > The added field AddLookup(String, FieldLookupOptions) Adds a new Lookup field to the collection Declaration IField AddLookup(string title, FieldLookupOptions options) Parameters String title The title of the field FieldLookupOptions options The specific options for field creation Returns IField The added field AddLookupAsync(String, FieldLookupOptions) Adds a new Lookup field to the collection Declaration Task<IField> AddLookupAsync(string title, FieldLookupOptions options) Parameters String title The title of the field FieldLookupOptions options The specific options for field creation Returns Task < IField > The added field AddLookupBatch(Batch, String, FieldLookupOptions) Adds a new Lookup field to the collection Declaration IField AddLookupBatch(Batch batch, string title, FieldLookupOptions options) Parameters Batch batch Batch to use String title The title of the field FieldLookupOptions options The specific options for field creation Returns IField The added field AddLookupBatch(String, FieldLookupOptions) Adds a new Lookup field to the collection Declaration IField AddLookupBatch(string title, FieldLookupOptions options) Parameters String title The title of the field FieldLookupOptions options The specific options for field creation Returns IField The added field AddLookupBatchAsync(Batch, String, FieldLookupOptions) Adds a new Lookup field to the collection Declaration Task<IField> AddLookupBatchAsync(Batch batch, string title, FieldLookupOptions options) Parameters Batch batch Batch to use String title The title of the field FieldLookupOptions options The specific options for field creation Returns Task < IField > The added field AddLookupBatchAsync(String, FieldLookupOptions) Adds a new Lookup field to the collection Declaration Task<IField> AddLookupBatchAsync(string title, FieldLookupOptions options) Parameters String title The title of the field FieldLookupOptions options The specific options for field creation Returns Task < IField > The added field AddLookupMulti(String, FieldLookupOptions) Adds a new Lookup Multi field to the collection Declaration IField AddLookupMulti(string title, FieldLookupOptions options) Parameters String title The title of the field FieldLookupOptions options The specific options for field creation Returns IField The added field AddLookupMultiAsync(String, FieldLookupOptions) Adds a new Lookup Multi field to the collection Declaration Task<IField> AddLookupMultiAsync(string title, FieldLookupOptions options) Parameters String title The title of the field FieldLookupOptions options The specific options for field creation Returns Task < IField > The added field AddLookupMultiBatch(Batch, String, FieldLookupOptions) Adds a new Lookup Multi field to the collection Declaration IField AddLookupMultiBatch(Batch batch, string title, FieldLookupOptions options) Parameters Batch batch Batch to use String title The title of the field FieldLookupOptions options The specific options for field creation Returns IField The added field AddLookupMultiBatch(String, FieldLookupOptions) Adds a new Lookup Multi field to the collection Declaration IField AddLookupMultiBatch(string title, FieldLookupOptions options) Parameters String title The title of the field FieldLookupOptions options The specific options for field creation Returns IField The added field AddLookupMultiBatchAsync(Batch, String, FieldLookupOptions) Adds a new Lookup Multi field to the collection Declaration Task<IField> AddLookupMultiBatchAsync(Batch batch, string title, FieldLookupOptions options) Parameters Batch batch Batch to use String title The title of the field FieldLookupOptions options The specific options for field creation Returns Task < IField > The added field AddLookupMultiBatchAsync(String, FieldLookupOptions) Adds a new Lookup Multi field to the collection Declaration Task<IField> AddLookupMultiBatchAsync(string title, FieldLookupOptions options) Parameters String title The title of the field FieldLookupOptions options The specific options for field creation Returns Task < IField > The added field AddMultilineText(String, FieldMultilineTextOptions) Adds a new multiline Text field to the collection Declaration IField AddMultilineText(string title, FieldMultilineTextOptions options) Parameters String title The title of the field FieldMultilineTextOptions options The specific options for field creation Returns IField The added field AddMultilineTextAsync(String, FieldMultilineTextOptions) Adds a new multiline Text field to the collection Declaration Task<IField> AddMultilineTextAsync(string title, FieldMultilineTextOptions options) Parameters String title The title of the field FieldMultilineTextOptions options The specific options for field creation Returns Task < IField > The added field AddMultilineTextBatch(Batch, String, FieldMultilineTextOptions) Adds a new multiline Text field to the collection Declaration IField AddMultilineTextBatch(Batch batch, string title, FieldMultilineTextOptions options) Parameters Batch batch Batch to use String title The title of the field FieldMultilineTextOptions options The specific options for field creation Returns IField The added field AddMultilineTextBatch(String, FieldMultilineTextOptions) Adds a new multiline Text field to the collection Declaration IField AddMultilineTextBatch(string title, FieldMultilineTextOptions options) Parameters String title The title of the field FieldMultilineTextOptions options The specific options for field creation Returns IField The added field AddMultilineTextBatchAsync(Batch, String, FieldMultilineTextOptions) Adds a new multiline Text field to the collection Declaration Task<IField> AddMultilineTextBatchAsync(Batch batch, string title, FieldMultilineTextOptions options) Parameters Batch batch Batch to use String title The title of the field FieldMultilineTextOptions options The specific options for field creation Returns Task < IField > The added field AddMultilineTextBatchAsync(String, FieldMultilineTextOptions) Adds a new multiline Text field to the collection Declaration Task<IField> AddMultilineTextBatchAsync(string title, FieldMultilineTextOptions options) Parameters String title The title of the field FieldMultilineTextOptions options The specific options for field creation Returns Task < IField > The added field AddNumber(String, FieldNumberOptions) Adds a new Number field to the collection Declaration IField AddNumber(string title, FieldNumberOptions options) Parameters String title The title of the field FieldNumberOptions options The specific options for field creation Returns IField The added field AddNumberAsync(String, FieldNumberOptions) Adds a new Number field to the collection Declaration Task<IField> AddNumberAsync(string title, FieldNumberOptions options) Parameters String title The title of the field FieldNumberOptions options The specific options for field creation Returns Task < IField > The added field AddNumberBatch(Batch, String, FieldNumberOptions) Adds a new Number field to the collection Declaration IField AddNumberBatch(Batch batch, string title, FieldNumberOptions options) Parameters Batch batch Batch to use String title The title of the field FieldNumberOptions options The specific options for field creation Returns IField The added field AddNumberBatch(String, FieldNumberOptions) Adds a new Number field to the collection Declaration IField AddNumberBatch(string title, FieldNumberOptions options) Parameters String title The title of the field FieldNumberOptions options The specific options for field creation Returns IField The added field AddNumberBatchAsync(Batch, String, FieldNumberOptions) Adds a new Number field to the collection Declaration Task<IField> AddNumberBatchAsync(Batch batch, string title, FieldNumberOptions options) Parameters Batch batch Batch to use String title The title of the field FieldNumberOptions options The specific options for field creation Returns Task < IField > The added field AddNumberBatchAsync(String, FieldNumberOptions) Adds a new Number field to the collection Declaration Task<IField> AddNumberBatchAsync(string title, FieldNumberOptions options) Parameters String title The title of the field FieldNumberOptions options The specific options for field creation Returns Task < IField > The added field AddTaxonomy(String, FieldTaxonomyOptions) Adds a new Taxonomy field to the collection Declaration IField AddTaxonomy(string title, FieldTaxonomyOptions options) Parameters String title The title of the field FieldTaxonomyOptions options The specific options for field creation Returns IField The added field AddTaxonomyAsync(String, FieldTaxonomyOptions) Adds a new Taxonomy field to the collection Declaration Task<IField> AddTaxonomyAsync(string title, FieldTaxonomyOptions options) Parameters String title The title of the field FieldTaxonomyOptions options The specific options for field creation Returns Task < IField > The added field AddTaxonomyMulti(String, FieldTaxonomyOptions) Adds a new Taxonomy Multi field to the collection Declaration IField AddTaxonomyMulti(string title, FieldTaxonomyOptions options) Parameters String title The title of the field FieldTaxonomyOptions options The specific options for field creation Returns IField The added field AddTaxonomyMultiAsync(String, FieldTaxonomyOptions) Adds a new Taxonomy Multi field to the collection Declaration Task<IField> AddTaxonomyMultiAsync(string title, FieldTaxonomyOptions options) Parameters String title The title of the field FieldTaxonomyOptions options The specific options for field creation Returns Task < IField > The added field AddText(String, FieldTextOptions) Adds a new Text field to the collection Declaration IField AddText(string title, FieldTextOptions options = null) Parameters String title The title of the field FieldTextOptions options The specific options for field creation Returns IField The added field AddTextAsync(String, FieldTextOptions) Adds a new Text field to the collection Declaration Task<IField> AddTextAsync(string title, FieldTextOptions options = null) Parameters String title The title of the field FieldTextOptions options The specific options for field creation Returns Task < IField > The added field AddTextBatch(Batch, String, FieldTextOptions) Adds a new Text field to the collection Declaration IField AddTextBatch(Batch batch, string title, FieldTextOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldTextOptions options The specific options for field creation Returns IField The added field AddTextBatch(String, FieldTextOptions) Adds a new Text field to the collection Declaration IField AddTextBatch(string title, FieldTextOptions options = null) Parameters String title The title of the field FieldTextOptions options The specific options for field creation Returns IField The added field AddTextBatchAsync(Batch, String, FieldTextOptions) Adds a new Text field to the collection Declaration Task<IField> AddTextBatchAsync(Batch batch, string title, FieldTextOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldTextOptions options The specific options for field creation Returns Task < IField > The added field AddTextBatchAsync(String, FieldTextOptions) Adds a new Text field to the collection Declaration Task<IField> AddTextBatchAsync(string title, FieldTextOptions options = null) Parameters String title The title of the field FieldTextOptions options The specific options for field creation Returns Task < IField > The added field AddUrl(String, FieldUrlOptions) Adds a new URL field to the collection Declaration IField AddUrl(string title, FieldUrlOptions options) Parameters String title The title of the field FieldUrlOptions options The specific options for field creation Returns IField The added field AddUrlAsync(String, FieldUrlOptions) Adds a new URL field to the collection Declaration Task<IField> AddUrlAsync(string title, FieldUrlOptions options) Parameters String title The title of the field FieldUrlOptions options The specific options for field creation Returns Task < IField > The added field AddUrlBatch(Batch, String, FieldUrlOptions) Adds a new URL field to the collection Declaration IField AddUrlBatch(Batch batch, string title, FieldUrlOptions options) Parameters Batch batch Batch to use String title The title of the field FieldUrlOptions options The specific options for field creation Returns IField The added field AddUrlBatch(String, FieldUrlOptions) Adds a new URL field to the collection Declaration IField AddUrlBatch(string title, FieldUrlOptions options) Parameters String title The title of the field FieldUrlOptions options The specific options for field creation Returns IField The added field AddUrlBatchAsync(Batch, String, FieldUrlOptions) Adds a new URL field to the collection Declaration Task<IField> AddUrlBatchAsync(Batch batch, string title, FieldUrlOptions options) Parameters Batch batch Batch to use String title The title of the field FieldUrlOptions options The specific options for field creation Returns Task < IField > The added field AddUrlBatchAsync(String, FieldUrlOptions) Adds a new URL field to the collection Declaration Task<IField> AddUrlBatchAsync(string title, FieldUrlOptions options) Parameters String title The title of the field FieldUrlOptions options The specific options for field creation Returns Task < IField > The added field AddUser(String, FieldUserOptions) Adds a new User field to the collection Declaration IField AddUser(string title, FieldUserOptions options) Parameters String title The title of the field FieldUserOptions options The specific options for field creation Returns IField The added field AddUserAsync(String, FieldUserOptions) Adds a new User field to the collection Declaration Task<IField> AddUserAsync(string title, FieldUserOptions options) Parameters String title The title of the field FieldUserOptions options The specific options for field creation Returns Task < IField > The added field AddUserBatch(Batch, String, FieldUserOptions) Adds a new User field to the collection Declaration IField AddUserBatch(Batch batch, string title, FieldUserOptions options) Parameters Batch batch Batch to use String title The title of the field FieldUserOptions options The specific options for field creation Returns IField The added field AddUserBatch(String, FieldUserOptions) Adds a new User field to the collection Declaration IField AddUserBatch(string title, FieldUserOptions options) Parameters String title The title of the field FieldUserOptions options The specific options for field creation Returns IField The added field AddUserBatchAsync(Batch, String, FieldUserOptions) Adds a new User field to the collection Declaration Task<IField> AddUserBatchAsync(Batch batch, string title, FieldUserOptions options) Parameters Batch batch Batch to use String title The title of the field FieldUserOptions options The specific options for field creation Returns Task < IField > The added field AddUserBatchAsync(String, FieldUserOptions) Adds a new User field to the collection Declaration Task<IField> AddUserBatchAsync(string title, FieldUserOptions options) Parameters String title The title of the field FieldUserOptions options The specific options for field creation Returns Task < IField > The added field AddUserMulti(String, FieldUserOptions) Adds a new Multi User field to the collection Declaration IField AddUserMulti(string title, FieldUserOptions options) Parameters String title The title of the field FieldUserOptions options The specific options for field creation Returns IField The added field AddUserMultiAsync(String, FieldUserOptions) Adds a new Multi User field to the collection Declaration Task<IField> AddUserMultiAsync(string title, FieldUserOptions options) Parameters String title The title of the field FieldUserOptions options The specific options for field creation Returns Task < IField > The added field AddUserMultiBatch(Batch, String, FieldUserOptions) Adds a new User Multi field to the collection Declaration IField AddUserMultiBatch(Batch batch, string title, FieldUserOptions options) Parameters Batch batch Batch to use String title The title of the field FieldUserOptions options The specific options for field creation Returns IField The added field AddUserMultiBatch(String, FieldUserOptions) Adds a new User Multi field to the collection Declaration IField AddUserMultiBatch(string title, FieldUserOptions options) Parameters String title The title of the field FieldUserOptions options The specific options for field creation Returns IField The added field AddUserMultiBatchAsync(Batch, String, FieldUserOptions) Adds a new User Multi field to the collection Declaration Task<IField> AddUserMultiBatchAsync(Batch batch, string title, FieldUserOptions options) Parameters Batch batch Batch to use String title The title of the field FieldUserOptions options The specific options for field creation Returns Task < IField > The added field AddUserMultiBatchAsync(String, FieldUserOptions) Adds a new User Multi field to the collection Declaration Task<IField> AddUserMultiBatchAsync(string title, FieldUserOptions options) Parameters String title The title of the field FieldUserOptions options The specific options for field creation Returns Task < IField > The added field Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.IFieldLink.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFieldLink.html",
    "title": "Interface IFieldLink | PnP Core SDK",
    "keywords": "Interface IFieldLink Public interface to define a FieldLink object Inherited Members IDataModel<IFieldLink>.Requested IDataModel<IFieldLink>.HasValue(String) IDataModel<IFieldLink>.HasChanged(String) IDataModel<IFieldLink>.IsPropertyAvailable(Expression<Func<IFieldLink, Object>>) IDataModel<IFieldLink>.ArePropertiesAvailable(Expression<Func<IFieldLink, Object>>[]) IDataModel<IFieldLink>.EnsureProperties(Expression<Func<IFieldLink, Object>>[]) IDataModel<IFieldLink>.EnsurePropertiesAsync(Expression<Func<IFieldLink, Object>>[]) IDataModel<IFieldLink>.ExecuteRequestAsync(ApiRequest) IDataModel<IFieldLink>.ExecuteRequest(ApiRequest) IDataModel<IFieldLink>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IFieldLink>.ExecuteRequestBatch(ApiRequest) IDataModel<IFieldLink>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IFieldLink>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IFieldLink>.GetBatchAsync(Batch, Expression<Func<IFieldLink, Object>>[]) IDataModelGet<IFieldLink>.GetAsync(Expression<Func<IFieldLink, Object>>[]) IDataModelLoad<IFieldLink>.LoadBatchAsync(Batch, Expression<Func<IFieldLink, Object>>[]) IDataModelLoad<IFieldLink>.LoadAsync(Expression<Func<IFieldLink, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFieldLink : IDataModel<IFieldLink>, IDataModelParent, IDataModelWithContext, ISupportModules<IFieldLink>, IDataModelGet<IFieldLink>, IDataModelLoad<IFieldLink>, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object DisplayName Gets or sets the display name of the field in the field link. Declaration string DisplayName { get; set; } Property Value String FieldInternalName Gets or sets the field internal name specified in the field link. Declaration string FieldInternalName { get; } Property Value String Hidden Gets or sets a Boolean value that specifies whether the field is displayed in forms that can be edited. Declaration bool Hidden { get; set; } Property Value Boolean Id Gets a value that specifies the GUID of the FieldLink. Declaration Guid Id { get; } Property Value Guid Name Gets a value that specifies the name of the FieldLink. Declaration string Name { get; } Property Value String ReadOnly Gets or sets whether the field is read-only. Declaration bool ReadOnly { get; set; } Property Value Boolean Required Gets or sets whether the field is required. Declaration bool Required { get; set; } Property Value Boolean ShowInDisplayForm Gets or sets whether the field should be shown in display form. Declaration bool ShowInDisplayForm { get; set; } Property Value Boolean Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IFieldLinkCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFieldLinkCollection.html",
    "title": "Interface IFieldLinkCollection | PnP Core SDK",
    "keywords": "Interface IFieldLinkCollection Public interface to define a collection of FieldLink objects of SharePoint Online Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<IFieldLink>.LoadAsync(Expression<Func<IFieldLink, Object>>[]) IDataModelCollectionLoad<IFieldLink>.LoadBatchAsync(Batch, Expression<Func<IFieldLink, Object>>[]) IDataModelCollectionDeleteByGuidId.DeleteById(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdAsync(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatch(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatchAsync(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatch(Batch, Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatchAsync(Batch, Guid) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFieldLinkCollection : IQueryable<IFieldLink>, IAsyncEnumerable<IFieldLink>, IDataModelCollection<IFieldLink>, IEnumerable<IFieldLink>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<IFieldLink>, IDataModelCollectionDeleteByGuidId, ISupportModules<IFieldLinkCollection> Methods Add(IField, String, Boolean, Boolean, Boolean, Boolean) Adds a field link for the given field Declaration IFieldLink Add(IField field, string displayName = null, bool hidden = false, bool required = false, bool readOnly = false, bool showInDisplayForm = true) Parameters IField field Field to add as field link String displayName Display name of the field Boolean hidden Field is hidden Boolean required Field is required Boolean readOnly Field is read only Boolean showInDisplayForm Show the field in the display form Returns IFieldLink added FieldLink AddAsync(IField, String, Boolean, Boolean, Boolean, Boolean) Adds a field link for the given field Declaration Task<IFieldLink> AddAsync(IField field, string displayName = null, bool hidden = false, bool required = false, bool readOnly = false, bool showInDisplayForm = true) Parameters IField field Field to add as field link String displayName Display name of the field Boolean hidden Field is hidden Boolean required Field is required Boolean readOnly Field is read only Boolean showInDisplayForm Show the field in the display form Returns Task < IFieldLink > added FieldLink AddBatch(IField) Adds a field link via a batch Declaration void AddBatch(IField field) Parameters IField field Field to add as field link AddBatch(Batch, IField) Adds a field link via a batch Declaration void AddBatch(Batch batch, IField field) Parameters Batch batch Batcht to add this request to IField field Field to add as field link AddBatchAsync(IField) Adds a field link via a batch Declaration Task AddBatchAsync(IField field) Parameters IField field Field to add as field link Returns Task AddBatchAsync(Batch, IField) Adds a field link via a batch Declaration Task AddBatchAsync(Batch batch, IField field) Parameters Batch batch Batcht to add this request to IField field Field to add as field link Returns Task Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.IFieldLocationValue.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFieldLocationValue.html",
    "title": "Interface IFieldLocationValue | PnP Core SDK",
    "keywords": "Interface IFieldLocationValue Represents a location field value Inherited Members IFieldValue.Field Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFieldLocationValue : IFieldValue Properties City City Declaration string City { get; } Property Value String CountryOrRegion Country of region Declaration string CountryOrRegion { get; } Property Value String DisplayName Name identifiying this location Declaration string DisplayName { get; } Property Value String Latitude Latitude of the location Declaration double Latitude { get; } Property Value Double LocationUri Uri identifying this location Declaration string LocationUri { get; } Property Value String Longitude Longitude of the location Declaration double Longitude { get; } Property Value Double PostalCode Postal/zip code Declaration string PostalCode { get; } Property Value String State State Declaration string State { get; } Property Value String Street Streetname Declaration string Street { get; } Property Value String"
  },
  "api/PnP.Core.Model.SharePoint.IFieldLookupValue.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFieldLookupValue.html",
    "title": "Interface IFieldLookupValue | PnP Core SDK",
    "keywords": "Interface IFieldLookupValue Represents a lookup field value Inherited Members IFieldValue.Field Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFieldLookupValue : IFieldValue Properties IsSecretFieldValue Is the value a secret value? Declaration bool IsSecretFieldValue { get; } Property Value Boolean LookupId Id of the looked-up item Declaration int LookupId { get; set; } Property Value Int32 LookupValue Value of the key property of the looked-up item Declaration string LookupValue { get; } Property Value String"
  },
  "api/PnP.Core.Model.SharePoint.IFieldStringValues.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFieldStringValues.html",
    "title": "Interface IFieldStringValues | PnP Core SDK",
    "keywords": "Interface IFieldStringValues Public interface to define a FieldStringValues object Inherited Members IDataModel<IFieldStringValues>.Requested IDataModel<IFieldStringValues>.HasValue(String) IDataModel<IFieldStringValues>.HasChanged(String) IDataModel<IFieldStringValues>.IsPropertyAvailable(Expression<Func<IFieldStringValues, Object>>) IDataModel<IFieldStringValues>.ArePropertiesAvailable(Expression<Func<IFieldStringValues, Object>>[]) IDataModel<IFieldStringValues>.EnsureProperties(Expression<Func<IFieldStringValues, Object>>[]) IDataModel<IFieldStringValues>.EnsurePropertiesAsync(Expression<Func<IFieldStringValues, Object>>[]) IDataModel<IFieldStringValues>.ExecuteRequestAsync(ApiRequest) IDataModel<IFieldStringValues>.ExecuteRequest(ApiRequest) IDataModel<IFieldStringValues>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IFieldStringValues>.ExecuteRequestBatch(ApiRequest) IDataModel<IFieldStringValues>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IFieldStringValues>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IExpandoDataModel.Item[String] IExpandoDataModel.Values IExpandoDataModel.Count IExpandoDataModel.AsDynamic() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFieldStringValues : IDataModel<IFieldStringValues>, IDataModelParent, IDataModelWithContext, ISupportModules<IFieldStringValues>, IExpandoDataModel Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IFieldTaxonomyValue.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFieldTaxonomyValue.html",
    "title": "Interface IFieldTaxonomyValue | PnP Core SDK",
    "keywords": "Interface IFieldTaxonomyValue Represents a taxonomy field value Inherited Members IFieldValue.Field Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFieldTaxonomyValue : IFieldValue Properties Label Taxonomy label Declaration string Label { get; set; } Property Value String TermId Taxonomy term id Declaration Guid TermId { get; set; } Property Value Guid"
  },
  "api/PnP.Core.Model.SharePoint.IFieldUrlValue.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFieldUrlValue.html",
    "title": "Interface IFieldUrlValue | PnP Core SDK",
    "keywords": "Interface IFieldUrlValue Represents the value in a field of type Url Inherited Members IFieldValue.Field Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFieldUrlValue : IFieldValue Properties Description Description of the Url Declaration string Description { get; set; } Property Value String Url Url Declaration string Url { get; set; } Property Value String"
  },
  "api/PnP.Core.Model.SharePoint.IFieldUserValue.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFieldUserValue.html",
    "title": "Interface IFieldUserValue | PnP Core SDK",
    "keywords": "Interface IFieldUserValue Represents a user retrieved via a list item field Inherited Members IFieldLookupValue.LookupId IFieldLookupValue.LookupValue IFieldLookupValue.IsSecretFieldValue IFieldValue.Field Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFieldUserValue : IFieldLookupValue, IFieldValue Properties Email Email of the user Declaration string Email { get; } Property Value String Picture Profile picture url for the user Declaration string Picture { get; } Property Value String Principal Principal describing the user or group Declaration ISharePointPrincipal Principal { get; set; } Property Value ISharePointPrincipal Sip SIP address of the user Declaration string Sip { get; } Property Value String Title Title/name of the user Declaration string Title { get; } Property Value String"
  },
  "api/PnP.Core.Model.SharePoint.IFieldValue.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFieldValue.html",
    "title": "Interface IFieldValue | PnP Core SDK",
    "keywords": "Interface IFieldValue Represents a field value object Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFieldValue Properties Field Field linked to this field value Declaration IField Field { get; } Property Value IField"
  },
  "api/PnP.Core.Model.SharePoint.IFieldValueCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFieldValueCollection.html",
    "title": "Interface IFieldValueCollection | PnP Core SDK",
    "keywords": "Interface IFieldValueCollection Collection of 'special' field values Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFieldValueCollection Properties Values The 'special' field values Declaration ObservableCollection<IFieldValue> Values { get; } Property Value ObservableCollection < IFieldValue > Methods RemoveLookupValue(Int32) Removes IFieldLookupValue from the collection if found Declaration void RemoveLookupValue(int lookupId) Parameters Int32 lookupId Id of the IFieldLookupValue to remove RemoveTaxonomyFieldValue(Guid) Removes IFieldTaxonomyValue from the collection if found Declaration void RemoveTaxonomyFieldValue(Guid termId) Parameters Guid termId Id of the IFieldTaxonomyValue to remove"
  },
  "api/PnP.Core.Model.SharePoint.IFile.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFile.html",
    "title": "Interface IFile | PnP Core SDK",
    "keywords": "Interface IFile Public interface to define a File object Inherited Members IDataModel<IFile>.Requested IDataModel<IFile>.HasValue(String) IDataModel<IFile>.HasChanged(String) IDataModel<IFile>.IsPropertyAvailable(Expression<Func<IFile, Object>>) IDataModel<IFile>.ArePropertiesAvailable(Expression<Func<IFile, Object>>[]) IDataModel<IFile>.EnsureProperties(Expression<Func<IFile, Object>>[]) IDataModel<IFile>.EnsurePropertiesAsync(Expression<Func<IFile, Object>>[]) IDataModel<IFile>.ExecuteRequestAsync(ApiRequest) IDataModel<IFile>.ExecuteRequest(ApiRequest) IDataModel<IFile>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IFile>.ExecuteRequestBatch(ApiRequest) IDataModel<IFile>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IFile>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IFile>.GetBatchAsync(Batch, Expression<Func<IFile, Object>>[]) IDataModelGet<IFile>.GetAsync(Expression<Func<IFile, Object>>[]) IDataModelLoad<IFile>.LoadBatchAsync(Batch, Expression<Func<IFile, Object>>[]) IDataModelLoad<IFile>.LoadAsync(Expression<Func<IFile, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFile : IDataModel<IFile>, IDataModelParent, IDataModelWithContext, ISupportModules<IFile>, IDataModelGet<IFile>, IDataModelLoad<IFile>, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object Author Gets a value that specifies the user who added the file. Declaration ISharePointUser Author { get; } Property Value ISharePointUser CheckedOutByUser Gets a value that returns the user who has checked out the file. Declaration ISharePointUser CheckedOutByUser { get; } Property Value ISharePointUser CheckInComment Returns the comment that was specified when the document was checked into the document library Declaration string CheckInComment { get; } Property Value String CheckOutType Gets a value that specifies the type of check out associated with the file. Declaration CheckOutType CheckOutType { get; } Property Value CheckOutType ContentTag Returns internal version of content, used to validate document equality for read purposes. Declaration string ContentTag { get; } Property Value String CustomizedPageStatus Gets a value that specifies the customization status of the file. Declaration CustomizedPageStatus CustomizedPageStatus { get; } Property Value CustomizedPageStatus EffectiveInformationRightsManagementSettings Gets the Information Rights Management settings of the file. Declaration IEffectiveInformationRightsManagementSettings EffectiveInformationRightsManagementSettings { get; } Property Value IEffectiveInformationRightsManagementSettings ETag Gets a value that specifies the ETag value. Declaration string ETag { get; } Property Value String HasAlternateContentStreams Indicates whether this file has alternate streams with content. Declaration bool HasAlternateContentStreams { get; } Property Value Boolean InformationRightsManagementSettings Gets the Information Rights Management settings of the file. Declaration IInformationRightsManagementFileSettings InformationRightsManagementSettings { get; } Property Value IInformationRightsManagementFileSettings IrmEnabled Gets or sets whether Irm is enabled on the file. Declaration bool IrmEnabled { get; set; } Property Value Boolean Length Gets the file size of the file. Declaration long Length { get; } Property Value Int64 Level Level of the file (published or draft) Declaration PublishedStatus Level { get; } Property Value PublishedStatus LinkingUri Gets the linking URI of the file. Declaration string LinkingUri { get; } Property Value String LinkingUrl Gets the linking URL of the file. Declaration string LinkingUrl { get; } Property Value String ListId Gets the id of the list containing the file. Declaration Guid ListId { get; } Property Value Guid ListItemAllFields Gets a value that specifies the list item field values for the list item corresponding to the file. Declaration IListItem ListItemAllFields { get; } Property Value IListItem LockedByUser Gets a value that returns the user who has locked the file. Declaration ISharePointUser LockedByUser { get; } Property Value ISharePointUser MajorVersion Gets a value that specifies the major version of the file. Declaration int MajorVersion { get; } Property Value Int32 MinorVersion Gets a value that specifies the minor version of the file. Declaration int MinorVersion { get; } Property Value Int32 ModifiedBy Gets a value that returns the last user who has modified the file. Declaration ISharePointUser ModifiedBy { get; } Property Value ISharePointUser Name Gets the name of the file including the extension. Declaration string Name { get; } Property Value String PageRenderType Gets the list page render type of the file. Declaration ListPageRenderType PageRenderType { get; } Property Value ListPageRenderType Properties Gets the properties of the file. Declaration IPropertyValues Properties { get; } Property Value IPropertyValues ServerRedirectedUrl Gets the URL which opens the document in Office Web Apps. Declaration string ServerRedirectedUrl { get; } Property Value String ServerRelativeUrl Gets the relative URL of the file based on the URL for the server. Declaration string ServerRelativeUrl { get; } Property Value String SiteId Gets the Id of the Site collection in which the file is stored. Declaration Guid SiteId { get; } Property Value Guid TimeCreated Gets a value that specifies when the file was created. Declaration DateTime TimeCreated { get; } Property Value DateTime TimeLastModified Gets a value that specifies when the file was last modified. Declaration DateTime TimeLastModified { get; } Property Value DateTime Title Gets a value that specifies the display name of the file. Declaration string Title { get; } Property Value String UIVersion Gets a value that specifies the implementation-specific version identifier of the file. Declaration int UIVersion { get; } Property Value Int32 UIVersionLabel Gets a value that specifies the implementation-specific version identifier of the file. Declaration string UIVersionLabel { get; } Property Value String UniqueId Gets the unique Id of the file. Declaration Guid UniqueId { get; } Property Value Guid VersionEvents Gets a value that returns a collection of file version event objects that represent the version events of the file. Declaration IFileVersionEventCollection VersionEvents { get; } Property Value IFileVersionEventCollection Versions Gets a value that returns a collection of file version objects that represent the versions of the file. Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IFileVersionCollection Versions { get; } Property Value IFileVersionCollection VroomDriveID Get the Graph Drive ID of the drive to which the file belongs. Declaration string VroomDriveID { get; } Property Value String VroomItemID Get the Graph DriveItem ID of the file. Declaration string VroomItemID { get; } Property Value String WebId Gets the Id of the site in which the file is stored. Declaration Guid WebId { get; } Property Value Guid Methods Approve(String) Approves the file. The approval comment Declaration void Approve(string comment = null) Parameters String comment ApproveAsync(String) Approves the file. The approval comment Declaration Task ApproveAsync(string comment = null) Parameters String comment Returns Task ApproveBatch(Batch, String) Approves the file. The approval comment The batch instance to use. Declaration void ApproveBatch(Batch batch, string comment = null) Parameters Batch batch String comment ApproveBatch(String) Approves the file. The approval comment Declaration void ApproveBatch(string comment = null) Parameters String comment ApproveBatchAsync(Batch, String) Approves the file. The approval comment The batch instance to use. Declaration Task ApproveBatchAsync(Batch batch, string comment = null) Parameters Batch batch String comment Returns Task ApproveBatchAsync(String) Approves the file. The approval comment Declaration Task ApproveBatchAsync(string comment = null) Parameters String comment Returns Task Checkin(String, CheckinType) Checks in the file. The check in comment. The type of check in to use. Declaration void Checkin(string comment = null, CheckinType checkinType = default(CheckinType)) Parameters String comment CheckinType checkinType CheckinAsync(String, CheckinType) Checks in the file. The check in comment. The type of check in to use. Declaration Task CheckinAsync(string comment = null, CheckinType checkinType = default(CheckinType)) Parameters String comment CheckinType checkinType Returns Task CheckinBatch(Batch, String, CheckinType) Checks in the file. The check in comment. The type of check in to use. The batch instance to use. Declaration void CheckinBatch(Batch batch, string comment = null, CheckinType checkinType = default(CheckinType)) Parameters Batch batch String comment CheckinType checkinType CheckinBatch(String, CheckinType) Checks in the file. The check in comment. The type of check in to use. Declaration void CheckinBatch(string comment = null, CheckinType checkinType = default(CheckinType)) Parameters String comment CheckinType checkinType CheckinBatchAsync(Batch, String, CheckinType) Checks in the file. The check in comment. The type of check in to use. The batch instance to use. Declaration Task CheckinBatchAsync(Batch batch, string comment = null, CheckinType checkinType = default(CheckinType)) Parameters Batch batch String comment CheckinType checkinType Returns Task CheckinBatchAsync(String, CheckinType) Checks in the file. The check in comment. The type of check in to use. Declaration Task CheckinBatchAsync(string comment = null, CheckinType checkinType = default(CheckinType)) Parameters String comment CheckinType checkinType Returns Task Checkout() Checks out the file. Declaration void Checkout() CheckoutAsync() Checks out the file. Declaration Task CheckoutAsync() Returns Task CheckoutBatch() Checks out the file. Declaration void CheckoutBatch() CheckoutBatch(Batch) Checks out the file. The batch instance to use. Declaration void CheckoutBatch(Batch batch) Parameters Batch batch CheckoutBatchAsync() Checks out the file. Declaration Task CheckoutBatchAsync() Returns Task CheckoutBatchAsync(Batch) Checks out the file. The batch instance to use. Declaration Task CheckoutBatchAsync(Batch batch) Parameters Batch batch Returns Task ClassifyAndExtract() Requests Syntex AI models to classify and extract information from this file Declaration ISyntexClassifyAndExtractResult ClassifyAndExtract() Returns ISyntexClassifyAndExtractResult Information about the classify and extract request ClassifyAndExtractAsync() Requests Syntex AI models to classify and extract information from this file Declaration Task<ISyntexClassifyAndExtractResult> ClassifyAndExtractAsync() Returns Task < ISyntexClassifyAndExtractResult > Information about the classify and extract request ClassifyAndExtractBatch() Requests Syntex AI models to classify and extract information from this file Declaration IBatchSingleResult<ISyntexClassifyAndExtractResult> ClassifyAndExtractBatch() Returns IBatchSingleResult < ISyntexClassifyAndExtractResult > Information about the classify and extract request ClassifyAndExtractBatch(Batch) Requests Syntex AI models to classify and extract information from this file Declaration IBatchSingleResult<ISyntexClassifyAndExtractResult> ClassifyAndExtractBatch(Batch batch) Parameters Batch batch Batch to add this request to Returns IBatchSingleResult < ISyntexClassifyAndExtractResult > Information about the classify and extract request ClassifyAndExtractBatchAsync() Requests Syntex AI models to classify and extract information from this file Declaration Task<IBatchSingleResult<ISyntexClassifyAndExtractResult>> ClassifyAndExtractBatchAsync() Returns Task < IBatchSingleResult < ISyntexClassifyAndExtractResult >> Information about the classify and extract request ClassifyAndExtractBatchAsync(Batch) Requests Syntex AI models to classify and extract information from this file Declaration Task<IBatchSingleResult<ISyntexClassifyAndExtractResult>> ClassifyAndExtractBatchAsync(Batch batch) Parameters Batch batch Batch to add this request to Returns Task < IBatchSingleResult < ISyntexClassifyAndExtractResult >> Information about the classify and extract request CopyTo(String, Boolean, MoveCopyOptions) Copies a file to the destination URL. Declaration void CopyTo(string destinationUrl, bool overwrite = false, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL including file name. Boolean overwrite Indicates whether the file should be overwritten if already existing. MoveCopyOptions options Options of the copy operation. CopyToAsync(String, Boolean, MoveCopyOptions) Copies a file to the destination URL. Declaration Task CopyToAsync(string destinationUrl, bool overwrite = false, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL including file name. Boolean overwrite Indicates whether the file should be overwritten if already existing. MoveCopyOptions options Options of the copy operation. Returns Task CopyToBatch(Batch, String, Boolean, MoveCopyOptions) Copies a file to the destination URL. Declaration void CopyToBatch(Batch batch, string destinationUrl, bool overwrite = false, MoveCopyOptions options = null) Parameters Batch batch The batch instance to use. String destinationUrl The destination URL including file name. Boolean overwrite Indicates whether the file should be overwritten if already existing. MoveCopyOptions options Options of the copy operation. CopyToBatch(String, Boolean, MoveCopyOptions) Copies a file to the destination URL. Declaration void CopyToBatch(string destinationUrl, bool overwrite = false, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL including file name. Boolean overwrite Indicates whether the file should be overwritten if already existing. MoveCopyOptions options Options of the copy operation. CopyToBatchAsync(Batch, String, Boolean, MoveCopyOptions) Copies a file to the destination URL. Declaration Task CopyToBatchAsync(Batch batch, string destinationUrl, bool overwrite = false, MoveCopyOptions options = null) Parameters Batch batch The batch instance to use. String destinationUrl The destination URL including file name. Boolean overwrite Indicates whether the file should be overwritten if already existing. MoveCopyOptions options Options of the copy operation. Returns Task CopyToBatchAsync(String, Boolean, MoveCopyOptions) Copies a file to the destination URL. Declaration Task CopyToBatchAsync(string destinationUrl, bool overwrite = false, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL including file name. Boolean overwrite Indicates whether the file should be overwritten if already existing. MoveCopyOptions options Options of the copy operation. Returns Task GetContent(Boolean) Get the content of the file. Declaration Stream GetContent(bool streamContent = false) Parameters Boolean streamContent Already return the content before all bytes are read, needed for large file downloads Returns Stream Stream containing the binary content of the file GetContentAsync(Boolean) Get the content of the file. Declaration Task<Stream> GetContentAsync(bool streamContent = false) Parameters Boolean streamContent Already return the content before all bytes are read, needed for large file downloads Returns Task < Stream > Stream containing the binary content of the file GetContentBytes() Get the content of the file. Declaration byte[] GetContentBytes() Returns Byte [] The binary content of the file GetContentBytesAsync() Get the content of the file. Declaration Task<byte[]> GetContentBytesAsync() Returns Task < Byte []> The binary content of the file MoveTo(String, MoveOperations, MoveCopyOptions) Move a file to the destination URL. Declaration void MoveTo(string destinationUrl, MoveOperations moveOperations = default(MoveOperations), MoveCopyOptions options = null) Parameters String destinationUrl The destination URL including file name. MoveOperations moveOperations combinable flags to indicate the type of move operations. MoveCopyOptions options Options of the move operation. MoveToAsync(String, MoveOperations, MoveCopyOptions) Move a file to the destination URL. Declaration Task MoveToAsync(string destinationUrl, MoveOperations moveOperations = default(MoveOperations), MoveCopyOptions options = null) Parameters String destinationUrl The destination URL including file name. MoveOperations moveOperations combinable flags to indicate the type of move operations. MoveCopyOptions options Options of the move operation. Returns Task MoveToBatch(Batch, String, MoveOperations, MoveCopyOptions) Move a file to the destination URL. Declaration void MoveToBatch(Batch batch, string destinationUrl, MoveOperations moveOperations = default(MoveOperations), MoveCopyOptions options = null) Parameters Batch batch The batch instance to use. String destinationUrl The destination URL including file name. MoveOperations moveOperations combinable flags to indicate the type of move operations. MoveCopyOptions options Options of the move operation. MoveToBatch(String, MoveOperations, MoveCopyOptions) Move a file to the destination URL. Declaration void MoveToBatch(string destinationUrl, MoveOperations moveOperations = default(MoveOperations), MoveCopyOptions options = null) Parameters String destinationUrl The destination URL including file name. MoveOperations moveOperations combinable flags to indicate the type of move operations. MoveCopyOptions options Options of the move operation. MoveToBatchAsync(Batch, String, MoveOperations, MoveCopyOptions) Move a file to the destination URL. Declaration Task MoveToBatchAsync(Batch batch, string destinationUrl, MoveOperations moveOperations = default(MoveOperations), MoveCopyOptions options = null) Parameters Batch batch The batch instance to use. String destinationUrl The destination URL including file name. MoveOperations moveOperations combinable flags to indicate the type of move operations. MoveCopyOptions options Options of the move operation. Returns Task MoveToBatchAsync(String, MoveOperations, MoveCopyOptions) Move a file to the destination URL. Declaration Task MoveToBatchAsync(string destinationUrl, MoveOperations moveOperations = default(MoveOperations), MoveCopyOptions options = null) Parameters String destinationUrl The destination URL including file name. MoveOperations moveOperations combinable flags to indicate the type of move operations. MoveCopyOptions options Options of the move operation. Returns Task Publish(String) Publish a major version of the current file. The comments to add on file publishing. Declaration void Publish(string comment = null) Parameters String comment PublishAsync(String) Publish a major version of the current file. The comments to add on file publishing. Declaration Task PublishAsync(string comment = null) Parameters String comment Returns Task PublishBatch(Batch, String) Publish a major version of the current file. The batch instance to use. The comments to add on file publishing. Declaration void PublishBatch(Batch batch, string comment = null) Parameters Batch batch String comment PublishBatch(String) Publish a major version of the current file. The comments to add on file publishing. Declaration void PublishBatch(string comment = null) Parameters String comment PublishBatchAsync(Batch, String) Publish a major version of the current file. The batch instance to use. The comments to add on file publishing. Declaration Task PublishBatchAsync(Batch batch, string comment = null) Parameters Batch batch String comment Returns Task PublishBatchAsync(String) Publish a major version of the current file. The comments to add on file publishing. Declaration Task PublishBatchAsync(string comment = null) Parameters String comment Returns Task Recycle() Send the file to recycle bin. Declaration Guid Recycle() Returns Guid The Id of the created recycle bin item RecycleAsync() Send the file to recycle bin. Declaration Task<Guid> RecycleAsync() Returns Task < Guid > The Id of the created recycle bin item RecycleBatch() Send the file to recycle bin. Declaration IBatchSingleResult<BatchResultValue<Guid>> RecycleBatch() Returns IBatchSingleResult < BatchResultValue < Guid >> RecycleBatch(Batch) Send the file to recycle bin Declaration IBatchSingleResult<BatchResultValue<Guid>> RecycleBatch(Batch batch) Parameters Batch batch The batch instance to use. Returns IBatchSingleResult < BatchResultValue < Guid >> RecycleBatchAsync() Send the file to recycle bin. Declaration Task<IBatchSingleResult<BatchResultValue<Guid>>> RecycleBatchAsync() Returns Task < IBatchSingleResult < BatchResultValue < Guid >>> RecycleBatchAsync(Batch) Send the file to recycle bin. Declaration Task<IBatchSingleResult<BatchResultValue<Guid>>> RecycleBatchAsync(Batch batch) Parameters Batch batch The batch instance to use. Returns Task < IBatchSingleResult < BatchResultValue < Guid >>> UndoCheckout() Release the checked out file without saving the changes. Declaration void UndoCheckout() UndoCheckoutAsync() Release the checked out file without saving the changes. Declaration Task UndoCheckoutAsync() Returns Task UndoCheckoutBatch() Release the checked out file without saving the changes. Declaration void UndoCheckoutBatch() UndoCheckoutBatch(Batch) Release the checked out file without saving the changes. The batch instance to use. Declaration void UndoCheckoutBatch(Batch batch) Parameters Batch batch UndoCheckoutBatchAsync() Release the checked out file without saving the changes. Declaration Task UndoCheckoutBatchAsync() Returns Task UndoCheckoutBatchAsync(Batch) Release the checked out file without saving the changes. The batch instance to use. Declaration Task UndoCheckoutBatchAsync(Batch batch) Parameters Batch batch Returns Task Unpublish(String) Unpublish the latest major version of the current file. The comments to add on file unpublishing. Declaration void Unpublish(string comment = null) Parameters String comment UnpublishAsync(String) Unpublish the latest major version of the current file. The comments to add on file unpublishing. Declaration Task UnpublishAsync(string comment = null) Parameters String comment Returns Task UnpublishBatch(Batch, String) Unpublish the latest major version of the current file. The batch instance to use. The comments to add on file unpublishing. Declaration void UnpublishBatch(Batch batch, string comment = null) Parameters Batch batch String comment UnpublishBatch(String) Unpublish the latest major version of the current file. The comments to add on file unpublishing. Declaration void UnpublishBatch(string comments = null) Parameters String comments UnpublishBatchAsync(Batch, String) Unpublish the latest major version of the current file. The batch instance to use. The comments to add on file unpublishing. Declaration Task UnpublishBatchAsync(Batch batch, string comment = null) Parameters Batch batch String comment Returns Task UnpublishBatchAsync(String) Unpublish the latest major version of the current file. The comments to add on file unpublishing. Declaration Task UnpublishBatchAsync(string comment = null) Parameters String comment Returns Task Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IFileCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFileCollection.html",
    "title": "Interface IFileCollection | PnP Core SDK",
    "keywords": "Interface IFileCollection Public interface to define a collection of File objects Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<IFile>.LoadAsync(Expression<Func<IFile, Object>>[]) IDataModelCollectionLoad<IFile>.LoadBatchAsync(Batch, Expression<Func<IFile, Object>>[]) IDataModelCollectionDeleteByGuidId.DeleteById(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdAsync(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatch(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatchAsync(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatch(Batch, Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatchAsync(Batch, Guid) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFileCollection : IQueryable<IFile>, IAsyncEnumerable<IFile>, IDataModelCollection<IFile>, IEnumerable<IFile>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<IFile>, IDataModelCollectionDeleteByGuidId, ISupportModules<IFileCollection> Methods Add(String, Stream, Boolean) Add a file to the file collection using batching (sync) Declaration IFile Add(string name, Stream content, bool overwrite = false) Parameters String name The name of the file. Stream content The content of the file. Boolean overwrite Indicates whether the file should be overwritten if already existing. Returns IFile The added file object. AddAsync(String, Stream, Boolean) Add a file to the file collection using batching (async) Declaration Task<IFile> AddAsync(string name, Stream content, bool overwrite = false) Parameters String name The name of the file. Stream content The content of the file. Boolean overwrite Indicates whether the file should be overwritten if already existing. Returns Task < IFile > The added file object. AddTemplateFile(String, TemplateFileType) Adds a file based upon an out of the box template Declaration IFile AddTemplateFile(string serverRelativePageName, TemplateFileType templateFileType) Parameters String serverRelativePageName Server relative url of the page to add TemplateFileType templateFileType Type of template file to add Returns IFile The added IFile AddTemplateFileAsync(String, TemplateFileType) Adds a file based upon an out of the box template Declaration Task<IFile> AddTemplateFileAsync(string serverRelativePageName, TemplateFileType templateFileType) Parameters String serverRelativePageName Server relative url of the page to add TemplateFileType templateFileType Type of template file to add Returns Task < IFile > The added IFile Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.IFileVersion.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFileVersion.html",
    "title": "Interface IFileVersion | PnP Core SDK",
    "keywords": "Interface IFileVersion Public interface to define a FileVersion object Inherited Members IDataModel<IFileVersion>.Requested IDataModel<IFileVersion>.HasValue(String) IDataModel<IFileVersion>.HasChanged(String) IDataModel<IFileVersion>.IsPropertyAvailable(Expression<Func<IFileVersion, Object>>) IDataModel<IFileVersion>.ArePropertiesAvailable(Expression<Func<IFileVersion, Object>>[]) IDataModel<IFileVersion>.EnsureProperties(Expression<Func<IFileVersion, Object>>[]) IDataModel<IFileVersion>.EnsurePropertiesAsync(Expression<Func<IFileVersion, Object>>[]) IDataModel<IFileVersion>.ExecuteRequestAsync(ApiRequest) IDataModel<IFileVersion>.ExecuteRequest(ApiRequest) IDataModel<IFileVersion>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IFileVersion>.ExecuteRequestBatch(ApiRequest) IDataModel<IFileVersion>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IFileVersion>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IFileVersion>.GetBatchAsync(Batch, Expression<Func<IFileVersion, Object>>[]) IDataModelGet<IFileVersion>.GetAsync(Expression<Func<IFileVersion, Object>>[]) IDataModelLoad<IFileVersion>.LoadBatchAsync(Batch, Expression<Func<IFileVersion, Object>>[]) IDataModelLoad<IFileVersion>.LoadAsync(Expression<Func<IFileVersion, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFileVersion : IDataModel<IFileVersion>, IDataModelParent, IDataModelWithContext, ISupportModules<IFileVersion>, IDataModelGet<IFileVersion>, IDataModelLoad<IFileVersion>, IQueryableDataModel Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object CheckInComment Gets a value that specifies the check-in comment. Declaration string CheckInComment { get; } Property Value String Created Gets a value that specifies the creation date and time for the file version. Declaration DateTime Created { get; } Property Value DateTime CreatedBy The ISharePointUser that created this version Declaration ISharePointUser CreatedBy { get; } Property Value ISharePointUser Id Gets the internal identifier for the file version. Declaration int Id { get; } Property Value Int32 IsCurrentVersion Gets a value that specifies whether the file version is the current version. Declaration bool IsCurrentVersion { get; } Property Value Boolean Size Gets the size of this version of the file. Declaration long Size { get; } Property Value Int64 Url Gets a value that specifies the relative URL of the file version based on the URL for the site or subsite. Declaration string Url { get; } Property Value String VersionLabel Gets a value that specifies the implementation specific identifier of the file. Declaration string VersionLabel { get; } Property Value String Methods GetContent(Boolean) Get the content of this file version. Declaration Stream GetContent(bool streamContent = false) Parameters Boolean streamContent Already return the content before all bytes are read, needed for large file downloads Returns Stream Stream containing the binary content of the file GetContentAsync(Boolean) Get the content of this file version. Declaration Task<Stream> GetContentAsync(bool streamContent = false) Parameters Boolean streamContent Already return the content before all bytes are read, needed for large file downloads Returns Task < Stream > Stream containing the binary content of the file GetContentBytes() Get the content of the file version. Declaration byte[] GetContentBytes() Returns Byte [] The binary content of the file GetContentBytesAsync() Get the content of this file version. Declaration Task<byte[]> GetContentBytesAsync() Returns Task < Byte []> The binary content of the file Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IFileVersionCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFileVersionCollection.html",
    "title": "Interface IFileVersionCollection | PnP Core SDK",
    "keywords": "Interface IFileVersionCollection Collection of file versions Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<IFileVersion>.LoadAsync(Expression<Func<IFileVersion, Object>>[]) IDataModelCollectionLoad<IFileVersion>.LoadBatchAsync(Batch, Expression<Func<IFileVersion, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFileVersionCollection : IQueryable<IFileVersion>, IAsyncEnumerable<IFileVersion>, IDataModelCollection<IFileVersion>, IEnumerable<IFileVersion>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<IFileVersion>, ISupportModules<IFileVersionCollection> Methods GetById(Int32, Expression<Func<IFileVersion, Object>>[]) Method to select a file version by Id Declaration IFileVersion GetById(int id, params Expression<Func<IFileVersion, object>>[] selectors) Parameters Int32 id The Id to search for Expression < Func < IFileVersion , Object >>[] selectors The expressions declaring the fields to select Returns IFileVersion The resulting file version instance, if any GetByIdAsync(Int32, Expression<Func<IFileVersion, Object>>[]) Method to select a file version by Id asynchronously Declaration Task<IFileVersion> GetByIdAsync(int id, params Expression<Func<IFileVersion, object>>[] selectors) Parameters Int32 id The Id to search for Expression < Func < IFileVersion , Object >>[] selectors The expressions declaring the fields to select Returns Task < IFileVersion > The resulting file version instance, if any Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.IFileVersionEvent.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFileVersionEvent.html",
    "title": "Interface IFileVersionEvent | PnP Core SDK",
    "keywords": "Interface IFileVersionEvent Represents an event object happened on a file Inherited Members IDataModel<IFileVersionEvent>.Requested IDataModel<IFileVersionEvent>.HasValue(String) IDataModel<IFileVersionEvent>.HasChanged(String) IDataModel<IFileVersionEvent>.IsPropertyAvailable(Expression<Func<IFileVersionEvent, Object>>) IDataModel<IFileVersionEvent>.ArePropertiesAvailable(Expression<Func<IFileVersionEvent, Object>>[]) IDataModel<IFileVersionEvent>.EnsureProperties(Expression<Func<IFileVersionEvent, Object>>[]) IDataModel<IFileVersionEvent>.EnsurePropertiesAsync(Expression<Func<IFileVersionEvent, Object>>[]) IDataModel<IFileVersionEvent>.ExecuteRequestAsync(ApiRequest) IDataModel<IFileVersionEvent>.ExecuteRequest(ApiRequest) IDataModel<IFileVersionEvent>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IFileVersionEvent>.ExecuteRequestBatch(ApiRequest) IDataModel<IFileVersionEvent>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IFileVersionEvent>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFileVersionEvent : IDataModel<IFileVersionEvent>, IDataModelParent, IDataModelWithContext, ISupportModules<IFileVersionEvent> Properties Editor Gets the editor of this version of the file. Declaration string Editor { get; } Property Value String EditorEmail Gets the e-mail address of the editor of this version of the file. Declaration string EditorEmail { get; } Property Value String EventType Type of the event Declaration int EventType { get; } Property Value Int32 Time The UTC time of this event. Declaration DateTime Time { get; } Property Value DateTime Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IFileVersionEventCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFileVersionEventCollection.html",
    "title": "Interface IFileVersionEventCollection | PnP Core SDK",
    "keywords": "Interface IFileVersionEventCollection Collection of file version events Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<IFileVersionEvent>.LoadAsync(Expression<Func<IFileVersionEvent, Object>>[]) IDataModelCollectionLoad<IFileVersionEvent>.LoadBatchAsync(Batch, Expression<Func<IFileVersionEvent, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFileVersionEventCollection : IDataModelCollection<IFileVersionEvent>, IEnumerable<IFileVersionEvent>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<IFileVersionEvent>, ISupportModules<IFileVersionEventCollection> Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.IFolder.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFolder.html",
    "title": "Interface IFolder | PnP Core SDK",
    "keywords": "Interface IFolder Public interface to define a Folder object Inherited Members IDataModel<IFolder>.Requested IDataModel<IFolder>.HasValue(String) IDataModel<IFolder>.HasChanged(String) IDataModel<IFolder>.IsPropertyAvailable(Expression<Func<IFolder, Object>>) IDataModel<IFolder>.ArePropertiesAvailable(Expression<Func<IFolder, Object>>[]) IDataModel<IFolder>.EnsureProperties(Expression<Func<IFolder, Object>>[]) IDataModel<IFolder>.EnsurePropertiesAsync(Expression<Func<IFolder, Object>>[]) IDataModel<IFolder>.ExecuteRequestAsync(ApiRequest) IDataModel<IFolder>.ExecuteRequest(ApiRequest) IDataModel<IFolder>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IFolder>.ExecuteRequestBatch(ApiRequest) IDataModel<IFolder>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IFolder>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IFolder>.GetBatchAsync(Batch, Expression<Func<IFolder, Object>>[]) IDataModelGet<IFolder>.GetAsync(Expression<Func<IFolder, Object>>[]) IDataModelLoad<IFolder>.LoadBatchAsync(Batch, Expression<Func<IFolder, Object>>[]) IDataModelLoad<IFolder>.LoadAsync(Expression<Func<IFolder, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() IDataModelSupportingGetChanges.GetChangesAsync(ChangeQueryOptions) IDataModelSupportingGetChanges.GetChanges(ChangeQueryOptions) IDataModelSupportingGetChanges.GetChangesBatchAsync(Batch, ChangeQueryOptions) IDataModelSupportingGetChanges.GetChangesBatch(Batch, ChangeQueryOptions) IDataModelSupportingGetChanges.GetChangesBatchAsync(ChangeQueryOptions) IDataModelSupportingGetChanges.GetChangesBatch(ChangeQueryOptions) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFolder : IDataModel<IFolder>, IDataModelParent, IDataModelWithContext, ISupportModules<IFolder>, IDataModelGet<IFolder>, IDataModelLoad<IFolder>, IDataModelUpdate, IDataModelDelete, IDataModelSupportingGetChanges, IQueryableDataModel Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object Exists Gets whether the folder exists, Declaration bool Exists { get; } Property Value Boolean Files Gets the collection of files contained in the folder Declaration IFileCollection Files { get; } Property Value IFileCollection Folders Gets the collection of list folders contained in the list folder. Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IFolderCollection Folders { get; } Property Value IFolderCollection IsWOPIEnabled Indicate whether the folder is enabled for WOPI default action. Declaration bool IsWOPIEnabled { get; } Property Value Boolean ItemCount Gets a value that specifies the count of items in the list folder. Declaration int ItemCount { get; } Property Value Int32 ListItemAllFields Gets the list item field values for the list item corresponding to the file. Declaration IListItem ListItemAllFields { get; } Property Value IListItem Name Gets the name of the folder. Declaration string Name { get; } Property Value String ParentFolder Gets the parent list folder of the folder. Declaration IFolder ParentFolder { get; } Property Value IFolder ProgID Gets a string that identifies the application in which the folder was created. Declaration string ProgID { get; } Property Value String Properties Gets the collection of all files contained in the folder. Declaration IPropertyValues Properties { get; } Property Value IPropertyValues ServerRelativeUrl Gets the server-relative URL of the list folder. Declaration string ServerRelativeUrl { get; } Property Value String StorageMetrics Get the storage metrics of the folder. Declaration IStorageMetrics StorageMetrics { get; } Property Value IStorageMetrics TimeCreated Gets the creation time of the folder. Declaration DateTime TimeCreated { get; } Property Value DateTime TimeLastModified Gets the last modification time of the folder. Declaration DateTime TimeLastModified { get; } Property Value DateTime UniqueId Gets the Unique Id of the folder. Declaration Guid UniqueId { get; } Property Value Guid WelcomePage Gets or sets a value that specifies folder-relative URL for the list folder welcome page. Declaration string WelcomePage { get; set; } Property Value String Methods AddFolder(String) Add a folder to the current folder. Declaration IFolder AddFolder(string name) Parameters String name The name of the folder to add. Returns IFolder The added folder. AddFolderAsync(String) Add a folder to the current folder. Declaration Task<IFolder> AddFolderAsync(string name) Parameters String name The name of the folder to add. Returns Task < IFolder > The added folder. AddFolderBatch(Batch, String) Add a folder to the current folder via batch. Declaration IFolder AddFolderBatch(Batch batch, string name) Parameters Batch batch Batch to add the reques to String name The name of the folder to add. Returns IFolder The added folder. AddFolderBatch(String) Add a folder to the current folder via batch. Declaration IFolder AddFolderBatch(string name) Parameters String name The name of the folder to add. Returns IFolder The added folder. AddFolderBatchAsync(Batch, String) Add a folder to the current folder via batch. Declaration Task<IFolder> AddFolderBatchAsync(Batch batch, string name) Parameters Batch batch Batch to add the reques to String name The name of the folder to add. Returns Task < IFolder > The added folder. AddFolderBatchAsync(String) Add a folder to the current folder via batch. Declaration Task<IFolder> AddFolderBatchAsync(string name) Parameters String name The name of the folder to add. Returns Task < IFolder > The added folder. ClassifyAndExtractOffPeak() Classifies and extracts all unprocessed files in this folder and it's sub folders via the Syntex off-peak queue Declaration ISyntexClassifyAndExtractResult ClassifyAndExtractOffPeak() Returns ISyntexClassifyAndExtractResult Information about the created classify and extract requests ClassifyAndExtractOffPeakAsync() Classifies and extracts all unprocessed files in this folder and it's sub folders via the Syntex off-peak queue Declaration Task<ISyntexClassifyAndExtractResult> ClassifyAndExtractOffPeakAsync() Returns Task < ISyntexClassifyAndExtractResult > Information about the created classify and extract requests CopyTo(String, MoveCopyOptions) Copies a folder to the destination URL. Declaration void CopyTo(string destinationUrl, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL. MoveCopyOptions options options of the copy operation. CopyToAsync(String, MoveCopyOptions) Copies a folder to the destination URL. Declaration Task CopyToAsync(string destinationUrl, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL. MoveCopyOptions options options of the copy operation. Returns Task CopyToBatch(Batch, String, MoveCopyOptions) Copies a folder to the destination URL. Declaration void CopyToBatch(Batch batch, string destinationUrl, MoveCopyOptions options = null) Parameters Batch batch The batch instance to use. String destinationUrl The destination URL. MoveCopyOptions options options of the copy operation. CopyToBatch(String, MoveCopyOptions) Copies a folder to the destination URL. Declaration void CopyToBatch(string destinationUrl, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL. MoveCopyOptions options options of the copy operation. CopyToBatchAsync(Batch, String, MoveCopyOptions) Copies a folder to the destination URL. Declaration Task CopyToBatchAsync(Batch batch, string destinationUrl, MoveCopyOptions options = null) Parameters Batch batch The batch instance to use. String destinationUrl The destination URL. MoveCopyOptions options options of the copy operation. Returns Task CopyToBatchAsync(String, MoveCopyOptions) Copies a folder to the destination URL. Declaration Task CopyToBatchAsync(string destinationUrl, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL. MoveCopyOptions options options of the copy operation. Returns Task EnsureFolder(String) Ensures a (hiarchy) of folders exists on a given folder Declaration IFolder EnsureFolder(string folderRelativeUrl) Parameters String folderRelativeUrl a (hiarchy) of folders (e.g. folderA/folderB/FolderC) Returns IFolder The IFolder representing the final folder in the hiarchy (e.g. FolderC) EnsureFolderAsync(String) Ensures a (hiarchy) of folders exists on a given folder Declaration Task<IFolder> EnsureFolderAsync(string folderRelativeUrl) Parameters String folderRelativeUrl a (hiarchy) of folders (e.g. folderA/folderB/FolderC) Returns Task < IFolder > The IFolder representing the final folder in the hiarchy (e.g. FolderC) MoveTo(String, MoveCopyOptions) Moves a folder to the destination URL. Declaration void MoveTo(string destinationUrl, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL. MoveCopyOptions options options of the move operation. MoveToAsync(String, MoveCopyOptions) Moves a folder to the destination URL. Declaration Task MoveToAsync(string destinationUrl, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL. MoveCopyOptions options options of the move operation. Returns Task MoveToBatch(Batch, String, MoveCopyOptions) Moves a folder to the destination URL. Declaration void MoveToBatch(Batch batch, string destinationUrl, MoveCopyOptions options = null) Parameters Batch batch The batch instance to use. String destinationUrl The destination URL. MoveCopyOptions options options of the move operation. MoveToBatch(String, MoveCopyOptions) Moves a folder to the destination URL. Declaration void MoveToBatch(string destinationUrl, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL. MoveCopyOptions options options of the move operation. MoveToBatchAsync(Batch, String, MoveCopyOptions) Moves a folder to the destination URL. Declaration Task MoveToBatchAsync(Batch batch, string destinationUrl, MoveCopyOptions options = null) Parameters Batch batch The batch instance to use. String destinationUrl The destination URL. MoveCopyOptions options options of the move operation. Returns Task MoveToBatchAsync(String, MoveCopyOptions) Moves a folder to the destination URL. Declaration Task MoveToBatchAsync(string destinationUrl, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL. MoveCopyOptions options options of the move operation. Returns Task Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IFolderCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFolderCollection.html",
    "title": "Interface IFolderCollection | PnP Core SDK",
    "keywords": "Interface IFolderCollection Public interface to define a collection of Folder objects Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<IFolder>.LoadAsync(Expression<Func<IFolder, Object>>[]) IDataModelCollectionLoad<IFolder>.LoadBatchAsync(Batch, Expression<Func<IFolder, Object>>[]) IDataModelCollectionDeleteByGuidId.DeleteById(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdAsync(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatch(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatchAsync(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatch(Batch, Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatchAsync(Batch, Guid) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFolderCollection : IQueryable<IFolder>, IAsyncEnumerable<IFolder>, IDataModelCollection<IFolder>, IEnumerable<IFolder>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<IFolder>, IDataModelCollectionDeleteByGuidId, ISupportModules<IFolderCollection> Methods Add(String) Add a folder Declaration IFolder Add(string name) Parameters String name The name of the folder to add Returns IFolder The newly added folder AddAsync(String) Add a folder Declaration Task<IFolder> AddAsync(string name) Parameters String name The name of the folder to add Returns Task < IFolder > The newly added folder AddBatch(Batch, String) Add a folder using a specific batch instance Declaration IFolder AddBatch(Batch batch, string name) Parameters Batch batch The batch instance to use String name The name of the folder to add Returns IFolder The newly added folder AddBatch(String) Add a folder Declaration IFolder AddBatch(string name) Parameters String name The name of the folder to add Returns IFolder The newly added folder AddBatchAsync(Batch, String) Add a folder using a specific batch instance Declaration Task<IFolder> AddBatchAsync(Batch batch, string name) Parameters Batch batch The batch instance to use String name The name of the folder to add Returns Task < IFolder > The newly added folder AddBatchAsync(String) Add a folder Declaration Task<IFolder> AddBatchAsync(string name) Parameters String name The name of the folder to add Returns Task < IFolder > The newly added folder Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.IFollowing.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFollowing.html",
    "title": "Interface IFollowing | PnP Core SDK",
    "keywords": "Interface IFollowing An entry point to the social following APIs Inherited Members IDataModel<IFollowing>.Requested IDataModel<IFollowing>.HasValue(String) IDataModel<IFollowing>.HasChanged(String) IDataModel<IFollowing>.IsPropertyAvailable(Expression<Func<IFollowing, Object>>) IDataModel<IFollowing>.ArePropertiesAvailable(Expression<Func<IFollowing, Object>>[]) IDataModel<IFollowing>.EnsureProperties(Expression<Func<IFollowing, Object>>[]) IDataModel<IFollowing>.EnsurePropertiesAsync(Expression<Func<IFollowing, Object>>[]) IDataModel<IFollowing>.ExecuteRequestAsync(ApiRequest) IDataModel<IFollowing>.ExecuteRequest(ApiRequest) IDataModel<IFollowing>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IFollowing>.ExecuteRequestBatch(ApiRequest) IDataModel<IFollowing>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IFollowing>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFollowing : IDataModel<IFollowing>, IDataModelParent, IDataModelWithContext, ISupportModules<IFollowing> Methods AmIFollowedBy(String) Checks whether the specified user is following the current user. Declaration bool AmIFollowedBy(string accountName) Parameters String accountName The account name of the user, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; Returns Boolean True if the specified user follows the current user AmIFollowedByAsync(String) Checks whether the specified user is following the current user. Declaration Task<bool> AmIFollowedByAsync(string accountName) Parameters String accountName The account name of the user, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; Returns Task < Boolean > True if the specified user follows the current user AmIFollowing(String) Checks whether the current user is following the specified user. Declaration bool AmIFollowing(string accountName) Parameters String accountName The account name of the user, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; Returns Boolean True if the current user follows the specified user AmIFollowingAsync(String) Checks whether the current user is following the specified user. Declaration Task<bool> AmIFollowingAsync(string accountName) Parameters String accountName The account name of the user, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; Returns Task < Boolean > True if the current user follows the specified user Follow(FollowData) Makes the current user start following a user, document, site, or tag. Declaration SocialFollowResult Follow(FollowData data) Parameters FollowData data Depending on what entity your're going to follow, can be an instance of FollowTagData , FollowDocumentData , FollowPersonData or FollowSiteData Returns SocialFollowResult A result, the follow status or an error FollowAsync(FollowData) Makes the current user start following a user, document, site, or tag. Declaration Task<SocialFollowResult> FollowAsync(FollowData data) Parameters FollowData data Depending on what entity your're going to follow, can be an instance of FollowTagData , FollowDocumentData , FollowPersonData or FollowSiteData Returns Task < SocialFollowResult > A result, the follow status or an error FollowedByMe(SocialActorTypes) Gets users, documents, sites, and tags that the current user is following. Declaration IList<ISocialActor> FollowedByMe(SocialActorTypes types) Parameters SocialActorTypes types The actor type to include. You can include many actory using bitwise operatoins. I.e. to include document and site types use SocialActorTypes.Documents | SocialActorTypes.Sites Returns PnP.Core.Model.SharePoint.IList < ISocialActor > A collection of ISocialActor FollowedByMeAsync(SocialActorTypes) Gets users, documents, sites, and tags that the current user is following. Declaration Task<IList<ISocialActor>> FollowedByMeAsync(SocialActorTypes types) Parameters SocialActorTypes types The actor type to include. You can include many actory using bitwise operatoins. I.e. to include document and site types use SocialActorTypes.Documents | SocialActorTypes.Sites Returns Task < PnP.Core.Model.SharePoint.IList < ISocialActor >> A collection of ISocialActor FollowedByMeCount(SocialActorTypes) Gets the count of users, documents, sites, and tags that the current user is following. Declaration int FollowedByMeCount(SocialActorTypes types) Parameters SocialActorTypes types The actor type to include. You can include many actory using bitwise operatoins. I.e. to include document and site types use SocialActorTypes.Documents | SocialActorTypes.Sites Returns Int32 The number of followed items FollowedByMeCountAsync(SocialActorTypes) Gets the count of users, documents, sites, and tags that the current user is following. Declaration Task<int> FollowedByMeCountAsync(SocialActorTypes types) Parameters SocialActorTypes types The actor type to include. You can include many actory using bitwise operatoins. I.e. to include document and site types use SocialActorTypes.Documents | SocialActorTypes.Sites Returns Task < Int32 > The number of followed items GetFollowersFor(String, Expression<Func<IPersonProperties, Object>>[]) Gets the people who are following the specified user. Declaration IList<IPersonProperties> GetFollowersFor(string accountName, params Expression<Func<IPersonProperties, object>>[] selectors) Parameters String accountName The account name of the user, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; Expression < Func < IPersonProperties , Object >>[] selectors Specific properties to return Returns PnP.Core.Model.SharePoint.IList < IPersonProperties > An instance of IPersonProperties GetFollowersForAsync(String, Expression<Func<IPersonProperties, Object>>[]) Gets the people who are following the specified user. Declaration Task<IList<IPersonProperties>> GetFollowersForAsync(string accountName, params Expression<Func<IPersonProperties, object>>[] selectors) Parameters String accountName The account name of the user, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; Expression < Func < IPersonProperties , Object >>[] selectors Specific properties to return Returns Task < PnP.Core.Model.SharePoint.IList < IPersonProperties >> An instance of IPersonProperties GetFollowingInfo() Gets following information for the current user Declaration IFollowingInfo GetFollowingInfo() Returns IFollowingInfo An instance of IFollowingInfo GetFollowingInfoAsync() Gets following information for the current user Declaration Task<IFollowingInfo> GetFollowingInfoAsync() Returns Task < IFollowingInfo > An instance of IFollowingInfo GetPeopleFollowedBy(String, Expression<Func<IPersonProperties, Object>>[]) Gets the people who the specified user is following. Declaration IList<IPersonProperties> GetPeopleFollowedBy(string accountName, params Expression<Func<IPersonProperties, object>>[] selectors) Parameters String accountName The account name of the user, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; Expression < Func < IPersonProperties , Object >>[] selectors Specific properties to return Returns PnP.Core.Model.SharePoint.IList < IPersonProperties > An instance of IPersonProperties GetPeopleFollowedByAsync(String, Expression<Func<IPersonProperties, Object>>[]) Gets the people who the specified user is following. Declaration Task<IList<IPersonProperties>> GetPeopleFollowedByAsync(string accountName, params Expression<Func<IPersonProperties, object>>[] selectors) Parameters String accountName The account name of the user, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; Expression < Func < IPersonProperties , Object >>[] selectors Specific properties to return Returns Task < PnP.Core.Model.SharePoint.IList < IPersonProperties >> An instance of IPersonProperties IsFollowed(FollowData) Indicates whether the current user is following a specified user, document, site, or tag. Declaration bool IsFollowed(FollowData data) Parameters FollowData data Depending on what entity your're going to stop following, can be an instance of FollowTagData , FollowDocumentData , FollowPersonData or FollowSiteData Returns Boolean True if the current user is following a specified user, document, site, or tag. IsFollowedAsync(FollowData) Indicates whether the current user is following a specified user, document, site, or tag. Declaration Task<bool> IsFollowedAsync(FollowData data) Parameters FollowData data Depending on what entity your're going to stop following, can be an instance of FollowTagData , FollowDocumentData , FollowPersonData or FollowSiteData Returns Task < Boolean > True if the current user is following a specified user, document, site, or tag. MyFollowers() Gets the users who are following the current user. Declaration IList<ISocialActor> MyFollowers() Returns PnP.Core.Model.SharePoint.IList < ISocialActor > A collection of ISocialActor MyFollowersAsync() Gets the users who are following the current user. Declaration Task<IList<ISocialActor>> MyFollowersAsync() Returns Task < PnP.Core.Model.SharePoint.IList < ISocialActor >> A collection of ISocialActor MySuggestions() Gets users who the current user might want to follow. Declaration IList<ISocialActor> MySuggestions() Returns PnP.Core.Model.SharePoint.IList < ISocialActor > A collection of ISocialActor MySuggestionsAsync() Gets users who the current user might want to follow. Declaration Task<IList<ISocialActor>> MySuggestionsAsync() Returns Task < PnP.Core.Model.SharePoint.IList < ISocialActor >> A collection of ISocialActor StopFollowing(FollowData) Makes the current user stop following a user, document, site, or tag. Declaration void StopFollowing(FollowData data) Parameters FollowData data Depending on what entity your're going to stop following, can be an instance of FollowTagData , FollowDocumentData , FollowPersonData or FollowSiteData StopFollowingAsync(FollowData) Makes the current user stop following a user, document, site, or tag. Declaration Task StopFollowingAsync(FollowData data) Parameters FollowData data Depending on what entity your're going to stop following, can be an instance of FollowTagData , FollowDocumentData , FollowPersonData or FollowSiteData Returns Task Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IFollowingInfo.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFollowingInfo.html",
    "title": "Interface IFollowingInfo | PnP Core SDK",
    "keywords": "Interface IFollowingInfo Represents metadata information about your following data Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFollowingInfo Properties MyFollowedDocumentsUri The Uri to see all your followed documents Declaration string MyFollowedDocumentsUri { get; set; } Property Value String MyFollowedSitesUri The Uri to see all your followed sites Declaration string MyFollowedSitesUri { get; set; } Property Value String SocialActor A metadata for a following entity Declaration ISocialActor SocialActor { get; set; } Property Value ISocialActor"
  },
  "api/PnP.Core.Model.SharePoint.IFooterOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFooterOptions.html",
    "title": "Interface IFooterOptions | PnP Core SDK",
    "keywords": "Interface IFooterOptions Options to configure a the site footer chrome. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFooterOptions Properties Emphasis Gets or sets the value of the footer emphasis. Declaration FooterVariantThemeType Emphasis { get; set; } Property Value FooterVariantThemeType Enabled Gets or sets a value that specifies whether the footer is enabled on the site. Declaration bool Enabled { get; set; } Property Value Boolean Layout Gets or sets the value of the footer layout. Declaration FooterLayoutType Layout { get; set; } Property Value FooterLayoutType"
  },
  "api/PnP.Core.Model.SharePoint.IHeaderOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.IHeaderOptions.html",
    "title": "Interface IHeaderOptions | PnP Core SDK",
    "keywords": "Interface IHeaderOptions Options to configure a the site header chrome Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IHeaderOptions Properties Emphasis Gets or sets the value of the header emphasis. Declaration VariantThemeType Emphasis { get; set; } Property Value VariantThemeType HideTitle Gets or sets a value that specifies whether the title in header is hidden on the site. Declaration bool HideTitle { get; set; } Property Value Boolean Layout Gets or sets the value of the header layout. Declaration HeaderLayoutType Layout { get; set; } Property Value HeaderLayoutType LogoAlignment Gets or sets the logo alignment of the site. Declaration LogoAlignment LogoAlignment { get; set; } Property Value LogoAlignment"
  },
  "api/PnP.Core.Model.SharePoint.IHubSite.html": {
    "href": "api/PnP.Core.Model.SharePoint.IHubSite.html",
    "title": "Interface IHubSite | PnP Core SDK",
    "keywords": "Interface IHubSite Public interface to define a HubSite object Inherited Members IDataModel<IHubSite>.Requested IDataModel<IHubSite>.HasValue(String) IDataModel<IHubSite>.HasChanged(String) IDataModel<IHubSite>.IsPropertyAvailable(Expression<Func<IHubSite, Object>>) IDataModel<IHubSite>.ArePropertiesAvailable(Expression<Func<IHubSite, Object>>[]) IDataModel<IHubSite>.EnsureProperties(Expression<Func<IHubSite, Object>>[]) IDataModel<IHubSite>.EnsurePropertiesAsync(Expression<Func<IHubSite, Object>>[]) IDataModel<IHubSite>.ExecuteRequestAsync(ApiRequest) IDataModel<IHubSite>.ExecuteRequest(ApiRequest) IDataModel<IHubSite>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IHubSite>.ExecuteRequestBatch(ApiRequest) IDataModel<IHubSite>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IHubSite>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IHubSite>.GetBatchAsync(Batch, Expression<Func<IHubSite, Object>>[]) IDataModelGet<IHubSite>.GetAsync(Expression<Func<IHubSite, Object>>[]) IDataModelLoad<IHubSite>.LoadBatchAsync(Batch, Expression<Func<IHubSite, Object>>[]) IDataModelLoad<IHubSite>.LoadAsync(Expression<Func<IHubSite, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IHubSite : IDataModel<IHubSite>, IDataModelParent, IDataModelWithContext, ISupportModules<IHubSite>, IDataModelGet<IHubSite>, IDataModelLoad<IHubSite>, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object Description The description of the HubSite. Declaration string Description { get; set; } Property Value String EnablePermissionsSync Gets or sets if permission sync to associated sites is enabled or not. Declaration bool EnablePermissionsSync { get; set; } Property Value Boolean EnforcedECTs Gets or sets the list of Enforced ECTs on the HubSite Declaration string EnforcedECTs { get; set; } Property Value String EnforcedECTsVersion Gets or sets EnforcedECTs version Declaration int EnforcedECTsVersion { get; set; } Property Value Int32 HideNameInNavigation Gets or sets if the HubSite nav includes the name as well as the logo. Declaration bool HideNameInNavigation { get; set; } Property Value Boolean Id The HubSite ID Declaration Guid Id { get; } Property Value Guid LogoUrl The logo URL of the HubSite Declaration string LogoUrl { get; set; } Property Value String ParentHubSiteId The parent hub site id to which this hub connects Declaration Guid ParentHubSiteId { get; set; } Property Value Guid PermissionsSyncTag Hub permissions sync tag Declaration int PermissionsSyncTag { get; } Property Value Int32 RequiresJoinApproval Gets or sets if the HubSite Join requires approval. Declaration bool RequiresJoinApproval { get; set; } Property Value Boolean SiteDesignId The site design to be executed when the hub is joined. Declaration Guid SiteDesignId { get; set; } Property Value Guid SiteId The Site Collection ID of the HubSite Declaration Guid SiteId { get; } Property Value Guid SiteUrl The URL of the HubSite Declaration string SiteUrl { get; } Property Value String Targets List of security groups with access to join the HubSite. Null if everyone has permission. Declaration string Targets { get; set; } Property Value String TenantInstanceId The tenant instance ID in which the site hub is located. Use empty guid for the default tenant instance. Declaration Guid TenantInstanceId { get; } Property Value Guid Title Specifies the name of the HubSite. Declaration string Title { get; set; } Property Value String Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IInformationRightsManagementFileSettings.html": {
    "href": "api/PnP.Core.Model.SharePoint.IInformationRightsManagementFileSettings.html",
    "title": "Interface IInformationRightsManagementFileSettings | PnP Core SDK",
    "keywords": "Interface IInformationRightsManagementFileSettings Public interface to define a InformationRightsManagementFileSettings object Inherited Members IDataModel<IInformationRightsManagementFileSettings>.Requested IDataModel<IInformationRightsManagementFileSettings>.HasValue(String) IDataModel<IInformationRightsManagementFileSettings>.HasChanged(String) IDataModel<IInformationRightsManagementFileSettings>.IsPropertyAvailable(Expression<Func<IInformationRightsManagementFileSettings, Object>>) IDataModel<IInformationRightsManagementFileSettings>.ArePropertiesAvailable(Expression<Func<IInformationRightsManagementFileSettings, Object>>[]) IDataModel<IInformationRightsManagementFileSettings>.EnsureProperties(Expression<Func<IInformationRightsManagementFileSettings, Object>>[]) IDataModel<IInformationRightsManagementFileSettings>.EnsurePropertiesAsync(Expression<Func<IInformationRightsManagementFileSettings, Object>>[]) IDataModel<IInformationRightsManagementFileSettings>.ExecuteRequestAsync(ApiRequest) IDataModel<IInformationRightsManagementFileSettings>.ExecuteRequest(ApiRequest) IDataModel<IInformationRightsManagementFileSettings>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IInformationRightsManagementFileSettings>.ExecuteRequestBatch(ApiRequest) IDataModel<IInformationRightsManagementFileSettings>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IInformationRightsManagementFileSettings>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IInformationRightsManagementFileSettings>.GetBatchAsync(Batch, Expression<Func<IInformationRightsManagementFileSettings, Object>>[]) IDataModelGet<IInformationRightsManagementFileSettings>.GetAsync(Expression<Func<IInformationRightsManagementFileSettings, Object>>[]) IDataModelLoad<IInformationRightsManagementFileSettings>.LoadBatchAsync(Batch, Expression<Func<IInformationRightsManagementFileSettings, Object>>[]) IDataModelLoad<IInformationRightsManagementFileSettings>.LoadAsync(Expression<Func<IInformationRightsManagementFileSettings, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IInformationRightsManagementFileSettings : IDataModel<IInformationRightsManagementFileSettings>, IDataModelParent, IDataModelWithContext, ISupportModules<IInformationRightsManagementFileSettings>, IDataModelGet<IInformationRightsManagementFileSettings>, IDataModelLoad<IInformationRightsManagementFileSettings> Properties AllowPrint Gets or sets whether print is allowed for this file. Declaration bool AllowPrint { get; set; } Property Value Boolean AllowScript Gets or sets whether script is alloed for this file. Declaration bool AllowScript { get; set; } Property Value Boolean AllowWriteCopy Gets or sets whether writing copy is allowed for this file. Declaration bool AllowWriteCopy { get; set; } Property Value Boolean DisableDocumentBrowserView Gets or sets whether document browser view is disabled for this file. Declaration bool DisableDocumentBrowserView { get; set; } Property Value Boolean DocumentAccessExpireDays Gets or sets the access expiry in days for this file. Declaration int DocumentAccessExpireDays { get; set; } Property Value Int32 EnableDocumentAccessExpire Gets or sets access expiry for this file. Declaration bool EnableDocumentAccessExpire { get; set; } Property Value Boolean EnableDocumentBrowserPublishingView Gets or sets whether document browser publishing view is enabled for this file. Declaration bool EnableDocumentBrowserPublishingView { get; set; } Property Value Boolean EnableGroupProtection Gets or sets whether group protection is enabled on this file. Declaration bool EnableGroupProtection { get; set; } Property Value Boolean EnableLicenseCacheExpire Gets or sets whether license cache expiry is enabled on this file. Declaration bool EnableLicenseCacheExpire { get; set; } Property Value Boolean GroupName Gets or sets the IRM group name of the file. Declaration string GroupName { get; set; } Property Value String IrmEnabled Gets or sets whether IRM is enabled on this file. Declaration bool IrmEnabled { get; set; } Property Value Boolean LicenseCacheExpireDays Gets or sets the license cache expiry in days for this file. Declaration int LicenseCacheExpireDays { get; set; } Property Value Int32 PolicyDescription Gets or sets the policy description for this file. Declaration string PolicyDescription { get; set; } Property Value String PolicyTitle Gets or sets the policy title for this file. Declaration string PolicyTitle { get; set; } Property Value String TemplateId Gets or sets the IRM template id for this file. Declaration string TemplateId { get; set; } Property Value String Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IInformationRightsManagementSettings.html": {
    "href": "api/PnP.Core.Model.SharePoint.IInformationRightsManagementSettings.html",
    "title": "Interface IInformationRightsManagementSettings | PnP Core SDK",
    "keywords": "Interface IInformationRightsManagementSettings Public interface to define a InformationRightsManagementSettings object Inherited Members IDataModel<IInformationRightsManagementSettings>.Requested IDataModel<IInformationRightsManagementSettings>.HasValue(String) IDataModel<IInformationRightsManagementSettings>.HasChanged(String) IDataModel<IInformationRightsManagementSettings>.IsPropertyAvailable(Expression<Func<IInformationRightsManagementSettings, Object>>) IDataModel<IInformationRightsManagementSettings>.ArePropertiesAvailable(Expression<Func<IInformationRightsManagementSettings, Object>>[]) IDataModel<IInformationRightsManagementSettings>.EnsureProperties(Expression<Func<IInformationRightsManagementSettings, Object>>[]) IDataModel<IInformationRightsManagementSettings>.EnsurePropertiesAsync(Expression<Func<IInformationRightsManagementSettings, Object>>[]) IDataModel<IInformationRightsManagementSettings>.ExecuteRequestAsync(ApiRequest) IDataModel<IInformationRightsManagementSettings>.ExecuteRequest(ApiRequest) IDataModel<IInformationRightsManagementSettings>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IInformationRightsManagementSettings>.ExecuteRequestBatch(ApiRequest) IDataModel<IInformationRightsManagementSettings>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IInformationRightsManagementSettings>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IInformationRightsManagementSettings>.GetBatchAsync(Batch, Expression<Func<IInformationRightsManagementSettings, Object>>[]) IDataModelGet<IInformationRightsManagementSettings>.GetAsync(Expression<Func<IInformationRightsManagementSettings, Object>>[]) IDataModelLoad<IInformationRightsManagementSettings>.LoadBatchAsync(Batch, Expression<Func<IInformationRightsManagementSettings, Object>>[]) IDataModelLoad<IInformationRightsManagementSettings>.LoadAsync(Expression<Func<IInformationRightsManagementSettings, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IInformationRightsManagementSettings : IDataModel<IInformationRightsManagementSettings>, IDataModelParent, IDataModelWithContext, ISupportModules<IInformationRightsManagementSettings>, IDataModelGet<IInformationRightsManagementSettings>, IDataModelLoad<IInformationRightsManagementSettings> Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object AllowPrint Allow viewers to print the IRM protected Office document Declaration bool AllowPrint { get; set; } Property Value Boolean AllowScript Allow viewers to run script and screen reader to function on the IRM protected Office document Declaration bool AllowScript { get; set; } Property Value Boolean AllowWriteCopy Allow viewers to write on a copy of the downloaded document Declaration bool AllowWriteCopy { get; set; } Property Value Boolean DisableDocumentBrowserView Prevent opening documents in the browser for this Document Library Declaration bool DisableDocumentBrowserView { get; set; } Property Value Boolean DocumentAccessExpireDays After download, document access rights will expire after these number of days (1-365) Declaration int DocumentAccessExpireDays { get; set; } Property Value Int32 DocumentLibraryProtectionExpireDate Stop restricting access to the library at Declaration DateTime DocumentLibraryProtectionExpireDate { get; set; } Property Value DateTime EnableDocumentAccessExpire Enable restricting access to the library at a given date ( DocumentLibraryProtectionExpireDate ) Declaration bool EnableDocumentAccessExpire { get; set; } Property Value Boolean EnableDocumentBrowserPublishingView Prevent opening documents in the browser for this Document Library Declaration bool EnableDocumentBrowserPublishingView { get; set; } Property Value Boolean EnableGroupProtection Allow group protection Declaration bool EnableGroupProtection { get; set; } Property Value Boolean EnableLicenseCacheExpire Enable document access rights expiration. Set the number of days via DocumentAccessExpireDays Declaration bool EnableLicenseCacheExpire { get; set; } Property Value Boolean GroupName Group name used for group protection Declaration string GroupName { get; set; } Property Value String LicenseCacheExpireDays Users must verify their credentials using this interval (days) Declaration int LicenseCacheExpireDays { get; set; } Property Value Int32 PolicyDescription Permission policy description: Declaration string PolicyDescription { get; set; } Property Value String PolicyTitle Permission policy title Declaration string PolicyTitle { get; set; } Property Value String TemplateId IRM template ID (not used?) Declaration string TemplateId { get; set; } Property Value String Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.ILikedByInformation.html": {
    "href": "api/PnP.Core.Model.SharePoint.ILikedByInformation.html",
    "title": "Interface ILikedByInformation | PnP Core SDK",
    "keywords": "Interface ILikedByInformation Defines if and who liked a list item. Inherited Members IDataModel<ILikedByInformation>.Requested IDataModel<ILikedByInformation>.HasValue(String) IDataModel<ILikedByInformation>.HasChanged(String) IDataModel<ILikedByInformation>.IsPropertyAvailable(Expression<Func<ILikedByInformation, Object>>) IDataModel<ILikedByInformation>.ArePropertiesAvailable(Expression<Func<ILikedByInformation, Object>>[]) IDataModel<ILikedByInformation>.EnsureProperties(Expression<Func<ILikedByInformation, Object>>[]) IDataModel<ILikedByInformation>.EnsurePropertiesAsync(Expression<Func<ILikedByInformation, Object>>[]) IDataModel<ILikedByInformation>.ExecuteRequestAsync(ApiRequest) IDataModel<ILikedByInformation>.ExecuteRequest(ApiRequest) IDataModel<ILikedByInformation>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ILikedByInformation>.ExecuteRequestBatch(ApiRequest) IDataModel<ILikedByInformation>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ILikedByInformation>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ILikedByInformation>.GetBatchAsync(Batch, Expression<Func<ILikedByInformation, Object>>[]) IDataModelGet<ILikedByInformation>.GetAsync(Expression<Func<ILikedByInformation, Object>>[]) IDataModelLoad<ILikedByInformation>.LoadBatchAsync(Batch, Expression<Func<ILikedByInformation, Object>>[]) IDataModelLoad<ILikedByInformation>.LoadAsync(Expression<Func<ILikedByInformation, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ILikedByInformation : IDataModel<ILikedByInformation>, IDataModelParent, IDataModelWithContext, ISupportModules<ILikedByInformation>, IDataModelGet<ILikedByInformation>, IDataModelLoad<ILikedByInformation> Properties IsLikedByUser Is this list item liked? Declaration bool IsLikedByUser { get; } Property Value Boolean LikeCount Number of likes this list item got. Declaration string LikeCount { get; } Property Value String LikedBy The people that liked this list item. Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration ICommentLikeUserEntityCollection LikedBy { get; } Property Value ICommentLikeUserEntityCollection Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IList.html": {
    "href": "api/PnP.Core.Model.SharePoint.IList.html",
    "title": "Interface IList | PnP Core SDK",
    "keywords": "Interface IList Public interface to define a List object of SharePoint Online Inherited Members IDataModel<IList>.Requested IDataModel<IList>.HasValue(String) IDataModel<IList>.HasChanged(String) IDataModel<IList>.IsPropertyAvailable(Expression<Func<IList, Object>>) IDataModel<IList>.ArePropertiesAvailable(Expression<Func<IList, Object>>[]) IDataModel<IList>.EnsureProperties(Expression<Func<IList, Object>>[]) IDataModel<IList>.EnsurePropertiesAsync(Expression<Func<IList, Object>>[]) IDataModel<IList>.ExecuteRequestAsync(ApiRequest) IDataModel<IList>.ExecuteRequest(ApiRequest) IDataModel<IList>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IList>.ExecuteRequestBatch(ApiRequest) IDataModel<IList>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IList>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IList>.GetBatchAsync(Batch, Expression<Func<IList, Object>>[]) IDataModelGet<IList>.GetAsync(Expression<Func<IList, Object>>[]) IDataModelLoad<IList>.LoadBatchAsync(Batch, Expression<Func<IList, Object>>[]) IDataModelLoad<IList>.LoadAsync(Expression<Func<IList, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() IDataModelSupportingGetChanges.GetChangesAsync(ChangeQueryOptions) IDataModelSupportingGetChanges.GetChanges(ChangeQueryOptions) IDataModelSupportingGetChanges.GetChangesBatchAsync(Batch, ChangeQueryOptions) IDataModelSupportingGetChanges.GetChangesBatch(Batch, ChangeQueryOptions) IDataModelSupportingGetChanges.GetChangesBatchAsync(ChangeQueryOptions) IDataModelSupportingGetChanges.GetChangesBatch(ChangeQueryOptions) ISecurableObject.RoleAssignments ISecurableObject.HasUniqueRoleAssignments ISecurableObject.BreakRoleInheritance(Boolean, Boolean) ISecurableObject.BreakRoleInheritanceAsync(Boolean, Boolean) ISecurableObject.BreakRoleInheritanceBatch(Batch, Boolean, Boolean) ISecurableObject.BreakRoleInheritanceBatchAsync(Batch, Boolean, Boolean) ISecurableObject.BreakRoleInheritanceBatch(Boolean, Boolean) ISecurableObject.BreakRoleInheritanceBatchAsync(Boolean, Boolean) ISecurableObject.ResetRoleInheritance() ISecurableObject.ResetRoleInheritanceAsync() ISecurableObject.ResetRoleInheritanceBatch(Batch) ISecurableObject.ResetRoleInheritanceBatchAsync(Batch) ISecurableObject.ResetRoleInheritanceBatch() ISecurableObject.ResetRoleInheritanceBatchAsync() ISecurableObject.GetRoleDefinitions(Int32) ISecurableObject.GetRoleDefinitionsAsync(Int32) ISecurableObject.AddRoleDefinitions(Int32, String[]) ISecurableObject.AddRoleDefinitionsAsync(Int32, String[]) ISecurableObject.AddRoleDefinition(Int32, IRoleDefinition) ISecurableObject.AddRoleDefinitionAsync(Int32, IRoleDefinition) ISecurableObject.AddRoleDefinitionBatch(Batch, Int32, IRoleDefinition) ISecurableObject.AddRoleDefinitionBatchAsync(Batch, Int32, IRoleDefinition) ISecurableObject.AddRoleDefinitionBatch(Int32, IRoleDefinition) ISecurableObject.AddRoleDefinitionBatchAsync(Int32, IRoleDefinition) ISecurableObject.RemoveRoleDefinitions(Int32, String[]) ISecurableObject.RemoveRoleDefinitionsAsync(Int32, String[]) ISecurableObject.RemoveRoleDefinition(Int32, IRoleDefinition) ISecurableObject.RemoveRoleDefinitionAsync(Int32, IRoleDefinition) ISecurableObject.RemoveRoleDefinitionBatch(Int32, IRoleDefinition) ISecurableObject.RemoveRoleDefinitionBatchAsync(Int32, IRoleDefinition) ISecurableObject.RemoveRoleDefinitionBatch(Batch, Int32, IRoleDefinition) ISecurableObject.RemoveRoleDefinitionBatchAsync(Batch, Int32, IRoleDefinition) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IList : IDataModel<IList>, IDataModelParent, IDataModelWithContext, ISupportModules<IList>, IDataModelGet<IList>, IDataModelLoad<IList>, IDataModelUpdate, IDataModelDelete, IDataModelSupportingGetChanges, ISecurableObject, IQueryableDataModel Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object ContentTypes Collection of content types for this list Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IContentTypeCollection ContentTypes { get; } Property Value IContentTypeCollection ContentTypesEnabled Gets or sets whether content types are enabled Declaration bool ContentTypesEnabled { get; set; } Property Value Boolean DefaultDisplayFormUrl Defines a value that specifies the location of the default display form for the list. Declaration string DefaultDisplayFormUrl { get; set; } Property Value String DefaultEditFormUrl Defines a value that specifies the URL of the edit form to use for list items in the list. Declaration string DefaultEditFormUrl { get; set; } Property Value String DefaultNewFormUrl Defines a value that specifies the location of the default new form for the list. Declaration string DefaultNewFormUrl { get; set; } Property Value String Description Gets or sets the description of the list Declaration string Description { get; set; } Property Value String Direction Defines a value that specifies the reading order of the list. Declaration ListReadingDirection Direction { get; set; } Property Value ListReadingDirection DocumentTemplate Gets or sets a value that specifies the identifier of the document template for the new list. SP REST property name: DocumentTemplateUrl. Declaration string DocumentTemplate { get; set; } Property Value String DraftVersionVisibility Gets or sets the DraftVersionVisibility for the list Declaration int DraftVersionVisibility { get; set; } Property Value Int32 EnableAttachments Gets or sets whether attachments are enabled. Defaults to true. Declaration bool EnableAttachments { get; set; } Property Value Boolean EnableFolderCreation Gets or sets whether folder is enabled. Defaults to true. Declaration bool EnableFolderCreation { get; set; } Property Value Boolean EnableMinorVersions Gets or sets whether minor verisioning is enabled on the list Declaration bool EnableMinorVersions { get; set; } Property Value Boolean EnableModeration Gets or sets whether moderation/content approval is enabled on the list Declaration bool EnableModeration { get; set; } Property Value Boolean EnableVersioning Gets or sets whether verisioning is enabled on the list Declaration bool EnableVersioning { get; set; } Property Value Boolean FieldDefaults Defines a list of default values for the Fields of the List Instance Declaration Dictionary<string, string> FieldDefaults { get; } Property Value Dictionary < String , String > Fields Collection of fields for this list Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IFieldCollection Fields { get; } Property Value IFieldCollection ForceCheckout Gets or sets whether to force checkout of documents in the library Declaration bool ForceCheckout { get; set; } Property Value Boolean Hidden Gets or sets whether to hide the list Declaration bool Hidden { get; set; } Property Value Boolean Id The Unique ID of the List object Declaration Guid Id { get; } Property Value Guid ImageUrl Defines a value that specifies the URI for the icon of the list, optional attribute. Declaration string ImageUrl { get; set; } Property Value String InformationRightsManagementSettings Load the IRM settings of this list Declaration IInformationRightsManagementSettings InformationRightsManagementSettings { get; } Property Value IInformationRightsManagementSettings IrmEnabled Defines if IRM is enabled for this list. Declaration bool IrmEnabled { get; set; } Property Value Boolean IrmExpire Defines if IRM Expire property, optional attribute. Declaration bool IrmExpire { get; set; } Property Value Boolean IrmReject Defines the IRM Reject property, optional attribute. Declaration bool IrmReject { get; set; } Property Value Boolean IsApplicationList Defines a value that specifies a flag that a client application can use to determine whether to display the list, optional attribute. Declaration bool IsApplicationList { get; set; } Property Value Boolean IsCatalog Gets a bool value that indicates whether the list is a gallery, such list templates, Web Parts, or Master Pages. Declaration bool IsCatalog { get; } Property Value Boolean IsDefaultDocumentLibrary Is this library the default document library of this site Declaration bool IsDefaultDocumentLibrary { get; } Property Value Boolean IsPrivate Gets a bool value that indicates whether the document library is a private list with restricted permissions, such as for Solutions Declaration bool IsPrivate { get; } Property Value Boolean IsSiteAssetsLibrary Is this library the site's site asset library Declaration bool IsSiteAssetsLibrary { get; } Property Value Boolean IsSystemList Specifies whether the list is system list that does not contain end user data and created by system account. Declaration bool IsSystemList { get; } Property Value Boolean ItemCount Number of items in the library Declaration int ItemCount { get; } Property Value Int32 Items Collection of list items in the current List object Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IListItemCollection Items { get; } Property Value IListItemCollection ListExperience Defines the current list UI/UX experience (valid for SPO only). SP REST property name: ListExperienceOptions. Declaration ListExperience ListExperience { get; set; } Property Value ListExperience ListItemEntityTypeFullName The entity needed when updating list items Declaration string ListItemEntityTypeFullName { get; } Property Value String MaxVersionLimit Gets or sets the MinorVersionLimit for verisioning, just in case it is enabled on the list SP REST property name: MajorVersionLimit. Declaration int MaxVersionLimit { get; set; } Property Value Int32 MinorVersionLimit Gets or sets the MinorVersionLimit for versioning, just in case it is enabled on the list SP REST property name: MajorWithMinorVersionsLimit. Declaration int MinorVersionLimit { get; set; } Property Value Int32 NoCrawl Defines if the current list or library has to be included in crawling, optional attribute. Declaration bool NoCrawl { get; set; } Property Value Boolean OnQuickLaunch Gets or sets a value that specifies whether the new list is displayed on the Quick Launch of the site. Declaration bool OnQuickLaunch { get; set; } Property Value Boolean ReadSecurity Defines the Read Security property, optional attribute. Declaration int ReadSecurity { get; set; } Property Value Int32 RootFolder Gets the root folder of the list. Declaration IFolder RootFolder { get; } Property Value IFolder TemplateFeatureId Gets or sets the Guid for TemplateFeature Declaration Guid TemplateFeatureId { get; } Property Value Guid TemplateType Gets or sets a value that specifies the list server template of the new list. https://msdn.microsoft.com/en-us/library/office/microsoft.sharepoint.client.listtemplatetype.aspx SP REST property name: BaseTemplate Declaration ListTemplateType TemplateType { get; } Property Value ListTemplateType Title Gets or sets the list title Declaration string Title { get; set; } Property Value String ValidationFormula Defines a value that specifies the data validation criteria for a list item, optional attribute. Declaration string ValidationFormula { get; set; } Property Value String ValidationMessage Defines a value that specifies the error message returned when data validation fails for a list item, optional attribute. Declaration string ValidationMessage { get; set; } Property Value String Views Get a list of the views Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IViewCollection Views { get; } Property Value IViewCollection Webhooks Collection of list webhooks Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IListSubscriptionCollection Webhooks { get; } Property Value IListSubscriptionCollection WriteSecurity Defines the Write Security property, optional attribute. Declaration int WriteSecurity { get; set; } Property Value Int32 Methods AddListFolder(String, String, String) Adds a folder Declaration IListItem AddListFolder(string path, string parentFolder = null, string contentTypeId = \"0x0120\") Parameters String path String parentFolder String contentTypeId Returns IListItem AddListFolderAsync(String, String, String) Adds a folder Declaration Task<IListItem> AddListFolderAsync(string path, string parentFolder = null, string contentTypeId = \"0x0120\") Parameters String path String parentFolder String contentTypeId Returns Task < IListItem > AddListFolderBatch(Batch, String, String, String) Adds a folder Declaration IListItem AddListFolderBatch(Batch batch, string path, string parentFolder = null, string contentTypeId = \"0x0120\") Parameters Batch batch Batch to add this request to String path String parentFolder String contentTypeId Returns IListItem AddListFolderBatch(String, String, String) Adds a folder Declaration IListItem AddListFolderBatch(string path, string parentFolder = null, string contentTypeId = \"0x0120\") Parameters String path String parentFolder String contentTypeId Returns IListItem AddListFolderBatchAsync(Batch, String, String, String) Adds a folder Declaration Task<IListItem> AddListFolderBatchAsync(Batch batch, string path, string parentFolder = null, string contentTypeId = \"0x0120\") Parameters Batch batch Batch to add this request to String path String parentFolder String contentTypeId Returns Task < IListItem > AddListFolderBatchAsync(String, String, String) Adds a folder Declaration Task<IListItem> AddListFolderBatchAsync(string path, string parentFolder = null, string contentTypeId = \"0x0120\") Parameters String path String parentFolder String contentTypeId Returns Task < IListItem > ClassifyAndExtract(Boolean, Int32) Classifies and extracts all unprocessed files in the list Declaration List<ISyntexClassifyAndExtractResult> ClassifyAndExtract(bool force = false, int pageSize = 500) Parameters Boolean force Also classify and extract files that were processed before Int32 pageSize Page size used when loading the files in this library Returns PnP.Core.Model.SharePoint.List < ISyntexClassifyAndExtractResult > Information about the created classify and extract requests ClassifyAndExtractAsync(Boolean, Int32) Classifies and extracts all unprocessed files in the list Declaration Task<List<ISyntexClassifyAndExtractResult>> ClassifyAndExtractAsync(bool force = false, int pageSize = 500) Parameters Boolean force Also classify and extract files that were processed before Int32 pageSize Page size used when loading the files in this library Returns Task < PnP.Core.Model.SharePoint.List < ISyntexClassifyAndExtractResult >> Information about the created classify and extract requests ClassifyAndExtractOffPeak() Classifies and extracts all unprocessed files in the list via the Syntex off-peak queue Declaration ISyntexClassifyAndExtractResult ClassifyAndExtractOffPeak() Returns ISyntexClassifyAndExtractResult Information about the created classify and extract requests ClassifyAndExtractOffPeakAsync() Classifies and extracts all unprocessed files in the list via the Syntex off-peak queue Declaration Task<ISyntexClassifyAndExtractResult> ClassifyAndExtractOffPeakAsync() Returns Task < ISyntexClassifyAndExtractResult > Information about the created classify and extract requests GetComplianceTag() Retrieves the compliance tag / retention label for this list Declaration IComplianceTag GetComplianceTag() Returns IComplianceTag GetComplianceTagAsync() Retrieves the compliance tag / retention label for this list Declaration Task<IComplianceTag> GetComplianceTagAsync() Returns Task < IComplianceTag > GetComplianceTagBatch() Retrieves the compliance tag / retention label for this list Declaration IBatchSingleResult<IComplianceTag> GetComplianceTagBatch() Returns IBatchSingleResult < IComplianceTag > GetComplianceTagBatch(Batch) Retrieves the compliance tag / retention label for this list Declaration IBatchSingleResult<IComplianceTag> GetComplianceTagBatch(Batch batch) Parameters Batch batch Batch to add this request to Returns IBatchSingleResult < IComplianceTag > GetComplianceTagBatchAsync() Retrieves the compliance tag / retention label for this list Declaration Task<IBatchSingleResult<IComplianceTag>> GetComplianceTagBatchAsync() Returns Task < IBatchSingleResult < IComplianceTag >> GetComplianceTagBatchAsync(Batch) Retrieves the compliance tag / retention label for this list Declaration Task<IBatchSingleResult<IComplianceTag>> GetComplianceTagBatchAsync(Batch batch) Parameters Batch batch Batch to add this request to Returns Task < IBatchSingleResult < IComplianceTag >> LoadItemsByCamlQuery(CamlQueryOptions, Expression<Func<IListItem, Object>>[]) Loads list items based up on a CAML query Declaration void LoadItemsByCamlQuery(CamlQueryOptions queryOptions, params Expression<Func<IListItem, object>>[] selectors) Parameters CamlQueryOptions queryOptions CamlQueryOptions defining the query to execute Expression < Func < IListItem , Object >>[] selectors The expressions declaring the fields to select LoadItemsByCamlQuery(String, Expression<Func<IListItem, Object>>[]) Loads list items based up on a CAML query Declaration void LoadItemsByCamlQuery(string query, params Expression<Func<IListItem, object>>[] selectors) Parameters String query query to execute Expression < Func < IListItem , Object >>[] selectors The expressions declaring the fields to select LoadItemsByCamlQueryAsync(CamlQueryOptions, Expression<Func<IListItem, Object>>[]) Loads list items based up on a CAML query Declaration Task LoadItemsByCamlQueryAsync(CamlQueryOptions queryOptions, params Expression<Func<IListItem, object>>[] selectors) Parameters CamlQueryOptions queryOptions CamlQueryOptions defining the query to execute Expression < Func < IListItem , Object >>[] selectors The expressions declaring the fields to select Returns Task LoadItemsByCamlQueryAsync(String, Expression<Func<IListItem, Object>>[]) Loads list items based up on a CAML query Declaration Task LoadItemsByCamlQueryAsync(string query, params Expression<Func<IListItem, object>>[] selectors) Parameters String query query to execute Expression < Func < IListItem , Object >>[] selectors The expressions declaring the fields to select Returns Task LoadItemsByCamlQueryBatch(CamlQueryOptions, Expression<Func<IListItem, Object>>[]) Loads list items based up on a CAML query Declaration void LoadItemsByCamlQueryBatch(CamlQueryOptions queryOptions, params Expression<Func<IListItem, object>>[] selectors) Parameters CamlQueryOptions queryOptions CamlQueryOptions defining the query to execute Expression < Func < IListItem , Object >>[] selectors The expressions declaring the fields to select LoadItemsByCamlQueryBatch(Batch, CamlQueryOptions, Expression<Func<IListItem, Object>>[]) Loads list items based up on a CAML query Declaration void LoadItemsByCamlQueryBatch(Batch batch, CamlQueryOptions queryOptions, params Expression<Func<IListItem, object>>[] selectors) Parameters Batch batch Batch to add this request to CamlQueryOptions queryOptions CamlQueryOptions defining the query to execute Expression < Func < IListItem , Object >>[] selectors The expressions declaring the fields to select LoadItemsByCamlQueryBatch(Batch, String, Expression<Func<IListItem, Object>>[]) Loads list items based up on a CAML query Declaration void LoadItemsByCamlQueryBatch(Batch batch, string query, params Expression<Func<IListItem, object>>[] selectors) Parameters Batch batch Batch to add this request to String query query to execute Expression < Func < IListItem , Object >>[] selectors The expressions declaring the fields to select LoadItemsByCamlQueryBatch(String, Expression<Func<IListItem, Object>>[]) Loads list items based up on a CAML query Declaration void LoadItemsByCamlQueryBatch(string query, params Expression<Func<IListItem, object>>[] selectors) Parameters String query query to execute Expression < Func < IListItem , Object >>[] selectors The expressions declaring the fields to select LoadItemsByCamlQueryBatchAsync(CamlQueryOptions, Expression<Func<IListItem, Object>>[]) Loads list items based up on a CAML query Declaration Task LoadItemsByCamlQueryBatchAsync(CamlQueryOptions queryOptions, params Expression<Func<IListItem, object>>[] selectors) Parameters CamlQueryOptions queryOptions CamlQueryOptions defining the query to execute Expression < Func < IListItem , Object >>[] selectors The expressions declaring the fields to select Returns Task LoadItemsByCamlQueryBatchAsync(Batch, CamlQueryOptions, Expression<Func<IListItem, Object>>[]) Loads list items based up on a CAML query Declaration Task LoadItemsByCamlQueryBatchAsync(Batch batch, CamlQueryOptions queryOptions, params Expression<Func<IListItem, object>>[] selectors) Parameters Batch batch Batch to add this request to CamlQueryOptions queryOptions CamlQueryOptions defining the query to execute Expression < Func < IListItem , Object >>[] selectors The expressions declaring the fields to select Returns Task LoadItemsByCamlQueryBatchAsync(Batch, String, Expression<Func<IListItem, Object>>[]) Loads list items based up on a CAML query Declaration Task LoadItemsByCamlQueryBatchAsync(Batch batch, string query, params Expression<Func<IListItem, object>>[] selectors) Parameters Batch batch Batch to add this request to String query query to execute Expression < Func < IListItem , Object >>[] selectors The expressions declaring the fields to select Returns Task LoadItemsByCamlQueryBatchAsync(String, Expression<Func<IListItem, Object>>[]) Loads list items based up on a CAML query Declaration Task LoadItemsByCamlQueryBatchAsync(string query, params Expression<Func<IListItem, object>>[] selectors) Parameters String query query to execute Expression < Func < IListItem , Object >>[] selectors The expressions declaring the fields to select Returns Task LoadListDataAsStream(RenderListDataOptions) Loads list items based up on a CAML query and the RenderListDataAsStream API Declaration Dictionary<string, object> LoadListDataAsStream(RenderListDataOptions renderOptions) Parameters RenderListDataOptions renderOptions RenderListDataOptions defining the query to execute Returns Dictionary < String , Object > LoadListDataAsStreamAsync(RenderListDataOptions) Loads list items based up on a CAML query and the RenderListDataAsStream API Declaration Task<Dictionary<string, object>> LoadListDataAsStreamAsync(RenderListDataOptions renderOptions) Parameters RenderListDataOptions renderOptions RenderListDataOptions defining the query to execute Returns Task < Dictionary < String , Object >> LoadListDataAsStreamBatch(RenderListDataOptions) Loads list items based up on a CAML query and the RenderListDataAsStream API Declaration IBatchSingleResult<Dictionary<string, object>> LoadListDataAsStreamBatch(RenderListDataOptions renderOptions) Parameters RenderListDataOptions renderOptions RenderListDataOptions defining the query to execute Returns IBatchSingleResult < Dictionary < String , Object >> LoadListDataAsStreamBatch(Batch, RenderListDataOptions) Loads list items based up on a CAML query and the RenderListDataAsStream API Declaration IBatchSingleResult<Dictionary<string, object>> LoadListDataAsStreamBatch(Batch batch, RenderListDataOptions renderOptions) Parameters Batch batch Batch to add this request to RenderListDataOptions renderOptions RenderListDataOptions defining the query to execute Returns IBatchSingleResult < Dictionary < String , Object >> LoadListDataAsStreamBatchAsync(RenderListDataOptions) Loads list items based up on a CAML query and the RenderListDataAsStream API Declaration Task<IBatchSingleResult<Dictionary<string, object>>> LoadListDataAsStreamBatchAsync(RenderListDataOptions renderOptions) Parameters RenderListDataOptions renderOptions RenderListDataOptions defining the query to execute Returns Task < IBatchSingleResult < Dictionary < String , Object >>> LoadListDataAsStreamBatchAsync(Batch, RenderListDataOptions) Loads list items based up on a CAML query and the RenderListDataAsStream API Declaration Task<IBatchSingleResult<Dictionary<string, object>>> LoadListDataAsStreamBatchAsync(Batch batch, RenderListDataOptions renderOptions) Parameters Batch batch Batch to add this request to RenderListDataOptions renderOptions RenderListDataOptions defining the query to execute Returns Task < IBatchSingleResult < Dictionary < String , Object >>> Recycle() Moves this list into the site collection recycle bin, returns the recyle bin item id Declaration Guid Recycle() Returns Guid Id of the recycle bin item RecycleAsync() Moves this list into the site collection recycle bin, returns the recyle bin item id Declaration Task<Guid> RecycleAsync() Returns Task < Guid > Id of the recycle bin item RecycleBatch() Moves this list into the site collection recycle bin, returns the recyle bin item id Declaration IBatchSingleResult<BatchResultValue<Guid>> RecycleBatch() Returns IBatchSingleResult < BatchResultValue < Guid >> Id of the recycle bin item RecycleBatch(Batch) Moves this list into the site collection recycle bin, returns the recyle bin item id Declaration IBatchSingleResult<BatchResultValue<Guid>> RecycleBatch(Batch batch) Parameters Batch batch Batch to add the request to Returns IBatchSingleResult < BatchResultValue < Guid >> Id of the recycle bin item RecycleBatchAsync() Moves this list into the site collection recycle bin, returns the recyle bin item id Declaration Task<IBatchSingleResult<BatchResultValue<Guid>>> RecycleBatchAsync() Returns Task < IBatchSingleResult < BatchResultValue < Guid >>> Id of the recycle bin item RecycleBatchAsync(Batch) Moves this list into the site collection recycle bin, returns the recyle bin item id Declaration Task<IBatchSingleResult<BatchResultValue<Guid>>> RecycleBatchAsync(Batch batch) Parameters Batch batch Batch to add the request to Returns Task < IBatchSingleResult < BatchResultValue < Guid >>> Id of the recycle bin item SetComplianceTag(String, Boolean, Boolean, Boolean) Sets a compliance tag / retention label for this list Declaration void SetComplianceTag(string complianceTagValue, bool blockDelete, bool blockEdit, bool syncToItems) Parameters String complianceTagValue Compliance tag Boolean blockDelete Prevent deletion of the list (Hold) Boolean blockEdit Prevent editing of the list (Record) Boolean syncToItems If true the compliance tag is synced to the list items in this list SetComplianceTagAsync(String, Boolean, Boolean, Boolean) Sets a compliance tag / retention label for this list Declaration Task SetComplianceTagAsync(string complianceTagValue, bool blockDelete, bool blockEdit, bool syncToItems) Parameters String complianceTagValue Compliance tag Boolean blockDelete Prevent deletion of the list (Hold) Boolean blockEdit Prevent editing of the list (Record) Boolean syncToItems If true the compliance tag is synced to the list items in this list Returns Task SetComplianceTagBatch(Batch, String, Boolean, Boolean, Boolean) Sets a compliance tag / retention label for this list Declaration void SetComplianceTagBatch(Batch batch, string complianceTagValue, bool blockDelete, bool blockEdit, bool syncToItems) Parameters Batch batch Batch to add this request to String complianceTagValue Compliance tag Boolean blockDelete Prevent deletion of the list (Hold) Boolean blockEdit Prevent editing of the list (Record) Boolean syncToItems If true the compliance tag is synced to the list items in this list SetComplianceTagBatch(String, Boolean, Boolean, Boolean) Sets a compliance tag / retention label for this list Declaration void SetComplianceTagBatch(string complianceTagValue, bool blockDelete, bool blockEdit, bool syncToItems) Parameters String complianceTagValue Compliance tag Boolean blockDelete Prevent deletion of the list (Hold) Boolean blockEdit Prevent editing of the list (Record) Boolean syncToItems If true the compliance tag is synced to the list items in this list SetComplianceTagBatchAsync(Batch, String, Boolean, Boolean, Boolean) Sets a compliance tag / retention label for this list Declaration Task SetComplianceTagBatchAsync(Batch batch, string complianceTagValue, bool blockDelete, bool blockEdit, bool syncToItems) Parameters Batch batch Batch to add this request to String complianceTagValue Compliance tag Boolean blockDelete Prevent deletion of the list (Hold) Boolean blockEdit Prevent editing of the list (Record) Boolean syncToItems If true the compliance tag is synced to the list items in this list Returns Task SetComplianceTagBatchAsync(String, Boolean, Boolean, Boolean) Sets a compliance tag / retention label for this list Declaration Task SetComplianceTagBatchAsync(string complianceTagValue, bool blockDelete, bool blockEdit, bool syncToItems) Parameters String complianceTagValue Compliance tag Boolean blockDelete Prevent deletion of the list (Hold) Boolean blockEdit Prevent editing of the list (Record) Boolean syncToItems If true the compliance tag is synced to the list items in this list Returns Task Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IListCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IListCollection.html",
    "title": "Interface IListCollection | PnP Core SDK",
    "keywords": "Interface IListCollection Public interface to define a collection of List objects of SharePoint Online Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<IList>.LoadAsync(Expression<Func<IList, Object>>[]) IDataModelCollectionLoad<IList>.LoadBatchAsync(Batch, Expression<Func<IList, Object>>[]) IDataModelCollectionDeleteByGuidId.DeleteById(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdAsync(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatch(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatchAsync(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatch(Batch, Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatchAsync(Batch, Guid) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IListCollection : IQueryable<IList>, IAsyncEnumerable<IList>, IDataModelCollection<IList>, IEnumerable<IList>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<IList>, IDataModelCollectionDeleteByGuidId, ISupportModules<IListCollection> Methods Add(String, ListTemplateType) Adds a new list Declaration IList Add(string title, ListTemplateType templateType) Parameters String title Title of the list ListTemplateType templateType Template type Returns IList Newly added list AddAsync(String, ListTemplateType) Adds a new list Declaration Task<IList> AddAsync(string title, ListTemplateType templateType) Parameters String title Title of the list ListTemplateType templateType Template type Returns Task < IList > Newly added list AddBatch(Batch, String, ListTemplateType) Adds a new list Declaration IList AddBatch(Batch batch, string title, ListTemplateType templateType) Parameters Batch batch Batch to use String title Title of the list ListTemplateType templateType Template type Returns IList Newly added list AddBatch(String, ListTemplateType) Adds a new list Declaration IList AddBatch(string title, ListTemplateType templateType) Parameters String title Title of the list ListTemplateType templateType Template type Returns IList Newly added list AddBatchAsync(Batch, String, ListTemplateType) Adds a new list Declaration Task<IList> AddBatchAsync(Batch batch, string title, ListTemplateType templateType) Parameters Batch batch Batch to use String title Title of the list ListTemplateType templateType Template type Returns Task < IList > Newly added list AddBatchAsync(String, ListTemplateType) Adds a new list Declaration Task<IList> AddBatchAsync(string title, ListTemplateType templateType) Parameters String title Title of the list ListTemplateType templateType Template type Returns Task < IList > Newly added list EnsureSiteAssetsLibrary(Expression<Func<IList, Object>>[]) Ensures there's an Asset Library in the site, if not present it will be created Declaration IList EnsureSiteAssetsLibrary(params Expression<Func<IList, object>>[] selectors) Parameters Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns IList The asset library EnsureSiteAssetsLibraryAsync(Expression<Func<IList, Object>>[]) Ensures there's an Asset Library in the site, if not present it will be created Declaration Task<IList> EnsureSiteAssetsLibraryAsync(params Expression<Func<IList, object>>[] selectors) Parameters Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns Task < IList > The asset library EnsureSiteAssetsLibraryBatch(Expression<Func<IList, Object>>[]) Ensures there's an Asset Library in the site, if not present it will be created Declaration IList EnsureSiteAssetsLibraryBatch(params Expression<Func<IList, object>>[] selectors) Parameters Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns IList The asset library EnsureSiteAssetsLibraryBatch(Batch, Expression<Func<IList, Object>>[]) Ensures there's an Asset Library in the site, if not present it will be created Declaration IList EnsureSiteAssetsLibraryBatch(Batch batch, params Expression<Func<IList, object>>[] selectors) Parameters Batch batch Batch to add this request to Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns IList The asset library EnsureSiteAssetsLibraryBatchAsync(Expression<Func<IList, Object>>[]) Ensures there's an Asset Library in the site, if not present it will be created Declaration Task<IList> EnsureSiteAssetsLibraryBatchAsync(params Expression<Func<IList, object>>[] selectors) Parameters Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns Task < IList > The asset library EnsureSiteAssetsLibraryBatchAsync(Batch, Expression<Func<IList, Object>>[]) Ensures there's an Asset Library in the site, if not present it will be created Declaration Task<IList> EnsureSiteAssetsLibraryBatchAsync(Batch batch, params Expression<Func<IList, object>>[] selectors) Parameters Batch batch Batch to add this request to Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns Task < IList > The asset library GetById(Guid, Expression<Func<IList, Object>>[]) Method to select a list by id Declaration IList GetById(Guid id, params Expression<Func<IList, object>>[] selectors) Parameters Guid id The id to search for Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns IList The resulting list instance, if any GetByIdAsync(Guid, Expression<Func<IList, Object>>[]) Method to select a list by id Declaration Task<IList> GetByIdAsync(Guid id, params Expression<Func<IList, object>>[] selectors) Parameters Guid id The id to search for Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns Task < IList > The resulting list instance, if any GetByIdBatch(Guid, Expression<Func<IList, Object>>[]) Method to select a list by id Declaration IList GetByIdBatch(Guid id, params Expression<Func<IList, object>>[] selectors) Parameters Guid id The id to search for Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns IList The resulting list instance, if any GetByIdBatch(Batch, Guid, Expression<Func<IList, Object>>[]) Method to select a list by id Declaration IList GetByIdBatch(Batch batch, Guid id, params Expression<Func<IList, object>>[] selectors) Parameters Batch batch Batch to add this request to Guid id The id to search for Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns IList The resulting list instance, if any GetByIdBatchAsync(Guid, Expression<Func<IList, Object>>[]) Method to select a list by id Declaration Task<IList> GetByIdBatchAsync(Guid id, params Expression<Func<IList, object>>[] selectors) Parameters Guid id The id to search for Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns Task < IList > The resulting list instance, if any GetByIdBatchAsync(Batch, Guid, Expression<Func<IList, Object>>[]) Method to select a list by id Declaration Task<IList> GetByIdBatchAsync(Batch batch, Guid id, params Expression<Func<IList, object>>[] selectors) Parameters Batch batch Batch to add this request to Guid id The id to search for Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns Task < IList > The resulting list instance, if any GetByServerRelativeUrl(String, Expression<Func<IList, Object>>[]) Method to select a list by server relative url Declaration IList GetByServerRelativeUrl(string serverRelativeUrl, params Expression<Func<IList, object>>[] selectors) Parameters String serverRelativeUrl The server relative url of the list to return Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns IList The resulting list instance, if any GetByServerRelativeUrlAsync(String, Expression<Func<IList, Object>>[]) Method to select a list by server relative url Declaration Task<IList> GetByServerRelativeUrlAsync(string serverRelativeUrl, params Expression<Func<IList, object>>[] selectors) Parameters String serverRelativeUrl The server relative url of the list to return Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns Task < IList > The resulting list instance, if any GetByServerRelativeUrlBatch(Batch, String, Expression<Func<IList, Object>>[]) Method to select a list by server relative url Declaration IList GetByServerRelativeUrlBatch(Batch batch, string serverRelativeUrl, params Expression<Func<IList, object>>[] selectors) Parameters Batch batch Batch to add this request to String serverRelativeUrl The server relative url of the list to return Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns IList The resulting list instance, if any GetByServerRelativeUrlBatch(String, Expression<Func<IList, Object>>[]) Method to select a list by server relative url Declaration IList GetByServerRelativeUrlBatch(string serverRelativeUrl, params Expression<Func<IList, object>>[] selectors) Parameters String serverRelativeUrl The server relative url of the list to return Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns IList The resulting list instance, if any GetByServerRelativeUrlBatchAsync(Batch, String, Expression<Func<IList, Object>>[]) Method to select a list by server relative url Declaration Task<IList> GetByServerRelativeUrlBatchAsync(Batch batch, string serverRelativeUrl, params Expression<Func<IList, object>>[] selectors) Parameters Batch batch Batch to add this request to String serverRelativeUrl The server relative url of the list to return Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns Task < IList > The resulting list instance, if any GetByServerRelativeUrlBatchAsync(String, Expression<Func<IList, Object>>[]) Method to select a list by server relative url Declaration Task<IList> GetByServerRelativeUrlBatchAsync(string serverRelativeUrl, params Expression<Func<IList, object>>[] selectors) Parameters String serverRelativeUrl The server relative url of the list to return Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns Task < IList > The resulting list instance, if any GetByTitle(String, Expression<Func<IList, Object>>[]) Select a list by title Declaration IList GetByTitle(string title, params Expression<Func<IList, object>>[] selectors) Parameters String title The title to search for Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns IList The resulting list instance, if any GetByTitleAsync(String, Expression<Func<IList, Object>>[]) Select a list by title Declaration Task<IList> GetByTitleAsync(string title, params Expression<Func<IList, object>>[] selectors) Parameters String title The title to search for Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns Task < IList > The resulting list instance, if any GetByTitleBatch(Batch, String, Expression<Func<IList, Object>>[]) Select a list by title Declaration IList GetByTitleBatch(Batch batch, string title, params Expression<Func<IList, object>>[] selectors) Parameters Batch batch Batch to add this request to String title The title to search for Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns IList The resulting list instance, if any GetByTitleBatch(String, Expression<Func<IList, Object>>[]) Select a list by title Declaration IList GetByTitleBatch(string title, params Expression<Func<IList, object>>[] selectors) Parameters String title The title to search for Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns IList The resulting list instance, if any GetByTitleBatchAsync(Batch, String, Expression<Func<IList, Object>>[]) Select a list by title Declaration Task<IList> GetByTitleBatchAsync(Batch batch, string title, params Expression<Func<IList, object>>[] selectors) Parameters Batch batch Batch to add this request to String title The title to search for Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns Task < IList > The resulting list instance, if any GetByTitleBatchAsync(String, Expression<Func<IList, Object>>[]) Select a list by title Declaration Task<IList> GetByTitleBatchAsync(string title, params Expression<Func<IList, object>>[] selectors) Parameters String title The title to search for Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns Task < IList > The resulting list instance, if any Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.IListItem.html": {
    "href": "api/PnP.Core.Model.SharePoint.IListItem.html",
    "title": "Interface IListItem | PnP Core SDK",
    "keywords": "Interface IListItem Public interface to define a SharePoint Online list item Inherited Members IDataModel<IListItem>.Requested IDataModel<IListItem>.HasValue(String) IDataModel<IListItem>.HasChanged(String) IDataModel<IListItem>.IsPropertyAvailable(Expression<Func<IListItem, Object>>) IDataModel<IListItem>.ArePropertiesAvailable(Expression<Func<IListItem, Object>>[]) IDataModel<IListItem>.EnsureProperties(Expression<Func<IListItem, Object>>[]) IDataModel<IListItem>.EnsurePropertiesAsync(Expression<Func<IListItem, Object>>[]) IDataModel<IListItem>.ExecuteRequestAsync(ApiRequest) IDataModel<IListItem>.ExecuteRequest(ApiRequest) IDataModel<IListItem>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IListItem>.ExecuteRequestBatch(ApiRequest) IDataModel<IListItem>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IListItem>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IListItem>.GetBatchAsync(Batch, Expression<Func<IListItem, Object>>[]) IDataModelGet<IListItem>.GetAsync(Expression<Func<IListItem, Object>>[]) IDataModelLoad<IListItem>.LoadBatchAsync(Batch, Expression<Func<IListItem, Object>>[]) IDataModelLoad<IListItem>.LoadAsync(Expression<Func<IListItem, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() IDataModelSupportingGetChanges.GetChangesAsync(ChangeQueryOptions) IDataModelSupportingGetChanges.GetChanges(ChangeQueryOptions) IDataModelSupportingGetChanges.GetChangesBatchAsync(Batch, ChangeQueryOptions) IDataModelSupportingGetChanges.GetChangesBatch(Batch, ChangeQueryOptions) IDataModelSupportingGetChanges.GetChangesBatchAsync(ChangeQueryOptions) IDataModelSupportingGetChanges.GetChangesBatch(ChangeQueryOptions) ISecurableObject.RoleAssignments ISecurableObject.HasUniqueRoleAssignments ISecurableObject.BreakRoleInheritance(Boolean, Boolean) ISecurableObject.BreakRoleInheritanceAsync(Boolean, Boolean) ISecurableObject.BreakRoleInheritanceBatch(Batch, Boolean, Boolean) ISecurableObject.BreakRoleInheritanceBatchAsync(Batch, Boolean, Boolean) ISecurableObject.BreakRoleInheritanceBatch(Boolean, Boolean) ISecurableObject.BreakRoleInheritanceBatchAsync(Boolean, Boolean) ISecurableObject.ResetRoleInheritance() ISecurableObject.ResetRoleInheritanceAsync() ISecurableObject.ResetRoleInheritanceBatch(Batch) ISecurableObject.ResetRoleInheritanceBatchAsync(Batch) ISecurableObject.ResetRoleInheritanceBatch() ISecurableObject.ResetRoleInheritanceBatchAsync() ISecurableObject.GetRoleDefinitions(Int32) ISecurableObject.GetRoleDefinitionsAsync(Int32) ISecurableObject.AddRoleDefinitions(Int32, String[]) ISecurableObject.AddRoleDefinitionsAsync(Int32, String[]) ISecurableObject.AddRoleDefinition(Int32, IRoleDefinition) ISecurableObject.AddRoleDefinitionAsync(Int32, IRoleDefinition) ISecurableObject.AddRoleDefinitionBatch(Batch, Int32, IRoleDefinition) ISecurableObject.AddRoleDefinitionBatchAsync(Batch, Int32, IRoleDefinition) ISecurableObject.AddRoleDefinitionBatch(Int32, IRoleDefinition) ISecurableObject.AddRoleDefinitionBatchAsync(Int32, IRoleDefinition) ISecurableObject.RemoveRoleDefinitions(Int32, String[]) ISecurableObject.RemoveRoleDefinitionsAsync(Int32, String[]) ISecurableObject.RemoveRoleDefinition(Int32, IRoleDefinition) ISecurableObject.RemoveRoleDefinitionAsync(Int32, IRoleDefinition) ISecurableObject.RemoveRoleDefinitionBatch(Int32, IRoleDefinition) ISecurableObject.RemoveRoleDefinitionBatchAsync(Int32, IRoleDefinition) ISecurableObject.RemoveRoleDefinitionBatch(Batch, Int32, IRoleDefinition) ISecurableObject.RemoveRoleDefinitionBatchAsync(Batch, Int32, IRoleDefinition) IExpandoDataModel.Item[String] IExpandoDataModel.Values IExpandoDataModel.Count IExpandoDataModel.AsDynamic() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IListItem : IDataModel<IListItem>, IDataModelParent, IDataModelWithContext, ISupportModules<IListItem>, IDataModelGet<IListItem>, IDataModelLoad<IListItem>, IDataModelUpdate, IDataModelDelete, IDataModelSupportingGetChanges, ISecurableObject, IExpandoDataModel, IQueryableDataModel Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object AttachmentFiles Collection of attachments for this list item Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IAttachmentCollection AttachmentFiles { get; } Property Value IAttachmentCollection CommentsDisabled Determines if comments are disabled for the list item Declaration bool CommentsDisabled { get; } Property Value Boolean CommentsDisabledScope The scope for which comments are disabled Declaration CommentsDisabledScope CommentsDisabledScope { get; } Property Value CommentsDisabledScope ContentType The content type for the list item Declaration IContentType ContentType { get; } Property Value IContentType FieldValuesAsHtml All the field values for the list item as HTML Declaration IFieldStringValues FieldValuesAsHtml { get; } Property Value IFieldStringValues FieldValuesAsText All the field values for the list item as text Declaration IFieldStringValues FieldValuesAsText { get; } Property Value IFieldStringValues FieldValuesForEdit All the field values for the list item for editing Declaration IFieldStringValues FieldValuesForEdit { get; } Property Value IFieldStringValues File The file, if any, associated with the list item Declaration IFile File { get; } Property Value IFile FileSystemObjectType The FileSystemObjectType for the list item, such as Folder or File Declaration FileSystemObjectType FileSystemObjectType { get; } Property Value FileSystemObjectType Folder The folder, if any, represented by the list item Declaration IFolder Folder { get; } Property Value IFolder Id Id of the list item Declaration int Id { get; } Property Value Int32 LikedByInformation Information about the likes on this list item Declaration ILikedByInformation LikedByInformation { get; } Property Value ILikedByInformation ParentList The list for the list item Declaration IList ParentList { get; } Property Value IList Properties The properties of the list item Declaration IPropertyValues Properties { get; } Property Value IPropertyValues ServerRedirectedEmbedUri The URI used to render the WOPI (Web Application Open Platform Interface) frame Declaration string ServerRedirectedEmbedUri { get; } Property Value String ServerRedirectedEmbedUrl The URL used to render the WOPI (Web Application Open Platform Interface) frame Declaration string ServerRedirectedEmbedUrl { get; } Property Value String Title Title value of the list item Declaration string Title { get; set; } Property Value String UniqueId The unique identifier of the list item Declaration Guid UniqueId { get; } Property Value Guid Versions Gets a value that returns a collection of list item version objects that represent the versions of the list item Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IListItemVersionCollection Versions { get; } Property Value IListItemVersionCollection Methods AreCommentsDisabled() Are comments disabled for this IListItem ? Declaration bool AreCommentsDisabled() Returns Boolean True if disabled, false otherwise AreCommentsDisabledAsync() Are comments disabled for this IListItem ? Declaration Task<bool> AreCommentsDisabledAsync() Returns Task < Boolean > True if disabled, false otherwise GetComments(Expression<Func<IComment, Object>>[]) Get list item comments Declaration ICommentCollection GetComments(params Expression<Func<IComment, object>>[] selectors) Parameters Expression < Func < IComment , Object >>[] selectors The expressions declaring the fields to select Returns ICommentCollection GetCommentsAsync(Expression<Func<IComment, Object>>[]) Get list item comments Declaration Task<ICommentCollection> GetCommentsAsync(params Expression<Func<IComment, object>>[] selectors) Parameters Expression < Func < IComment , Object >>[] selectors The expressions declaring the fields to select Returns Task < ICommentCollection > GetDisplayName() Gets the display name of the list item. Declaration string GetDisplayName() Returns String The display name or null . GetDisplayNameAsync() Gets the display name of the list item. Declaration Task<string> GetDisplayNameAsync() Returns Task < String > The display name or null . GetParentFolder() Returns the IFolder that holds this item Declaration IFolder GetParentFolder() Returns IFolder The IFolder for this item is returned, if the item itself is a folder then the item is returned as IFolder . GetParentFolderAsync() Returns the IFolder that holds this item Declaration Task<IFolder> GetParentFolderAsync() Returns Task < IFolder > The IFolder for this item is returned, if the item itself is a folder then the item is returned as IFolder . IsFile() Checks if this IListItem is a file Declaration bool IsFile() Returns Boolean Returns true if this IListItem is a file. IsFileAsync() Checks if this IListItem is a file Declaration Task<bool> IsFileAsync() Returns Task < Boolean > Returns true if this IListItem is a file. IsFolder() Checks if this IListItem is a folder Declaration bool IsFolder() Returns Boolean Returns true if this IListItem is a folder. IsFolderAsync() Checks if this IListItem is a folder Declaration Task<bool> IsFolderAsync() Returns Task < Boolean > Returns true if this IListItem is a folder. NewFieldLookupValue(IField, Int32) Creates a new IFieldLookupValue object Declaration IFieldLookupValue NewFieldLookupValue(IField fieldToUpdate, int lookupId) Parameters IField fieldToUpdate IField representing the field to set Int32 lookupId Id of the lookup value Returns IFieldLookupValue Configured IFieldLookupValue object NewFieldTaxonomyValue(IField, Guid, String, Int32) Creates a new IFieldTaxonomyValue object Declaration IFieldTaxonomyValue NewFieldTaxonomyValue(IField fieldToUpdate, Guid termId, string label, int wssId = null) Parameters IField fieldToUpdate IField representing the field to set Guid termId Name of the term to set String label Label of the term to set Int32 wssId Optionally provide the wssId value Returns IFieldTaxonomyValue Configured IFieldTaxonomyValue object NewFieldUrlValue(IField, String, String) Creates a new IFieldUrlValue object Declaration IFieldUrlValue NewFieldUrlValue(IField fieldToUpdate, string url, string description = null) Parameters IField fieldToUpdate IField representing the field to set String url Url value String description Optional description value Returns IFieldUrlValue Configured IFieldUrlValue object NewFieldUserValue(IField, ISharePointPrincipal) Creates a new IFieldUserValue object Declaration IFieldUserValue NewFieldUserValue(IField fieldToUpdate, ISharePointPrincipal principal) Parameters IField fieldToUpdate IField representing the field to set ISharePointPrincipal principal ISharePointUser or ISharePointGroup Returns IFieldUserValue Configured IFieldUserValue object NewFieldUserValue(IField, Int32) Creates a new IFieldUserValue object Declaration IFieldUserValue NewFieldUserValue(IField fieldToUpdate, int userId) Parameters IField fieldToUpdate IField representing the field to set Int32 userId Id of the user Returns IFieldUserValue Configured IFieldUserValue object NewFieldValueCollection(IField) Creates a new collection to hold IFieldValue objects Declaration IFieldValueCollection NewFieldValueCollection(IField fieldToUpdate) Parameters IField fieldToUpdate IField representing the field to set Returns IFieldValueCollection Recycle() Recycle the current item Declaration Guid Recycle() Returns Guid RecycleAsync() Recycle the current item Declaration Task<Guid> RecycleAsync() Returns Task < Guid > RecycleBatch() Recycle the current item Declaration IBatchSingleResult<BatchResultValue<Guid>> RecycleBatch() Returns IBatchSingleResult < BatchResultValue < Guid >> RecycleBatch(Batch) Recycle the current item Declaration IBatchSingleResult<BatchResultValue<Guid>> RecycleBatch(Batch batch) Parameters Batch batch Batch to add the request to Returns IBatchSingleResult < BatchResultValue < Guid >> RecycleBatchAsync() Recycle the current item Declaration Task<IBatchSingleResult<BatchResultValue<Guid>>> RecycleBatchAsync() Returns Task < IBatchSingleResult < BatchResultValue < Guid >>> RecycleBatchAsync(Batch) Recycle the current item Declaration Task<IBatchSingleResult<BatchResultValue<Guid>>> RecycleBatchAsync(Batch batch) Parameters Batch batch Batch to add the request to Returns Task < IBatchSingleResult < BatchResultValue < Guid >>> SetCommentsDisabled(Boolean) Enable/Disable comments for this list item Declaration void SetCommentsDisabled(bool commentsDisabled) Parameters Boolean commentsDisabled Do comments need to enabled or disabled SetCommentsDisabledAsync(Boolean) Enable/Disable comments for this list item Declaration Task SetCommentsDisabledAsync(bool commentsDisabled) Parameters Boolean commentsDisabled Do comments need to enabled or disabled Returns Task SetComplianceTag(String, Boolean, Boolean, Boolean, Boolean) Sets a compliancetag / retention label for this list item Declaration void SetComplianceTag(string complianceTag, bool isTagPolicyHold, bool isTagPolicyRecord, bool isEventBasedTag, bool isTagSuperLock) Parameters String complianceTag The tag/label to set for this list item Boolean isTagPolicyHold Whether the tag is hold Boolean isTagPolicyRecord Whether the tag is record Boolean isEventBasedTag Whether the tag is Event based, this is not used Boolean isTagSuperLock Whether the tag is Sec 17 tag,no allow change even for site admin SetComplianceTagAsync(String, Boolean, Boolean, Boolean, Boolean) Sets a compliancetag / retention label for this list item Declaration Task SetComplianceTagAsync(string complianceTag, bool isTagPolicyHold, bool isTagPolicyRecord, bool isEventBasedTag, bool isTagSuperLock) Parameters String complianceTag The tag/label to set for this list item Boolean isTagPolicyHold Whether the tag is hold Boolean isTagPolicyRecord Whether the tag is record Boolean isEventBasedTag Whether the tag is Event based, this is not used Boolean isTagSuperLock Whether the tag is Sec 17 tag,no allow change even for site admin Returns Task SetComplianceTagBatch(Batch, String, Boolean, Boolean, Boolean, Boolean) Sets a compliancetag / retention label for this list item Declaration void SetComplianceTagBatch(Batch batch, string complianceTag, bool isTagPolicyHold, bool isTagPolicyRecord, bool isEventBasedTag, bool isTagSuperLock) Parameters Batch batch Batch to add the request to String complianceTag The tag/label to set for this list item Boolean isTagPolicyHold Whether the tag is hold Boolean isTagPolicyRecord Whether the tag is record Boolean isEventBasedTag Whether the tag is Event based, this is not used Boolean isTagSuperLock Whether the tag is Sec 17 tag,no allow change even for site admin SetComplianceTagBatch(String, Boolean, Boolean, Boolean, Boolean) Sets a compliancetag / retention label for this list item Declaration void SetComplianceTagBatch(string complianceTag, bool isTagPolicyHold, bool isTagPolicyRecord, bool isEventBasedTag, bool isTagSuperLock) Parameters String complianceTag The tag/label to set for this list item Boolean isTagPolicyHold Whether the tag is hold Boolean isTagPolicyRecord Whether the tag is record Boolean isEventBasedTag Whether the tag is Event based, this is not used Boolean isTagSuperLock Whether the tag is Sec 17 tag,no allow change even for site admin SetComplianceTagBatchAsync(Batch, String, Boolean, Boolean, Boolean, Boolean) Sets a compliancetag / retention label for this list item Declaration Task SetComplianceTagBatchAsync(Batch batch, string complianceTag, bool isTagPolicyHold, bool isTagPolicyRecord, bool isEventBasedTag, bool isTagSuperLock) Parameters Batch batch Batch to add the request to String complianceTag The tag/label to set for this list item Boolean isTagPolicyHold Whether the tag is hold Boolean isTagPolicyRecord Whether the tag is record Boolean isEventBasedTag Whether the tag is Event based, this is not used Boolean isTagSuperLock Whether the tag is Sec 17 tag,no allow change even for site admin Returns Task SetComplianceTagBatchAsync(String, Boolean, Boolean, Boolean, Boolean) Sets a compliancetag / retention label for this list item Declaration Task SetComplianceTagBatchAsync(string complianceTag, bool isTagPolicyHold, bool isTagPolicyRecord, bool isEventBasedTag, bool isTagSuperLock) Parameters String complianceTag The tag/label to set for this list item Boolean isTagPolicyHold Whether the tag is hold Boolean isTagPolicyRecord Whether the tag is record Boolean isEventBasedTag Whether the tag is Event based, this is not used Boolean isTagSuperLock Whether the tag is Sec 17 tag,no allow change even for site admin Returns Task SystemUpdate() Performs a system update of the list item Declaration void SystemUpdate() SystemUpdateAsync() Performs a system update of the list item Declaration Task SystemUpdateAsync() Returns Task SystemUpdateBatch() Performs a system update of the list item Declaration void SystemUpdateBatch() SystemUpdateBatch(Batch) Performs a system update of the list item Declaration void SystemUpdateBatch(Batch batch) Parameters Batch batch Batch to add the systemupdate request to SystemUpdateBatchAsync() Performs a system update of the list item Declaration Task SystemUpdateBatchAsync() Returns Task SystemUpdateBatchAsync(Batch) Performs a system update of the list item Declaration Task SystemUpdateBatchAsync(Batch batch) Parameters Batch batch Batch to add the systemupdate request to Returns Task UpdateOverwriteVersion() Performs a UpdateOverwriteVersion of the list item Declaration void UpdateOverwriteVersion() UpdateOverwriteVersionAsync() Performs a UpdateOverwriteVersion of the list item Declaration Task UpdateOverwriteVersionAsync() Returns Task UpdateOverwriteVersionBatch() Performs a UpdateOverwriteVersion of the list item Declaration void UpdateOverwriteVersionBatch() UpdateOverwriteVersionBatch(Batch) Performs a UpdateOverwriteVersion of the list item Declaration void UpdateOverwriteVersionBatch(Batch batch) Parameters Batch batch Batch to add the UpdateOverwriteVersion request to UpdateOverwriteVersionBatchAsync() Performs a UpdateOverwriteVersion of the list item Declaration Task UpdateOverwriteVersionBatchAsync() Returns Task UpdateOverwriteVersionBatchAsync(Batch) Performs a UpdateOverwriteVersion of the list item Declaration Task UpdateOverwriteVersionBatchAsync(Batch batch) Parameters Batch batch Batch to add the UpdateOverwriteVersion request to Returns Task Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IListItemCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IListItemCollection.html",
    "title": "Interface IListItemCollection | PnP Core SDK",
    "keywords": "Interface IListItemCollection Public interface to define a collection of ListItem objects of SharePoint Online Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<IListItem>.LoadAsync(Expression<Func<IListItem, Object>>[]) IDataModelCollectionLoad<IListItem>.LoadBatchAsync(Batch, Expression<Func<IListItem, Object>>[]) IDataModelCollectionDeleteByIntegerId.DeleteById(Int32) IDataModelCollectionDeleteByIntegerId.DeleteByIdAsync(Int32) IDataModelCollectionDeleteByIntegerId.DeleteByIdBatch(Int32) IDataModelCollectionDeleteByIntegerId.DeleteByIdBatchAsync(Int32) IDataModelCollectionDeleteByIntegerId.DeleteByIdBatch(Batch, Int32) IDataModelCollectionDeleteByIntegerId.DeleteByIdBatchAsync(Batch, Int32) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IListItemCollection : IQueryable<IListItem>, IAsyncEnumerable<IListItem>, IDataModelCollection<IListItem>, IEnumerable<IListItem>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<IListItem>, IDataModelCollectionDeleteByIntegerId, ISupportModules<IListItemCollection> Methods Add(Dictionary<String, Object>, String, FileSystemObjectType) Adds a new list item Declaration IListItem Add(Dictionary<string, object> values, string folderPath = null, FileSystemObjectType underlyingObjectType = default(FileSystemObjectType)) Parameters Dictionary < String , Object > values Values to add to list item String folderPath Optional folder path to add the item to. FileSystemObjectType underlyingObjectType Type of object to create. Defaults to File/ListItem Returns IListItem Newly added list item AddAsync(Dictionary<String, Object>, String, FileSystemObjectType) Adds a new list item Declaration Task<IListItem> AddAsync(Dictionary<string, object> values, string folderPath = null, FileSystemObjectType underlyingObjectType = default(FileSystemObjectType)) Parameters Dictionary < String , Object > values Values to add to list item String folderPath Optional folder path to add the item to. FileSystemObjectType underlyingObjectType Type of object to create. Defaults to File/ListItem Returns Task < IListItem > Newly added list item AddBatch(Dictionary<String, Object>, String, FileSystemObjectType) Adds a new list item Declaration IListItem AddBatch(Dictionary<string, object> values, string folderPath = null, FileSystemObjectType underlyingObjectType = default(FileSystemObjectType)) Parameters Dictionary < String , Object > values Values to add to list item String folderPath Optional folder path to add the item to. FileSystemObjectType underlyingObjectType Type of object to create. Defaults to File/ListItem Returns IListItem Newly added list item AddBatch(Batch, Dictionary<String, Object>, String, FileSystemObjectType) Adds a new list item Declaration IListItem AddBatch(Batch batch, Dictionary<string, object> values, string folderPath = null, FileSystemObjectType underlyingObjectType = default(FileSystemObjectType)) Parameters Batch batch Batch to use Dictionary < String , Object > values Values to add to list item String folderPath Optional folder path to add the item to. FileSystemObjectType underlyingObjectType Type of object to create. Defaults to File/ListItem Returns IListItem Newly added list item AddBatchAsync(Dictionary<String, Object>, String, FileSystemObjectType) Adds a new list item Declaration Task<IListItem> AddBatchAsync(Dictionary<string, object> values, string folderPath = null, FileSystemObjectType underlyingObjectType = default(FileSystemObjectType)) Parameters Dictionary < String , Object > values Values to add to list item String folderPath Optional folder path to add the item to. FileSystemObjectType underlyingObjectType Type of object to create. Defaults to File/ListItem Returns Task < IListItem > Newly added list item AddBatchAsync(Batch, Dictionary<String, Object>, String, FileSystemObjectType) Adds a new list item Declaration Task<IListItem> AddBatchAsync(Batch batch, Dictionary<string, object> values, string folderPath = null, FileSystemObjectType underlyingObjectType = default(FileSystemObjectType)) Parameters Batch batch Batch to use Dictionary < String , Object > values Values to add to list item String folderPath Optional folder path to add the item to. FileSystemObjectType underlyingObjectType Type of object to create. Defaults to File/ListItem Returns Task < IListItem > Newly added list item Contains(Int32) Checks if the collection contains a listitem with a given id Declaration bool Contains(int id) Parameters Int32 id Id to check for Returns Boolean True if found, false otherwise GetById(Int32, Expression<Func<IListItem, Object>>[]) Method to select a list item by Id Declaration IListItem GetById(int id, params Expression<Func<IListItem, object>>[] selectors) Parameters Int32 id The Id to search for Expression < Func < IListItem , Object >>[] selectors The expressions declaring the fields to select Returns IListItem The resulting list item instance, if any GetByIdAsync(Int32, Expression<Func<IListItem, Object>>[]) Method to select a list item by Id asynchronously Declaration Task<IListItem> GetByIdAsync(int id, params Expression<Func<IListItem, object>>[] selectors) Parameters Int32 id The Id to search for Expression < Func < IListItem , Object >>[] selectors The expressions declaring the fields to select Returns Task < IListItem > The resulting list item instance, if any RecycleById(Int32) Recycle the list item Declaration Guid RecycleById(int id) Parameters Int32 id Id of the item to recycle Returns Guid RecycleByIdAsync(Int32) Recycle the list item Declaration Task<Guid> RecycleByIdAsync(int id) Parameters Int32 id Id of the item to recycle Returns Task < Guid > RecycleByIdBatch(Batch, Int32) Recycle the list item Declaration void RecycleByIdBatch(Batch batch, int id) Parameters Batch batch Batch to add the request to Int32 id Id of the item to recycle RecycleByIdBatch(Int32) Recycle the list item Declaration void RecycleByIdBatch(int id) Parameters Int32 id Id of the item to recycle RecycleByIdBatchAsync(Batch, Int32) Recycle the list item Declaration Task RecycleByIdBatchAsync(Batch batch, int id) Parameters Batch batch Batch to add the request to Int32 id Id of the item to recycle Returns Task RecycleByIdBatchAsync(Int32) Recycle the list item Declaration Task RecycleByIdBatchAsync(int id) Parameters Int32 id Id of the item to recycle Returns Task Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.IListItemVersion.html": {
    "href": "api/PnP.Core.Model.SharePoint.IListItemVersion.html",
    "title": "Interface IListItemVersion | PnP Core SDK",
    "keywords": "Interface IListItemVersion Public interface to define a ListItemVersion object Inherited Members IDataModel<IListItemVersion>.Requested IDataModel<IListItemVersion>.HasValue(String) IDataModel<IListItemVersion>.HasChanged(String) IDataModel<IListItemVersion>.IsPropertyAvailable(Expression<Func<IListItemVersion, Object>>) IDataModel<IListItemVersion>.ArePropertiesAvailable(Expression<Func<IListItemVersion, Object>>[]) IDataModel<IListItemVersion>.EnsureProperties(Expression<Func<IListItemVersion, Object>>[]) IDataModel<IListItemVersion>.EnsurePropertiesAsync(Expression<Func<IListItemVersion, Object>>[]) IDataModel<IListItemVersion>.ExecuteRequestAsync(ApiRequest) IDataModel<IListItemVersion>.ExecuteRequest(ApiRequest) IDataModel<IListItemVersion>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IListItemVersion>.ExecuteRequestBatch(ApiRequest) IDataModel<IListItemVersion>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IListItemVersion>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IListItemVersion>.GetBatchAsync(Batch, Expression<Func<IListItemVersion, Object>>[]) IDataModelGet<IListItemVersion>.GetAsync(Expression<Func<IListItemVersion, Object>>[]) IDataModelLoad<IListItemVersion>.LoadBatchAsync(Batch, Expression<Func<IListItemVersion, Object>>[]) IDataModelLoad<IListItemVersion>.LoadAsync(Expression<Func<IListItemVersion, Object>>[]) IExpandoDataModel.Item[String] IExpandoDataModel.Values IExpandoDataModel.Count IExpandoDataModel.AsDynamic() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IListItemVersion : IDataModel<IListItemVersion>, IDataModelParent, IDataModelWithContext, ISupportModules<IListItemVersion>, IDataModelGet<IListItemVersion>, IDataModelLoad<IListItemVersion>, IExpandoDataModel, IQueryableDataModel Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object Created Gets a value that specifies the creation date and time for the list item version. Declaration DateTime Created { get; } Property Value DateTime CreatedBy The ISharePointUser that created this version. Declaration ISharePointUser CreatedBy { get; } Property Value ISharePointUser Fields Fields of this list item version. Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IFieldCollection Fields { get; } Property Value IFieldCollection FileVersion IFileVersion of this list item version Declaration IFileVersion FileVersion { get; } Property Value IFileVersion Id Gets the internal identifier for the list item version. SP REST property name: VersionId. Declaration int Id { get; } Property Value Int32 IsCurrentVersion Gets a value that specifies whether the list item version is the current version. Declaration bool IsCurrentVersion { get; } Property Value Boolean VersionLabel Gets a value that specifies the implementation specific identifier of the file. Declaration string VersionLabel { get; } Property Value String Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IListItemVersionCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IListItemVersionCollection.html",
    "title": "Interface IListItemVersionCollection | PnP Core SDK",
    "keywords": "Interface IListItemVersionCollection Collection of file versions Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<IListItemVersion>.LoadAsync(Expression<Func<IListItemVersion, Object>>[]) IDataModelCollectionLoad<IListItemVersion>.LoadBatchAsync(Batch, Expression<Func<IListItemVersion, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IListItemVersionCollection : IQueryable<IListItemVersion>, IAsyncEnumerable<IListItemVersion>, IDataModelCollection<IListItemVersion>, IEnumerable<IListItemVersion>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<IListItemVersion>, ISupportModules<IListItemVersionCollection> Methods GetById(Int32, Expression<Func<IListItemVersion, Object>>[]) Method to select a list item version by Id Declaration IListItemVersion GetById(int id, params Expression<Func<IListItemVersion, object>>[] selectors) Parameters Int32 id The Id to search for Expression < Func < IListItemVersion , Object >>[] selectors The expressions declaring the fields to select Returns IListItemVersion The resulting list item version instance, if any GetByIdAsync(Int32, Expression<Func<IListItemVersion, Object>>[]) Method to select a list item version by Id asynchronously Declaration Task<IListItemVersion> GetByIdAsync(int id, params Expression<Func<IListItemVersion, object>>[] selectors) Parameters Int32 id The Id to search for Expression < Func < IListItemVersion , Object >>[] selectors The expressions declaring the fields to select Returns Task < IListItemVersion > The resulting list item version instance, if any Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.IListSubscription.html": {
    "href": "api/PnP.Core.Model.SharePoint.IListSubscription.html",
    "title": "Interface IListSubscription | PnP Core SDK",
    "keywords": "Interface IListSubscription Defines a structure for a webhook subscription Inherited Members IDataModel<IListSubscription>.Requested IDataModel<IListSubscription>.HasValue(String) IDataModel<IListSubscription>.HasChanged(String) IDataModel<IListSubscription>.IsPropertyAvailable(Expression<Func<IListSubscription, Object>>) IDataModel<IListSubscription>.ArePropertiesAvailable(Expression<Func<IListSubscription, Object>>[]) IDataModel<IListSubscription>.EnsureProperties(Expression<Func<IListSubscription, Object>>[]) IDataModel<IListSubscription>.EnsurePropertiesAsync(Expression<Func<IListSubscription, Object>>[]) IDataModel<IListSubscription>.ExecuteRequestAsync(ApiRequest) IDataModel<IListSubscription>.ExecuteRequest(ApiRequest) IDataModel<IListSubscription>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IListSubscription>.ExecuteRequestBatch(ApiRequest) IDataModel<IListSubscription>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IListSubscription>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IListSubscription>.GetBatchAsync(Batch, Expression<Func<IListSubscription, Object>>[]) IDataModelGet<IListSubscription>.GetAsync(Expression<Func<IListSubscription, Object>>[]) IDataModelLoad<IListSubscription>.LoadBatchAsync(Batch, Expression<Func<IListSubscription, Object>>[]) IDataModelLoad<IListSubscription>.LoadAsync(Expression<Func<IListSubscription, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IListSubscription : IDataModel<IListSubscription>, IDataModelParent, IDataModelWithContext, ISupportModules<IListSubscription>, IDataModelGet<IListSubscription>, IDataModelLoad<IListSubscription>, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties ClientState A string, which represents client information. You can use this for validating notifications, tagging different subscriptions, or other reasons. Declaration string ClientState { get; set; } Property Value String ExpirationDateTime Expiration date for the webhook Declaration DateTime ExpirationDateTime { get; set; } Property Value DateTime Id Subscription unique Id Declaration Guid Id { get; set; } Property Value Guid NotificationUrl A url, where the notification request will be sent Declaration string NotificationUrl { get; set; } Property Value String Resource Resource identifier, usually a list id Declaration string Resource { get; set; } Property Value String Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IListSubscriptionCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IListSubscriptionCollection.html",
    "title": "Interface IListSubscriptionCollection | PnP Core SDK",
    "keywords": "Interface IListSubscriptionCollection A collection of list webhook subscriptions Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<IListSubscription>.LoadAsync(Expression<Func<IListSubscription, Object>>[]) IDataModelCollectionLoad<IListSubscription>.LoadBatchAsync(Batch, Expression<Func<IListSubscription, Object>>[]) IDataModelCollectionDeleteByGuidId.DeleteById(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdAsync(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatch(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatchAsync(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatch(Batch, Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatchAsync(Batch, Guid) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IListSubscriptionCollection : IQueryable<IListSubscription>, IAsyncEnumerable<IListSubscription>, IDataModelCollection<IListSubscription>, IEnumerable<IListSubscription>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<IListSubscription>, IDataModelCollectionDeleteByGuidId, ISupportModules<IListSubscriptionCollection> Methods Add(String, DateTime, String) Adds a new webhook subscription Declaration IListSubscription Add(string notificationUrl, DateTime expirationDate, string clientState = null) Parameters String notificationUrl A url, where the notification request will be sent DateTime expirationDate A date, when the subscription will expire. Expiration date should not be greater than 6 months period. String clientState A string, which represents client information. You can use this for validating notifications, tagging different subscriptions, or other reasons. Returns IListSubscription An IListSubscription instance Add(String, Int32, String) Adds a new webhook subscription Declaration IListSubscription Add(string notificationUrl, int validityInMonths = 6, string clientState = null) Parameters String notificationUrl A url, where the notification request will be sent Int32 validityInMonths How many months the subscription should stay valid. The maximum is 6 months. String clientState A string, which represents client information. You can use this for validating notifications, tagging different subscriptions, or other reasons. Returns IListSubscription An IListSubscription instance AddAsync(String, DateTime, String) Adds a new webhook subscription Declaration Task<IListSubscription> AddAsync(string notificationUrl, DateTime expirationDate, string clientState = null) Parameters String notificationUrl A url, where the notification request will be sent DateTime expirationDate A date, when the subscription will expire. Expiration date should not be greater than 6 months period. String clientState A string, which represents client information. You can use this for validating notifications, tagging different subscriptions, or other reasons. Returns Task < IListSubscription > An IListSubscription instance AddAsync(String, Int32, String) Adds a new webhook subscription Declaration Task<IListSubscription> AddAsync(string notificationUrl, int validityInMonths = 6, string clientState = null) Parameters String notificationUrl A url, where the notification request will be sent Int32 validityInMonths How many months the subscription should stay valid. The maximum is 6 months. String clientState A string, which represents client information. You can use this for validating notifications, tagging different subscriptions, or other reasons. Returns Task < IListSubscription > An IListSubscription instance AddBatch(Batch, String, DateTime, String) Adds a new webhook subscription Declaration IListSubscription AddBatch(Batch batch, string notificationUrl, DateTime expirationDate, string clientState = null) Parameters Batch batch Batch to use String notificationUrl A url, where the notification request will be sent DateTime expirationDate A date, when the subscription will expire. Expiration date should not be greater than 6 months period. String clientState A string, which represents client information. You can use this for validating notifications, tagging different subscriptions, or other reasons. Returns IListSubscription An IListSubscription instance AddBatch(Batch, String, Int32, String) Adds a new webhook subscription Declaration IListSubscription AddBatch(Batch batch, string notificationUrl, int validityInMonths = 6, string clientState = null) Parameters Batch batch Batch to use String notificationUrl A url, where the notification request will be sent Int32 validityInMonths How many months the subscription should stay valid. The maximum is 6 months. String clientState A string, which represents client information. You can use this for validating notifications, tagging different subscriptions, or other reasons. Returns IListSubscription An IListSubscription instance AddBatch(String, DateTime, String) Adds a new webhook subscription Declaration IListSubscription AddBatch(string notificationUrl, DateTime expirationDate, string clientState = null) Parameters String notificationUrl A url, where the notification request will be sent DateTime expirationDate A date, when the subscription will expire. Expiration date should not be greater than 6 months period. String clientState A string, which represents client information. You can use this for validating notifications, tagging different subscriptions, or other reasons. Returns IListSubscription An IListSubscription instance AddBatch(String, Int32, String) Adds a new webhook subscription Declaration IListSubscription AddBatch(string notificationUrl, int validityInMonths = 6, string clientState = null) Parameters String notificationUrl A url, where the notification request will be sent Int32 validityInMonths How many months the subscription should stay valid. The maximum is 6 months. String clientState A string, which represents client information. You can use this for validating notifications, tagging different subscriptions, or other reasons. Returns IListSubscription An IListSubscription instance AddBatchAsync(Batch, String, DateTime, String) Adds a new webhook subscription Declaration Task<IListSubscription> AddBatchAsync(Batch batch, string notificationUrl, DateTime expirationDate, string clientState = null) Parameters Batch batch Batch to use String notificationUrl A url, where the notification request will be sent DateTime expirationDate A date, when the subscription will expire. Expiration date should not be greater than 6 months period. String clientState A string, which represents client information. You can use this for validating notifications, tagging different subscriptions, or other reasons. Returns Task < IListSubscription > An IListSubscription instance AddBatchAsync(Batch, String, Int32, String) Adds a new webhook subscription Declaration Task<IListSubscription> AddBatchAsync(Batch batch, string notificationUrl, int validityInMonths = 6, string clientState = null) Parameters Batch batch Batch to use String notificationUrl A url, where the notification request will be sent Int32 validityInMonths How many months the subscription should stay valid. The maximum is 6 months. String clientState A string, which represents client information. You can use this for validating notifications, tagging different subscriptions, or other reasons. Returns Task < IListSubscription > An IListSubscription instance AddBatchAsync(String, DateTime, String) Adds a new webhook subscription Declaration Task<IListSubscription> AddBatchAsync(string notificationUrl, DateTime expirationDate, string clientState = null) Parameters String notificationUrl A url, where the notification request will be sent DateTime expirationDate A date, when the subscription will expire. Expiration date should not be greater than 6 months period. String clientState A string, which represents client information. You can use this for validating notifications, tagging different subscriptions, or other reasons. Returns Task < IListSubscription > An IListSubscription instance AddBatchAsync(String, Int32, String) Adds a new webhook subscription Declaration Task<IListSubscription> AddBatchAsync(string notificationUrl, int validityInMonths = 6, string clientState = null) Parameters String notificationUrl A url, where the notification request will be sent Int32 validityInMonths How many months the subscription should stay valid. The maximum is 6 months. String clientState A string, which represents client information. You can use this for validating notifications, tagging different subscriptions, or other reasons. Returns Task < IListSubscription > An IListSubscription instance GetById(Guid) Gets webhook subscription Declaration IListSubscription GetById(Guid subscriptionId) Parameters Guid subscriptionId Subscription's Id, a Returns IListSubscription An IListSubscription instance GetByIdAsync(Guid) Gets webhook subscription Declaration Task<IListSubscription> GetByIdAsync(Guid subscriptionId) Parameters Guid subscriptionId Subscription's Id, a Returns Task < IListSubscription > An IListSubscription instance Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.INavigationOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.INavigationOptions.html",
    "title": "Interface INavigationOptions | PnP Core SDK",
    "keywords": "Interface INavigationOptions Options to configure a the site navigation chrome. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface INavigationOptions Properties MegaMenuEnabled Gets or sets a value that specifies whether the megamenu is enabled on the site. Declaration bool MegaMenuEnabled { get; set; } Property Value Boolean Visible Gets or sets a value that specifies whether the site navigation is shown on the site. Declaration bool Visible { get; set; } Property Value Boolean"
  },
  "api/PnP.Core.Model.SharePoint.IPage.html": {
    "href": "api/PnP.Core.Model.SharePoint.IPage.html",
    "title": "Interface IPage | PnP Core SDK",
    "keywords": "Interface IPage A modern SharePoint Page Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IPage Properties Controls List of control on this page Declaration List<ICanvasControl> Controls { get; } Property Value PnP.Core.Model.SharePoint.List < ICanvasControl > DefaultSection The default section of the client side page Declaration ICanvasSection DefaultSection { get; } Property Value ICanvasSection EntityId Entity id field for topic pages Declaration string EntityId { get; set; } Property Value String EntityRelations Entity relations field for topic pages Declaration string EntityRelations { get; set; } Property Value String EntityType Entity type field for topic pages Declaration string EntityType { get; set; } Property Value String Folder Folder the page lives in (available after saving the page) Declaration string Folder { get; } Property Value String HeaderControls List of controls on this page's header Declaration List<ICanvasControl> HeaderControls { get; } Property Value PnP.Core.Model.SharePoint.List < ICanvasControl > KeepDefaultWebParts When a page of type Home is created you can opt to only keep the default client side web parts by setting this to true. This also is a way to reset your home page back the the stock one. Declaration bool KeepDefaultWebParts { get; set; } Property Value Boolean LayoutType Layout type of the client side page Declaration PageLayoutType LayoutType { get; set; } Property Value PageLayoutType Name The name of this page (available after saving the page) Declaration string Name { get; } Property Value String PageHeader Returns the page header for this page Declaration IPageHeader PageHeader { get; } Property Value IPageHeader PageId ID value of the page (only available when the page was saved) Declaration int? PageId { get; } Property Value Nullable < Int32 > PageListItem ListItem linked to this page Declaration IListItem PageListItem { get; } Property Value IListItem PagesLibrary Pages library Declaration IList PagesLibrary { get; } Property Value IList PageTitle Title of the client side page Declaration string PageTitle { get; set; } Property Value String PnPContext PnPContext to work with Declaration PnPContext PnPContext { get; } Property Value PnPContext RepostDescription Description of the repost page Declaration string RepostDescription { get; set; } Property Value String RepostSourceItemId Id of the SharePoint IListItem connected to the page being reposted Declaration Guid RepostSourceItemId { get; set; } Property Value Guid RepostSourceListId Id of the SharePoint IList containting the page being reposted Declaration Guid RepostSourceListId { get; set; } Property Value Guid RepostSourceSiteId Id of the SharePoint ISite containting the page being reposted Declaration Guid RepostSourceSiteId { get; set; } Property Value Guid RepostSourceUrl Url being reposted using the repost page Declaration string RepostSourceUrl { get; set; } Property Value String RepostSourceWebId Id of the SharePoint IWeb containting the page being reposted Declaration Guid RepostSourceWebId { get; set; } Property Value Guid ScheduledPublishDate Returns the scheduled publish data of a page (only if publish was scheduled) Declaration DateTime? ScheduledPublishDate { get; } Property Value Nullable < DateTime > Sections List of sections on this page Declaration List<ICanvasSection> Sections { get; } Property Value PnP.Core.Model.SharePoint.List < ICanvasSection > SpaceContent Space content field (JSON) for spaces pages Declaration string SpaceContent { get; set; } Property Value String ThumbnailUrl Thumbnail url for the page Declaration string ThumbnailUrl { get; set; } Property Value String Methods AddControl(ICanvasControl) Adds a new control to your client side page using the default ICanvasSection Declaration void AddControl(ICanvasControl control) Parameters ICanvasControl control ICanvasControl to add AddControl(ICanvasControl, ICanvasColumn) Adds a new control to your client side page in the given section Declaration void AddControl(ICanvasControl control, ICanvasColumn column) Parameters ICanvasControl control ICanvasControl to add ICanvasColumn column ICanvasColumn that will hold the control AddControl(ICanvasControl, ICanvasColumn, Int32) Adds a new control to your client side page in the given section with a given order Declaration void AddControl(ICanvasControl control, ICanvasColumn column, int order) Parameters ICanvasControl control ICanvasControl to add ICanvasColumn column ICanvasColumn that will hold the control Int32 order Order of the control in the given section AddControl(ICanvasControl, ICanvasSection) Adds a new control to your client side page in the given section Declaration void AddControl(ICanvasControl control, ICanvasSection section) Parameters ICanvasControl control ICanvasControl to add ICanvasSection section ICanvasSection that will hold the control. Control will end up in the DefaultColumn . AddControl(ICanvasControl, ICanvasSection, Int32) Adds a new control to your client side page in the given section with a given order Declaration void AddControl(ICanvasControl control, ICanvasSection section, int order) Parameters ICanvasControl control ICanvasControl to add ICanvasSection section ICanvasSection that will hold the control. Control will end up in the DefaultColumn . Int32 order Order of the control in the given section AddControl(ICanvasControl, Int32) Adds a new control to your client side page using the default ICanvasSection using a given order Declaration void AddControl(ICanvasControl control, int order) Parameters ICanvasControl control ICanvasControl to add Int32 order Order of the control in the default section AddHeaderControl(ICanvasControl, Int32) Adds a new header control to your client side page with a given order. Used for topic page creation Declaration void AddHeaderControl(ICanvasControl control, int order) Parameters ICanvasControl control ICanvasControl to add Int32 order Order of the control in the given section AddSection(CanvasSectionTemplate, Single) Adds a new section to your client side page Declaration void AddSection(CanvasSectionTemplate sectionTemplate, float order) Parameters CanvasSectionTemplate sectionTemplate The CanvasSectionTemplate type of the section Single order Controls the order of the new section AddSection(CanvasSectionTemplate, Single, VariantThemeType, VariantThemeType) Adds a new section to your client side page Declaration void AddSection(CanvasSectionTemplate sectionTemplate, float order, VariantThemeType zoneEmphasis, VariantThemeType verticalSectionZoneEmphasis = default(VariantThemeType)) Parameters CanvasSectionTemplate sectionTemplate The CanvasSectionTemplate type of the section Single order Controls the order of the new section VariantThemeType zoneEmphasis Zone emphasis (section background) VariantThemeType verticalSectionZoneEmphasis Vertical Section Zone emphasis (section background) AddSection(CanvasSectionTemplate, Single, Int32, Nullable<Int32>) Adds a new section to your client side page Declaration void AddSection(CanvasSectionTemplate sectionTemplate, float order, int zoneEmphasis, int? verticalSectionZoneEmphasis = null) Parameters CanvasSectionTemplate sectionTemplate The CanvasSectionTemplate type of the section Single order Controls the order of the new section Int32 zoneEmphasis Zone emphasis (section background) Nullable < Int32 > verticalSectionZoneEmphasis Vertical Section Zone emphasis (section background) AddSection(ICanvasSection) Adds a new section to your client side page Declaration void AddSection(ICanvasSection section) Parameters ICanvasSection section ICanvasSection object describing the section to add AddSection(ICanvasSection, Single) Adds a new section to your client side page with a given order Declaration void AddSection(ICanvasSection section, float order) Parameters ICanvasSection section ICanvasSection object describing the section to add Single order Controls the order of the new section AreCommentsDisabled() Does this page have comments disabled Declaration bool AreCommentsDisabled() Returns Boolean AreCommentsDisabledAsync() Does this page have comments disabled Declaration Task<bool> AreCommentsDisabledAsync() Returns Task < Boolean > AvailablePageComponents(String) Gets a list of available client side web parts to use, optionally filtered by a given name Declaration IEnumerable<IPageComponent> AvailablePageComponents(string name = null) Parameters String name Name of the web part to retrieve Returns IEnumerable < IPageComponent > List of available IPageComponent AvailablePageComponentsAsync(String) Gets a list of available client side web parts to use, optionally filtered by a given name Declaration Task<IEnumerable<IPageComponent>> AvailablePageComponentsAsync(string name = null) Parameters String name Name of the web part to retrieve Returns Task < IEnumerable < IPageComponent >> List of available IPageComponent ClearPage() Clears the sections and controls from the page Declaration void ClearPage() DefaultWebPartToWebPartId(DefaultWebPart) Translates a given DefaultWebPart enum to it's corresponding web part id. Non default web parts will be returned as empty string Declaration string DefaultWebPartToWebPartId(DefaultWebPart webPart) Parameters DefaultWebPart webPart DefaultWebPart enum to translate to it's id Returns String The corresponding web part id Delete() Deletes the created page Declaration void Delete() DeleteAsync() Deletes the created page Declaration Task DeleteAsync() Returns Task DemoteNewsArticle() Demotes an client side Article news page as a regular client side page Declaration void DemoteNewsArticle() DemoteNewsArticleAsync() Demotes an client side Article news page as a regular client side page Declaration Task DemoteNewsArticleAsync() Returns Task DisableComments() Disable commenting on this page Declaration void DisableComments() DisableCommentsAsync() Disable commenting on this page Declaration Task DisableCommentsAsync() Returns Task EnableComments() Enable commenting on this page Declaration void EnableComments() EnableCommentsAsync() Enable commenting on this page Declaration Task EnableCommentsAsync() Returns Task GetComments(Expression<Func<IComment, Object>>[]) Get list item comments Declaration ICommentCollection GetComments(params Expression<Func<IComment, object>>[] selectors) Parameters Expression < Func < IComment , Object >>[] selectors The expressions declaring the fields to select Returns ICommentCollection GetCommentsAsync(Expression<Func<IComment, Object>>[]) Get list item comments Declaration Task<ICommentCollection> GetCommentsAsync(params Expression<Func<IComment, object>>[] selectors) Parameters Expression < Func < IComment , Object >>[] selectors The expressions declaring the fields to select Returns Task < ICommentCollection > GetImageWebPart(String, PageImageOptions) Prepares an Image web part for adding to a page Declaration IPageWebPart GetImageWebPart(string serverRelativeUrl, PageImageOptions imageOptions = null) Parameters String serverRelativeUrl Server relative url of the image to show in the image web part PageImageOptions imageOptions Options to configure the image when being added Returns IPageWebPart Configured image web part which can be added to the page GetImageWebPartAsync(String, PageImageOptions) Prepares an Image web part for adding to a page Declaration Task<IPageWebPart> GetImageWebPartAsync(string serverRelativeUrl, PageImageOptions imageOptions = null) Parameters String serverRelativeUrl Server relative url of the image to show in the image web part PageImageOptions imageOptions Options to configure the image when being added Returns Task < IPageWebPart > Configured image web part which can be added to the page GetInlineImage(IPageText, String, PageImageOptions) Prepares an inline image for adding to text by adding the needed image web part and returning the HTML snippet that needs to be appended to the text editor content Declaration string GetInlineImage(IPageText textEditorInstance, string serverRelativeUrl, PageImageOptions imageOptions = null) Parameters IPageText textEditorInstance Text editor instance to add the inline image to String serverRelativeUrl Server relative url of the image to add inline PageImageOptions imageOptions Options to configure the inline image when being added Returns String Html snippet to be appended to the text editor content GetInlineImageAsync(IPageText, String, PageImageOptions) Prepares an inline image for adding to text by adding the needed image web part and returning the HTML snippet that needs to be appended to the text editor content Declaration Task<string> GetInlineImageAsync(IPageText textEditorInstance, string serverRelativeUrl, PageImageOptions imageOptions = null) Parameters IPageText textEditorInstance Text editor instance to add the inline image to String serverRelativeUrl Server relative url of the image to add inline PageImageOptions imageOptions Options to configure the inline image when being added Returns Task < String > Html snippet to be appended to the text editor content GetLikedByInformation() Returns information about the likes on this page Declaration ILikedByInformation GetLikedByInformation() Returns ILikedByInformation GetLikedByInformationAsync() Returns information about the likes on this page Declaration Task<ILikedByInformation> GetLikedByInformationAsync() Returns Task < ILikedByInformation > GetPageFile(Expression<Func<IFile, Object>>[]) Gets the file connected to this page Declaration IFile GetPageFile(params Expression<Func<IFile, object>>[] expressions) Parameters Expression < Func < IFile , Object >>[] expressions Properties to load for the file Returns IFile The connected IFile GetPageFileAsync(Expression<Func<IFile, Object>>[]) Gets the file connected to this page Declaration Task<IFile> GetPageFileAsync(params Expression<Func<IFile, object>>[] expressions) Parameters Expression < Func < IFile , Object >>[] expressions Properties to load for the file Returns Task < IFile > The connected IFile GetPageTranslations() Returns the page translation status for a given page Declaration IPageTranslationStatusCollection GetPageTranslations() Returns IPageTranslationStatusCollection IPageTranslationStatusCollection list containing information about this page's translations GetPageTranslationsAsync() Returns the page translation status for a given page Declaration Task<IPageTranslationStatusCollection> GetPageTranslationsAsync() Returns Task < IPageTranslationStatusCollection > IPageTranslationStatusCollection list containing information about this page's translations GetTemplatesFolder() Returns the name of the templates folder, and creates if it doesn't exist. Declaration string GetTemplatesFolder() Returns String GetTemplatesFolderAsync() Returns the name of the templates folder, and creates if it doesn't exist. Declaration Task<string> GetTemplatesFolderAsync() Returns Task < String > InstantiateDefaultWebPart(DefaultWebPart) Instantiates a new web part with default data and returns it Declaration IPageWebPart InstantiateDefaultWebPart(DefaultWebPart webPart) Parameters DefaultWebPart webPart Default web part to instantiate Returns IPageWebPart Instantiated web part InstantiateDefaultWebPartAsync(DefaultWebPart) Instantiates a new web part with default data and returns it Declaration Task<IPageWebPart> InstantiateDefaultWebPartAsync(DefaultWebPart webPart) Parameters DefaultWebPart webPart Default web part to instantiate Returns Task < IPageWebPart > Instantiated web part Like() Likes a page Declaration void Like() LikeAsync() Likes a page Declaration Task LikeAsync() Returns Task NewTextPart(String) Creates a new text part which can be configured and added to the page Declaration IPageText NewTextPart(string text = null) Parameters String text Optionally provide the text for the text part Returns IPageText The created text part NewWebPart(IPageComponent) Creates a new web part Declaration IPageWebPart NewWebPart(IPageComponent clientSideComponent = null) Parameters IPageComponent clientSideComponent The base component to use for this web part Returns IPageWebPart The created web part PromoteAsHomePage() Sets the current IPage as home page for the current site Declaration void PromoteAsHomePage() PromoteAsHomePageAsync() Sets the current IPage as home page for the current site Declaration Task PromoteAsHomePageAsync() Returns Task PromoteAsNewsArticle() Promotes a regular Article client side page as a news page Declaration void PromoteAsNewsArticle() PromoteAsNewsArticleAsync() Promotes a regular Article client side page as a news page Declaration Task PromoteAsNewsArticleAsync() Returns Task Publish(String) Publishes a client side page Declaration void Publish(string comment = null) Parameters String comment Publishing comment PublishAsync(String) Publishes a client side page Declaration Task PublishAsync(string comment = null) Parameters String comment Publishing comment Returns Task RemovePageHeader() Removes the set page header Declaration void RemovePageHeader() RemoveSchedulePublish() Removes the publication schedule of a client side page Declaration void RemoveSchedulePublish() RemoveSchedulePublishAsync() Removes the publication schedule of a client side page Declaration Task RemoveSchedulePublishAsync() Returns Task Save(String) Saves the page to the pages library Declaration string Save(string pageName = null) Parameters String pageName Page name to use Returns String The name of the saved page SaveAsTemplate(String) Saves the page as a template page Declaration string SaveAsTemplate(string pageName = null) Parameters String pageName Page name to use Returns String The name of the saved page SaveAsTemplateAsync(String) Saves the page as a template page Declaration Task<string> SaveAsTemplateAsync(string pageName = null) Parameters String pageName Page name to use Returns Task < String > The name of the saved page SaveAsync(String) Saves the page to the pages library Declaration Task<string> SaveAsync(string pageName = null) Parameters String pageName Page name to use Returns Task < String > The name of the saved page SchedulePublish(DateTime) Schedules the publication of a client side page Declaration void SchedulePublish(DateTime publishDate) Parameters DateTime publishDate Date when the page needs to be publishing SchedulePublishAsync(DateTime) Schedules the publication of a client side page Declaration Task SchedulePublishAsync(DateTime publishDate) Parameters DateTime publishDate Date when the page needs to be publishing Returns Task SetCustomPageHeader(String, Nullable<Double>, Nullable<Double>) Sets page header with custom focal point Declaration void SetCustomPageHeader(string serverRelativeImageUrl, double? translateX = null, double? translateY = null) Parameters String serverRelativeImageUrl Server relative page header image url Nullable < Double > translateX X focal point for image Nullable < Double > translateY Y focal point for image SetDefaultPageHeader() Sets page header back to the default page header Declaration void SetDefaultPageHeader() TranslatePages() Creates page translations for all the languages defined as multi-lingual languages in the site Declaration IPageTranslationStatusCollection TranslatePages() Returns IPageTranslationStatusCollection IPageTranslationStatusCollection list containing information about this page's translations TranslatePages(PageTranslationOptions) Creates page translations for the requested languages Declaration IPageTranslationStatusCollection TranslatePages(PageTranslationOptions pageTranslationOptions) Parameters PageTranslationOptions pageTranslationOptions Options describing the languages in which a translation needs to be created Returns IPageTranslationStatusCollection IPageTranslationStatusCollection list containing information about this page's translations TranslatePagesAsync() Creates page translations for all the languages defined as multi-lingual languages in the site Declaration Task<IPageTranslationStatusCollection> TranslatePagesAsync() Returns Task < IPageTranslationStatusCollection > IPageTranslationStatusCollection list containing information about this page's translations TranslatePagesAsync(PageTranslationOptions) Creates page translations for the requested languages Declaration Task<IPageTranslationStatusCollection> TranslatePagesAsync(PageTranslationOptions pageTranslationOptions) Parameters PageTranslationOptions pageTranslationOptions Options describing the languages in which a translation needs to be created Returns Task < IPageTranslationStatusCollection > IPageTranslationStatusCollection list containing information about this page's translations Unlike() Unlikes a page Declaration void Unlike() UnlikeAsync() Unlikes a page Declaration Task UnlikeAsync() Returns Task WebPartIdToDefaultWebPart(String) Translated a given web part id to a DefaultWebPart enum. Non default web parts will be returned as ThirdParty Declaration DefaultWebPart WebPartIdToDefaultWebPart(string id) Parameters String id Web part id to lookup Returns DefaultWebPart Corresponding DefaultWebPart enum value"
  },
  "api/PnP.Core.Model.SharePoint.IPageComponent.html": {
    "href": "api/PnP.Core.Model.SharePoint.IPageComponent.html",
    "title": "Interface IPageComponent | PnP Core SDK",
    "keywords": "Interface IPageComponent Client side webpart object (retrieved via the _api/web/GetClientSideWebParts REST call) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IPageComponent Properties ComponentType Component type for client side webpart object Declaration int ComponentType { get; set; } Property Value Int32 Id Id for client side webpart object Declaration string Id { get; set; } Property Value String Manifest Manifest for client side webpart object Declaration string Manifest { get; set; } Property Value String ManifestType Manifest type for client side webpart object Declaration int ManifestType { get; set; } Property Value Int32 Name Name for client side webpart object Declaration string Name { get; set; } Property Value String Status Status for client side webpart object Declaration int Status { get; set; } Property Value Int32"
  },
  "api/PnP.Core.Model.SharePoint.IPageHeader.html": {
    "href": "api/PnP.Core.Model.SharePoint.IPageHeader.html",
    "title": "Interface IPageHeader | PnP Core SDK",
    "keywords": "Interface IPageHeader Class that implements the modern page header Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IPageHeader Properties AlternativeText Alternative text for the header image Declaration string AlternativeText { get; set; } Property Value String AuthorByLine Page author byline Declaration string AuthorByLine { get; set; } Property Value String AuthorByLineId Id of the page author Declaration int AuthorByLineId { get; set; } Property Value Int32 Authors Page author(s) to be displayed Declaration string Authors { get; set; } Property Value String ImageServerRelativeUrl Server relative link to page header image, set to null for default header image. Note: image needs to reside in the current site Declaration string ImageServerRelativeUrl { get; set; } Property Value String LayoutType Type of layout used inside the header Declaration PageHeaderLayoutType LayoutType { get; set; } Property Value PageHeaderLayoutType ShowPublishDate Show the page publication date in the title region Declaration bool ShowPublishDate { get; set; } Property Value Boolean ShowTopicHeader Show the topic header in the title region Declaration bool ShowTopicHeader { get; set; } Property Value Boolean TextAlignment Alignment of the title in the header Declaration PageHeaderTitleAlignment TextAlignment { get; set; } Property Value PageHeaderTitleAlignment TopicHeader The topic header text to show if ShowTopicHeader is set to true Declaration string TopicHeader { get; set; } Property Value String TranslateX Image focal point X coordinate Declaration double? TranslateX { get; set; } Property Value Nullable < Double > TranslateY Image focal point Y coordinate Declaration double? TranslateY { get; set; } Property Value Nullable < Double > Type Returns the type of header Declaration PageHeaderType Type { get; } Property Value PageHeaderType"
  },
  "api/PnP.Core.Model.SharePoint.IPageText.html": {
    "href": "api/PnP.Core.Model.SharePoint.IPageText.html",
    "title": "Interface IPageText | PnP Core SDK",
    "keywords": "Interface IPageText Text web part Inherited Members ICanvasControl.Section ICanvasControl.Column ICanvasControl.DataVersion ICanvasControl.CanvasDataVersion ICanvasControl.CanvasControlData ICanvasControl.ControlType ICanvasControl.JsonControlData ICanvasControl.InstanceId ICanvasControl.Order ICanvasControl.Delete() ICanvasControl.Move(ICanvasSection) ICanvasControl.Move(ICanvasSection, Int32) ICanvasControl.Move(ICanvasColumn) ICanvasControl.Move(ICanvasColumn, Int32) ICanvasControl.MovePosition(ICanvasSection) ICanvasControl.MovePosition(ICanvasSection, Int32) ICanvasControl.MovePosition(ICanvasColumn) ICanvasControl.MovePosition(ICanvasColumn, Int32) ICanvasControl.MovePosition(Int32) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IPageText : ICanvasControl Properties PreviewText Text used in page preview in news web part Declaration string PreviewText { get; } Property Value String Text Text value of the client side text control Declaration string Text { get; set; } Property Value String Type Type of the control (= IPageText ) Declaration Type Type { get; } Property Value Type"
  },
  "api/PnP.Core.Model.SharePoint.IPageTranslationStatus.html": {
    "href": "api/PnP.Core.Model.SharePoint.IPageTranslationStatus.html",
    "title": "Interface IPageTranslationStatus | PnP Core SDK",
    "keywords": "Interface IPageTranslationStatus Translation status for a page Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IPageTranslationStatus Properties Culture The culture of this translation Declaration string Culture { get; } Property Value String FileStatus The file status (checked out, draft, published) of this translation Declaration FileLevel FileStatus { get; } Property Value FileLevel HasPublishedVersion The file status (checked out, draft, published) of this translation Declaration bool HasPublishedVersion { get; } Property Value Boolean LastModified Last modified date of this translation Declaration DateTime LastModified { get; } Property Value DateTime Path The web-relative path to this page translation Declaration string Path { get; } Property Value String Title The page title of this translation Declaration string Title { get; } Property Value String"
  },
  "api/PnP.Core.Model.SharePoint.IPageTranslationStatusCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IPageTranslationStatusCollection.html",
    "title": "Interface IPageTranslationStatusCollection | PnP Core SDK",
    "keywords": "Interface IPageTranslationStatusCollection Translation status of a page Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IPageTranslationStatusCollection Properties TranslatedLanguages List of IPageTranslationStatus objects for the translations of this page Declaration List<IPageTranslationStatus> TranslatedLanguages { get; } Property Value PnP.Core.Model.SharePoint.List < IPageTranslationStatus > UntranslatedLanguages List of languages for which this page was not yet translated Declaration List<string> UntranslatedLanguages { get; } Property Value PnP.Core.Model.SharePoint.List < String >"
  },
  "api/PnP.Core.Model.SharePoint.IPageWebPart.html": {
    "href": "api/PnP.Core.Model.SharePoint.IPageWebPart.html",
    "title": "Interface IPageWebPart | PnP Core SDK",
    "keywords": "Interface IPageWebPart This class is used to instantiate modern web parts. Using this class you can instantiate a control and add it on a IPage . Inherited Members ICanvasControl.Section ICanvasControl.Column ICanvasControl.DataVersion ICanvasControl.CanvasDataVersion ICanvasControl.CanvasControlData ICanvasControl.ControlType ICanvasControl.JsonControlData ICanvasControl.InstanceId ICanvasControl.Order ICanvasControl.Delete() ICanvasControl.Move(ICanvasSection) ICanvasControl.Move(ICanvasSection, Int32) ICanvasControl.Move(ICanvasColumn) ICanvasControl.Move(ICanvasColumn, Int32) ICanvasControl.MovePosition(ICanvasSection) ICanvasControl.MovePosition(ICanvasSection, Int32) ICanvasControl.MovePosition(ICanvasColumn) ICanvasControl.MovePosition(ICanvasColumn, Int32) ICanvasControl.MovePosition(Int32) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IPageWebPart : ICanvasControl Properties Description Description of the web part Declaration string Description { get; set; } Property Value String DynamicDataPaths DynamicDataPaths json node Declaration JsonElement DynamicDataPaths { get; } Property Value JsonElement DynamicDataValues DynamicDataValues json node Declaration JsonElement DynamicDataValues { get; } Property Value JsonElement HtmlProperties Value of the \"data-sp-htmlproperties\" attribute Declaration string HtmlProperties { get; } Property Value String HtmlPropertiesData Value of the \"data-sp-htmlproperties\" element Declaration string HtmlPropertiesData { get; } Property Value String IsHeaderControl This control lives in the page header (not removable control) Declaration bool IsHeaderControl { get; set; } Property Value Boolean JsonWebPartData Value of the \"data-sp-webpartdata\" attribute Declaration string JsonWebPartData { get; } Property Value String Properties Web properties as configurable Declaration JsonElement Properties { get; } Property Value JsonElement PropertiesJson Json serialized web part information. For 1st party web parts this ideally is the full JSON string fetch via workbench or via copying it from an existing page. It's important that the serverProcessedContent element is included here! Declaration string PropertiesJson { get; set; } Property Value String RichTextEditorInstanceId If this webpart is used inline in a text editor then this property points to the editor using it Declaration string RichTextEditorInstanceId { get; } Property Value String ServerProcessedContent ServerProcessedContent json node Declaration JsonElement ServerProcessedContent { get; } Property Value JsonElement SupportsFullBleed Supports full bleed display experience Declaration bool SupportsFullBleed { get; } Property Value Boolean Title Title of the web part Declaration string Title { get; set; } Property Value String Type Return Type of the client side web part Declaration Type Type { get; } Property Value Type WebPartData Value of the \"data-sp-webpart\" attribute Declaration string WebPartData { get; } Property Value String WebPartId ID of the client side web part Declaration string WebPartId { get; } Property Value String WebPartPreviewImage Preview image that can serve as page preview image when the page holding this web part is promoted to a news page Declaration string WebPartPreviewImage { get; } Property Value String"
  },
  "api/PnP.Core.Model.SharePoint.IPersonProperties.html": {
    "href": "api/PnP.Core.Model.SharePoint.IPersonProperties.html",
    "title": "Interface IPersonProperties | PnP Core SDK",
    "keywords": "Interface IPersonProperties A metadata for a person Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IPersonProperties Properties AccountName Person's account name in a form of \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; Declaration string AccountName { get; set; } Property Value String DirectReports Direct reports for the current user Declaration List<string> DirectReports { get; set; } Property Value PnP.Core.Model.SharePoint.List < String > DisplayName Persons' display name Declaration string DisplayName { get; set; } Property Value String Email Person's email Declaration string Email { get; set; } Property Value String ExtendedManagers Extended managers for the current user Declaration List<string> ExtendedManagers { get; set; } Property Value PnP.Core.Model.SharePoint.List < String > ExtendedReports Extended reports for the current user Declaration List<string> ExtendedReports { get; set; } Property Value PnP.Core.Model.SharePoint.List < String > IsFollowed Whether the current user is followed or not Declaration bool IsFollowed { get; set; } Property Value Boolean LatestPost Person's latest post url Declaration string LatestPost { get; set; } Property Value String Peers Current user's peers Declaration List<string> Peers { get; set; } Property Value PnP.Core.Model.SharePoint.List < String > PersonalSiteHostUrl Person's site host url Declaration string PersonalSiteHostUrl { get; set; } Property Value String PersonalUrl Person's personal url Declaration string PersonalUrl { get; set; } Property Value String PictureUrl Profile photo url Declaration string PictureUrl { get; set; } Property Value String Title Person's title Declaration string Title { get; set; } Property Value String UserProfileProperties User profile properties key-value collection Declaration Dictionary<string, object> UserProfileProperties { get; set; } Property Value Dictionary < String , Object > UserUrl User url Declaration string UserUrl { get; set; } Property Value String"
  },
  "api/PnP.Core.Model.SharePoint.IPropertyValues.html": {
    "href": "api/PnP.Core.Model.SharePoint.IPropertyValues.html",
    "title": "Interface IPropertyValues | PnP Core SDK",
    "keywords": "Interface IPropertyValues Public interface to define a PropertyValues object Inherited Members IDataModel<IPropertyValues>.Requested IDataModel<IPropertyValues>.HasValue(String) IDataModel<IPropertyValues>.HasChanged(String) IDataModel<IPropertyValues>.IsPropertyAvailable(Expression<Func<IPropertyValues, Object>>) IDataModel<IPropertyValues>.ArePropertiesAvailable(Expression<Func<IPropertyValues, Object>>[]) IDataModel<IPropertyValues>.EnsureProperties(Expression<Func<IPropertyValues, Object>>[]) IDataModel<IPropertyValues>.EnsurePropertiesAsync(Expression<Func<IPropertyValues, Object>>[]) IDataModel<IPropertyValues>.ExecuteRequestAsync(ApiRequest) IDataModel<IPropertyValues>.ExecuteRequest(ApiRequest) IDataModel<IPropertyValues>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IPropertyValues>.ExecuteRequestBatch(ApiRequest) IDataModel<IPropertyValues>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IPropertyValues>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IExpandoDataModel.Item[String] IExpandoDataModel.Values IExpandoDataModel.Count IExpandoDataModel.AsDynamic() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IPropertyValues : IDataModel<IPropertyValues>, IDataModelParent, IDataModelWithContext, ISupportModules<IPropertyValues>, IExpandoDataModel Methods GetBoolean(String, Boolean) Get boolean typed property bag value. If does not contain, returns given default value. Declaration bool GetBoolean(string key, bool defaultValue) Parameters String key Key of the property bag entry to return Boolean defaultValue Default value of the property bag Returns Boolean Value of the property bag entry as boolean GetInteger(String, Int32) Get int typed property bag value. If does not contain, returns given default value. Declaration int GetInteger(string key, int defaultValue) Parameters String key Key of the property bag entry to return Int32 defaultValue Default value of the property bag Returns Int32 Value of the property bag entry as int GetString(String, String) Get string typed property bag value. If does not contain, returns given default value. Declaration string GetString(string key, string defaultValue) Parameters String key Key of the property bag entry to return String defaultValue Default value of the property bag Returns String Value of the property bag entry as string Update() Update the property bag Declaration void Update() UpdateAsync() Update the property bag Declaration Task UpdateAsync() Returns Task Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IRecycleBinItem.html": {
    "href": "api/PnP.Core.Model.SharePoint.IRecycleBinItem.html",
    "title": "Interface IRecycleBinItem | PnP Core SDK",
    "keywords": "Interface IRecycleBinItem Public interface to define a RecycleBinItem object Inherited Members IDataModel<IRecycleBinItem>.Requested IDataModel<IRecycleBinItem>.HasValue(String) IDataModel<IRecycleBinItem>.HasChanged(String) IDataModel<IRecycleBinItem>.IsPropertyAvailable(Expression<Func<IRecycleBinItem, Object>>) IDataModel<IRecycleBinItem>.ArePropertiesAvailable(Expression<Func<IRecycleBinItem, Object>>[]) IDataModel<IRecycleBinItem>.EnsureProperties(Expression<Func<IRecycleBinItem, Object>>[]) IDataModel<IRecycleBinItem>.EnsurePropertiesAsync(Expression<Func<IRecycleBinItem, Object>>[]) IDataModel<IRecycleBinItem>.ExecuteRequestAsync(ApiRequest) IDataModel<IRecycleBinItem>.ExecuteRequest(ApiRequest) IDataModel<IRecycleBinItem>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IRecycleBinItem>.ExecuteRequestBatch(ApiRequest) IDataModel<IRecycleBinItem>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IRecycleBinItem>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IRecycleBinItem>.GetBatchAsync(Batch, Expression<Func<IRecycleBinItem, Object>>[]) IDataModelGet<IRecycleBinItem>.GetAsync(Expression<Func<IRecycleBinItem, Object>>[]) IDataModelLoad<IRecycleBinItem>.LoadBatchAsync(Batch, Expression<Func<IRecycleBinItem, Object>>[]) IDataModelLoad<IRecycleBinItem>.LoadAsync(Expression<Func<IRecycleBinItem, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IRecycleBinItem : IDataModel<IRecycleBinItem>, IDataModelParent, IDataModelWithContext, ISupportModules<IRecycleBinItem>, IDataModelGet<IRecycleBinItem>, IDataModelLoad<IRecycleBinItem>, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object Author Gets a value that specifies the user who created the Recycle Bin item. Declaration ISharePointUser Author { get; } Property Value ISharePointUser AuthorEmail Gets the e-mail address of the user who created the recycle bin item. Declaration string AuthorEmail { get; } Property Value String AuthorName Gets the name of the user who created the recycle bin item. Declaration string AuthorName { get; } Property Value String DeletedBy Gets a value that specifies the user who deleted the Recycle Bin item. Declaration ISharePointUser DeletedBy { get; } Property Value ISharePointUser DeletedByEmail Gets the e-mail address of the user who deleted the recycle bin item. Declaration string DeletedByEmail { get; } Property Value String DeletedByName Gets the name of the user who deleted the recycle bin item. Declaration string DeletedByName { get; } Property Value String DeletedDate Gets a value that specifies when the Recycle Bin item was moved to the Recycle Bin. Declaration DateTime DeletedDate { get; } Property Value DateTime DeletedDateLocalFormatted Gets a value that specifies when the Recycle Bin item was moved to the Recycle Bin formatted in the local date. Declaration string DeletedDateLocalFormatted { get; } Property Value String DirName Gets a value that specifies the site relative URL of the list or folder that originally contained the Recycle Bin item. Declaration string DirName { get; } Property Value String Id Gets a value that specifies the identifier of the Recycle Bin item. Declaration Guid Id { get; } Property Value Guid ItemState Gets a value that specifies the Recycle Bin stage of the Recycle Bin item. Declaration RecycleBinItemState ItemState { get; } Property Value RecycleBinItemState ItemType Gets a value that specifies the type of the Recycle Bin item. Declaration RecycleBinItemType ItemType { get; } Property Value RecycleBinItemType LeafName Gets a value that specifies the leaf name of the Recycle Bin item. Declaration string LeafName { get; } Property Value String Size Gets a value that specifies the size of the Recycle Bin item in bytes. Declaration long Size { get; } Property Value Int64 Title Gets a value that specifies the title of the Recycle Bin item. Declaration string Title { get; } Property Value String Methods MoveToSecondStage() Move the recycle bin item to the second stage recycle bin Declaration void MoveToSecondStage() MoveToSecondStageAsync() Move the recycle bin item to the second stage recycle bin Declaration Task MoveToSecondStageAsync() Returns Task MoveToSecondStageBatch() Move the recycle bin item to the second stage recycle bin using the current context batch instance Declaration void MoveToSecondStageBatch() MoveToSecondStageBatch(Batch) Move the recycle bin item to the second stage recycle bin using a specific batch instance The batch instance to use. Declaration void MoveToSecondStageBatch(Batch batch) Parameters Batch batch MoveToSecondStageBatchAsync() Move the recycle bin item to the second stage recycle bin using the current context batch instance Declaration Task MoveToSecondStageBatchAsync() Returns Task MoveToSecondStageBatchAsync(Batch) Move the recycle bin item to the second stage recycle bin using a specific batch instance The batch instance to use. Declaration Task MoveToSecondStageBatchAsync(Batch batch) Parameters Batch batch Returns Task Restore() Restores the recycle bin item to its original location. Declaration void Restore() RestoreAsync() Restores the recycle bin item to its original location. Declaration Task RestoreAsync() Returns Task RestoreBatch() Restores the recycle bin item to its original location using the current context batch instance Declaration void RestoreBatch() RestoreBatch(Batch) Restores the recycle bin item to its original location using a specific batch instance The batch instance to use. Declaration void RestoreBatch(Batch batch) Parameters Batch batch RestoreBatchAsync() Restores the recycle bin item to its original location using the current context batch instance Declaration Task RestoreBatchAsync() Returns Task RestoreBatchAsync(Batch) Restores the recycle bin item to its original location using a specific batch instance The batch instance to use. Declaration Task RestoreBatchAsync(Batch batch) Parameters Batch batch Returns Task Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IRecycleBinItemCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IRecycleBinItemCollection.html",
    "title": "Interface IRecycleBinItemCollection | PnP Core SDK",
    "keywords": "Interface IRecycleBinItemCollection Public interface to define a collection of RecycleBinItem objects Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<IRecycleBinItem>.LoadAsync(Expression<Func<IRecycleBinItem, Object>>[]) IDataModelCollectionLoad<IRecycleBinItem>.LoadBatchAsync(Batch, Expression<Func<IRecycleBinItem, Object>>[]) IDataModelCollectionDeleteByGuidId.DeleteById(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdAsync(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatch(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatchAsync(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatch(Batch, Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatchAsync(Batch, Guid) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IRecycleBinItemCollection : IQueryable<IRecycleBinItem>, IAsyncEnumerable<IRecycleBinItem>, IDataModelCollection<IRecycleBinItem>, IEnumerable<IRecycleBinItem>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<IRecycleBinItem>, IDataModelCollectionDeleteByGuidId, ISupportModules<IRecycleBinItemCollection> Methods DeleteAll() Permanently deletes all Recycle Bin items. Declaration void DeleteAll() DeleteAllAsync() Permanently deletes all Recycle Bin items. Declaration Task DeleteAllAsync() Returns Task DeleteAllBatch() Permanently deletes all Recycle Bin items using the current context batch instance. Declaration void DeleteAllBatch() DeleteAllBatch(Batch) Permanently deletes all Recycle Bin items using a specific batch instance. Declaration void DeleteAllBatch(Batch batch) Parameters Batch batch DeleteAllBatchAsync() Permanently deletes all Recycle Bin items using the current context batch instance. Declaration Task DeleteAllBatchAsync() Returns Task DeleteAllBatchAsync(Batch) Permanently deletes all Recycle Bin items using a specific batch instance. Declaration Task DeleteAllBatchAsync(Batch batch) Parameters Batch batch Returns Task DeleteAllSecondStageItems() Permanently deletes second stage Recycle Bin items. Declaration void DeleteAllSecondStageItems() DeleteAllSecondStageItemsAsync() Permanently deletes second stage Recycle Bin items. Declaration Task DeleteAllSecondStageItemsAsync() Returns Task DeleteAllSecondStageItemsBatch() Permanently deletes all Recycle Bin items using the current context batch instance. Declaration void DeleteAllSecondStageItemsBatch() DeleteAllSecondStageItemsBatch(Batch) Permanently deletes second stage Recycle Bin items using a specific batch instance. Declaration void DeleteAllSecondStageItemsBatch(Batch batch) Parameters Batch batch DeleteAllSecondStageItemsBatchAsync() Permanently deletes second stage Recycle Bin items using the current context batch instance. Declaration Task DeleteAllSecondStageItemsBatchAsync() Returns Task DeleteAllSecondStageItemsBatchAsync(Batch) Permanently deletes second stage Recycle Bin items using a specific batch instance. Declaration Task DeleteAllSecondStageItemsBatchAsync(Batch batch) Parameters Batch batch Returns Task GetById(Guid, Expression<Func<IRecycleBinItem, Object>>[]) Method to select a recycle bin item ( IRecycleBinItem ) by id Declaration IRecycleBinItem GetById(Guid id, params Expression<Func<IRecycleBinItem, object>>[] selectors) Parameters Guid id The Id to search for Expression < Func < IRecycleBinItem , Object >>[] selectors The expressions declaring the fields to select Returns IRecycleBinItem The resulting recycle bin item instance, if any GetByIdAsync(Guid, Expression<Func<IRecycleBinItem, Object>>[]) Method to select a recycle bin item ( IRecycleBinItem ) by id asynchronously Declaration Task<IRecycleBinItem> GetByIdAsync(Guid id, params Expression<Func<IRecycleBinItem, object>>[] selectors) Parameters Guid id The Id to search for Expression < Func < IRecycleBinItem , Object >>[] selectors The expressions declaring the fields to select Returns Task < IRecycleBinItem > The resulting recycle bin item instance, if any MoveAllToSecondStage() Move all Recycle Bin items to second stage. Declaration void MoveAllToSecondStage() MoveAllToSecondStageAsync() Move all Recycle Bin items to second stage. Declaration Task MoveAllToSecondStageAsync() Returns Task MoveAllToSecondStageBatch() Move all Recycle Bin items to second stage using the current context batch instance. Declaration void MoveAllToSecondStageBatch() MoveAllToSecondStageBatch(Batch) Move all Recycle Bin items to second stage using a specific batch instance. Declaration void MoveAllToSecondStageBatch(Batch batch) Parameters Batch batch MoveAllToSecondStageBatchAsync() Move all Recycle Bin items to second stage using the current context batch instance. Declaration Task MoveAllToSecondStageBatchAsync() Returns Task MoveAllToSecondStageBatchAsync(Batch) Move all Recycle Bin items to second stage using a specific batch instance. Declaration Task MoveAllToSecondStageBatchAsync(Batch batch) Parameters Batch batch Returns Task RestoreAll() Restores all Recycle Bin items to their original locations. Declaration void RestoreAll() RestoreAllAsync() Restores all Recycle Bin items to their original locations. Declaration Task RestoreAllAsync() Returns Task RestoreAllBatch() Restores all Recycle Bin items to their original locations using the current context batch instance. Declaration void RestoreAllBatch() RestoreAllBatch(Batch) Restores all Recycle Bin items to their original locations using a specific batch instance. Declaration void RestoreAllBatch(Batch batch) Parameters Batch batch RestoreAllBatchAsync() Restores all Recycle Bin items to their original locations using the current context batch instance. Declaration Task RestoreAllBatchAsync() Returns Task RestoreAllBatchAsync(Batch) Restores all Recycle Bin items to their original locations using a specific batch instance. Declaration Task RestoreAllBatchAsync(Batch batch) Parameters Batch batch Returns Task Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.IRegionalSettings.html": {
    "href": "api/PnP.Core.Model.SharePoint.IRegionalSettings.html",
    "title": "Interface IRegionalSettings | PnP Core SDK",
    "keywords": "Interface IRegionalSettings Public interface to define a RegionalSettings object Inherited Members IDataModel<IRegionalSettings>.Requested IDataModel<IRegionalSettings>.HasValue(String) IDataModel<IRegionalSettings>.HasChanged(String) IDataModel<IRegionalSettings>.IsPropertyAvailable(Expression<Func<IRegionalSettings, Object>>) IDataModel<IRegionalSettings>.ArePropertiesAvailable(Expression<Func<IRegionalSettings, Object>>[]) IDataModel<IRegionalSettings>.EnsureProperties(Expression<Func<IRegionalSettings, Object>>[]) IDataModel<IRegionalSettings>.EnsurePropertiesAsync(Expression<Func<IRegionalSettings, Object>>[]) IDataModel<IRegionalSettings>.ExecuteRequestAsync(ApiRequest) IDataModel<IRegionalSettings>.ExecuteRequest(ApiRequest) IDataModel<IRegionalSettings>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IRegionalSettings>.ExecuteRequestBatch(ApiRequest) IDataModel<IRegionalSettings>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IRegionalSettings>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IRegionalSettings>.GetBatchAsync(Batch, Expression<Func<IRegionalSettings, Object>>[]) IDataModelGet<IRegionalSettings>.GetAsync(Expression<Func<IRegionalSettings, Object>>[]) IDataModelLoad<IRegionalSettings>.LoadBatchAsync(Batch, Expression<Func<IRegionalSettings, Object>>[]) IDataModelLoad<IRegionalSettings>.LoadAsync(Expression<Func<IRegionalSettings, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IRegionalSettings : IDataModel<IRegionalSettings>, IDataModelParent, IDataModelWithContext, ISupportModules<IRegionalSettings>, IDataModelGet<IRegionalSettings>, IDataModelLoad<IRegionalSettings>, IQueryableDataModel Properties All Gets all properties of this entity Declaration object All { get; } Property Value Object AM Gets the string that is used to represent A.M.. Declaration string AM { get; } Property Value String CollationLCID Gets the locale identifier (LCID) for the collation rules that are used on the site. Declaration int CollationLCID { get; } Property Value Int32 DateFormat Gets the date format that is used. Declaration int DateFormat { get; } Property Value Int32 DateSeparator Gets the separator that is used for dates. Declaration string DateSeparator { get; } Property Value String DecimalSeparator Gets the separator that is used for decimals. Declaration string DecimalSeparator { get; } Property Value String DigitGrouping Gets the separator that is used in grouping digits. Declaration string DigitGrouping { get; } Property Value String FirstDayOfWeek Gets the first day of the week used in calendars. Declaration int FirstDayOfWeek { get; } Property Value Int32 IsEastAsia Gets a Boolean value that indicates whether the Web site locale is an East Asian locale. Declaration bool IsEastAsia { get; } Property Value Boolean IsRightToLeft Gets the separator that is used for decimals. Declaration bool IsRightToLeft { get; } Property Value Boolean IsUIRightToLeft Gets a Boolean value that indicates whether the Web site user interface (UI) uses a right-to-left language. Declaration bool IsUIRightToLeft { get; } Property Value Boolean ListSeparator Gets the separator used in lists. Declaration string ListSeparator { get; } Property Value String LocaleId Gets or sets the locale ID in use. Declaration int LocaleId { get; } Property Value Int32 NegativeSign Gets the symbol that is used to represent a negative sign. Declaration string NegativeSign { get; } Property Value String NegNumberMode Gets the negative number mode that is used for displaying negative numbers in calculated fields based on the locale of the server. Declaration int NegNumberMode { get; } Property Value Int32 PM Gets the string that is used to represent P.M.. Declaration string PM { get; } Property Value String PositiveSign Gets the symbol that is used to represent a positive sign. Declaration string PositiveSign { get; } Property Value String ShowWeeks Gets Boolean value that specifies whether to display the week number in day or week views of a calendar. Declaration bool ShowWeeks { get; } Property Value Boolean ThousandSeparator Gets the thousand separator used for numbers. Declaration string ThousandSeparator { get; } Property Value String Time24 Gets or sets a Boolean value that specifies whether to use a 24-hour time format in representing the hours of the day. Declaration bool Time24 { get; } Property Value Boolean TimeMarkerPosition Gets a value that indicates whether A.M. and P.M. appear before or after the time string. Declaration int TimeMarkerPosition { get; } Property Value Int32 TimeSeparator Gets the time separator that is used. Declaration string TimeSeparator { get; } Property Value String TimeZone Gets the time zone that is used. Declaration ITimeZone TimeZone { get; } Property Value ITimeZone TimeZones Gets the collection of time zones used in SharePoint Online. Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration ITimeZoneCollection TimeZones { get; } Property Value ITimeZoneCollection Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.ISecurableObject.html": {
    "href": "api/PnP.Core.Model.SharePoint.ISecurableObject.html",
    "title": "Interface ISecurableObject | PnP Core SDK",
    "keywords": "Interface ISecurableObject Defines the properties and methods for securable object (Web, List, ListItem) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ISecurableObject Properties HasUniqueRoleAssignments Returns if the securable object has unique role assignments Declaration bool HasUniqueRoleAssignments { get; } Property Value Boolean RoleAssignments Role Assignments defined on this securable object Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IRoleAssignmentCollection RoleAssignments { get; } Property Value IRoleAssignmentCollection Methods AddRoleDefinition(Int32, IRoleDefinition) Add role definitions for a specific principal id (IUser.Id or ISharePointGroup.Id) Declaration void AddRoleDefinition(int principalId, IRoleDefinition roleDefinition) Parameters Int32 principalId IRoleDefinition roleDefinition Role definition to add AddRoleDefinitionAsync(Int32, IRoleDefinition) Adds role definitions for a specific principal id (IUser.Id or ISharePointGroup.Id) Declaration Task AddRoleDefinitionAsync(int principalId, IRoleDefinition roleDefinition) Parameters Int32 principalId IRoleDefinition roleDefinition Role definition to add Returns Task AddRoleDefinitionBatch(Batch, Int32, IRoleDefinition) Add role definitions for a specific principal id (IUser.Id or ISharePointGroup.Id) Declaration void AddRoleDefinitionBatch(Batch batch, int principalId, IRoleDefinition roleDefinition) Parameters Batch batch The batch to add this request to Int32 principalId IRoleDefinition roleDefinition Role definition to add AddRoleDefinitionBatch(Int32, IRoleDefinition) Add role definitions for a specific principal id (IUser.Id or ISharePointGroup.Id) Declaration void AddRoleDefinitionBatch(int principalId, IRoleDefinition roleDefinition) Parameters Int32 principalId IRoleDefinition roleDefinition Role definition to add AddRoleDefinitionBatchAsync(Batch, Int32, IRoleDefinition) Adds role definitions for a specific principal id (IUser.Id or ISharePointGroup.Id) Declaration Task AddRoleDefinitionBatchAsync(Batch batch, int principalId, IRoleDefinition roleDefinition) Parameters Batch batch The batch to add this request to Int32 principalId IRoleDefinition roleDefinition Role definition to add Returns Task AddRoleDefinitionBatchAsync(Int32, IRoleDefinition) Adds role definitions for a specific principal id (IUser.Id or ISharePointGroup.Id) Declaration Task AddRoleDefinitionBatchAsync(int principalId, IRoleDefinition roleDefinition) Parameters Int32 principalId IRoleDefinition roleDefinition Role definition to add Returns Task AddRoleDefinitions(Int32, String[]) Adds roles for a specific principal id (IUser.Id or ISharePointGroup.Id) Declaration bool AddRoleDefinitions(int principalId, params string[] names) Parameters Int32 principalId Id of the user or group String [] names Roles to add Returns Boolean AddRoleDefinitionsAsync(Int32, String[]) Adds roles for a specific principal id (IUser.Id or ISharePointGroup.Id) Declaration Task<bool> AddRoleDefinitionsAsync(int principalId, params string[] names) Parameters Int32 principalId Id of the user or group String [] names Roles to add Returns Task < Boolean > BreakRoleInheritance(Boolean, Boolean) Creates unique role assignments for this securable object. Declaration void BreakRoleInheritance(bool copyRoleAssignments, bool clearSubscopes) Parameters Boolean copyRoleAssignments Specifies whether to copy the role assignments from the parent securable object. If the value is false, the collection of role assignments must contain only 1 role assignment containing the current user after the operation. Boolean clearSubscopes If the securable object is a site, and the clearsubscopes parameter is true, the role assignments for all child securable objects in the current site and in the sites which inherit role assignments from the current site must be cleared and those securable objects will inherit role assignments from the current site after this call. If the securable object is a site, and the clearsubscopes parameter is false, the role assignments for all child securable objects which do not inherit role assignments from their parent object must remain unchanged. If the securable object is not a site, and the clearsubscopes parameter is true, the role assignments for all child securable objects must be cleared and those securable objects will inherit role assignments from the current securable object after this call. If the securable object is not a site, and the clearsubscopes parameter is false, the role assignments for all child securable objects which do not inherit role assignments from their parent object must remain unchanged. BreakRoleInheritanceAsync(Boolean, Boolean) Creates unique role assignments for this securable object. Declaration Task BreakRoleInheritanceAsync(bool copyRoleAssignments, bool clearSubscopes) Parameters Boolean copyRoleAssignments Specifies whether to copy the role assignments from the parent securable object. If the value is false, the collection of role assignments must contain only 1 role assignment containing the current user after the operation. Boolean clearSubscopes If the securable object is a site, and the clearsubscopes parameter is true, the role assignments for all child securable objects in the current site and in the sites which inherit role assignments from the current site must be cleared and those securable objects will inherit role assignments from the current site after this call. If the securable object is a site, and the clearsubscopes parameter is false, the role assignments for all child securable objects which do not inherit role assignments from their parent object must remain unchanged. If the securable object is not a site, and the clearsubscopes parameter is true, the role assignments for all child securable objects must be cleared and those securable objects will inherit role assignments from the current securable object after this call. If the securable object is not a site, and the clearsubscopes parameter is false, the role assignments for all child securable objects which do not inherit role assignments from their parent object must remain unchanged. Returns Task BreakRoleInheritanceBatch(Batch, Boolean, Boolean) Creates unique role assignments for this securable object. Declaration void BreakRoleInheritanceBatch(Batch batch, bool copyRoleAssignments, bool clearSubscopes) Parameters Batch batch Batch add this request to Boolean copyRoleAssignments Specifies whether to copy the role assignments from the parent securable object. If the value is false, the collection of role assignments must contain only 1 role assignment containing the current user after the operation. Boolean clearSubscopes If the securable object is a site, and the clearsubscopes parameter is true, the role assignments for all child securable objects in the current site and in the sites which inherit role assignments from the current site must be cleared and those securable objects will inherit role assignments from the current site after this call. If the securable object is a site, and the clearsubscopes parameter is false, the role assignments for all child securable objects which do not inherit role assignments from their parent object must remain unchanged. If the securable object is not a site, and the clearsubscopes parameter is true, the role assignments for all child securable objects must be cleared and those securable objects will inherit role assignments from the current securable object after this call. If the securable object is not a site, and the clearsubscopes parameter is false, the role assignments for all child securable objects which do not inherit role assignments from their parent object must remain unchanged. BreakRoleInheritanceBatch(Boolean, Boolean) Creates unique role assignments for this securable object. Declaration void BreakRoleInheritanceBatch(bool copyRoleAssignments, bool clearSubscopes) Parameters Boolean copyRoleAssignments Specifies whether to copy the role assignments from the parent securable object. If the value is false, the collection of role assignments must contain only 1 role assignment containing the current user after the operation. Boolean clearSubscopes If the securable object is a site, and the clearsubscopes parameter is true, the role assignments for all child securable objects in the current site and in the sites which inherit role assignments from the current site must be cleared and those securable objects will inherit role assignments from the current site after this call. If the securable object is a site, and the clearsubscopes parameter is false, the role assignments for all child securable objects which do not inherit role assignments from their parent object must remain unchanged. If the securable object is not a site, and the clearsubscopes parameter is true, the role assignments for all child securable objects must be cleared and those securable objects will inherit role assignments from the current securable object after this call. If the securable object is not a site, and the clearsubscopes parameter is false, the role assignments for all child securable objects which do not inherit role assignments from their parent object must remain unchanged. BreakRoleInheritanceBatchAsync(Batch, Boolean, Boolean) Creates unique role assignments for this securable object. Declaration Task BreakRoleInheritanceBatchAsync(Batch batch, bool copyRoleAssignments, bool clearSubscopes) Parameters Batch batch Batch add this request to Boolean copyRoleAssignments Specifies whether to copy the role assignments from the parent securable object. If the value is false, the collection of role assignments must contain only 1 role assignment containing the current user after the operation. Boolean clearSubscopes If the securable object is a site, and the clearsubscopes parameter is true, the role assignments for all child securable objects in the current site and in the sites which inherit role assignments from the current site must be cleared and those securable objects will inherit role assignments from the current site after this call. If the securable object is a site, and the clearsubscopes parameter is false, the role assignments for all child securable objects which do not inherit role assignments from their parent object must remain unchanged. If the securable object is not a site, and the clearsubscopes parameter is true, the role assignments for all child securable objects must be cleared and those securable objects will inherit role assignments from the current securable object after this call. If the securable object is not a site, and the clearsubscopes parameter is false, the role assignments for all child securable objects which do not inherit role assignments from their parent object must remain unchanged. Returns Task BreakRoleInheritanceBatchAsync(Boolean, Boolean) Creates unique role assignments for this securable object. Declaration Task BreakRoleInheritanceBatchAsync(bool copyRoleAssignments, bool clearSubscopes) Parameters Boolean copyRoleAssignments Specifies whether to copy the role assignments from the parent securable object. If the value is false, the collection of role assignments must contain only 1 role assignment containing the current user after the operation. Boolean clearSubscopes If the securable object is a site, and the clearsubscopes parameter is true, the role assignments for all child securable objects in the current site and in the sites which inherit role assignments from the current site must be cleared and those securable objects will inherit role assignments from the current site after this call. If the securable object is a site, and the clearsubscopes parameter is false, the role assignments for all child securable objects which do not inherit role assignments from their parent object must remain unchanged. If the securable object is not a site, and the clearsubscopes parameter is true, the role assignments for all child securable objects must be cleared and those securable objects will inherit role assignments from the current securable object after this call. If the securable object is not a site, and the clearsubscopes parameter is false, the role assignments for all child securable objects which do not inherit role assignments from their parent object must remain unchanged. Returns Task GetRoleDefinitions(Int32) Returns the roles for a specific principal id (IUser.Id or ISharePointGroup.Id) Declaration IRoleDefinitionCollection GetRoleDefinitions(int principalId) Parameters Int32 principalId Id of the user or group Returns IRoleDefinitionCollection GetRoleDefinitionsAsync(Int32) Returns the roles for a specific principal id (IUser.Id or ISharePointGroup.Id) Declaration Task<IRoleDefinitionCollection> GetRoleDefinitionsAsync(int principalId) Parameters Int32 principalId Id of the user or group Returns Task < IRoleDefinitionCollection > RemoveRoleDefinition(Int32, IRoleDefinition) Removes role definitions for a specific principal id (IUser.Id or ISharePointGroup.Id) Declaration void RemoveRoleDefinition(int principalId, IRoleDefinition roleDefinition) Parameters Int32 principalId IRoleDefinition roleDefinition Role definition to remove RemoveRoleDefinitionAsync(Int32, IRoleDefinition) Removes role definitions for a specific principal id (IUser.Id or ISharePointGroup.Id) Declaration Task RemoveRoleDefinitionAsync(int principalId, IRoleDefinition roleDefinition) Parameters Int32 principalId IRoleDefinition roleDefinition Role definition to remove Returns Task RemoveRoleDefinitionBatch(Batch, Int32, IRoleDefinition) Removes role definitions for a specific principal id (IUser.Id or ISharePointGroup.Id) Declaration void RemoveRoleDefinitionBatch(Batch batch, int principalId, IRoleDefinition roleDefinition) Parameters Batch batch The batch to add this request to Int32 principalId IRoleDefinition roleDefinition Role definition to remove RemoveRoleDefinitionBatch(Int32, IRoleDefinition) Removes role definitions for a specific principal id (IUser.Id or ISharePointGroup.Id) Declaration void RemoveRoleDefinitionBatch(int principalId, IRoleDefinition roleDefinition) Parameters Int32 principalId IRoleDefinition roleDefinition Role definition to remove RemoveRoleDefinitionBatchAsync(Batch, Int32, IRoleDefinition) Removes role definitions for a specific principal id (IUser.Id or ISharePointGroup.Id) Declaration Task RemoveRoleDefinitionBatchAsync(Batch batch, int principalId, IRoleDefinition roleDefinition) Parameters Batch batch The batch to add this request to Int32 principalId IRoleDefinition roleDefinition Role definition to remove Returns Task RemoveRoleDefinitionBatchAsync(Int32, IRoleDefinition) Removes role definitions for a specific principal id (IUser.Id or ISharePointGroup.Id) Declaration Task RemoveRoleDefinitionBatchAsync(int principalId, IRoleDefinition roleDefinition) Parameters Int32 principalId IRoleDefinition roleDefinition Role definition to remove Returns Task RemoveRoleDefinitions(Int32, String[]) Removes roles for a specific principal id (IUser.Id or ISharePointGroup.Id) Declaration bool RemoveRoleDefinitions(int principalId, params string[] names) Parameters Int32 principalId Id of the user or group String [] names Roles to remove Returns Boolean RemoveRoleDefinitionsAsync(Int32, String[]) Removes role for a specific principal id (IUser.Id or ISharePointGroup.Id) Declaration Task<bool> RemoveRoleDefinitionsAsync(int principalId, params string[] names) Parameters Int32 principalId Id of the user or group String [] names Roles to remove Returns Task < Boolean > ResetRoleInheritance() Removes the local role assignments so that the web, and all its descendant objects, re-inherit role assignments from the parent object. Declaration void ResetRoleInheritance() ResetRoleInheritanceAsync() Removes the local role assignments so that the web, and all its descendant objects, re-inherit role assignments from the parent object. Declaration Task ResetRoleInheritanceAsync() Returns Task ResetRoleInheritanceBatch() Removes the local role assignments so that the web, and all its descendant objects, re-inherit role assignments from the parent object. Declaration void ResetRoleInheritanceBatch() ResetRoleInheritanceBatch(Batch) Removes the local role assignments so that the web, and all its descendant objects, re-inherit role assignments from the parent object. Declaration void ResetRoleInheritanceBatch(Batch batch) Parameters Batch batch The batch to add this request to ResetRoleInheritanceBatchAsync() Removes the local role assignments so that the web, and all its descendant objects, re-inherit role assignments from the parent object. Declaration Task ResetRoleInheritanceBatchAsync() Returns Task ResetRoleInheritanceBatchAsync(Batch) Removes the local role assignments so that the web, and all its descendant objects, re-inherit role assignments from the parent object. Declaration Task ResetRoleInheritanceBatchAsync(Batch batch) Parameters Batch batch The batch to add this request to Returns Task"
  },
  "api/PnP.Core.Model.SharePoint.ISite.html": {
    "href": "api/PnP.Core.Model.SharePoint.ISite.html",
    "title": "Interface ISite | PnP Core SDK",
    "keywords": "Interface ISite Public interface to define a Site object of SharePoint Online Inherited Members IDataModel<ISite>.Requested IDataModel<ISite>.HasValue(String) IDataModel<ISite>.HasChanged(String) IDataModel<ISite>.IsPropertyAvailable(Expression<Func<ISite, Object>>) IDataModel<ISite>.ArePropertiesAvailable(Expression<Func<ISite, Object>>[]) IDataModel<ISite>.EnsureProperties(Expression<Func<ISite, Object>>[]) IDataModel<ISite>.EnsurePropertiesAsync(Expression<Func<ISite, Object>>[]) IDataModel<ISite>.ExecuteRequestAsync(ApiRequest) IDataModel<ISite>.ExecuteRequest(ApiRequest) IDataModel<ISite>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ISite>.ExecuteRequestBatch(ApiRequest) IDataModel<ISite>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ISite>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ISite>.GetBatchAsync(Batch, Expression<Func<ISite, Object>>[]) IDataModelGet<ISite>.GetAsync(Expression<Func<ISite, Object>>[]) IDataModelLoad<ISite>.LoadBatchAsync(Batch, Expression<Func<ISite, Object>>[]) IDataModelLoad<ISite>.LoadAsync(Expression<Func<ISite, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelSupportingGetChanges.GetChangesAsync(ChangeQueryOptions) IDataModelSupportingGetChanges.GetChanges(ChangeQueryOptions) IDataModelSupportingGetChanges.GetChangesBatchAsync(Batch, ChangeQueryOptions) IDataModelSupportingGetChanges.GetChangesBatch(Batch, ChangeQueryOptions) IDataModelSupportingGetChanges.GetChangesBatchAsync(ChangeQueryOptions) IDataModelSupportingGetChanges.GetChangesBatch(ChangeQueryOptions) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ISite : IDataModel<ISite>, IDataModelParent, IDataModelWithContext, ISupportModules<ISite>, IDataModelGet<ISite>, IDataModelLoad<ISite>, IDataModelUpdate, IDataModelSupportingGetChanges Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object AllowCreateDeclarativeWorkflow Gets or sets a value that specifies whether the creation of declarative workflows is allowed on this site collection. Declaration bool AllowCreateDeclarativeWorkflow { get; set; } Property Value Boolean AllowDesigner Gets or sets a value that specifies whether a designer can be used on this site collection. Declaration bool AllowDesigner { get; set; } Property Value Boolean AllowExternalEmbeddingWrapper Gets or sets a value that specifies whether external embedding wrapper is allowed on this site collection. 0 means \"Don't allow embedding any external domains\" 1 means \"Only allow embedding external domains from allow-embed-domains-list\" 2 means \"Allow embedding any external domains\" Declaration int AllowExternalEmbeddingWrapper { get; set; } Property Value Int32 AllowMasterPageEditing Gets or sets a value that specifies whether master page editing is allowed on this site collection. Declaration bool AllowMasterPageEditing { get; set; } Property Value Boolean AllowRevertFromTemplate Gets or sets a value that specifies whether this site collection can be reverted to its base template. Declaration bool AllowRevertFromTemplate { get; set; } Property Value Boolean AllowSaveDeclarativeWorkflowAsTemplate Gets or sets a value that specifies whether it is allowed to save declarative workflows as template on this site collection. Declaration bool AllowSaveDeclarativeWorkflowAsTemplate { get; set; } Property Value Boolean AllowSavePublishDeclarativeWorkflow Gets or sets a value that specifies whether it is allowed to save and publish declarative workflows on this site collection. Declaration bool AllowSavePublishDeclarativeWorkflow { get; set; } Property Value Boolean AllWebs Collection of sub-webs in the current Site object Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IWebCollection AllWebs { get; } Property Value IWebCollection AuditLogTrimmingRetention This is the number of days of audit log data to retain. If unset and audit trimming is enabled, the retention defaults default configured schedule for trimming Declaration int AuditLogTrimmingRetention { get; set; } Property Value Int32 CanSyncHubSitePermissions Gets or sets value if syncing hub site permissions to this associated site is allowed. Declaration bool CanSyncHubSitePermissions { get; set; } Property Value Boolean ChannelGroupId Gets the ID of the Modern Group associated with this site. Declaration Guid ChannelGroupId { get; } Property Value Guid Classification The Classification of the Site object Declaration string Classification { get; set; } Property Value String CommentsOnSitePagesDisabled Gets or sets a value that specifies whether the comments on site pages are disabled on this site collection. Declaration bool CommentsOnSitePagesDisabled { get; set; } Property Value Boolean DisableAppViews Sets whether or not to disable app views for all child webs. True means app views are disabled throughout the site collection; False otherwise. Declaration bool DisableAppViews { get; set; } Property Value Boolean DisableCompanyWideSharingLinks Sets whether or not to disable company sharing links for all child webs. True means companywide sharing links are disabled throughout the site collection, regardless of the settings on the root or child webs. False means each web can individually decide whether to turn on or off companywide sharing links. Declaration bool DisableCompanyWideSharingLinks { get; set; } Property Value Boolean DisableFlows Sets whether or not to disable Flows for all child webs. True means Flows are disabled throughout the site collection; False otherwise. Declaration bool DisableFlows { get; set; } Property Value Boolean ExternalSharingTipsEnabled Gets a boolean value that specifies whether users will be greeted with a notification bar telling them that the site can be shared with external users. True - notification bar is enabled; False - otherwise Declaration bool ExternalSharingTipsEnabled { get; } Property Value Boolean ExternalUserExpirationInDays Property that indicates the default number of days an external user will expire in. 0 if the policy is disabled or unavailable, otherwise the number of days Declaration int ExternalUserExpirationInDays { get; } Property Value Int32 Features Collection of features enabled for the site Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IFeatureCollection Features { get; } Property Value IFeatureCollection GeoLocation returns the Geo Location hosting this site collection Declaration string GeoLocation { get; } Property Value String GroupId The unique ID of the associated Microsoft 365 Group (if any) Declaration Guid GroupId { get; } Property Value Guid HubSiteId Gets the ID of the HubSite this site is associated with. Declaration Guid HubSiteId { get; } Property Value Guid Remarks Use JoinHubSite method to change the value of this property. HubSiteSynchronizableVisitorGroup Gets the synchronizable visitor group for a hub site Declaration ISharePointGroup HubSiteSynchronizableVisitorGroup { get; } Property Value ISharePointGroup Id The Unique ID of the Site object Declaration Guid Id { get; } Property Value Guid IsHubSite Returns whether or not this site is a HubSite. Hub sites can be associated with one or more sites. Declaration bool IsHubSite { get; } Property Value Boolean LockIssue Gets the comment that is used in locking a site collection. Declaration string LockIssue { get; } Property Value String MaxItemsPerThrottledOperation Maximum items that will not be throttled per operation. Declaration int MaxItemsPerThrottledOperation { get; } Property Value Int32 ReadOnly Gets or sets a bool value that specifies whether the site collection is read-only, locked, and unavailable for write access. Declaration bool ReadOnly { get; set; } Property Value Boolean RecycleBin Gets a value that specifies the collection of Recycle Bin items for the site collection. Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IRecycleBinItemCollection RecycleBin { get; } Property Value IRecycleBinItemCollection RelatedGroupId Gets the ID of the Modern Group related to this site. Declaration Guid RelatedGroupId { get; } Property Value Guid RootWeb The RootWeb of the Site object Declaration IWeb RootWeb { get; } Property Value IWeb SearchBoxInNavBar Whether suite nav search box is shown on modern and classic pages Declaration SearchBoxInNavBar SearchBoxInNavBar { get; set; } Property Value SearchBoxInNavBar SearchBoxPlaceholderText Search placeholder text for search box in navbar - overrides default placeholder text if set. Declaration string SearchBoxPlaceholderText { get; set; } Property Value String SensitivityLabel Information Protection Label Id for an individual site collection Declaration string SensitivityLabel { get; } Property Value String SensitivityLabelId Gets or sets the Information Protection Label Id for an individual site collection. Declaration Guid SensitivityLabelId { get; set; } Property Value Guid ServerRelativeUrl Gets the server-relative URL of the root Web site in the site collection. Declaration string ServerRelativeUrl { get; } Property Value String ShareByEmailEnabled ShareByEmailEnabled when true means that user's will be able to grant permissions to guests for resources within the site collection Declaration bool ShareByEmailEnabled { get; set; } Property Value Boolean ShareByLinkEnabled Property that indicates whether users will be able to share links to documents that can be accessed without logging in. Declaration bool ShareByLinkEnabled { get; } Property Value Boolean ShowPeoplePickerSuggestionsForGuestUsers Gets or sets a value that specifies whether guest users should be displayed as suggestions in people picker on this site collection. Declaration bool ShowPeoplePickerSuggestionsForGuestUsers { get; set; } Property Value Boolean SocialBarOnSitePagesDisabled Defines whether social bar is disabled on Site Pages in this site collection Declaration bool SocialBarOnSitePagesDisabled { get; set; } Property Value Boolean StatusBarLink Gets or sets a value that specifies the status bar link on this site collection (sets the SiteStatusBarLink property on the root web). Declaration string StatusBarLink { get; set; } Property Value String StatusBarText Gets or sets a value that specifies the text of the status bar on this site collection (sets the SiteStatusBarText property on the root web). Declaration string StatusBarText { get; set; } Property Value String ThicketSupportDisabled Gets a value that indicates whether thicket support is disabled on this site collection. Declaration bool ThicketSupportDisabled { get; } Property Value Boolean TrimAuditLog When this flag is set for the site, the audit events are trimmed periodically. Declaration bool TrimAuditLog { get; set; } Property Value Boolean Url The URL of the Site object Declaration Uri Url { get; } Property Value Uri UserCustomActions Gets a value that specifies the collection of user custom actions for the site collection. Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IUserCustomActionCollection UserCustomActions { get; } Property Value IUserCustomActionCollection Methods GetAvailableComplianceTags() Retrieves the available compliance tags / retention labels for this site Declaration IEnumerable<IComplianceTag> GetAvailableComplianceTags() Returns IEnumerable < IComplianceTag > GetAvailableComplianceTagsAsync() Retrieves the available compliance tags / retention labels for this site Declaration Task<IEnumerable<IComplianceTag>> GetAvailableComplianceTagsAsync() Returns Task < IEnumerable < IComplianceTag >> GetHubSiteData(Nullable<Guid>) Gets hubsite data from the current site OR another specified hub site ID Declaration IHubSite GetHubSiteData(Guid? id) Parameters Nullable < Guid > id Hub Site Guid Returns IHubSite GetHubSiteDataAsync(Nullable<Guid>) Gets hubsite data from the current site OR another specified hub site ID Declaration Task<IHubSite> GetHubSiteDataAsync(Guid? id) Parameters Nullable < Guid > id Hub Site Guid Returns Task < IHubSite > JoinHubSite(Guid) Associates the current site to a primary hub site Declaration bool JoinHubSite(Guid hubSiteId) Parameters Guid hubSiteId Returns Boolean JoinHubSiteAsync(Guid) Associates the current site to a primary hub site Declaration Task<bool> JoinHubSiteAsync(Guid hubSiteId) Parameters Guid hubSiteId Returns Task < Boolean > RegisterHubSite() Registers the current site as a primary hub site Declaration IHubSite RegisterHubSite() Returns IHubSite RegisterHubSiteAsync() Registers the current site as a primary hub site Declaration Task<IHubSite> RegisterHubSiteAsync() Returns Task < IHubSite > UnJoinHubSite() Disassociates current site from primary hub site Declaration bool UnJoinHubSite() Returns Boolean UnJoinHubSiteAsync() Disassociates current site from primary hub site Declaration Task<bool> UnJoinHubSiteAsync() Returns Task < Boolean > UnregisterHubSite() Unregisters the current site as a primary hub site Declaration bool UnregisterHubSite() Returns Boolean UnregisterHubSiteAsync() Unregisters the current site as a primary hub site Declaration Task<bool> UnregisterHubSiteAsync() Returns Task < Boolean > Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.ISocial.html": {
    "href": "api/PnP.Core.Model.SharePoint.ISocial.html",
    "title": "Interface ISocial | PnP Core SDK",
    "keywords": "Interface ISocial Entry point for the social-related APIs Inherited Members IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ISocial : IDataModelWithContext Properties Following An entry point for the social following APIs Declaration IFollowing Following { get; } Property Value IFollowing UserProfile A reference to a user profile-related operations Declaration IUserProfile UserProfile { get; } Property Value IUserProfile"
  },
  "api/PnP.Core.Model.SharePoint.ISocialActor.html": {
    "href": "api/PnP.Core.Model.SharePoint.ISocialActor.html",
    "title": "Interface ISocialActor | PnP Core SDK",
    "keywords": "Interface ISocialActor An entity, which represents a following object. The type of the object can be identified based on the ActorType property Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ISocialActor Properties AccountName Gets the actor's account name. Only valid when ActorType is User Declaration string AccountName { get; set; } Property Value String ActorType Gets the actor type. Declaration SocialActorType ActorType { get; set; } Property Value SocialActorType CanFollow Returns true if the Actor can potentially be followed, false otherwise. Declaration bool CanFollow { get; set; } Property Value Boolean ContentUri Gets the actor's content URI. Only valid when ActorType is Document, or Site Declaration string ContentUri { get; set; } Property Value String EmailAddress Gets the actor's email address. Only valid when ActorType is User Declaration string EmailAddress { get; set; } Property Value String FollowedContentUri Gets the URI of the actor's followed content folder. Only valid when this represents the current user Declaration string FollowedContentUri { get; set; } Property Value String GroupId Group id, if the followed site is a group Declaration Guid GroupId { get; set; } Property Value Guid Id Gets the actor's canonical URI. Declaration string Id { get; set; } Property Value String ImageUri Gets the actor's image URI. Only valid when ActorType is User, Document, or Site Declaration string ImageUri { get; set; } Property Value String IsFollowed Returns true if the current user is following the actor, false otherwise. Declaration bool IsFollowed { get; set; } Property Value Boolean LibraryUri Gets the actor's library URI. Only valid when ActorType is Document Declaration string LibraryUri { get; set; } Property Value String Name Gets the actor's display name. Declaration string Name { get; set; } Property Value String PersonalSiteUri Gets the URI of the actor's personal site. Only valid when ActorType is User Declaration string PersonalSiteUri { get; set; } Property Value String Status Gets a code that indicates recoverable errors that occurred during actor retrieval Declaration SocialStatusCode Status { get; set; } Property Value SocialStatusCode StatusText Gets the text of the actor's most recent post. Only valid when ActorType is User Declaration string StatusText { get; set; } Property Value String TagGuid Gets the actor's tag GUID. Only valid when ActorType is Tag Declaration Guid TagGuid { get; set; } Property Value Guid Title Gets the actor's title. Only valid when ActorType is User Declaration string Title { get; set; } Property Value String Uri Unique item uri Declaration string Uri { get; set; } Property Value String"
  },
  "api/PnP.Core.Model.SharePoint.IStorageMetrics.html": {
    "href": "api/PnP.Core.Model.SharePoint.IStorageMetrics.html",
    "title": "Interface IStorageMetrics | PnP Core SDK",
    "keywords": "Interface IStorageMetrics Public interface to define a StorageMetrics object Inherited Members IDataModel<IStorageMetrics>.Requested IDataModel<IStorageMetrics>.HasValue(String) IDataModel<IStorageMetrics>.HasChanged(String) IDataModel<IStorageMetrics>.IsPropertyAvailable(Expression<Func<IStorageMetrics, Object>>) IDataModel<IStorageMetrics>.ArePropertiesAvailable(Expression<Func<IStorageMetrics, Object>>[]) IDataModel<IStorageMetrics>.EnsureProperties(Expression<Func<IStorageMetrics, Object>>[]) IDataModel<IStorageMetrics>.EnsurePropertiesAsync(Expression<Func<IStorageMetrics, Object>>[]) IDataModel<IStorageMetrics>.ExecuteRequestAsync(ApiRequest) IDataModel<IStorageMetrics>.ExecuteRequest(ApiRequest) IDataModel<IStorageMetrics>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IStorageMetrics>.ExecuteRequestBatch(ApiRequest) IDataModel<IStorageMetrics>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IStorageMetrics>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IStorageMetrics : IDataModel<IStorageMetrics>, IDataModelParent, IDataModelWithContext, ISupportModules<IStorageMetrics> Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object LastModified Gets the last modified date and time of the storage resource. Declaration DateTime LastModified { get; } Property Value DateTime TotalFileCount Gets the total count of files in the storage resource. Declaration long TotalFileCount { get; } Property Value Int64 TotalFileStreamSize Gets the total stream size of the storage resource. Declaration long TotalFileStreamSize { get; } Property Value Int64 TotalSize Gets the total size of the storage resource. Declaration long TotalSize { get; } Property Value Int64 Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.ISyntexClassifyAndExtractResult.html": {
    "href": "api/PnP.Core.Model.SharePoint.ISyntexClassifyAndExtractResult.html",
    "title": "Interface ISyntexClassifyAndExtractResult | PnP Core SDK",
    "keywords": "Interface ISyntexClassifyAndExtractResult Result of a classify and extract operation requested for a file Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ISyntexClassifyAndExtractResult Properties Created Date of the classify and extract request creation Declaration DateTime Created { get; } Property Value DateTime DeliverDate Date of the classify and extract request delivery Declaration DateTime DeliverDate { get; } Property Value DateTime ErrorMessage The classify and extract error (if there was any) Declaration string ErrorMessage { get; } Property Value String Id Id of the classify and extract request Declaration Guid Id { get; } Property Value Guid Status Status of the classify and extract request Declaration string Status { get; } Property Value String StatusCode The status code of the classify and extract request, 2xx == success Declaration int StatusCode { get; } Property Value Int32 TargetServerRelativeUrl Server relative url of the file requested to be classified and extracted Declaration string TargetServerRelativeUrl { get; } Property Value String TargetSiteUrl Url of the site containing the file requested to be classified and extracted Declaration string TargetSiteUrl { get; } Property Value String TargetWebServerRelativeUrl Server relative url of the web containing the file requested to be classified and extracted Declaration string TargetWebServerRelativeUrl { get; } Property Value String WorkItemType Type of this Syntex machine learning work item Declaration Guid WorkItemType { get; } Property Value Guid"
  },
  "api/PnP.Core.Model.SharePoint.ISyntexContentCenter.html": {
    "href": "api/PnP.Core.Model.SharePoint.ISyntexContentCenter.html",
    "title": "Interface ISyntexContentCenter | PnP Core SDK",
    "keywords": "Interface ISyntexContentCenter Syntex Content Center site Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ISyntexContentCenter Properties Web Web that represents the Syntex Content Center Declaration IWeb Web { get; } Property Value IWeb Methods GetSyntexModels(String) Gets one or more Syntex models from the Syntex content center Declaration List<ISyntexModel> GetSyntexModels(string modelName = null) Parameters String modelName Name of the model to filter on, leaving empty returns all models Returns PnP.Core.Model.SharePoint.List < ISyntexModel > GetSyntexModelsAsync(String) Gets one or more Syntex models from the Syntex content center Declaration Task<List<ISyntexModel>> GetSyntexModelsAsync(string modelName = null) Parameters String modelName Name of the model to filter on, leaving empty returns all models Returns Task < PnP.Core.Model.SharePoint.List < ISyntexModel >>"
  },
  "api/PnP.Core.Model.SharePoint.ISyntexModel.html": {
    "href": "api/PnP.Core.Model.SharePoint.ISyntexModel.html",
    "title": "Interface ISyntexModel | PnP Core SDK",
    "keywords": "Interface ISyntexModel Syntex model Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ISyntexModel Properties Description Model description Declaration string Description { get; } Property Value String Id Id of a model (= id of the list item) Declaration int Id { get; } Property Value Int32 ListItem File holding the classifier Declaration IListItem ListItem { get; } Property Value IListItem ModelLastTrained Date when the model was trained for the last time Declaration DateTime ModelLastTrained { get; } Property Value DateTime Name Name of the model Declaration string Name { get; } Property Value String UniqueId Unique id of the model (= unique id of the model file) Declaration Guid UniqueId { get; } Property Value Guid Methods GetModelPublications() Gets a list of libraries to which this model is published Declaration List<ISyntexModelPublication> GetModelPublications() Returns PnP.Core.Model.SharePoint.List < ISyntexModelPublication > The list of libraries to which this model is published GetModelPublicationsAsync() Gets a list of libraries to which this model is published Declaration Task<List<ISyntexModelPublication>> GetModelPublicationsAsync() Returns Task < PnP.Core.Model.SharePoint.List < ISyntexModelPublication >> The list of libraries to which this model is published GetModelPublicationsBatch() Gets a list of libraries to which this model is published Declaration IEnumerableBatchResult<ISyntexModelPublication> GetModelPublicationsBatch() Returns IEnumerableBatchResult < ISyntexModelPublication > The list of libraries to which this model is published GetModelPublicationsBatch(Batch) Gets a list of libraries to which this model is published Declaration IEnumerableBatchResult<ISyntexModelPublication> GetModelPublicationsBatch(Batch batch) Parameters Batch batch Batch to add this request to Returns IEnumerableBatchResult < ISyntexModelPublication > The list of libraries to which this model is published GetModelPublicationsBatchAsync() Gets a list of libraries to which this model is published Declaration Task<IEnumerableBatchResult<ISyntexModelPublication>> GetModelPublicationsBatchAsync() Returns Task < IEnumerableBatchResult < ISyntexModelPublication >> The list of libraries to which this model is published GetModelPublicationsBatchAsync(Batch) Gets a list of libraries to which this model is published Declaration Task<IEnumerableBatchResult<ISyntexModelPublication>> GetModelPublicationsBatchAsync(Batch batch) Parameters Batch batch Batch to add this request to Returns Task < IEnumerableBatchResult < ISyntexModelPublication >> The list of libraries to which this model is published PublishModel(IList, MachineLearningPublicationViewOption) Publish this model to a library Declaration ISyntexModelPublicationResult PublishModel(IList library, MachineLearningPublicationViewOption viewOption = MachineLearningPublicationViewOption.NewViewAsDefault) Parameters IList library Library to publish this model to MachineLearningPublicationViewOption viewOption Determines how adding the model changes the library's views Returns ISyntexModelPublicationResult Information about the model publication PublishModel(List<IList>, MachineLearningPublicationViewOption) Publish this model to a list of libraries Declaration List<ISyntexModelPublicationResult> PublishModel(List<IList> libraries, MachineLearningPublicationViewOption viewOption = MachineLearningPublicationViewOption.NewViewAsDefault) Parameters PnP.Core.Model.SharePoint.List < IList > libraries List of libraries to publish this model to MachineLearningPublicationViewOption viewOption Determines how adding the model changes the library's views Returns PnP.Core.Model.SharePoint.List < ISyntexModelPublicationResult > Information about the model publication PublishModel(List<SyntexModelPublishOptions>) Publish this model to a list of libraries Declaration List<ISyntexModelPublicationResult> PublishModel(List<SyntexModelPublishOptions> publicationOptions) Parameters PnP.Core.Model.SharePoint.List < SyntexModelPublishOptions > publicationOptions Information defining the model publications Returns PnP.Core.Model.SharePoint.List < ISyntexModelPublicationResult > Information about the model publications PublishModel(SyntexModelPublishOptions) Publish this model to a library Declaration ISyntexModelPublicationResult PublishModel(SyntexModelPublishOptions publicationOptions) Parameters SyntexModelPublishOptions publicationOptions Information defining the model publication Returns ISyntexModelPublicationResult Information about the model publication PublishModelAsync(IList, MachineLearningPublicationViewOption) Publish this model to a library Declaration Task<ISyntexModelPublicationResult> PublishModelAsync(IList library, MachineLearningPublicationViewOption viewOption = MachineLearningPublicationViewOption.NewViewAsDefault) Parameters IList library Library to publish this model to MachineLearningPublicationViewOption viewOption Determines how adding the model changes the library's views Returns Task < ISyntexModelPublicationResult > Information about the model publication PublishModelAsync(List<IList>, MachineLearningPublicationViewOption) Publish this model to a list of libraries Declaration Task<List<ISyntexModelPublicationResult>> PublishModelAsync(List<IList> libraries, MachineLearningPublicationViewOption viewOption = MachineLearningPublicationViewOption.NewViewAsDefault) Parameters PnP.Core.Model.SharePoint.List < IList > libraries List of libraries to publish this model to MachineLearningPublicationViewOption viewOption Determines how adding the model changes the library's views Returns Task < PnP.Core.Model.SharePoint.List < ISyntexModelPublicationResult >> Information about the model publication PublishModelAsync(List<SyntexModelPublishOptions>) Publish this model to a list of libraries Declaration Task<List<ISyntexModelPublicationResult>> PublishModelAsync(List<SyntexModelPublishOptions> publicationOptions) Parameters PnP.Core.Model.SharePoint.List < SyntexModelPublishOptions > publicationOptions Information defining the model publications Returns Task < PnP.Core.Model.SharePoint.List < ISyntexModelPublicationResult >> Information about the model publications PublishModelAsync(SyntexModelPublishOptions) Publish this model to a library Declaration Task<ISyntexModelPublicationResult> PublishModelAsync(SyntexModelPublishOptions publicationOptions) Parameters SyntexModelPublishOptions publicationOptions Information defining the model publication Returns Task < ISyntexModelPublicationResult > Information about the model publication PublishModelBatch(IList, MachineLearningPublicationViewOption) Publish this model to a library Declaration IBatchSingleResult<ISyntexModelPublicationResult> PublishModelBatch(IList library, MachineLearningPublicationViewOption viewOption = MachineLearningPublicationViewOption.NewViewAsDefault) Parameters IList library Library to publish this model to MachineLearningPublicationViewOption viewOption Determines how adding the model changes the library's views Returns IBatchSingleResult < ISyntexModelPublicationResult > Information about the model publication PublishModelBatch(List<IList>, MachineLearningPublicationViewOption) Publish this model to a list of libraries Declaration IEnumerableBatchResult<ISyntexModelPublicationResult> PublishModelBatch(List<IList> libraries, MachineLearningPublicationViewOption viewOption = MachineLearningPublicationViewOption.NewViewAsDefault) Parameters PnP.Core.Model.SharePoint.List < IList > libraries List of libraries to publish this model to MachineLearningPublicationViewOption viewOption Determines how adding the model changes the library's views Returns IEnumerableBatchResult < ISyntexModelPublicationResult > Information about the model publication PublishModelBatch(List<SyntexModelPublishOptions>) Publish this model to a list of libraries Declaration IEnumerableBatchResult<ISyntexModelPublicationResult> PublishModelBatch(List<SyntexModelPublishOptions> publicationOptions) Parameters PnP.Core.Model.SharePoint.List < SyntexModelPublishOptions > publicationOptions Information defining the model publications Returns IEnumerableBatchResult < ISyntexModelPublicationResult > Information about the model publications PublishModelBatch(SyntexModelPublishOptions) Publish this model to a library Declaration IBatchSingleResult<ISyntexModelPublicationResult> PublishModelBatch(SyntexModelPublishOptions publicationOptions) Parameters SyntexModelPublishOptions publicationOptions Information defining the model publication Returns IBatchSingleResult < ISyntexModelPublicationResult > Information about the model publication PublishModelBatch(Batch, IList, MachineLearningPublicationViewOption) Publish this model to a library Declaration IBatchSingleResult<ISyntexModelPublicationResult> PublishModelBatch(Batch batch, IList library, MachineLearningPublicationViewOption viewOption = MachineLearningPublicationViewOption.NewViewAsDefault) Parameters Batch batch Batch to add this request to IList library Library to publish this model to MachineLearningPublicationViewOption viewOption Determines how adding the model changes the library's views Returns IBatchSingleResult < ISyntexModelPublicationResult > Information about the model publication PublishModelBatch(Batch, List<IList>, MachineLearningPublicationViewOption) Publish this model to a list of libraries Declaration IEnumerableBatchResult<ISyntexModelPublicationResult> PublishModelBatch(Batch batch, List<IList> libraries, MachineLearningPublicationViewOption viewOption = MachineLearningPublicationViewOption.NewViewAsDefault) Parameters Batch batch Batch to add this request to PnP.Core.Model.SharePoint.List < IList > libraries List of libraries to publish this model to MachineLearningPublicationViewOption viewOption Determines how adding the model changes the library's views Returns IEnumerableBatchResult < ISyntexModelPublicationResult > Information about the model publication PublishModelBatch(Batch, List<SyntexModelPublishOptions>) Publish this model to a list of libraries Declaration IEnumerableBatchResult<ISyntexModelPublicationResult> PublishModelBatch(Batch batch, List<SyntexModelPublishOptions> publicationOptions) Parameters Batch batch Batch to add this request to PnP.Core.Model.SharePoint.List < SyntexModelPublishOptions > publicationOptions Information defining the model publications Returns IEnumerableBatchResult < ISyntexModelPublicationResult > Information about the model publications PublishModelBatch(Batch, SyntexModelPublishOptions) Publish this model to a library Declaration IBatchSingleResult<ISyntexModelPublicationResult> PublishModelBatch(Batch batch, SyntexModelPublishOptions publicationOptions) Parameters Batch batch Batch to add this request to SyntexModelPublishOptions publicationOptions Information defining the model publication Returns IBatchSingleResult < ISyntexModelPublicationResult > Information about the model publication PublishModelBatchAsync(IList, MachineLearningPublicationViewOption) Publish this model to a library Declaration Task<IBatchSingleResult<ISyntexModelPublicationResult>> PublishModelBatchAsync(IList library, MachineLearningPublicationViewOption viewOption = MachineLearningPublicationViewOption.NewViewAsDefault) Parameters IList library Library to publish this model to MachineLearningPublicationViewOption viewOption Determines how adding the model changes the library's views Returns Task < IBatchSingleResult < ISyntexModelPublicationResult >> Information about the model publication PublishModelBatchAsync(List<IList>, MachineLearningPublicationViewOption) Publish this model to a list of libraries Declaration Task<IEnumerableBatchResult<ISyntexModelPublicationResult>> PublishModelBatchAsync(List<IList> libraries, MachineLearningPublicationViewOption viewOption = MachineLearningPublicationViewOption.NewViewAsDefault) Parameters PnP.Core.Model.SharePoint.List < IList > libraries List of libraries to publish this model to MachineLearningPublicationViewOption viewOption Determines how adding the model changes the library's views Returns Task < IEnumerableBatchResult < ISyntexModelPublicationResult >> Information about the model publication PublishModelBatchAsync(List<SyntexModelPublishOptions>) Publish this model to a list of libraries Declaration Task<IEnumerableBatchResult<ISyntexModelPublicationResult>> PublishModelBatchAsync(List<SyntexModelPublishOptions> publicationOptions) Parameters PnP.Core.Model.SharePoint.List < SyntexModelPublishOptions > publicationOptions Information defining the model publications Returns Task < IEnumerableBatchResult < ISyntexModelPublicationResult >> Information about the model publications PublishModelBatchAsync(SyntexModelPublishOptions) Publish this model to a library Declaration Task<IBatchSingleResult<ISyntexModelPublicationResult>> PublishModelBatchAsync(SyntexModelPublishOptions publicationOptions) Parameters SyntexModelPublishOptions publicationOptions Information defining the model publication Returns Task < IBatchSingleResult < ISyntexModelPublicationResult >> Information about the model publication PublishModelBatchAsync(Batch, IList, MachineLearningPublicationViewOption) Publish this model to a library Declaration Task<IBatchSingleResult<ISyntexModelPublicationResult>> PublishModelBatchAsync(Batch batch, IList library, MachineLearningPublicationViewOption viewOption = MachineLearningPublicationViewOption.NewViewAsDefault) Parameters Batch batch Batch to add this request to IList library Library to publish this model to MachineLearningPublicationViewOption viewOption Determines how adding the model changes the library's views Returns Task < IBatchSingleResult < ISyntexModelPublicationResult >> Information about the model publication PublishModelBatchAsync(Batch, List<IList>, MachineLearningPublicationViewOption) Publish this model to a list of libraries Declaration Task<IEnumerableBatchResult<ISyntexModelPublicationResult>> PublishModelBatchAsync(Batch batch, List<IList> libraries, MachineLearningPublicationViewOption viewOption = MachineLearningPublicationViewOption.NewViewAsDefault) Parameters Batch batch Batch to add this request to PnP.Core.Model.SharePoint.List < IList > libraries List of libraries to publish this model to MachineLearningPublicationViewOption viewOption Determines how adding the model changes the library's views Returns Task < IEnumerableBatchResult < ISyntexModelPublicationResult >> Information about the model publication PublishModelBatchAsync(Batch, List<SyntexModelPublishOptions>) Publish this model to a list of libraries Declaration Task<IEnumerableBatchResult<ISyntexModelPublicationResult>> PublishModelBatchAsync(Batch batch, List<SyntexModelPublishOptions> publicationOptions) Parameters Batch batch Batch to add this request to PnP.Core.Model.SharePoint.List < SyntexModelPublishOptions > publicationOptions Information defining the model publications Returns Task < IEnumerableBatchResult < ISyntexModelPublicationResult >> Information about the model publications PublishModelBatchAsync(Batch, SyntexModelPublishOptions) Publish this model to a library Declaration Task<IBatchSingleResult<ISyntexModelPublicationResult>> PublishModelBatchAsync(Batch batch, SyntexModelPublishOptions publicationOptions) Parameters Batch batch Batch to add this request to SyntexModelPublishOptions publicationOptions Information defining the model publication Returns Task < IBatchSingleResult < ISyntexModelPublicationResult >> Information about the model publication UnPublishModel(IList) Unpublish this model from the library Declaration ISyntexModelPublicationResult UnPublishModel(IList library) Parameters IList library Library to unpublish this model from Returns ISyntexModelPublicationResult Information about the model unpublication UnPublishModel(List<IList>) Unpublish this model from the list of libraries Declaration List<ISyntexModelPublicationResult> UnPublishModel(List<IList> libraries) Parameters PnP.Core.Model.SharePoint.List < IList > libraries List of libraries to unpublish this model from Returns PnP.Core.Model.SharePoint.List < ISyntexModelPublicationResult > Information about the model unpublication UnPublishModel(List<SyntexModelUnPublishOptions>) Unpublish this model from a list of libraries Declaration List<ISyntexModelPublicationResult> UnPublishModel(List<SyntexModelUnPublishOptions> unPublicationOptions) Parameters PnP.Core.Model.SharePoint.List < SyntexModelUnPublishOptions > unPublicationOptions Information defining the model unpublications Returns PnP.Core.Model.SharePoint.List < ISyntexModelPublicationResult > Information about the model unpublications UnPublishModel(SyntexModelUnPublishOptions) Unpublish this model from the library Declaration ISyntexModelPublicationResult UnPublishModel(SyntexModelUnPublishOptions unPublicationOptions) Parameters SyntexModelUnPublishOptions unPublicationOptions Information defining the model unpublication Returns ISyntexModelPublicationResult Information about the model unpublication UnPublishModelAsync(IList) Unpublish this model from the library Declaration Task<ISyntexModelPublicationResult> UnPublishModelAsync(IList library) Parameters IList library Library to unpublish this model from Returns Task < ISyntexModelPublicationResult > Information about the model unpublication UnPublishModelAsync(List<IList>) Unpublish this model from the list of libraries Declaration Task<List<ISyntexModelPublicationResult>> UnPublishModelAsync(List<IList> libraries) Parameters PnP.Core.Model.SharePoint.List < IList > libraries List of libraries to unpublish this model from Returns Task < PnP.Core.Model.SharePoint.List < ISyntexModelPublicationResult >> Information about the model unpublication UnPublishModelAsync(List<SyntexModelUnPublishOptions>) Unpublish this model from a list of libraries Declaration Task<List<ISyntexModelPublicationResult>> UnPublishModelAsync(List<SyntexModelUnPublishOptions> unPublicationOptions) Parameters PnP.Core.Model.SharePoint.List < SyntexModelUnPublishOptions > unPublicationOptions Information defining the model unpublications Returns Task < PnP.Core.Model.SharePoint.List < ISyntexModelPublicationResult >> Information about the model unpublications UnPublishModelAsync(SyntexModelUnPublishOptions) Unpublish this model from the library Declaration Task<ISyntexModelPublicationResult> UnPublishModelAsync(SyntexModelUnPublishOptions unPublicationOptions) Parameters SyntexModelUnPublishOptions unPublicationOptions Information defining the model unpublication Returns Task < ISyntexModelPublicationResult > Information about the model unpublication UnPublishModelBatch(IList) Unpublish this model from the library Declaration IBatchSingleResult<ISyntexModelPublicationResult> UnPublishModelBatch(IList library) Parameters IList library Library to unpublish this model from Returns IBatchSingleResult < ISyntexModelPublicationResult > Information about the model unpublication UnPublishModelBatch(List<IList>) Unpublish this model from the list of libraries Declaration IEnumerableBatchResult<ISyntexModelPublicationResult> UnPublishModelBatch(List<IList> libraries) Parameters PnP.Core.Model.SharePoint.List < IList > libraries List of libraries to unpublish this model from Returns IEnumerableBatchResult < ISyntexModelPublicationResult > Information about the model unpublication UnPublishModelBatch(List<SyntexModelUnPublishOptions>) Unpublish this model from a list of libraries Declaration IEnumerableBatchResult<ISyntexModelPublicationResult> UnPublishModelBatch(List<SyntexModelUnPublishOptions> unPublicationOptions) Parameters PnP.Core.Model.SharePoint.List < SyntexModelUnPublishOptions > unPublicationOptions Information defining the model unpublications Returns IEnumerableBatchResult < ISyntexModelPublicationResult > Information about the model unpublications UnPublishModelBatch(SyntexModelUnPublishOptions) Unpublish this model from the library Declaration IBatchSingleResult<ISyntexModelPublicationResult> UnPublishModelBatch(SyntexModelUnPublishOptions unPublicationOptions) Parameters SyntexModelUnPublishOptions unPublicationOptions Information defining the model unpublication Returns IBatchSingleResult < ISyntexModelPublicationResult > Information about the model unpublication UnPublishModelBatch(Batch, IList) Unpublish this model from the library Declaration IBatchSingleResult<ISyntexModelPublicationResult> UnPublishModelBatch(Batch batch, IList library) Parameters Batch batch Batch to add this request to IList library Library to unpublish this model from Returns IBatchSingleResult < ISyntexModelPublicationResult > Information about the model unpublication UnPublishModelBatch(Batch, List<IList>) Unpublish this model from the list of libraries Declaration IEnumerableBatchResult<ISyntexModelPublicationResult> UnPublishModelBatch(Batch batch, List<IList> libraries) Parameters Batch batch Batch to add this request to PnP.Core.Model.SharePoint.List < IList > libraries List of libraries to unpublish this model from Returns IEnumerableBatchResult < ISyntexModelPublicationResult > Information about the model unpublication UnPublishModelBatch(Batch, List<SyntexModelUnPublishOptions>) Unpublish this model from a list of libraries Declaration IEnumerableBatchResult<ISyntexModelPublicationResult> UnPublishModelBatch(Batch batch, List<SyntexModelUnPublishOptions> unPublicationOptions) Parameters Batch batch Batch to add this request to PnP.Core.Model.SharePoint.List < SyntexModelUnPublishOptions > unPublicationOptions Information defining the model unpublications Returns IEnumerableBatchResult < ISyntexModelPublicationResult > Information about the model unpublications UnPublishModelBatch(Batch, SyntexModelUnPublishOptions) Unpublish this model from the library Declaration IBatchSingleResult<ISyntexModelPublicationResult> UnPublishModelBatch(Batch batch, SyntexModelUnPublishOptions unPublicationOptions) Parameters Batch batch Batch to add this request to SyntexModelUnPublishOptions unPublicationOptions Information defining the model unpublication Returns IBatchSingleResult < ISyntexModelPublicationResult > Information about the model unpublication UnPublishModelBatchAsync(IList) Unpublish this model from the library Declaration Task<IBatchSingleResult<ISyntexModelPublicationResult>> UnPublishModelBatchAsync(IList library) Parameters IList library Library to unpublish this model from Returns Task < IBatchSingleResult < ISyntexModelPublicationResult >> Information about the model unpublication UnPublishModelBatchAsync(List<IList>) Unpublish this model from the list of libraries Declaration Task<IEnumerableBatchResult<ISyntexModelPublicationResult>> UnPublishModelBatchAsync(List<IList> libraries) Parameters PnP.Core.Model.SharePoint.List < IList > libraries List of libraries to unpublish this model from Returns Task < IEnumerableBatchResult < ISyntexModelPublicationResult >> Information about the model unpublication UnPublishModelBatchAsync(List<SyntexModelUnPublishOptions>) Unpublish this model from a list of libraries Declaration Task<IEnumerableBatchResult<ISyntexModelPublicationResult>> UnPublishModelBatchAsync(List<SyntexModelUnPublishOptions> unPublicationOptions) Parameters PnP.Core.Model.SharePoint.List < SyntexModelUnPublishOptions > unPublicationOptions Information defining the model unpublications Returns Task < IEnumerableBatchResult < ISyntexModelPublicationResult >> Information about the model unpublications UnPublishModelBatchAsync(SyntexModelUnPublishOptions) Unpublish this model from the library Declaration Task<IBatchSingleResult<ISyntexModelPublicationResult>> UnPublishModelBatchAsync(SyntexModelUnPublishOptions unPublicationOptions) Parameters SyntexModelUnPublishOptions unPublicationOptions Information defining the model unpublication Returns Task < IBatchSingleResult < ISyntexModelPublicationResult >> Information about the model unpublication UnPublishModelBatchAsync(Batch, IList) Unpublish this model from the library Declaration Task<IBatchSingleResult<ISyntexModelPublicationResult>> UnPublishModelBatchAsync(Batch batch, IList library) Parameters Batch batch Batch to add this request to IList library Library to unpublish this model from Returns Task < IBatchSingleResult < ISyntexModelPublicationResult >> Information about the model unpublication UnPublishModelBatchAsync(Batch, List<IList>) Unpublish this model from the list of libraries Declaration Task<IEnumerableBatchResult<ISyntexModelPublicationResult>> UnPublishModelBatchAsync(Batch batch, List<IList> libraries) Parameters Batch batch Batch to add this request to PnP.Core.Model.SharePoint.List < IList > libraries List of libraries to unpublish this model from Returns Task < IEnumerableBatchResult < ISyntexModelPublicationResult >> Information about the model unpublication UnPublishModelBatchAsync(Batch, List<SyntexModelUnPublishOptions>) Unpublish this model from a list of libraries Declaration Task<IEnumerableBatchResult<ISyntexModelPublicationResult>> UnPublishModelBatchAsync(Batch batch, List<SyntexModelUnPublishOptions> unPublicationOptions) Parameters Batch batch Batch to add this request to PnP.Core.Model.SharePoint.List < SyntexModelUnPublishOptions > unPublicationOptions Information defining the model unpublications Returns Task < IEnumerableBatchResult < ISyntexModelPublicationResult >> Information about the model unpublications UnPublishModelBatchAsync(Batch, SyntexModelUnPublishOptions) Unpublish this model from the library Declaration Task<IBatchSingleResult<ISyntexModelPublicationResult>> UnPublishModelBatchAsync(Batch batch, SyntexModelUnPublishOptions unPublicationOptions) Parameters Batch batch Batch to add this request to SyntexModelUnPublishOptions unPublicationOptions Information defining the model unpublication Returns Task < IBatchSingleResult < ISyntexModelPublicationResult >> Information about the model unpublication"
  },
  "api/PnP.Core.Model.SharePoint.ISyntexModelPublication.html": {
    "href": "api/PnP.Core.Model.SharePoint.ISyntexModelPublication.html",
    "title": "Interface ISyntexModelPublication | PnP Core SDK",
    "keywords": "Interface ISyntexModelPublication Defines a model publication Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ISyntexModelPublication Properties ModelUniqueId Unique id of the SharePoint Syntex model Declaration Guid ModelUniqueId { get; } Property Value Guid TargetLibraryServerRelativeUrl Server relative url of the library registered with the model Declaration string TargetLibraryServerRelativeUrl { get; } Property Value String TargetSiteUrl Fully qualified URL of the site collection holding the library registered with the model Declaration string TargetSiteUrl { get; } Property Value String TargetWebServerRelativeUrl Server relative url of the web holding the library registered with the model Declaration string TargetWebServerRelativeUrl { get; } Property Value String ViewOption The view option specified when registering the model with the library Declaration MachineLearningPublicationViewOption ViewOption { get; } Property Value MachineLearningPublicationViewOption"
  },
  "api/PnP.Core.Model.SharePoint.ISyntexModelPublicationResult.html": {
    "href": "api/PnP.Core.Model.SharePoint.ISyntexModelPublicationResult.html",
    "title": "Interface ISyntexModelPublicationResult | PnP Core SDK",
    "keywords": "Interface ISyntexModelPublicationResult The result of a SharePoint Syntex model publication Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ISyntexModelPublicationResult Properties ErrorMessage The publication error (if there was any) Declaration string ErrorMessage { get; } Property Value String Publication The published model Declaration ISyntexModelPublication Publication { get; } Property Value ISyntexModelPublication StatusCode The status code of the publication, 2xx == success Declaration int StatusCode { get; } Property Value Int32 Succeeded Did the publication succeed? Declaration bool Succeeded { get; } Property Value Boolean"
  },
  "api/PnP.Core.Model.SharePoint.ITerm.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITerm.html",
    "title": "Interface ITerm | PnP Core SDK",
    "keywords": "Interface ITerm Represents a term used in a term store. A term can be used to represent an object which can then be used as a metadata to tag conent. Multiple terms can be organized in a hierarchical manner within a set. Inherited Members IDataModel<ITerm>.Requested IDataModel<ITerm>.HasValue(String) IDataModel<ITerm>.HasChanged(String) IDataModel<ITerm>.IsPropertyAvailable(Expression<Func<ITerm, Object>>) IDataModel<ITerm>.ArePropertiesAvailable(Expression<Func<ITerm, Object>>[]) IDataModel<ITerm>.EnsureProperties(Expression<Func<ITerm, Object>>[]) IDataModel<ITerm>.EnsurePropertiesAsync(Expression<Func<ITerm, Object>>[]) IDataModel<ITerm>.ExecuteRequestAsync(ApiRequest) IDataModel<ITerm>.ExecuteRequest(ApiRequest) IDataModel<ITerm>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITerm>.ExecuteRequestBatch(ApiRequest) IDataModel<ITerm>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITerm>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITerm>.GetBatchAsync(Batch, Expression<Func<ITerm, Object>>[]) IDataModelGet<ITerm>.GetAsync(Expression<Func<ITerm, Object>>[]) IDataModelLoad<ITerm>.LoadBatchAsync(Batch, Expression<Func<ITerm, Object>>[]) IDataModelLoad<ITerm>.LoadAsync(Expression<Func<ITerm, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITerm : IDataModel<ITerm>, IDataModelParent, IDataModelWithContext, ISupportModules<ITerm>, IDataModelGet<ITerm>, IDataModelLoad<ITerm>, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties CreatedDateTime Date and time of term set creation. Read-only. Declaration DateTimeOffset CreatedDateTime { get; } Property Value DateTimeOffset Descriptions Name of the term set for each language. Declaration ITermLocalizedDescriptionCollection Descriptions { get; } Property Value ITermLocalizedDescriptionCollection Id The Unique ID of the term. Declaration string Id { get; } Property Value String Labels Name of the term set for each language. Declaration ITermLocalizedLabelCollection Labels { get; } Property Value ITermLocalizedLabelCollection LastModifiedDateTime Last date and time of term modification. Read-only. Declaration DateTimeOffset LastModifiedDateTime { get; } Property Value DateTimeOffset Properties Properties on this term set Declaration ITermPropertyCollection Properties { get; } Property Value ITermPropertyCollection Relations Collection of terms relations Declaration ITermRelationCollection Relations { get; } Property Value ITermRelationCollection Set The term set of this term Declaration ITermSet Set { get; } Property Value ITermSet Terms Collection of child terms of this term Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration ITermCollection Terms { get; } Property Value ITermCollection Methods AddLabelAndDescription(String, String, Boolean, String) Adds a term label and optional description for a given language. Call update to persist this change. Declaration void AddLabelAndDescription(string label, string languageTag, bool isDefault = false, string description = null) Parameters String label Label for the term String languageTag Language tag for the label and description Boolean isDefault Will this be the default label? String description Optional description to set AddProperty(String, String) Adds a property to the term's property collection. Call update to persist this change. Declaration void AddProperty(string key, string value) Parameters String key Property key String value Property value Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermCollection.html",
    "title": "Interface ITermCollection | PnP Core SDK",
    "keywords": "Interface ITermCollection Collection of terms Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionDeleteByStringId.DeleteById(String) IDataModelCollectionDeleteByStringId.DeleteByIdAsync(String) IDataModelCollectionDeleteByStringId.DeleteByIdBatch(String) IDataModelCollectionDeleteByStringId.DeleteByIdBatchAsync(String) IDataModelCollectionDeleteByStringId.DeleteByIdBatch(Batch, String) IDataModelCollectionDeleteByStringId.DeleteByIdBatchAsync(Batch, String) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermCollection : IQueryable<ITerm>, IAsyncEnumerable<ITerm>, IDataModelCollection<ITerm>, IEnumerable<ITerm>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionDeleteByStringId, ISupportModules<ITermCollection> Methods Add(String, String) Adds a new term Declaration ITerm Add(string name, string description = null) Parameters String name Name of the term String description Optional description of the term Returns ITerm Newly added term AddAsync(String, String) Adds a new term Declaration Task<ITerm> AddAsync(string name, string description = null) Parameters String name Name of the term String description Optional description of the term Returns Task < ITerm > Newly added term AddBatch(Batch, String, String) Adds a new term Declaration ITerm AddBatch(Batch batch, string name, string description = null) Parameters Batch batch Batch to use String name Name of the term String description Optional description of the term Returns ITerm Newly added term AddBatch(String, String) Adds a new term Declaration ITerm AddBatch(string name, string description = null) Parameters String name Name of the term String description Optional description of the term Returns ITerm Newly added term AddBatchAsync(Batch, String, String) Adds a new term Declaration Task<ITerm> AddBatchAsync(Batch batch, string name, string description = null) Parameters Batch batch Batch to use String name Name of the term String description Optional description of the term Returns Task < ITerm > Newly added term AddBatchAsync(String, String) Adds a new term Declaration Task<ITerm> AddBatchAsync(string name, string description = null) Parameters String name Name of the term String description Optional description of the term Returns Task < ITerm > Newly added term GetById(String) Loads a term by id Declaration ITerm GetById(string id) Parameters String id Id of the term to load Returns ITerm Found term if any, null otherwise GetByIdAsync(String) Loads a term by id Declaration Task<ITerm> GetByIdAsync(string id) Parameters String id Id of the term to load Returns Task < ITerm > Found term if any, null otherwise Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermGroup.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermGroup.html",
    "title": "Interface ITermGroup | PnP Core SDK",
    "keywords": "Interface ITermGroup Microsoft 365 Term group Inherited Members IDataModel<ITermGroup>.Requested IDataModel<ITermGroup>.HasValue(String) IDataModel<ITermGroup>.HasChanged(String) IDataModel<ITermGroup>.IsPropertyAvailable(Expression<Func<ITermGroup, Object>>) IDataModel<ITermGroup>.ArePropertiesAvailable(Expression<Func<ITermGroup, Object>>[]) IDataModel<ITermGroup>.EnsureProperties(Expression<Func<ITermGroup, Object>>[]) IDataModel<ITermGroup>.EnsurePropertiesAsync(Expression<Func<ITermGroup, Object>>[]) IDataModel<ITermGroup>.ExecuteRequestAsync(ApiRequest) IDataModel<ITermGroup>.ExecuteRequest(ApiRequest) IDataModel<ITermGroup>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITermGroup>.ExecuteRequestBatch(ApiRequest) IDataModel<ITermGroup>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITermGroup>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITermGroup>.GetBatchAsync(Batch, Expression<Func<ITermGroup, Object>>[]) IDataModelGet<ITermGroup>.GetAsync(Expression<Func<ITermGroup, Object>>[]) IDataModelLoad<ITermGroup>.LoadBatchAsync(Batch, Expression<Func<ITermGroup, Object>>[]) IDataModelLoad<ITermGroup>.LoadAsync(Expression<Func<ITermGroup, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermGroup : IDataModel<ITermGroup>, IDataModelParent, IDataModelWithContext, ISupportModules<ITermGroup>, IDataModelGet<ITermGroup>, IDataModelLoad<ITermGroup>, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties CreatedDateTime Date and time of group creation. Read-only. Declaration DateTimeOffset CreatedDateTime { get; } Property Value DateTimeOffset Description Description giving details on the group. Declaration string Description { get; set; } Property Value String Id The Unique ID of the Group. Declaration string Id { get; } Property Value String Name Name of the group. Declaration string Name { get; set; } Property Value String Scope Returns type of group. Possible values are 'global', 'system' and 'siteCollection'. Declaration TermGroupScope Scope { get; set; } Property Value TermGroupScope Sets Collection of term sets in this term group Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration ITermSetCollection Sets { get; } Property Value ITermSetCollection Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermGroupCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermGroupCollection.html",
    "title": "Interface ITermGroupCollection | PnP Core SDK",
    "keywords": "Interface ITermGroupCollection Collection of term groups Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionDeleteByStringId.DeleteById(String) IDataModelCollectionDeleteByStringId.DeleteByIdAsync(String) IDataModelCollectionDeleteByStringId.DeleteByIdBatch(String) IDataModelCollectionDeleteByStringId.DeleteByIdBatchAsync(String) IDataModelCollectionDeleteByStringId.DeleteByIdBatch(Batch, String) IDataModelCollectionDeleteByStringId.DeleteByIdBatchAsync(Batch, String) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermGroupCollection : IQueryable<ITermGroup>, IAsyncEnumerable<ITermGroup>, IDataModelCollection<ITermGroup>, IEnumerable<ITermGroup>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionDeleteByStringId, ISupportModules<ITermGroupCollection> Methods Add(String, String, TermGroupScope) Adds a new term group Declaration ITermGroup Add(string name, string description = null, TermGroupScope scope = TermGroupScope.Global) Parameters String name Display name of the group String description Optional description of the group TermGroupScope scope Optional scope of the group Returns ITermGroup Newly added group AddAsync(String, String, TermGroupScope) Adds a new term group Declaration Task<ITermGroup> AddAsync(string name, string description = null, TermGroupScope scope = TermGroupScope.Global) Parameters String name Display name of the group String description Optional description of the group TermGroupScope scope Optional scope of the group Returns Task < ITermGroup > Newly added group AddBatch(Batch, String, String, TermGroupScope) Adds a new term group Declaration ITermGroup AddBatch(Batch batch, string name, string description = null, TermGroupScope scope = TermGroupScope.Global) Parameters Batch batch Batch to use String name Display name of the group String description Optional description of the group TermGroupScope scope Optional scope of the group Returns ITermGroup Newly added group AddBatch(String, String, TermGroupScope) Adds a new term group Declaration ITermGroup AddBatch(string name, string description = null, TermGroupScope scope = TermGroupScope.Global) Parameters String name Display name of the group String description Optional description of the group TermGroupScope scope Optional scope of the group Returns ITermGroup Newly added group AddBatchAsync(Batch, String, String, TermGroupScope) Adds a new term group Declaration Task<ITermGroup> AddBatchAsync(Batch batch, string name, string description = null, TermGroupScope scope = TermGroupScope.Global) Parameters Batch batch Batch to use String name Display name of the group String description Optional description of the group TermGroupScope scope Optional scope of the group Returns Task < ITermGroup > Newly added group AddBatchAsync(String, String, TermGroupScope) Adds a new term group Declaration Task<ITermGroup> AddBatchAsync(string name, string description = null, TermGroupScope scope = TermGroupScope.Global) Parameters String name Display name of the group String description Optional description of the group TermGroupScope scope Optional scope of the group Returns Task < ITermGroup > Newly added group GetById(String, Expression<Func<ITermGroup, Object>>[]) Method to select a term group by id Declaration ITermGroup GetById(string id, params Expression<Func<ITermGroup, object>>[] selectors) Parameters String id The id to search for Expression < Func < ITermGroup , Object >>[] selectors The expressions declaring the fields to select Returns ITermGroup The resulting term group instance, if any GetByIdAsync(String, Expression<Func<ITermGroup, Object>>[]) Method to select a term group by id Declaration Task<ITermGroup> GetByIdAsync(string id, params Expression<Func<ITermGroup, object>>[] selectors) Parameters String id The id to search for Expression < Func < ITermGroup , Object >>[] selectors The expressions declaring the fields to select Returns Task < ITermGroup > The resulting term group instance, if any GetByName(String, Expression<Func<ITermGroup, Object>>[]) Method to select a term group by name Declaration ITermGroup GetByName(string name, params Expression<Func<ITermGroup, object>>[] selectors) Parameters String name The name to search for Expression < Func < ITermGroup , Object >>[] selectors The expressions declaring the fields to select Returns ITermGroup The resulting term group instance, if any GetByNameAsync(String, Expression<Func<ITermGroup, Object>>[]) Method to select a term group by name Declaration Task<ITermGroup> GetByNameAsync(string name, params Expression<Func<ITermGroup, object>>[] selectors) Parameters String name The name to search for Expression < Func < ITermGroup , Object >>[] selectors The expressions declaring the fields to select Returns Task < ITermGroup > The resulting term group instance, if any Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermLocalizedDescription.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermLocalizedDescription.html",
    "title": "Interface ITermLocalizedDescription | PnP Core SDK",
    "keywords": "Interface ITermLocalizedDescription Represents the localized name used in the term store, which identifies the name in the localized language. Inherited Members IDataModel<ITermLocalizedDescription>.Requested IDataModel<ITermLocalizedDescription>.HasValue(String) IDataModel<ITermLocalizedDescription>.HasChanged(String) IDataModel<ITermLocalizedDescription>.IsPropertyAvailable(Expression<Func<ITermLocalizedDescription, Object>>) IDataModel<ITermLocalizedDescription>.ArePropertiesAvailable(Expression<Func<ITermLocalizedDescription, Object>>[]) IDataModel<ITermLocalizedDescription>.EnsureProperties(Expression<Func<ITermLocalizedDescription, Object>>[]) IDataModel<ITermLocalizedDescription>.EnsurePropertiesAsync(Expression<Func<ITermLocalizedDescription, Object>>[]) IDataModel<ITermLocalizedDescription>.ExecuteRequestAsync(ApiRequest) IDataModel<ITermLocalizedDescription>.ExecuteRequest(ApiRequest) IDataModel<ITermLocalizedDescription>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITermLocalizedDescription>.ExecuteRequestBatch(ApiRequest) IDataModel<ITermLocalizedDescription>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITermLocalizedDescription>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermLocalizedDescription : IDataModel<ITermLocalizedDescription>, IDataModelParent, IDataModelWithContext, ISupportModules<ITermLocalizedDescription> Properties Description The description in the localized language. Declaration string Description { get; set; } Property Value String LanguageTag The language for the label. Declaration string LanguageTag { get; set; } Property Value String Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermLocalizedDescriptionCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermLocalizedDescriptionCollection.html",
    "title": "Interface ITermLocalizedDescriptionCollection | PnP Core SDK",
    "keywords": "Interface ITermLocalizedDescriptionCollection Collection of localized termset labels Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermLocalizedDescriptionCollection : IDataModelCollection<ITermLocalizedDescription>, IEnumerable<ITermLocalizedDescription>, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportQuery<ITermLocalizedDescription>, ISupportModules<ITermLocalizedDescriptionCollection> Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.QueryProperties<TResult>(ISupportQuery<TResult>, Expression<Func<TResult, Object>>[]) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermLocalizedLabel.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermLocalizedLabel.html",
    "title": "Interface ITermLocalizedLabel | PnP Core SDK",
    "keywords": "Interface ITermLocalizedLabel Represents the localized label used in the term store, which identifies the name in the localized language. Inherited Members IDataModel<ITermLocalizedLabel>.Requested IDataModel<ITermLocalizedLabel>.HasValue(String) IDataModel<ITermLocalizedLabel>.HasChanged(String) IDataModel<ITermLocalizedLabel>.IsPropertyAvailable(Expression<Func<ITermLocalizedLabel, Object>>) IDataModel<ITermLocalizedLabel>.ArePropertiesAvailable(Expression<Func<ITermLocalizedLabel, Object>>[]) IDataModel<ITermLocalizedLabel>.EnsureProperties(Expression<Func<ITermLocalizedLabel, Object>>[]) IDataModel<ITermLocalizedLabel>.EnsurePropertiesAsync(Expression<Func<ITermLocalizedLabel, Object>>[]) IDataModel<ITermLocalizedLabel>.ExecuteRequestAsync(ApiRequest) IDataModel<ITermLocalizedLabel>.ExecuteRequest(ApiRequest) IDataModel<ITermLocalizedLabel>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITermLocalizedLabel>.ExecuteRequestBatch(ApiRequest) IDataModel<ITermLocalizedLabel>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITermLocalizedLabel>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermLocalizedLabel : IDataModel<ITermLocalizedLabel>, IDataModelParent, IDataModelWithContext, ISupportModules<ITermLocalizedLabel> Properties IsDefault Indicates whether the label is the default label. Declaration bool IsDefault { get; set; } Property Value Boolean LanguageTag The language for the label. Declaration string LanguageTag { get; set; } Property Value String Name The name in the localized language. Declaration string Name { get; set; } Property Value String Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermLocalizedLabelCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermLocalizedLabelCollection.html",
    "title": "Interface ITermLocalizedLabelCollection | PnP Core SDK",
    "keywords": "Interface ITermLocalizedLabelCollection Collection of localized termset labels Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermLocalizedLabelCollection : IDataModelCollection<ITermLocalizedLabel>, IEnumerable<ITermLocalizedLabel>, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportQuery<ITermLocalizedLabel>, ISupportModules<ITermLocalizedLabelCollection> Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.QueryProperties<TResult>(ISupportQuery<TResult>, Expression<Func<TResult, Object>>[]) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermProperty.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermProperty.html",
    "title": "Interface ITermProperty | PnP Core SDK",
    "keywords": "Interface ITermProperty Key/Value term property Inherited Members IDataModel<ITermProperty>.Requested IDataModel<ITermProperty>.HasValue(String) IDataModel<ITermProperty>.HasChanged(String) IDataModel<ITermProperty>.IsPropertyAvailable(Expression<Func<ITermProperty, Object>>) IDataModel<ITermProperty>.ArePropertiesAvailable(Expression<Func<ITermProperty, Object>>[]) IDataModel<ITermProperty>.EnsureProperties(Expression<Func<ITermProperty, Object>>[]) IDataModel<ITermProperty>.EnsurePropertiesAsync(Expression<Func<ITermProperty, Object>>[]) IDataModel<ITermProperty>.ExecuteRequestAsync(ApiRequest) IDataModel<ITermProperty>.ExecuteRequest(ApiRequest) IDataModel<ITermProperty>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITermProperty>.ExecuteRequestBatch(ApiRequest) IDataModel<ITermProperty>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITermProperty>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermProperty : IDataModel<ITermProperty>, IDataModelParent, IDataModelWithContext, ISupportModules<ITermProperty> Properties KeyField Property key Declaration string KeyField { get; set; } Property Value String Value Property value Declaration string Value { get; set; } Property Value String Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermPropertyCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermPropertyCollection.html",
    "title": "Interface ITermPropertyCollection | PnP Core SDK",
    "keywords": "Interface ITermPropertyCollection Collection of localized termset labels Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<ITermProperty>.LoadAsync(Expression<Func<ITermProperty, Object>>[]) IDataModelCollectionLoad<ITermProperty>.LoadBatchAsync(Batch, Expression<Func<ITermProperty, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermPropertyCollection : IDataModelCollection<ITermProperty>, IEnumerable<ITermProperty>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<ITermProperty>, ISupportQuery<ITermProperty>, ISupportModules<ITermPropertyCollection> Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.QueryProperties<TResult>(ISupportQuery<TResult>, Expression<Func<TResult, Object>>[]) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermRelation.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermRelation.html",
    "title": "Interface ITermRelation | PnP Core SDK",
    "keywords": "Interface ITermRelation Represents the relationship between terms in a term store.Currently two types of relationships are supported: pin and reuse. In a pin relationship, a term can be pinned under a different term in a different term set.In a pinned relationship, new children to the term can only be added in the term set in which the term was created.Any change in the hierarchy under the term is reflected across the sets in which the term was pinned. The reuse relationship is similar to the pinned relationship except that changes to the reused term can be made from any hierarchy in which the term is reused.Also, a change in hierarchy made to the reused term does not get reflected in the other term sets in which the term is reused. Inherited Members IDataModel<ITermRelation>.Requested IDataModel<ITermRelation>.HasValue(String) IDataModel<ITermRelation>.HasChanged(String) IDataModel<ITermRelation>.IsPropertyAvailable(Expression<Func<ITermRelation, Object>>) IDataModel<ITermRelation>.ArePropertiesAvailable(Expression<Func<ITermRelation, Object>>[]) IDataModel<ITermRelation>.EnsureProperties(Expression<Func<ITermRelation, Object>>[]) IDataModel<ITermRelation>.EnsurePropertiesAsync(Expression<Func<ITermRelation, Object>>[]) IDataModel<ITermRelation>.ExecuteRequestAsync(ApiRequest) IDataModel<ITermRelation>.ExecuteRequest(ApiRequest) IDataModel<ITermRelation>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITermRelation>.ExecuteRequestBatch(ApiRequest) IDataModel<ITermRelation>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITermRelation>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITermRelation>.GetBatchAsync(Batch, Expression<Func<ITermRelation, Object>>[]) IDataModelGet<ITermRelation>.GetAsync(Expression<Func<ITermRelation, Object>>[]) IDataModelLoad<ITermRelation>.LoadBatchAsync(Batch, Expression<Func<ITermRelation, Object>>[]) IDataModelLoad<ITermRelation>.LoadAsync(Expression<Func<ITermRelation, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermRelation : IDataModel<ITermRelation>, IDataModelParent, IDataModelWithContext, ISupportModules<ITermRelation>, IDataModelGet<ITermRelation>, IDataModelLoad<ITermRelation>, IQueryableDataModel Properties FromTerm The from term of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the set. Declaration ITerm FromTerm { get; } Property Value ITerm Id The Unique ID of the term relation. Declaration string Id { get; } Property Value String Relationship The type of relation. Possible values are: pin, reuse. Declaration TermRelationType Relationship { get; set; } Property Value TermRelationType Set The set in which the relation is relevant. Declaration ITermSet Set { get; } Property Value ITermSet ToTerm The to term of the relation. The term to which the realtionship is defined. Declaration ITerm ToTerm { get; } Property Value ITerm Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermRelationCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermRelationCollection.html",
    "title": "Interface ITermRelationCollection | PnP Core SDK",
    "keywords": "Interface ITermRelationCollection Collection of terms Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermRelationCollection : IQueryable<ITermRelation>, IDataModelCollection<ITermRelation>, IEnumerable<ITermRelation>, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportModules<ITermRelationCollection> Methods Add(TermRelationType, ITermSet, ITerm) Adds a new term relation Declaration ITermRelation Add(TermRelationType relationship, ITermSet targetSet, ITerm fromTerm = null) Parameters TermRelationType relationship Type of relation to be created. Possible values are: pin, reuse. ITermSet targetSet The set where the relationship needs to be created. ITerm fromTerm The term with which the relationship needs to be created. Returns ITermRelation Newly added term relation ship AddAsync(TermRelationType, ITermSet, ITerm) Adds a new term relation Declaration Task<ITermRelation> AddAsync(TermRelationType relationship, ITermSet targetSet, ITerm fromTerm = null) Parameters TermRelationType relationship Type of relation to be created. Possible values are: pin, reuse. ITermSet targetSet The set where the relationship needs to be created. ITerm fromTerm The term with which the relationship needs to be created. Returns Task < ITermRelation > Newly added term relation ship AddBatch(TermRelationType, ITermSet, ITerm) Adds a new term relation via a batch request Declaration ITermRelation AddBatch(TermRelationType relationship, ITermSet targetSet, ITerm fromTerm = null) Parameters TermRelationType relationship Type of relation to be created. Possible values are: pin, reuse. ITermSet targetSet The set where the relationship needs to be created. ITerm fromTerm The term with which the relationship needs to be created. Returns ITermRelation Newly added term relation ship AddBatch(Batch, TermRelationType, ITermSet, ITerm) Adds a new term relation via a batch request Declaration ITermRelation AddBatch(Batch batch, TermRelationType relationship, ITermSet targetSet, ITerm fromTerm = null) Parameters Batch batch Batch to use TermRelationType relationship Type of relation to be created. Possible values are: pin, reuse. ITermSet targetSet The set where the relationship needs to be created. ITerm fromTerm The term with which the relationship needs to be created. Returns ITermRelation Newly added term relation ship AddBatchAsync(TermRelationType, ITermSet, ITerm) Adds a new term relation via a batch request Declaration Task<ITermRelation> AddBatchAsync(TermRelationType relationship, ITermSet targetSet, ITerm fromTerm = null) Parameters TermRelationType relationship Type of relation to be created. Possible values are: pin, reuse. ITermSet targetSet The set where the relationship needs to be created. ITerm fromTerm The term with which the relationship needs to be created. Returns Task < ITermRelation > Newly added term relation ship AddBatchAsync(Batch, TermRelationType, ITermSet, ITerm) Adds a new term relation via a batch request Declaration Task<ITermRelation> AddBatchAsync(Batch batch, TermRelationType relationship, ITermSet targetSet, ITerm fromTerm = null) Parameters Batch batch Batch to use TermRelationType relationship Type of relation to be created. Possible values are: pin, reuse. ITermSet targetSet The set where the relationship needs to be created. ITerm fromTerm The term with which the relationship needs to be created. Returns Task < ITermRelation > Newly added term relation ship Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermSet.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermSet.html",
    "title": "Interface ITermSet | PnP Core SDK",
    "keywords": "Interface ITermSet Represents the set used in a term store. The set represents a unit which contains a collection of hierarchical terms. A group can contain multiple sets. Inherited Members IDataModel<ITermSet>.Requested IDataModel<ITermSet>.HasValue(String) IDataModel<ITermSet>.HasChanged(String) IDataModel<ITermSet>.IsPropertyAvailable(Expression<Func<ITermSet, Object>>) IDataModel<ITermSet>.ArePropertiesAvailable(Expression<Func<ITermSet, Object>>[]) IDataModel<ITermSet>.EnsureProperties(Expression<Func<ITermSet, Object>>[]) IDataModel<ITermSet>.EnsurePropertiesAsync(Expression<Func<ITermSet, Object>>[]) IDataModel<ITermSet>.ExecuteRequestAsync(ApiRequest) IDataModel<ITermSet>.ExecuteRequest(ApiRequest) IDataModel<ITermSet>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITermSet>.ExecuteRequestBatch(ApiRequest) IDataModel<ITermSet>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITermSet>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITermSet>.GetBatchAsync(Batch, Expression<Func<ITermSet, Object>>[]) IDataModelGet<ITermSet>.GetAsync(Expression<Func<ITermSet, Object>>[]) IDataModelLoad<ITermSet>.LoadBatchAsync(Batch, Expression<Func<ITermSet, Object>>[]) IDataModelLoad<ITermSet>.LoadAsync(Expression<Func<ITermSet, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermSet : IDataModel<ITermSet>, IDataModelParent, IDataModelWithContext, ISupportModules<ITermSet>, IDataModelGet<ITermSet>, IDataModelLoad<ITermSet>, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties CreatedDateTime Date and time of term set creation. Read-only. Declaration DateTimeOffset CreatedDateTime { get; } Property Value DateTimeOffset Description Description giving details on the term set. Declaration string Description { get; set; } Property Value String Group The parent group for this termset Declaration ITermGroup Group { get; } Property Value ITermGroup Id The Unique ID of the term set. Declaration string Id { get; } Property Value String LocalizedNames Name of the term set for each language. Declaration ITermSetLocalizedNameCollection LocalizedNames { get; } Property Value ITermSetLocalizedNameCollection Properties Properties on this term set Declaration ITermSetPropertyCollection Properties { get; } Property Value ITermSetPropertyCollection Relations Collection of terms relations Declaration ITermRelationCollection Relations { get; } Property Value ITermRelationCollection Terms Collection of term in this term set Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration ITermCollection Terms { get; } Property Value ITermCollection Methods AddProperty(String, String) Adds a property to the term set's property collection. Call update to persist this change. Declaration void AddProperty(string key, string value) Parameters String key Property key String value Property value AddPropertyAsync(String, String) Adds a property to the term set's property collection. Call update to persist this change. Declaration Task AddPropertyAsync(string key, string value) Parameters String key Property key String value Property value Returns Task Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermSetCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermSetCollection.html",
    "title": "Interface ITermSetCollection | PnP Core SDK",
    "keywords": "Interface ITermSetCollection Collection of term sets Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionDeleteByStringId.DeleteById(String) IDataModelCollectionDeleteByStringId.DeleteByIdAsync(String) IDataModelCollectionDeleteByStringId.DeleteByIdBatch(String) IDataModelCollectionDeleteByStringId.DeleteByIdBatchAsync(String) IDataModelCollectionDeleteByStringId.DeleteByIdBatch(Batch, String) IDataModelCollectionDeleteByStringId.DeleteByIdBatchAsync(Batch, String) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermSetCollection : IQueryable<ITermSet>, IAsyncEnumerable<ITermSet>, IDataModelCollection<ITermSet>, IEnumerable<ITermSet>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionDeleteByStringId, ISupportModules<ITermSetCollection> Methods Add(String, String) Adds a new term set Declaration ITermSet Add(string name, string description = null) Parameters String name Name of the term set String description Optional description of the term set Returns ITermSet Newly added term set AddAsync(String, String) Adds a new term set Declaration Task<ITermSet> AddAsync(string name, string description = null) Parameters String name Name of the term set String description Optional description of the term set Returns Task < ITermSet > Newly added term set AddBatch(Batch, String, String) Adds a new term set Declaration ITermSet AddBatch(Batch batch, string name, string description = null) Parameters Batch batch Batch to use String name Name of the term set String description Optional description of the term set Returns ITermSet Newly added term set AddBatch(String, String) Adds a new term set Declaration ITermSet AddBatch(string name, string description = null) Parameters String name Name of the term set String description Optional description of the term set Returns ITermSet Newly added term set AddBatchAsync(Batch, String, String) Adds a new term set Declaration Task<ITermSet> AddBatchAsync(Batch batch, string name, string description = null) Parameters Batch batch Batch to use String name Name of the term set String description Optional description of the term set Returns Task < ITermSet > Newly added term set AddBatchAsync(String, String) Adds a new term set Declaration Task<ITermSet> AddBatchAsync(string name, string description = null) Parameters String name Name of the term set String description Optional description of the term set Returns Task < ITermSet > Newly added term set GetById(String, Expression<Func<ITermSet, Object>>[]) Extension method to select a term set by id Declaration ITermSet GetById(string id, params Expression<Func<ITermSet, object>>[] selectors) Parameters String id The id to search for Expression < Func < ITermSet , Object >>[] selectors The expressions declaring the fields to select Returns ITermSet The resulting term set instance, if any GetByIdAsync(String, Expression<Func<ITermSet, Object>>[]) Extension method to select a term set by id Declaration Task<ITermSet> GetByIdAsync(string id, params Expression<Func<ITermSet, object>>[] selectors) Parameters String id The id to search for Expression < Func < ITermSet , Object >>[] selectors The expressions declaring the fields to select Returns Task < ITermSet > The resulting term set instance, if any Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermSetLocalizedName.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermSetLocalizedName.html",
    "title": "Interface ITermSetLocalizedName | PnP Core SDK",
    "keywords": "Interface ITermSetLocalizedName Represents the localized name used in the term store, which identifies the name in the localized language. Inherited Members IDataModel<ITermSetLocalizedName>.Requested IDataModel<ITermSetLocalizedName>.HasValue(String) IDataModel<ITermSetLocalizedName>.HasChanged(String) IDataModel<ITermSetLocalizedName>.IsPropertyAvailable(Expression<Func<ITermSetLocalizedName, Object>>) IDataModel<ITermSetLocalizedName>.ArePropertiesAvailable(Expression<Func<ITermSetLocalizedName, Object>>[]) IDataModel<ITermSetLocalizedName>.EnsureProperties(Expression<Func<ITermSetLocalizedName, Object>>[]) IDataModel<ITermSetLocalizedName>.EnsurePropertiesAsync(Expression<Func<ITermSetLocalizedName, Object>>[]) IDataModel<ITermSetLocalizedName>.ExecuteRequestAsync(ApiRequest) IDataModel<ITermSetLocalizedName>.ExecuteRequest(ApiRequest) IDataModel<ITermSetLocalizedName>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITermSetLocalizedName>.ExecuteRequestBatch(ApiRequest) IDataModel<ITermSetLocalizedName>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITermSetLocalizedName>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermSetLocalizedName : IDataModel<ITermSetLocalizedName>, IDataModelParent, IDataModelWithContext, ISupportModules<ITermSetLocalizedName> Properties LanguageTag The language for the label. Declaration string LanguageTag { get; set; } Property Value String Name The name in the localized language. Declaration string Name { get; set; } Property Value String Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermSetLocalizedNameCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermSetLocalizedNameCollection.html",
    "title": "Interface ITermSetLocalizedNameCollection | PnP Core SDK",
    "keywords": "Interface ITermSetLocalizedNameCollection Collection of localized termset labels Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermSetLocalizedNameCollection : IDataModelCollection<ITermSetLocalizedName>, IEnumerable<ITermSetLocalizedName>, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportQuery<ITermSetLocalizedName>, ISupportModules<ITermSetLocalizedNameCollection> Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.QueryProperties<TResult>(ISupportQuery<TResult>, Expression<Func<TResult, Object>>[]) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermSetProperty.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermSetProperty.html",
    "title": "Interface ITermSetProperty | PnP Core SDK",
    "keywords": "Interface ITermSetProperty Key/Value term set property Inherited Members IDataModel<ITermSetProperty>.Requested IDataModel<ITermSetProperty>.HasValue(String) IDataModel<ITermSetProperty>.HasChanged(String) IDataModel<ITermSetProperty>.IsPropertyAvailable(Expression<Func<ITermSetProperty, Object>>) IDataModel<ITermSetProperty>.ArePropertiesAvailable(Expression<Func<ITermSetProperty, Object>>[]) IDataModel<ITermSetProperty>.EnsureProperties(Expression<Func<ITermSetProperty, Object>>[]) IDataModel<ITermSetProperty>.EnsurePropertiesAsync(Expression<Func<ITermSetProperty, Object>>[]) IDataModel<ITermSetProperty>.ExecuteRequestAsync(ApiRequest) IDataModel<ITermSetProperty>.ExecuteRequest(ApiRequest) IDataModel<ITermSetProperty>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITermSetProperty>.ExecuteRequestBatch(ApiRequest) IDataModel<ITermSetProperty>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITermSetProperty>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermSetProperty : IDataModel<ITermSetProperty>, IDataModelParent, IDataModelWithContext, ISupportModules<ITermSetProperty> Properties KeyField Property key Declaration string KeyField { get; set; } Property Value String Value Property value Declaration string Value { get; set; } Property Value String Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermSetPropertyCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermSetPropertyCollection.html",
    "title": "Interface ITermSetPropertyCollection | PnP Core SDK",
    "keywords": "Interface ITermSetPropertyCollection Collection of localized termset labels Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermSetPropertyCollection : IDataModelCollection<ITermSetProperty>, IEnumerable<ITermSetProperty>, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportModules<ITermPropertyCollection> Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermStore.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermStore.html",
    "title": "Interface ITermStore | PnP Core SDK",
    "keywords": "Interface ITermStore Microsoft 365 Term store Inherited Members IDataModel<ITermStore>.Requested IDataModel<ITermStore>.HasValue(String) IDataModel<ITermStore>.HasChanged(String) IDataModel<ITermStore>.IsPropertyAvailable(Expression<Func<ITermStore, Object>>) IDataModel<ITermStore>.ArePropertiesAvailable(Expression<Func<ITermStore, Object>>[]) IDataModel<ITermStore>.EnsureProperties(Expression<Func<ITermStore, Object>>[]) IDataModel<ITermStore>.EnsurePropertiesAsync(Expression<Func<ITermStore, Object>>[]) IDataModel<ITermStore>.ExecuteRequestAsync(ApiRequest) IDataModel<ITermStore>.ExecuteRequest(ApiRequest) IDataModel<ITermStore>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITermStore>.ExecuteRequestBatch(ApiRequest) IDataModel<ITermStore>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITermStore>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITermStore>.GetBatchAsync(Batch, Expression<Func<ITermStore, Object>>[]) IDataModelGet<ITermStore>.GetAsync(Expression<Func<ITermStore, Object>>[]) IDataModelLoad<ITermStore>.LoadBatchAsync(Batch, Expression<Func<ITermStore, Object>>[]) IDataModelLoad<ITermStore>.LoadAsync(Expression<Func<ITermStore, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermStore : IDataModel<ITermStore>, IDataModelParent, IDataModelWithContext, ISupportModules<ITermStore>, IDataModelGet<ITermStore>, IDataModelLoad<ITermStore>, IDataModelUpdate Properties DefaultLanguage Default language of the termstore. Declaration string DefaultLanguage { get; set; } Property Value String Groups Collection of term groups in this term store Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration ITermGroupCollection Groups { get; } Property Value ITermGroupCollection Id The Unique ID of the Term Store Declaration string Id { get; } Property Value String Languages List of languages for the term store. Declaration List<string> Languages { get; } Property Value PnP.Core.Model.SharePoint.List < String > Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.ITheme.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITheme.html",
    "title": "Interface ITheme | PnP Core SDK",
    "keywords": "Interface ITheme Defines a theme that can be applied to a site Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITheme Properties IsCustomTheme Is this a custom theme added to the tenant? Declaration bool IsCustomTheme { get; } Property Value Boolean Name Name of the theme Declaration string Name { get; } Property Value String ThemeJson The theme's JSON definition Declaration string ThemeJson { get; } Property Value String"
  },
  "api/PnP.Core.Model.SharePoint.ITimeZone.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITimeZone.html",
    "title": "Interface ITimeZone | PnP Core SDK",
    "keywords": "Interface ITimeZone Public interface to define a TimeZone object Inherited Members IDataModel<ITimeZone>.Requested IDataModel<ITimeZone>.HasValue(String) IDataModel<ITimeZone>.HasChanged(String) IDataModel<ITimeZone>.IsPropertyAvailable(Expression<Func<ITimeZone, Object>>) IDataModel<ITimeZone>.ArePropertiesAvailable(Expression<Func<ITimeZone, Object>>[]) IDataModel<ITimeZone>.EnsureProperties(Expression<Func<ITimeZone, Object>>[]) IDataModel<ITimeZone>.EnsurePropertiesAsync(Expression<Func<ITimeZone, Object>>[]) IDataModel<ITimeZone>.ExecuteRequestAsync(ApiRequest) IDataModel<ITimeZone>.ExecuteRequest(ApiRequest) IDataModel<ITimeZone>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITimeZone>.ExecuteRequestBatch(ApiRequest) IDataModel<ITimeZone>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITimeZone>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITimeZone>.GetBatchAsync(Batch, Expression<Func<ITimeZone, Object>>[]) IDataModelGet<ITimeZone>.GetAsync(Expression<Func<ITimeZone, Object>>[]) IDataModelLoad<ITimeZone>.LoadBatchAsync(Batch, Expression<Func<ITimeZone, Object>>[]) IDataModelLoad<ITimeZone>.LoadAsync(Expression<Func<ITimeZone, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITimeZone : IDataModel<ITimeZone>, IDataModelParent, IDataModelWithContext, ISupportModules<ITimeZone>, IDataModelGet<ITimeZone>, IDataModelLoad<ITimeZone>, IQueryableDataModel Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object Bias Bias (additional minutes to get to UTC time) for this time zone Declaration int Bias { get; } Property Value Int32 DaylightBias Bias (additional minutes to get to UTC time) for this time zone when in daylight saving Declaration int DaylightBias { get; } Property Value Int32 Description Time zone description Declaration string Description { get; } Property Value String Id Id of the time zone Declaration int Id { get; } Property Value Int32 StandardBias Bias (additional minutes to get to UTC time) for this time zone when not in daylight saving Declaration int StandardBias { get; } Property Value Int32 Methods LocalTimeToUtc(DateTime) Converts the specified DateTime value from local time to Coordinated Universal Time (UTC). Declaration DateTime LocalTimeToUtc(DateTime dateTime) Parameters DateTime dateTime A object that represents the local date and time value to convert. Returns DateTime A object that contains the date converted to UTC. UtcToLocalTime(DateTime) Converts the specified DateTime value from Coordinated Universal Time (UTC) to local time. Declaration DateTime UtcToLocalTime(DateTime dateTime) Parameters DateTime dateTime A object that represents the UTC date and time value to convert. Returns DateTime A structure that contains the date and time converted to their local values. Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.ITimeZoneCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITimeZoneCollection.html",
    "title": "Interface ITimeZoneCollection | PnP Core SDK",
    "keywords": "Interface ITimeZoneCollection Public interface to define a collection of TimeZone objects Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<ITimeZone>.LoadAsync(Expression<Func<ITimeZone, Object>>[]) IDataModelCollectionLoad<ITimeZone>.LoadBatchAsync(Batch, Expression<Func<ITimeZone, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITimeZoneCollection : IQueryable<ITimeZone>, IAsyncEnumerable<ITimeZone>, IDataModelCollection<ITimeZone>, IEnumerable<ITimeZone>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<ITimeZone>, ISupportModules<ITimeZoneCollection> Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.IUserCustomAction.html": {
    "href": "api/PnP.Core.Model.SharePoint.IUserCustomAction.html",
    "title": "Interface IUserCustomAction | PnP Core SDK",
    "keywords": "Interface IUserCustomAction Public interface to define a UserCustomAction object Inherited Members IDataModel<IUserCustomAction>.Requested IDataModel<IUserCustomAction>.HasValue(String) IDataModel<IUserCustomAction>.HasChanged(String) IDataModel<IUserCustomAction>.IsPropertyAvailable(Expression<Func<IUserCustomAction, Object>>) IDataModel<IUserCustomAction>.ArePropertiesAvailable(Expression<Func<IUserCustomAction, Object>>[]) IDataModel<IUserCustomAction>.EnsureProperties(Expression<Func<IUserCustomAction, Object>>[]) IDataModel<IUserCustomAction>.EnsurePropertiesAsync(Expression<Func<IUserCustomAction, Object>>[]) IDataModel<IUserCustomAction>.ExecuteRequestAsync(ApiRequest) IDataModel<IUserCustomAction>.ExecuteRequest(ApiRequest) IDataModel<IUserCustomAction>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IUserCustomAction>.ExecuteRequestBatch(ApiRequest) IDataModel<IUserCustomAction>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IUserCustomAction>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IUserCustomAction>.GetBatchAsync(Batch, Expression<Func<IUserCustomAction, Object>>[]) IDataModelGet<IUserCustomAction>.GetAsync(Expression<Func<IUserCustomAction, Object>>[]) IDataModelLoad<IUserCustomAction>.LoadBatchAsync(Batch, Expression<Func<IUserCustomAction, Object>>[]) IDataModelLoad<IUserCustomAction>.LoadAsync(Expression<Func<IUserCustomAction, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IUserCustomAction : IDataModel<IUserCustomAction>, IDataModelParent, IDataModelWithContext, ISupportModules<IUserCustomAction>, IDataModelGet<IUserCustomAction>, IDataModelLoad<IUserCustomAction>, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object ClientSideComponentId Gets or sets the unique identifier of the associated client side component. Declaration Guid ClientSideComponentId { get; set; } Property Value Guid ClientSideComponentProperties Gets or sets the JSON formatted properties of the associated client side component. Declaration string ClientSideComponentProperties { get; set; } Property Value String CommandUIExtension Gets or sets a value that specifies an implementation specific XML fragment that determines user interface properties of the custom action. Declaration string CommandUIExtension { get; set; } Property Value String Description Gets or sets the description of the custom action. Declaration string Description { get; set; } Property Value String Group Gets or sets a value that specifies an implementation-specific value that determines the position of the custom action in the page. Declaration string Group { get; set; } Property Value String HostProperties This property is only used when an application customizer is created and preallocated placeholders are specified. It is optional. If non-empty, the string must contain a JSON object with one or two properties for the height amount needed to be preallocated. Declaration string HostProperties { get; set; } Property Value String Id Gets a value that specifies the identifier of the custom action. Declaration Guid Id { get; } Property Value Guid ImageUrl Gets or sets the URL of the image associated with the custom action. Declaration string ImageUrl { get; set; } Property Value String Location Gets or sets the location of the custom action. Declaration string Location { get; set; } Property Value String Name Gets or sets the name of the custom action. Declaration string Name { get; set; } Property Value String RegistrationId Gets or sets the value that specifies the identifier of the object associated with the custom action. Declaration string RegistrationId { get; set; } Property Value String RegistrationType Gets or sets the value that specifies the type of object associated with the custom action. Declaration UserCustomActionRegistrationType RegistrationType { get; set; } Property Value UserCustomActionRegistrationType Rights Get or sets the base permissions of the action. Declaration IBasePermissions Rights { get; set; } Property Value IBasePermissions Scope Gets a value that specifies the scope of the custom action. Declaration UserCustomActionScope Scope { get; } Property Value UserCustomActionScope ScriptBlock Gets or sets the value that specifies the ECMAScript to be executed when the custom action is performed. Declaration string ScriptBlock { get; set; } Property Value String ScriptSrc Gets or sets a value that specifies the URI of a file which contains the ECMAScript to execute on the page. Declaration string ScriptSrc { get; set; } Property Value String Sequence Gets or sets the value that specifies an implementation-specific value that determines the order of the custom action that appears on the page. Declaration int Sequence { get; set; } Property Value Int32 Title Gets or sets the display title of the custom action. Declaration string Title { get; set; } Property Value String Url Gets or sets the URL, URI, or ECMAScript (JScript, JavaScript) function associated with the action. Declaration string Url { get; set; } Property Value String VersionOfUserCustomAction Returns the version of the user custom action. Declaration string VersionOfUserCustomAction { get; } Property Value String Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IUserCustomActionCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IUserCustomActionCollection.html",
    "title": "Interface IUserCustomActionCollection | PnP Core SDK",
    "keywords": "Interface IUserCustomActionCollection Public interface to define a collection of UserCustomAction objects Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<IUserCustomAction>.LoadAsync(Expression<Func<IUserCustomAction, Object>>[]) IDataModelCollectionLoad<IUserCustomAction>.LoadBatchAsync(Batch, Expression<Func<IUserCustomAction, Object>>[]) IDataModelCollectionDeleteByGuidId.DeleteById(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdAsync(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatch(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatchAsync(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatch(Batch, Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatchAsync(Batch, Guid) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IUserCustomActionCollection : IQueryable<IUserCustomAction>, IAsyncEnumerable<IUserCustomAction>, IDataModelCollection<IUserCustomAction>, IEnumerable<IUserCustomAction>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<IUserCustomAction>, IDataModelCollectionDeleteByGuidId, ISupportModules<IUserCustomActionCollection> Methods Add(AddUserCustomActionOptions) Add a new User Custom Action with the specified options Declaration IUserCustomAction Add(AddUserCustomActionOptions options) Parameters AddUserCustomActionOptions options The options to specify to create the User Custom Action Returns IUserCustomAction The created User Custom Action object. AddAsync(AddUserCustomActionOptions) Add a new User Custom Action with the specified options Declaration Task<IUserCustomAction> AddAsync(AddUserCustomActionOptions options) Parameters AddUserCustomActionOptions options The options to specify to create the User Custom Action Returns Task < IUserCustomAction > The created User Custom Action object. AddBatch(AddUserCustomActionOptions) Add a new User Custom Action with the specified options in the current batch Declaration IUserCustomAction AddBatch(AddUserCustomActionOptions options) Parameters AddUserCustomActionOptions options The options to specify to create the User Custom Action Returns IUserCustomAction The created User Custom Action object. AddBatch(Batch, AddUserCustomActionOptions) Add a new User Custom Action with the specified options in the specified batch instance Declaration IUserCustomAction AddBatch(Batch batch, AddUserCustomActionOptions options) Parameters Batch batch The instance of the batch to use AddUserCustomActionOptions options The options to specify to create the User Custom Action Returns IUserCustomAction The created User Custom Action object. AddBatchAsync(AddUserCustomActionOptions) Add a new User Custom Action with the specified options in the current batch Declaration Task<IUserCustomAction> AddBatchAsync(AddUserCustomActionOptions options) Parameters AddUserCustomActionOptions options The options to specify to create the User Custom Action Returns Task < IUserCustomAction > The created User Custom Action object. AddBatchAsync(Batch, AddUserCustomActionOptions) Add a new User Custom Action with the specified options in the specified batch instance Declaration Task<IUserCustomAction> AddBatchAsync(Batch batch, AddUserCustomActionOptions options) Parameters Batch batch The instance of the batch to use AddUserCustomActionOptions options The options to specify to create the User Custom Action Returns Task < IUserCustomAction > The created User Custom Action object. Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.IUserProfile.html": {
    "href": "api/PnP.Core.Model.SharePoint.IUserProfile.html",
    "title": "Interface IUserProfile | PnP Core SDK",
    "keywords": "Interface IUserProfile An entry point for the user profile APIs Inherited Members IDataModel<IUserProfile>.Requested IDataModel<IUserProfile>.HasValue(String) IDataModel<IUserProfile>.HasChanged(String) IDataModel<IUserProfile>.IsPropertyAvailable(Expression<Func<IUserProfile, Object>>) IDataModel<IUserProfile>.ArePropertiesAvailable(Expression<Func<IUserProfile, Object>>[]) IDataModel<IUserProfile>.EnsureProperties(Expression<Func<IUserProfile, Object>>[]) IDataModel<IUserProfile>.EnsurePropertiesAsync(Expression<Func<IUserProfile, Object>>[]) IDataModel<IUserProfile>.ExecuteRequestAsync(ApiRequest) IDataModel<IUserProfile>.ExecuteRequest(ApiRequest) IDataModel<IUserProfile>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IUserProfile>.ExecuteRequestBatch(ApiRequest) IDataModel<IUserProfile>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IUserProfile>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IUserProfile>.GetBatchAsync(Batch, Expression<Func<IUserProfile, Object>>[]) IDataModelGet<IUserProfile>.GetAsync(Expression<Func<IUserProfile, Object>>[]) IDataModelLoad<IUserProfile>.LoadBatchAsync(Batch, Expression<Func<IUserProfile, Object>>[]) IDataModelLoad<IUserProfile>.LoadAsync(Expression<Func<IUserProfile, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IUserProfile : IDataModel<IUserProfile>, IDataModelParent, IDataModelWithContext, ISupportModules<IUserProfile>, IDataModelGet<IUserProfile>, IDataModelLoad<IUserProfile> Properties EditProfileLink The link to edit the current user's profile Declaration string EditProfileLink { get; } Property Value String IsMyPeopleListPublic A Boolean value that indicates whether the current user's People I'm Following list is public. Declaration bool IsMyPeopleListPublic { get; } Property Value Boolean Methods GetMyProperties(Expression<Func<IPersonProperties, Object>>[]) Gets user properties for the current user. Declaration IPersonProperties GetMyProperties(params Expression<Func<IPersonProperties, object>>[] selectors) Parameters Expression < Func < IPersonProperties , Object >>[] selectors Specific properties to return Returns IPersonProperties An instance of IPersonProperties GetMyPropertiesAsync(Expression<Func<IPersonProperties, Object>>[]) Gets user properties for the current user. Declaration Task<IPersonProperties> GetMyPropertiesAsync(params Expression<Func<IPersonProperties, object>>[] selectors) Parameters Expression < Func < IPersonProperties , Object >>[] selectors Specific properties to return Returns Task < IPersonProperties > An instance of IPersonProperties GetPropertiesFor(String, Expression<Func<IPersonProperties, Object>>[]) Gets user properties for the specified user. Declaration IPersonProperties GetPropertiesFor(string accountName, params Expression<Func<IPersonProperties, object>>[] selectors) Parameters String accountName The account name, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; Expression < Func < IPersonProperties , Object >>[] selectors Specific properties to return Returns IPersonProperties An instance of IPersonProperties GetPropertiesForAsync(String, Expression<Func<IPersonProperties, Object>>[]) Gets user properties for the specified user. Declaration Task<IPersonProperties> GetPropertiesForAsync(string accountName, params Expression<Func<IPersonProperties, object>>[] selectors) Parameters String accountName The account name, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; Expression < Func < IPersonProperties , Object >>[] selectors Specific properties to return Returns Task < IPersonProperties > An instance of IPersonProperties GetPropertyFor(String, String) Gets the specified user profile property for the specified user. Declaration string GetPropertyFor(string accountName, string propertyName) Parameters String accountName The account name, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; String propertyName The case-sensitive name of the property to get. Returns String The specified profile property for the specified user. GetPropertyForAsync(String, String) Gets the specified user profile property for the specified user. Declaration Task<string> GetPropertyForAsync(string accountName, string propertyName) Parameters String accountName The account name, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; String propertyName The case-sensitive name of the property to get. Returns Task < String > The specified profile property for the specified user. GetUserOneDriveQuotaMax(String) Gets the user's onedrive max quota Declaration long GetUserOneDriveQuotaMax(string accountName) Parameters String accountName The account name, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; Returns Int64 The max quota value GetUserOneDriveQuotaMaxAsync(String) Gets the user's onedrive max quota Declaration Task<long> GetUserOneDriveQuotaMaxAsync(string accountName) Parameters String accountName The account name, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; Returns Task < Int64 > The max quota value ResetUserOneDriveQuotaToDefault(String) Resets the user's onedrive quota to the default value Declaration string ResetUserOneDriveQuotaToDefault(string accountName) Parameters String accountName The account name, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; Returns String The string outcome ResetUserOneDriveQuotaToDefaultAsync(String) Resets the user's onedrive quota to the default value Declaration Task<string> ResetUserOneDriveQuotaToDefaultAsync(string accountName) Parameters String accountName The account name, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; Returns Task < String > The string outcome SetMultiValuedProfileProperty(String, String, IList<String>) Sets the user's multi value profile property. Declaration void SetMultiValuedProfileProperty(string accountName, string propertyName, IList<string> propertyValues) Parameters String accountName The account name, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; String propertyName The case-sensitive name of the property to get. PnP.Core.Model.SharePoint.IList < String > propertyValues The property values SetMultiValuedProfilePropertyAsync(String, String, IList<String>) Sets the user's multi value profile property. Declaration Task SetMultiValuedProfilePropertyAsync(string accountName, string propertyName, IList<string> propertyValues) Parameters String accountName The account name, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; String propertyName The case-sensitive name of the property to get. PnP.Core.Model.SharePoint.IList < String > propertyValues The property values Returns Task SetMyProfilePicture(Byte[]) Uploads and sets the user profile picture. Users can upload a picture to their own profile only. Declaration void SetMyProfilePicture(byte[] fileBytes) Parameters Byte [] fileBytes A byte array representing the file SetMyProfilePictureAsync(Byte[]) Uploads and sets the user profile picture. Users can upload a picture to their own profile only. Declaration Task SetMyProfilePictureAsync(byte[] fileBytes) Parameters Byte [] fileBytes A byte array representing the file Returns Task SetSingleValueProfileProperty(String, String, String) Sets the user's profile property. Declaration void SetSingleValueProfileProperty(string accountName, string propertyName, string propertyValue) Parameters String accountName The account name, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; String propertyName The case-sensitive name of the property to get. String propertyValue The property value SetSingleValueProfilePropertyAsync(String, String, String) Sets the user's profile property. Declaration Task SetSingleValueProfilePropertyAsync(string accountName, string propertyName, string propertyValue) Parameters String accountName The account name, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; String propertyName The case-sensitive name of the property to get. String propertyValue The property value Returns Task SetUserOneDriveQuota(String, Int64, Int64) Sets the user's onedrive quota Declaration string SetUserOneDriveQuota(string accountName, long newQuota, long newQuotaWarning) Parameters String accountName The account name, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; Int64 newQuota New quota value Int64 newQuotaWarning Quota warning value Returns String The string outcome SetUserOneDriveQuotaAsync(String, Int64, Int64) Sets the user's onedrive quota Declaration Task<string> SetUserOneDriveQuotaAsync(string accountName, long newQuota, long newQuotaWarning) Parameters String accountName The account name, i.e. \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com&quot; Int64 newQuota New quota value Int64 newQuotaWarning Quota warning value Returns Task < String > The string outcome Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IView.html": {
    "href": "api/PnP.Core.Model.SharePoint.IView.html",
    "title": "Interface IView | PnP Core SDK",
    "keywords": "Interface IView Public interface to define a View object Inherited Members IDataModel<IView>.Requested IDataModel<IView>.HasValue(String) IDataModel<IView>.HasChanged(String) IDataModel<IView>.IsPropertyAvailable(Expression<Func<IView, Object>>) IDataModel<IView>.ArePropertiesAvailable(Expression<Func<IView, Object>>[]) IDataModel<IView>.EnsureProperties(Expression<Func<IView, Object>>[]) IDataModel<IView>.EnsurePropertiesAsync(Expression<Func<IView, Object>>[]) IDataModel<IView>.ExecuteRequestAsync(ApiRequest) IDataModel<IView>.ExecuteRequest(ApiRequest) IDataModel<IView>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IView>.ExecuteRequestBatch(ApiRequest) IDataModel<IView>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IView>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IView>.GetBatchAsync(Batch, Expression<Func<IView, Object>>[]) IDataModelGet<IView>.GetAsync(Expression<Func<IView, Object>>[]) IDataModelLoad<IView>.LoadBatchAsync(Batch, Expression<Func<IView, Object>>[]) IDataModelLoad<IView>.LoadAsync(Expression<Func<IView, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IView : IDataModel<IView>, IDataModelParent, IDataModelWithContext, ISupportModules<IView>, IDataModelGet<IView>, IDataModelLoad<IView>, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties Aggregations Specifies the aggregations displayed by the list view. The Aggregations property contains a CAML string. Declaration string Aggregations { get; set; } Property Value String AggregationsStatus Specifies whether the aggregations are shown in the list view Declaration string AggregationsStatus { get; set; } Property Value String All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object AssociatedContentTypeId Gets or sets Associated Content Type Id Declaration string AssociatedContentTypeId { get; set; } Property Value String BaseViewId Specifies the base view identifier of the list view Declaration string BaseViewId { get; } Property Value String CalendarViewStyles Gets or sets Calendar View Styles Declaration string CalendarViewStyles { get; set; } Property Value String ColumnWidth Gets or sets Column Width Declaration string ColumnWidth { get; set; } Property Value String CustomFormatter Gets or sets Custom Formatter Declaration string CustomFormatter { get; set; } Property Value String DefaultView Gets or sets a Boolean value that specifies whether the view is the default view Declaration bool DefaultView { get; set; } Property Value Boolean DefaultViewForContentType Gets or sets a Boolean value that specifies whether the view is the default view for the associated content type Declaration bool DefaultViewForContentType { get; set; } Property Value Boolean EditorModified Gets a Boolean value that indicates whether the view was modified in an HTML editor Declaration bool EditorModified { get; } Property Value Boolean Formats Specifies the definitions for column and row formatting that are used in a datasheet view Declaration string Formats { get; set; } Property Value String GridLayout An attribute of the view, specifies the quick edit layout Declaration string GridLayout { get; set; } Property Value String Hidden Gets or sets Hidden Declaration bool Hidden { get; set; } Property Value Boolean HtmlSchemaXml Gets the Html Schema Xml Declaration string HtmlSchemaXml { get; } Property Value String Id Gets the Id Declaration Guid Id { get; } Property Value Guid ImageUrl Specifies the server relative or absolute URL of the Image for the List View Declaration string ImageUrl { get; } Property Value String IncludeRootFolder Specifies if the Root Folder is included in the List View Declaration bool IncludeRootFolder { get; } Property Value Boolean JSLink An attribute of the view, specifies the Javascript files used for the view. Declaration string JSLink { get; } Property Value String ListViewXml Gets or sets List View Xml Declaration string ListViewXml { get; set; } Property Value String Method Specifies the view method for the list view Declaration string Method { get; } Property Value String MobileDefaultView Specifies whether the list view is the default for a mobile device Declaration bool MobileDefaultView { get; set; } Property Value Boolean MobileView Specifies whether the list view applies to a mobile device Declaration bool MobileView { get; set; } Property Value Boolean ModerationType Specifies the content approval type for the list view. A string that indicates the Content Approval type, which can be one of the following values: HideUnapproved -- Unapproved draft items are hidden from users who only have permission to read items. Contributor -- Pending and rejected items for the current user are displayed. Moderator -- Pending and rejected items for all users are displayed to users who have managed list permissions. Declaration string ModerationType { get; } Property Value String NewDocumentTemplates An attribute of the view, indicates what documents/templates are visible in \"New\" menu of a document library Declaration string NewDocumentTemplates { get; } Property Value String OrderedView Specifies whether users can reorder items through the user interface Declaration bool OrderedView { get; } Property Value Boolean Paged Specifies whether the list view supports displaying items across multiple pages Declaration bool Paged { get; set; } Property Value Boolean PageRenderType Gets the reason why the page is rendered in classic UX, or Modern if the page is in Modern UX Declaration ListPageRenderType PageRenderType { get; } Property Value ListPageRenderType PersonalView Specifies whether the view is a personal view or a public view Declaration bool PersonalView { get; } Property Value Boolean ReadOnlyView Specifies if the view is read-only Declaration bool ReadOnlyView { get; } Property Value Boolean RequiresClientIntegration Specifies whether this view requires client integration Declaration bool RequiresClientIntegration { get; } Property Value Boolean RowLimit Specifies the limit for the number of items that the list view will return per page Declaration int RowLimit { get; set; } Property Value Int32 Scope Specifies the recursive scope for the list view of a document library Declaration ViewScope Scope { get; } Property Value ViewScope ServerRelativeUrl Specifies the server relative URL of the list view page Declaration string ServerRelativeUrl { get; } Property Value String StyleId Specifies the identifier of the view style for the list view Declaration string StyleId { get; } Property Value String TabularView Gets or sets the TabularView attribute in the View Schema XML Declaration bool TabularView { get; } Property Value Boolean Threaded Gets a Boolean value that indicates whether the view is threaded Declaration bool Threaded { get; } Property Value Boolean Title Specifies the Display Name of the List View Declaration string Title { get; set; } Property Value String Toolbar Specifies the toolbar (CAML) for the list view Declaration string Toolbar { get; } Property Value String ToolbarTemplateName Specifies the name of the toolbar template that is used for the list view toolbar Declaration string ToolbarTemplateName { get; } Property Value String ViewData Specifies the view data for the list view Declaration string ViewData { get; } Property Value String ViewFields Gets or sets View Fields Declaration IViewFieldCollection ViewFields { get; } Property Value IViewFieldCollection ViewJoins Specifies the list joins that will be used by the list view Declaration string ViewJoins { get; } Property Value String ViewProjectedFields Specifies the projected fields that will be used by the list view Declaration string ViewProjectedFields { get; } Property Value String ViewQuery Specifies the CAML query that will be used by the list view Declaration string ViewQuery { get; set; } Property Value String ViewType Specifies the type of the view Declaration ViewType ViewType { get; } Property Value ViewType ViewType2 Gets or sets the ViewType2 Declaration ViewType2 ViewType2 { get; set; } Property Value ViewType2 Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IViewCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IViewCollection.html",
    "title": "Interface IViewCollection | PnP Core SDK",
    "keywords": "Interface IViewCollection Public interface to define a collection of View objects Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<IView>.LoadAsync(Expression<Func<IView, Object>>[]) IDataModelCollectionLoad<IView>.LoadBatchAsync(Batch, Expression<Func<IView, Object>>[]) IDataModelCollectionDeleteByGuidId.DeleteById(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdAsync(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatch(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatchAsync(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatch(Batch, Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatchAsync(Batch, Guid) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IViewCollection : IQueryable<IView>, IAsyncEnumerable<IView>, IDataModelCollection<IView>, IEnumerable<IView>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<IView>, IDataModelCollectionDeleteByGuidId, ISupportModules<IViewCollection> Methods Add(ViewOptions) Adds a new view Declaration IView Add(ViewOptions viewOptions) Parameters ViewOptions viewOptions View options Returns IView View AddAsync(ViewOptions) Asynchronously adds a new view Declaration Task<IView> AddAsync(ViewOptions viewOptions) Parameters ViewOptions viewOptions View options Returns Task < IView > View AddBatch(ViewOptions) Add a view part of a batch Declaration IView AddBatch(ViewOptions viewOptions) Parameters ViewOptions viewOptions View options Returns IView View AddBatch(Batch, ViewOptions) Add a view part of a specific batch asynchroniously Declaration IView AddBatch(Batch batch, ViewOptions viewOptions) Parameters Batch batch Batch to use ViewOptions viewOptions View options Returns IView View AddBatchAsync(ViewOptions) Add a view part of a batch asynchroniously Declaration Task<IView> AddBatchAsync(ViewOptions viewOptions) Parameters ViewOptions viewOptions View options Returns Task < IView > View AddBatchAsync(Batch, ViewOptions) Add a view part of a specific batch asynchroniously Declaration Task<IView> AddBatchAsync(Batch batch, ViewOptions viewOptions) Parameters Batch batch Batch to use ViewOptions viewOptions View options Returns Task < IView > View Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.IViewFieldCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IViewFieldCollection.html",
    "title": "Interface IViewFieldCollection | PnP Core SDK",
    "keywords": "Interface IViewFieldCollection Public interface to define a ViewFieldCollection object Inherited Members IDataModel<IViewFieldCollection>.Requested IDataModel<IViewFieldCollection>.HasValue(String) IDataModel<IViewFieldCollection>.HasChanged(String) IDataModel<IViewFieldCollection>.IsPropertyAvailable(Expression<Func<IViewFieldCollection, Object>>) IDataModel<IViewFieldCollection>.ArePropertiesAvailable(Expression<Func<IViewFieldCollection, Object>>[]) IDataModel<IViewFieldCollection>.EnsureProperties(Expression<Func<IViewFieldCollection, Object>>[]) IDataModel<IViewFieldCollection>.EnsurePropertiesAsync(Expression<Func<IViewFieldCollection, Object>>[]) IDataModel<IViewFieldCollection>.ExecuteRequestAsync(ApiRequest) IDataModel<IViewFieldCollection>.ExecuteRequest(ApiRequest) IDataModel<IViewFieldCollection>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IViewFieldCollection>.ExecuteRequestBatch(ApiRequest) IDataModel<IViewFieldCollection>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IViewFieldCollection>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelCollectionLoad<IViewFieldCollection>.LoadAsync(Expression<Func<IViewFieldCollection, Object>>[]) IDataModelCollectionLoad<IViewFieldCollection>.LoadBatchAsync(Batch, Expression<Func<IViewFieldCollection, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IViewFieldCollection : IDataModel<IViewFieldCollection>, IDataModelParent, IDataModelWithContext, IDataModelCollectionLoad<IViewFieldCollection>, IDataModelUpdate, IDataModelDelete, ISupportModules<IViewFieldCollection> Properties SchemaXml To update... Declaration string SchemaXml { get; set; } Property Value String Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IWeb.html": {
    "href": "api/PnP.Core.Model.SharePoint.IWeb.html",
    "title": "Interface IWeb | PnP Core SDK",
    "keywords": "Interface IWeb Public interface to define a Web object of SharePoint Online Inherited Members IDataModel<IWeb>.Requested IDataModel<IWeb>.HasValue(String) IDataModel<IWeb>.HasChanged(String) IDataModel<IWeb>.IsPropertyAvailable(Expression<Func<IWeb, Object>>) IDataModel<IWeb>.ArePropertiesAvailable(Expression<Func<IWeb, Object>>[]) IDataModel<IWeb>.EnsureProperties(Expression<Func<IWeb, Object>>[]) IDataModel<IWeb>.EnsurePropertiesAsync(Expression<Func<IWeb, Object>>[]) IDataModel<IWeb>.ExecuteRequestAsync(ApiRequest) IDataModel<IWeb>.ExecuteRequest(ApiRequest) IDataModel<IWeb>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<IWeb>.ExecuteRequestBatch(ApiRequest) IDataModel<IWeb>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<IWeb>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IWeb>.GetBatchAsync(Batch, Expression<Func<IWeb, Object>>[]) IDataModelGet<IWeb>.GetAsync(Expression<Func<IWeb, Object>>[]) IDataModelLoad<IWeb>.LoadBatchAsync(Batch, Expression<Func<IWeb, Object>>[]) IDataModelLoad<IWeb>.LoadAsync(Expression<Func<IWeb, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() IDataModelSupportingGetChanges.GetChangesAsync(ChangeQueryOptions) IDataModelSupportingGetChanges.GetChanges(ChangeQueryOptions) IDataModelSupportingGetChanges.GetChangesBatchAsync(Batch, ChangeQueryOptions) IDataModelSupportingGetChanges.GetChangesBatch(Batch, ChangeQueryOptions) IDataModelSupportingGetChanges.GetChangesBatchAsync(ChangeQueryOptions) IDataModelSupportingGetChanges.GetChangesBatch(ChangeQueryOptions) ISecurableObject.RoleAssignments ISecurableObject.HasUniqueRoleAssignments ISecurableObject.BreakRoleInheritance(Boolean, Boolean) ISecurableObject.BreakRoleInheritanceAsync(Boolean, Boolean) ISecurableObject.BreakRoleInheritanceBatch(Batch, Boolean, Boolean) ISecurableObject.BreakRoleInheritanceBatchAsync(Batch, Boolean, Boolean) ISecurableObject.BreakRoleInheritanceBatch(Boolean, Boolean) ISecurableObject.BreakRoleInheritanceBatchAsync(Boolean, Boolean) ISecurableObject.ResetRoleInheritance() ISecurableObject.ResetRoleInheritanceAsync() ISecurableObject.ResetRoleInheritanceBatch(Batch) ISecurableObject.ResetRoleInheritanceBatchAsync(Batch) ISecurableObject.ResetRoleInheritanceBatch() ISecurableObject.ResetRoleInheritanceBatchAsync() ISecurableObject.GetRoleDefinitions(Int32) ISecurableObject.GetRoleDefinitionsAsync(Int32) ISecurableObject.AddRoleDefinitions(Int32, String[]) ISecurableObject.AddRoleDefinitionsAsync(Int32, String[]) ISecurableObject.AddRoleDefinition(Int32, IRoleDefinition) ISecurableObject.AddRoleDefinitionAsync(Int32, IRoleDefinition) ISecurableObject.AddRoleDefinitionBatch(Batch, Int32, IRoleDefinition) ISecurableObject.AddRoleDefinitionBatchAsync(Batch, Int32, IRoleDefinition) ISecurableObject.AddRoleDefinitionBatch(Int32, IRoleDefinition) ISecurableObject.AddRoleDefinitionBatchAsync(Int32, IRoleDefinition) ISecurableObject.RemoveRoleDefinitions(Int32, String[]) ISecurableObject.RemoveRoleDefinitionsAsync(Int32, String[]) ISecurableObject.RemoveRoleDefinition(Int32, IRoleDefinition) ISecurableObject.RemoveRoleDefinitionAsync(Int32, IRoleDefinition) ISecurableObject.RemoveRoleDefinitionBatch(Int32, IRoleDefinition) ISecurableObject.RemoveRoleDefinitionBatchAsync(Int32, IRoleDefinition) ISecurableObject.RemoveRoleDefinitionBatch(Batch, Int32, IRoleDefinition) ISecurableObject.RemoveRoleDefinitionBatchAsync(Batch, Int32, IRoleDefinition) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IWeb : IDataModel<IWeb>, IDataModelParent, IDataModelWithContext, ISupportModules<IWeb>, IDataModelGet<IWeb>, IDataModelLoad<IWeb>, IDataModelUpdate, IDataModelDelete, IDataModelSupportingGetChanges, ISecurableObject, IQueryableDataModel Properties AccessRequestListUrl Gets the URL of the access request list to the current site. Declaration string AccessRequestListUrl { get; } Property Value String AccessRequestSiteDescription Gets or sets the description of the access request to this site. Declaration string AccessRequestSiteDescription { get; set; } Property Value String All A special property used to add an asterisk to a $select statement Declaration object All { get; } Property Value Object AllowAutomaticASPXPageIndexing Gets a value that specifies whether the automatic ASPX page indexed is allowed. Declaration bool AllowAutomaticASPXPageIndexing { get; set; } Property Value Boolean AllowCreateDeclarativeWorkflowForCurrentUser Gets a value that specifies whether the current user is allowed to create declarative workflow on this site. Declaration bool AllowCreateDeclarativeWorkflowForCurrentUser { get; set; } Property Value Boolean AllowDesignerForCurrentUser Gets a value that specifies whether the current user is allowed to use a designer application to customize this site. Declaration bool AllowDesignerForCurrentUser { get; set; } Property Value Boolean AllowMasterPageEditingForCurrentUser Gets a value that specifies whether the current user is allowed to edit the master page. Declaration bool AllowMasterPageEditingForCurrentUser { get; } Property Value Boolean AllowRevertFromTemplateForCurrentUser Gets a value that specifies whether the current user is allowed to revert the site to a default site template. Declaration bool AllowRevertFromTemplateForCurrentUser { get; } Property Value Boolean AllowRssFeeds Gets a value that specifies whether the site allows RSS feeds. Declaration bool AllowRssFeeds { get; } Property Value Boolean AllowSaveDeclarativeWorkflowAsTemplateForCurrentUser Gets a value that specifies whether the current user is allowed to save declarative workflows as template. Declaration bool AllowSaveDeclarativeWorkflowAsTemplateForCurrentUser { get; } Property Value Boolean AllowSavePublishDeclarativeWorkflowForCurrentUser Gets a value that specifies whether the current user is allowed to publish a declarative workflow. Declaration bool AllowSavePublishDeclarativeWorkflowForCurrentUser { get; } Property Value Boolean AllProperties Gets a collection of metadata for the Web site. Declaration IPropertyValues AllProperties { get; } Property Value IPropertyValues AlternateCssUrl The AlternateCSS of the Site, optional attribute. Declaration string AlternateCssUrl { get; set; } Property Value String AppInstanceId The instance Id of the App Instance that this website represents. Declaration Guid AppInstanceId { get; } Property Value Guid AssociatedMemberGroup Associated SharePoint Member group Declaration ISharePointGroup AssociatedMemberGroup { get; } Property Value ISharePointGroup AssociatedOwnerGroup Associated SharePoint owner group Declaration ISharePointGroup AssociatedOwnerGroup { get; } Property Value ISharePointGroup AssociatedVisitorGroup Associated SharePoint Visitor group Declaration ISharePointGroup AssociatedVisitorGroup { get; } Property Value ISharePointGroup AvailableContentTypes Gets the collection of all content types that apply to the current scope, including those of the current Web site, as well as any parent Web sites. Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IContentTypeCollection AvailableContentTypes { get; } Property Value IContentTypeCollection AvailableFields Gets a value that specifies the collection of all fields available for the current scope, including those of the current site, as well as any parent sites. Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IFieldCollection AvailableFields { get; } Property Value IFieldCollection CommentsOnSitePagesDisabled Defines whether the comments on site pages are disabled or not Declaration bool CommentsOnSitePagesDisabled { get; set; } Property Value Boolean ContainsConfidentialInfo Gets a boolean value that specifies whether the site contains highly confidential information. If the tenant settings don't allow tagging sites as confidential, this property will always return false. Declaration bool ContainsConfidentialInfo { get; set; } Property Value Boolean ContentTypes Collection of content types in the current Web object Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IContentTypeCollection ContentTypes { get; } Property Value IContentTypeCollection Created Gets a value that specifies when the site was created. Declaration DateTime Created { get; } Property Value DateTime CurrentUser Gets the current user in the current context Declaration ISharePointUser CurrentUser { get; } Property Value ISharePointUser CustomMasterUrl The Custom MasterPage Url of the Site, optional attribute. Declaration string CustomMasterUrl { get; set; } Property Value String DefaultNewPageTemplateId The id of the default new page template. Use SetDefaultNewPageTemplateId to set the value. Declaration Guid DefaultNewPageTemplateId { get; set; } Property Value Guid Description The Description of the Site, optional attribute. Declaration string Description { get; set; } Property Value String DesignPackageId Gets or sets the design package Id of this site. Declaration Guid DesignPackageId { get; set; } Property Value Guid DisableAppViews Defines whether disable PowerApps for the current web Declaration bool DisableAppViews { get; set; } Property Value Boolean DisableFlows Defines whether disable flows for the current web Declaration bool DisableFlows { get; set; } Property Value Boolean DisableRecommendedItems Gets or sets whether the recommended items are disabled on this site. Declaration bool DisableRecommendedItems { get; set; } Property Value Boolean DocumentLibraryCalloutOfficeWebAppPreviewersDisabled Determines if the Document Library Callout's WAC previewers are enabled or not. Declaration bool DocumentLibraryCalloutOfficeWebAppPreviewersDisabled { get; } Property Value Boolean EffectiveBasePermissions Get's the permission levels set on this web Declaration IBasePermissions EffectiveBasePermissions { get; } Property Value IBasePermissions EnableMinimalDownload Gets or sets a Boolean value that specifies whether the Web site should use Minimal Download Strategy. Declaration bool EnableMinimalDownload { get; set; } Property Value Boolean ExcludeFromOfflineClient Defines whether to exclude the web from offline client Declaration bool ExcludeFromOfflineClient { get; set; } Property Value Boolean Features Collection of features enabled for the web Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IFeatureCollection Features { get; } Property Value IFeatureCollection Fields Collection of fields in the current Web object Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IFieldCollection Fields { get; } Property Value IFieldCollection Folders Collection of folders in the current Web object Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IFolderCollection Folders { get; } Property Value IFolderCollection FooterEmphasis Gets or sets the value of the footer emphasis. Declaration FooterVariantThemeType FooterEmphasis { get; set; } Property Value FooterVariantThemeType FooterEnabled Gets or sets a value that specifies whether the footer is enabled on the site. Declaration bool FooterEnabled { get; set; } Property Value Boolean FooterLayout Gets or sets the value of the footer layout. Declaration FooterLayoutType FooterLayout { get; set; } Property Value FooterLayoutType HeaderEmphasis Gets or sets the value of the header emphasis. Declaration VariantThemeType HeaderEmphasis { get; set; } Property Value VariantThemeType HeaderLayout Gets or sets the value of the header layout. Declaration HeaderLayoutType HeaderLayout { get; set; } Property Value HeaderLayoutType HideTitleInHeader Gets or sets a value that specifies whether the title in header is hidden on the site. Declaration bool HideTitleInHeader { get; set; } Property Value Boolean HorizontalQuickLaunch Defines whether to enable the Horizontal QuickLaunch for the current web Declaration bool HorizontalQuickLaunch { get; set; } Property Value Boolean Id The Unique ID of the Web object Declaration Guid Id { get; } Property Value Guid IsHomepageModernized Gets a value that indicates whether the homepage is modernized. Declaration bool IsHomepageModernized { get; } Property Value Boolean IsMultilingual Defines whether to enable Multilingual capabilities for the current web Declaration bool IsMultilingual { get; set; } Property Value Boolean IsProvisioningComplete Gets a value that indicates whether the provisioning is complete. Declaration bool IsProvisioningComplete { get; } Property Value Boolean IsRevertHomepageLinkHidden Gets or sets a value that specifies whether the link to revert homepage is hidden. Declaration bool IsRevertHomepageLinkHidden { get; set; } Property Value Boolean Language Gets a value that specifies the LCID for the language that is used on the site. Declaration int Language { get; } Property Value Int32 LastItemModifiedDate Gets a value that specifies when an item was last modified in the site. Declaration DateTime LastItemModifiedDate { get; } Property Value DateTime LastItemUserModifiedDate Gets a value that specifies when an item was last modified by user in the site. Declaration DateTime LastItemUserModifiedDate { get; } Property Value DateTime Lists Collection of lists in the current Web object. Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IListCollection Lists { get; } Property Value IListCollection LogoAlignment Gets or sets the logo alignment of the site. Declaration LogoAlignment LogoAlignment { get; set; } Property Value LogoAlignment MasterUrl Gets or sets the URL of the master page that is used for the website. Declaration string MasterUrl { get; set; } Property Value String MegaMenuEnabled Gets or sets a value that specifies whether the megamenu is enabled on the site. Declaration bool MegaMenuEnabled { get; set; } Property Value Boolean MembersCanShare Defines whether members can share content from the current web Declaration bool MembersCanShare { get; set; } Property Value Boolean NavAudienceTargetingEnabled Gets or sets a value that specifies whether the audience targeting is enabled on the navigation of the site. Declaration bool NavAudienceTargetingEnabled { get; set; } Property Value Boolean NextStepsFirstRunEnabled Gets or sets a value that specifies if the Next steps pane should open automatically as a first run experience when someone visits the site. You can only enable the experience for sites created on or after January 1, 2020 Declaration bool NextStepsFirstRunEnabled { get; set; } Property Value Boolean NoCrawl Defines whether the site has to be crawled or not Declaration bool NoCrawl { get; set; } Property Value Boolean NotificationsInOneDriveForBusinessEnabled Returns if true if the tenant allowed to send push notifications in OneDrive for Business. Declaration bool NotificationsInOneDriveForBusinessEnabled { get; } Property Value Boolean NotificationsInSharePointEnabled Returns if true if the tenant allowed to send push notifications in SharePoint. Declaration bool NotificationsInSharePointEnabled { get; } Property Value Boolean ObjectCacheEnabled Gets or sets a value that specifies whether the object cache is enabled on the site. Declaration bool ObjectCacheEnabled { get; set; } Property Value Boolean OverwriteTranslationsOnChange Defines whether to OverwriteTranslationsOnChange on change for the current web Declaration bool OverwriteTranslationsOnChange { get; set; } Property Value Boolean PreviewFeaturesEnabled Indicates whether the tenant administrator has chosen to disable the Preview Features. Default is true. Declaration bool PreviewFeaturesEnabled { get; } Property Value Boolean PrimaryColor Gets or sets the primary color of the site. Declaration string PrimaryColor { get; } Property Value String QuickLaunchEnabled Enables or disables the QuickLaunch for the site Declaration bool QuickLaunchEnabled { get; set; } Property Value Boolean RecycleBin Gets the recycle bin of the website. Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IRecycleBinItemCollection RecycleBin { get; } Property Value IRecycleBinItemCollection RecycleBinEnabled Gets or sets a value that specifies whether the Recycle Bin is enabled. Declaration bool RecycleBinEnabled { get; set; } Property Value Boolean RegionalSettings Regional settings configured for this web Declaration IRegionalSettings RegionalSettings { get; } Property Value IRegionalSettings RequestAccessEmail The email address to which any access request will be sent Declaration string RequestAccessEmail { get; set; } Property Value String RoleDefinitions Role Definitions defined in this web Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IRoleDefinitionCollection RoleDefinitions { get; } Property Value IRoleDefinitionCollection RootFolder Gets the root folder for the website. Declaration IFolder RootFolder { get; } Property Value IFolder SaveSiteAsTemplateEnabled Gets or sets a Boolean value that specifies whether the Web site can be saved as a site template. Declaration bool SaveSiteAsTemplateEnabled { get; set; } Property Value Boolean SearchBoxInNavBar Define if the suitebar search box should show or not Declaration SearchBoxInNavBar SearchBoxInNavBar { get; set; } Property Value SearchBoxInNavBar SearchBoxPlaceholderText Search placeholder text for search box in navbar - overrides default placeholder text if set, returns null if not set. Declaration string SearchBoxPlaceholderText { get; set; } Property Value String SearchScope Defines the SearchScope for the site Declaration SearchScope SearchScope { get; set; } Property Value SearchScope ServerRelativeUrl Gets the server relative URL of the current site. Declaration string ServerRelativeUrl { get; } Property Value String SiteGroups Gets the collection of all groups that belong to the site collection. Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration ISharePointGroupCollection SiteGroups { get; } Property Value ISharePointGroupCollection SiteLogoDescription Gets or sets the description of the Web site logo. Declaration string SiteLogoDescription { get; set; } Property Value String SiteLogoUrl Gets or sets the server-relative URL of the Web site logo. This can also contain an absolute URL to the logo. Declaration string SiteLogoUrl { get; set; } Property Value String SiteUserInfoList Gets the UserInfo list of the site collection that contains the website. Declaration IList SiteUserInfoList { get; } Property Value IList SiteUsers Gets the collection of all users that belong to the site collection. Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration ISharePointUserCollection SiteUsers { get; } Property Value ISharePointUserCollection SupportedUILanguageIds List of languages (expressed via their id) that this site supports Declaration List<int> SupportedUILanguageIds { get; } Property Value PnP.Core.Model.SharePoint.List < Int32 > SyndicationEnabled Gets or sets a value that specifies whether the RSS feeds are enabled on the site. Declaration bool SyndicationEnabled { get; set; } Property Value Boolean TenantAdminMembersCanShare Gets or sets a value that specifies how the tenant admin members can share. Declaration SharingState TenantAdminMembersCanShare { get; } Property Value SharingState ThemeData Get JSON serialized ThemeData for the current web. Declaration string ThemeData { get; } Property Value String ThirdPartyMdmEnabled Gets a value that indicates whether third party MDM (Mobile Device Management) is enabled on the site. Declaration bool ThirdPartyMdmEnabled { get; } Property Value Boolean Title The Title of the Site, optional attribute. Declaration string Title { get; set; } Property Value String TreeViewEnabled Gets or sets value that specifies whether the tree view is enabled on the site. Declaration bool TreeViewEnabled { get; set; } Property Value Boolean Url The URL of the Web object Declaration Uri Url { get; } Property Value Uri UseAccessRequestDefault Determines if we need to use the default access request If this value is True we send access requests to owner/owner's group If this value is False we send access requests to the configured AccessRequestEmail Declaration bool UseAccessRequestDefault { get; } Property Value Boolean UserCustomActions Gets a value that specifies the collection of user custom actions for the site. Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IUserCustomActionCollection UserCustomActions { get; } Property Value IUserCustomActionCollection Webs Collection of webs in this current web Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IWebCollection Webs { get; } Property Value IWebCollection WebTemplate Gets the name of the site definition or site template that was used to create the site. Declaration string WebTemplate { get; } Property Value String WebTemplateConfiguration Gets the web template configuration of the site. Declaration string WebTemplateConfiguration { get; } Property Value String WelcomePage Specifies a string that contains the site-relative URL to which users are redirected when web is browsed (typically the site's home page). Declaration string WelcomePage { get; } Property Value String Methods AsSyntexContentCenter() Returns the current web as ISyntexContentCenter if the web is a Syntex Content Center, null is returned otherwise Declaration ISyntexContentCenter AsSyntexContentCenter() Returns ISyntexContentCenter The current web as ISyntexContentCenter AsSyntexContentCenterAsync() Returns the current web as ISyntexContentCenter if the web is a Syntex Content Center, null is returned otherwise Declaration Task<ISyntexContentCenter> AsSyntexContentCenterAsync() Returns Task < ISyntexContentCenter > The current web as ISyntexContentCenter EnsureMultilingual(List<Int32>) Ensure a site can support multilingual (pages) for the passed along languages Declaration void EnsureMultilingual(List<int> requiredLanguageIds) Parameters PnP.Core.Model.SharePoint.List < Int32 > requiredLanguageIds List of langauges to support for multilingual on this site. See https://capacreative.co.uk/resources/reference-sharepoint-online-languages-ids/ for information on the language ids EnsureMultilingualAsync(List<Int32>) Ensure a site can support multilingual (pages) for the passed along languages Declaration Task EnsureMultilingualAsync(List<int> requiredLanguageIds) Parameters PnP.Core.Model.SharePoint.List < Int32 > requiredLanguageIds List of langauges to support for multilingual on this site. See https://capacreative.co.uk/resources/reference-sharepoint-online-languages-ids/ for information on the language ids Returns Task EnsurePageScheduling() Ensures that page publishing can work for this site. Page scheduling only works for the root web of a site collection Declaration void EnsurePageScheduling() EnsurePageSchedulingAsync() Ensures that page publishing can work for this site. Page scheduling only works for the root web of a site collection Declaration Task EnsurePageSchedulingAsync() Returns Task EnsureUser(String) Ensures the given users exists Declaration ISharePointUser EnsureUser(string userPrincipalName) Parameters String userPrincipalName UserPrincipalName value of the user to verify Returns ISharePointUser The ensured ISharePointUser EnsureUserAsync(String) Ensures the given users exists Declaration Task<ISharePointUser> EnsureUserAsync(string userPrincipalName) Parameters String userPrincipalName UserPrincipalName value of the user to verify Returns Task < ISharePointUser > The ensured ISharePointUser EnsureUserBatch(Batch, String) Ensures the given users exists Declaration ISharePointUser EnsureUserBatch(Batch batch, string userPrincipalName) Parameters Batch batch Batch to add this request to String userPrincipalName UserPrincipalName value of the user to verify Returns ISharePointUser The ensured ISharePointUser EnsureUserBatch(String) Ensures the given users exists Declaration ISharePointUser EnsureUserBatch(string userPrincipalName) Parameters String userPrincipalName UserPrincipalName value of the user to verify Returns ISharePointUser The ensured ISharePointUser EnsureUserBatchAsync(Batch, String) Ensures the given users exists Declaration Task<ISharePointUser> EnsureUserBatchAsync(Batch batch, string userPrincipalName) Parameters Batch batch Batch to add this request to String userPrincipalName UserPrincipalName value of the user to verify Returns Task < ISharePointUser > The ensured ISharePointUser EnsureUserBatchAsync(String) Ensures the given users exists Declaration Task<ISharePointUser> EnsureUserBatchAsync(string userPrincipalName) Parameters String userPrincipalName UserPrincipalName value of the user to verify Returns Task < ISharePointUser > The ensured ISharePointUser GetBrandingManager() Returns the branding manager which can be used to change the look of the web Declaration IBrandingManager GetBrandingManager() Returns IBrandingManager An IBrandingManager instance GetCurrentUser() Get's the current logged on user making the request to SharePoint Declaration ISharePointUser GetCurrentUser() Returns ISharePointUser The current ISharePointUser GetCurrentUserAsync() Get's the current logged on user making the request to SharePoint Declaration Task<ISharePointUser> GetCurrentUserAsync() Returns Task < ISharePointUser > The current ISharePointUser GetCurrentUserBatch() Get's the current logged on user making the request to SharePoint Declaration ISharePointUser GetCurrentUserBatch() Returns ISharePointUser The current ISharePointUser GetCurrentUserBatch(Batch) Get's the current logged on user making the request to SharePoint Declaration ISharePointUser GetCurrentUserBatch(Batch batch) Parameters Batch batch Batch to add this request to Returns ISharePointUser The current ISharePointUser GetCurrentUserBatchAsync() Get's the current logged on user making the request to SharePoint Declaration Task<ISharePointUser> GetCurrentUserBatchAsync() Returns Task < ISharePointUser > The current ISharePointUser GetCurrentUserBatchAsync(Batch) Get's the current logged on user making the request to SharePoint Declaration Task<ISharePointUser> GetCurrentUserBatchAsync(Batch batch) Parameters Batch batch Batch to add this request to Returns Task < ISharePointUser > The current ISharePointUser GetFileByServerRelativeUrl(String, Expression<Func<IFile, Object>>[]) Get a file in the current web from its server relative URL. Declaration IFile GetFileByServerRelativeUrl(string serverRelativeUrl, params Expression<Func<IFile, object>>[] expressions) Parameters String serverRelativeUrl The server relative URL of the file to get. Expression < Func < IFile , Object >>[] expressions Expressions needed to create the request Returns IFile The file to get GetFileByServerRelativeUrlAsync(String, Expression<Func<IFile, Object>>[]) Get a file in the current web from its server relative URL. Declaration Task<IFile> GetFileByServerRelativeUrlAsync(string serverRelativeUrl, params Expression<Func<IFile, object>>[] expressions) Parameters String serverRelativeUrl The server relative URL of the file to get. Expression < Func < IFile , Object >>[] expressions Expressions needed to create the request Returns Task < IFile > The file to get GetFileByServerRelativeUrlBatch(Batch, String, Expression<Func<IFile, Object>>[]) Get a file in the current web from its server relative URL via batch. Declaration IFile GetFileByServerRelativeUrlBatch(Batch batch, string serverRelativeUrl, params Expression<Func<IFile, object>>[] expressions) Parameters Batch batch Batch to add this request to String serverRelativeUrl The server relative URL of the file to get. Expression < Func < IFile , Object >>[] expressions Expressions needed to create the request Returns IFile The file to get GetFileByServerRelativeUrlBatch(String, Expression<Func<IFile, Object>>[]) Get a file in the current web from its server relative URL via batch. Declaration IFile GetFileByServerRelativeUrlBatch(string serverRelativeUrl, params Expression<Func<IFile, object>>[] expressions) Parameters String serverRelativeUrl The server relative URL of the file to get. Expression < Func < IFile , Object >>[] expressions Expressions needed to create the request Returns IFile The file to get GetFileByServerRelativeUrlBatchAsync(Batch, String, Expression<Func<IFile, Object>>[]) Get a file in the current web from its server relative URL via batch. Declaration Task<IFile> GetFileByServerRelativeUrlBatchAsync(Batch batch, string serverRelativeUrl, params Expression<Func<IFile, object>>[] expressions) Parameters Batch batch Batch to add this request to String serverRelativeUrl The server relative URL of the file to get. Expression < Func < IFile , Object >>[] expressions Expressions needed to create the request Returns Task < IFile > The file to get GetFileByServerRelativeUrlBatchAsync(String, Expression<Func<IFile, Object>>[]) Get a file in the current web from its server relative URL via batch. Declaration Task<IFile> GetFileByServerRelativeUrlBatchAsync(string serverRelativeUrl, params Expression<Func<IFile, object>>[] expressions) Parameters String serverRelativeUrl The server relative URL of the file to get. Expression < Func < IFile , Object >>[] expressions Expressions needed to create the request Returns Task < IFile > The file to get GetFileByServerRelativeUrlOrDefault(String, Expression<Func<IFile, Object>>[]) Get a file in the current web from its server relative URL, it not available null will be returned Declaration IFile GetFileByServerRelativeUrlOrDefault(string serverRelativeUrl, params Expression<Func<IFile, object>>[] expressions) Parameters String serverRelativeUrl The server relative URL of the file to get. Expression < Func < IFile , Object >>[] expressions Expressions needed to create the request Returns IFile The file to get or null if the file was not available GetFileByServerRelativeUrlOrDefaultAsync(String, Expression<Func<IFile, Object>>[]) Get a file in the current web from its server relative URL, it not available null will be returned Declaration Task<IFile> GetFileByServerRelativeUrlOrDefaultAsync(string serverRelativeUrl, params Expression<Func<IFile, object>>[] expressions) Parameters String serverRelativeUrl The server relative URL of the file to get. Expression < Func < IFile , Object >>[] expressions Expressions needed to create the request Returns Task < IFile > The file to get or null if the file was not available GetFolderById(Guid, Expression<Func<IFolder, Object>>[]) Get a folder in the current web from its id. Declaration IFolder GetFolderById(Guid folderId, params Expression<Func<IFolder, object>>[] expressions) Parameters Guid folderId The id of the folder to get. Expression < Func < IFolder , Object >>[] expressions Expressions needed to create the request Returns IFolder The folder to get GetFolderByIdAsync(Guid, Expression<Func<IFolder, Object>>[]) Get a folder in the current web from its id. Declaration Task<IFolder> GetFolderByIdAsync(Guid folderId, params Expression<Func<IFolder, object>>[] expressions) Parameters Guid folderId The id of the folder to get. Expression < Func < IFolder , Object >>[] expressions Expressions needed to create the request Returns Task < IFolder > The folder to get GetFolderByIdBatch(Guid, Expression<Func<IFolder, Object>>[]) Get a folder in the current web from its id via batch. Declaration IFolder GetFolderByIdBatch(Guid folderId, params Expression<Func<IFolder, object>>[] expressions) Parameters Guid folderId The id of the folder to get. Expression < Func < IFolder , Object >>[] expressions Expressions needed to create the request Returns IFolder The folder to get GetFolderByIdBatch(Batch, Guid, Expression<Func<IFolder, Object>>[]) Get a folder in the current web from its id via batch. Declaration IFolder GetFolderByIdBatch(Batch batch, Guid folderId, params Expression<Func<IFolder, object>>[] expressions) Parameters Batch batch Batch to add this request to Guid folderId The id of the folder to get. Expression < Func < IFolder , Object >>[] expressions Expressions needed to create the request Returns IFolder The folder to get GetFolderByIdBatchAsync(Guid, Expression<Func<IFolder, Object>>[]) Get a folder in the current web from its id via batch. Declaration Task<IFolder> GetFolderByIdBatchAsync(Guid folderId, params Expression<Func<IFolder, object>>[] expressions) Parameters Guid folderId The id of the folder to get. Expression < Func < IFolder , Object >>[] expressions Expressions needed to create the request Returns Task < IFolder > The folder to get GetFolderByIdBatchAsync(Batch, Guid, Expression<Func<IFolder, Object>>[]) Get a folder in the current web from its id via batch. Declaration Task<IFolder> GetFolderByIdBatchAsync(Batch batch, Guid folderId, params Expression<Func<IFolder, object>>[] expressions) Parameters Batch batch Batch to add this request to Guid folderId The id of the folder to get. Expression < Func < IFolder , Object >>[] expressions Expressions needed to create the request Returns Task < IFolder > The folder to get GetFolderByServerRelativeUrl(String, Expression<Func<IFolder, Object>>[]) Get a folder in the current web from its server relative URL. Declaration IFolder GetFolderByServerRelativeUrl(string serverRelativeUrl, params Expression<Func<IFolder, object>>[] expressions) Parameters String serverRelativeUrl The server relative URL of the folder to get. Expression < Func < IFolder , Object >>[] expressions Expressions needed to create the request Returns IFolder The folder to get GetFolderByServerRelativeUrlAsync(String, Expression<Func<IFolder, Object>>[]) Get a folder in the current web from its server relative URL. Declaration Task<IFolder> GetFolderByServerRelativeUrlAsync(string serverRelativeUrl, params Expression<Func<IFolder, object>>[] expressions) Parameters String serverRelativeUrl The server relative URL of the folder to get. Expression < Func < IFolder , Object >>[] expressions Expressions needed to create the request Returns Task < IFolder > The folder to get GetFolderByServerRelativeUrlBatch(Batch, String, Expression<Func<IFolder, Object>>[]) Get a folder in the current web from its server relative URL via batch. Declaration IFolder GetFolderByServerRelativeUrlBatch(Batch batch, string serverRelativeUrl, params Expression<Func<IFolder, object>>[] expressions) Parameters Batch batch Batch to add this request to String serverRelativeUrl The server relative URL of the folder to get. Expression < Func < IFolder , Object >>[] expressions Expressions needed to create the request Returns IFolder The folder to get GetFolderByServerRelativeUrlBatch(String, Expression<Func<IFolder, Object>>[]) Get a folder in the current web from its server relative URL via batch. Declaration IFolder GetFolderByServerRelativeUrlBatch(string serverRelativeUrl, params Expression<Func<IFolder, object>>[] expressions) Parameters String serverRelativeUrl The server relative URL of the folder to get. Expression < Func < IFolder , Object >>[] expressions Expressions needed to create the request Returns IFolder The folder to get GetFolderByServerRelativeUrlBatchAsync(Batch, String, Expression<Func<IFolder, Object>>[]) Get a folder in the current web from its server relative URL via batch. Declaration Task<IFolder> GetFolderByServerRelativeUrlBatchAsync(Batch batch, string serverRelativeUrl, params Expression<Func<IFolder, object>>[] expressions) Parameters Batch batch Batch to add this request to String serverRelativeUrl The server relative URL of the folder to get. Expression < Func < IFolder , Object >>[] expressions Expressions needed to create the request Returns Task < IFolder > The folder to get GetFolderByServerRelativeUrlBatchAsync(String, Expression<Func<IFolder, Object>>[]) Get a folder in the current web from its server relative URL via batch. Declaration Task<IFolder> GetFolderByServerRelativeUrlBatchAsync(string serverRelativeUrl, params Expression<Func<IFolder, object>>[] expressions) Parameters String serverRelativeUrl The server relative URL of the folder to get. Expression < Func < IFolder , Object >>[] expressions Expressions needed to create the request Returns Task < IFolder > The folder to get GetPages(String) Gets the modern pages of this site, optionally scoped down via a filter Declaration List<IPage> GetPages(string pageName = null) Parameters String pageName Page name to filter on, uses a \"starts with\" filter Returns PnP.Core.Model.SharePoint.List < IPage > One of more modern pages GetPagesAsync(String) Gets the modern pages of this site, optionally scoped down via a filter Declaration Task<List<IPage>> GetPagesAsync(string pageName = null) Parameters String pageName Page name to filter on, uses a \"starts with\" filter Returns Task < PnP.Core.Model.SharePoint.List < IPage >> One of more modern pages GetUserById(Int32) Get's a user by it's id in this site. The user needs to exist, use EnsureUser(String) if you want to create the user if it does not yet exist Declaration ISharePointUser GetUserById(int userId) Parameters Int32 userId Id of the user to get Returns ISharePointUser The found user as ISharePointPrincipal GetUserByIdAsync(Int32) Get's a user by it's id in this site. The user needs to exist, use EnsureUserAsync(String) if you want to create the user if it does not yet exist Declaration Task<ISharePointUser> GetUserByIdAsync(int userId) Parameters Int32 userId Id of the user to get Returns Task < ISharePointUser > The found user as ISharePointPrincipal GetUserByIdBatch(Batch, Int32) Get's a user by it's id in this site. The user needs to exist, use EnsureUserBatch(String) if you want to create the user if it does not yet exist Declaration ISharePointUser GetUserByIdBatch(Batch batch, int userId) Parameters Batch batch Batch to add this request to Int32 userId Id of the user to get Returns ISharePointUser The found user as ISharePointPrincipal GetUserByIdBatch(Int32) Get's a user by it's id in this site. The user needs to exist, use EnsureUserBatch(String) if you want to create the user if it does not yet exist Declaration ISharePointUser GetUserByIdBatch(int userId) Parameters Int32 userId Id of the user to get Returns ISharePointUser The found user as ISharePointPrincipal GetUserByIdBatchAsync(Batch, Int32) Get's a user by it's id in this site. The user needs to exist, use EnsureUserBatchAsync(String) if you want to create the user if it does not yet exist Declaration Task<ISharePointUser> GetUserByIdBatchAsync(Batch batch, int userId) Parameters Batch batch Batch to add this request to Int32 userId Id of the user to get Returns Task < ISharePointUser > The found user as ISharePointPrincipal GetUserByIdBatchAsync(Int32) Get's a user by it's id in this site. The user needs to exist, use EnsureUserBatchAsync(String) if you want to create the user if it does not yet exist Declaration Task<ISharePointUser> GetUserByIdBatchAsync(int userId) Parameters Int32 userId Id of the user to get Returns Task < ISharePointUser > The found user as ISharePointPrincipal HasCommunicationSiteFeatures() Does this web have the communication site features enabled? Declaration bool HasCommunicationSiteFeatures() Returns Boolean True if enabled, false otherwise HasCommunicationSiteFeaturesAsync() Does this web have the communication site features enabled? Declaration Task<bool> HasCommunicationSiteFeaturesAsync() Returns Task < Boolean > True if enabled, false otherwise IsNoScriptSite() Checks if this web is configured for NoScript Declaration bool IsNoScriptSite() Returns Boolean True if set to NoScript, false otherwise IsNoScriptSiteAsync() Checks if this web is configured for NoScript Declaration Task<bool> IsNoScriptSiteAsync() Returns Task < Boolean > True if set to NoScript, false otherwise IsSubSite() Checks if this web is a sub site Declaration bool IsSubSite() Returns Boolean True if the web is a sub site IsSubSiteAsync() Checks if this web is a sub site Declaration Task<bool> IsSubSiteAsync() Returns Task < Boolean > True if the web is a sub site IsSyntexContentCenter() Is this web a Syntex Content Center Declaration bool IsSyntexContentCenter() Returns Boolean True if this web is a Syntex Content Center, false otherwise IsSyntexContentCenterAsync() Is this web a Syntex Content Center Declaration Task<bool> IsSyntexContentCenterAsync() Returns Task < Boolean > True if this web is a Syntex Content Center, false otherwise IsSyntexEnabled() Is the tenant enabled for SharePoint Syntex Declaration bool IsSyntexEnabled() Returns Boolean True if SharePoint Syntex is enabled, false otherwise IsSyntexEnabledAsync() Is the tenant enabled for SharePoint Syntex Declaration Task<bool> IsSyntexEnabledAsync() Returns Task < Boolean > True if SharePoint Syntex is enabled, false otherwise IsSyntexEnabledForCurrentUser() Is SharePoint Syntex enabled for the current user Declaration bool IsSyntexEnabledForCurrentUser() Returns Boolean True if SharePoint Syntex is enabled for the current user, false otherwise IsSyntexEnabledForCurrentUserAsync() Is SharePoint Syntex enabled for the current user Declaration Task<bool> IsSyntexEnabledForCurrentUserAsync() Returns Task < Boolean > True if SharePoint Syntex is enabled for the current user, false otherwise NewPage(PageLayoutType) Creates a new modern page Declaration IPage NewPage(PageLayoutType pageLayoutType = default(PageLayoutType)) Parameters PageLayoutType pageLayoutType Optionally specify the page type, defaults to Article Returns IPage Created modern page NewPageAsync(PageLayoutType) Creates a new modern page Declaration Task<IPage> NewPageAsync(PageLayoutType pageLayoutType = default(PageLayoutType)) Parameters PageLayoutType pageLayoutType Optionally specify the page type, defaults to Article Returns Task < IPage > Created modern page SyncHubSiteThemeAsync() Sync the hub site theme from parent hub site Declaration Task SyncHubSiteThemeAsync() Returns Task Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.SharePoint.IWebCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IWebCollection.html",
    "title": "Interface IWebCollection | PnP Core SDK",
    "keywords": "Interface IWebCollection Public interface to define a collection of Web objects of SharePoint Online Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<IWeb>.LoadAsync(Expression<Func<IWeb, Object>>[]) IDataModelCollectionLoad<IWeb>.LoadBatchAsync(Batch, Expression<Func<IWeb, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IWebCollection : IQueryable<IWeb>, IAsyncEnumerable<IWeb>, IDataModelCollection<IWeb>, IEnumerable<IWeb>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<IWeb>, ISupportModules<IWebCollection> Methods Add(WebOptions) Adds a new web to the current web Declaration IWeb Add(WebOptions webOptions) Parameters WebOptions webOptions Options used when creating the new web Returns IWeb The newly created web AddAsync(WebOptions) Adds a new web to the current web Declaration Task<IWeb> AddAsync(WebOptions webOptions) Parameters WebOptions webOptions Options used when creating the new web Returns Task < IWeb > The newly created web AddBatch(WebOptions) Adds a new web to the current web Declaration IWeb AddBatch(WebOptions webOptions) Parameters WebOptions webOptions Options used when creating the new web Returns IWeb The newly created web AddBatch(Batch, WebOptions) Adds a new web to the current web Declaration IWeb AddBatch(Batch batch, WebOptions webOptions) Parameters Batch batch Batch to use WebOptions webOptions Options used when creating the new web Returns IWeb The newly created web AddBatchAsync(WebOptions) Adds a new web to the current web Declaration Task<IWeb> AddBatchAsync(WebOptions webOptions) Parameters WebOptions webOptions Options used when creating the new web Returns Task < IWeb > The newly created web AddBatchAsync(Batch, WebOptions) Adds a new web to the current web Declaration Task<IWeb> AddBatchAsync(Batch batch, WebOptions webOptions) Parameters Batch batch Batch to use WebOptions webOptions Options used when creating the new web Returns Task < IWeb > The newly created web Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.SharePoint.ListExperience.html": {
    "href": "api/PnP.Core.Model.SharePoint.ListExperience.html",
    "title": "Enum ListExperience | PnP Core SDK",
    "keywords": "Enum ListExperience List experience, determines how a list is presented (modern or classic) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum ListExperience : int Auto SPO will automatically define the right experience based on the settings of the current list, it is the default value. ClassicExperience The Classic experience will be forced for the current list. NewExperience The Modern experience will be forced for the current list."
  },
  "api/PnP.Core.Model.SharePoint.ListPageRenderType.html": {
    "href": "api/PnP.Core.Model.SharePoint.ListPageRenderType.html",
    "title": "Enum ListPageRenderType | PnP Core SDK",
    "keywords": "Enum ListPageRenderType List Page Render Type (e.g. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/mt796270(v=office.15) ) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum ListPageRenderType : int AnonymousUser CustomizedForm CustomizedPage DocLibNewForm DropOffLibrary HasBusinessDataField HasCustomActionWithCode HasGeolocationField HasMetadataNavFeature HasPublishingfield HasTaskOutcomeField InvalidControModeInForm InvalidFieldTypeInForm JSLinkCustomization ListSettingOff ListTemplateNotSupported ListTypeNoSupportForModernMode Modern MultipeWePart NoSPList SiteSettingOff SpecialViewType TenantSettingOff Undefined UnsupportedFieldTypeInForm WebSettingOff WikiPage XslLinkCustomization"
  },
  "api/PnP.Core.Model.SharePoint.ListReadingDirection.html": {
    "href": "api/PnP.Core.Model.SharePoint.ListReadingDirection.html",
    "title": "Enum ListReadingDirection | PnP Core SDK",
    "keywords": "Enum ListReadingDirection Reading direction of the list Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum ListReadingDirection : int LTR Left to Right None None RTL Right to Left"
  },
  "api/PnP.Core.Model.SharePoint.ListTemplateType.html": {
    "href": "api/PnP.Core.Model.SharePoint.ListTemplateType.html",
    "title": "Enum ListTemplateType | PnP Core SDK",
    "keywords": "Enum ListTemplateType Enumeration to define the list template types for SharePoint Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum ListTemplateType : int AccessApp AccessApp list type AccessRequest AccessRequest list type AdminTasks AdminTasks list type Agenda Agenda list type AlchemyApprovalWorkflow AlchemyApprovalWorkflow list type AlchemyMobileForm AlchemyMobileForm list type Announcements Announcements list type AppDataCatalog AppDataCatalog list type AppFilesCatalog AppFilesCatalog list type CallTrack CallTrack list type Categories Categories list type Circulation Circulation list type Comments Comments list type Contacts Contacts list type ContentCenterPrimeLibrary ContentCenterPrimeLibrary list type ContentCenterSampleLibrary ContentCenterSampleLibrary list type CustomGrid CustomGrid list type DataConnectionLibrary DataConnectionLibrary list type DataSources DataSources list type Decision Decision list type DesignCatalog DesignCatalog list type DeveloperSiteDraftApps DeveloperSiteDraftApps list type DiscussionBoard DiscussionBoard list type DocumentLibrary DocumentLibrary list type Events Events list type ExternalList ExternalList list type Facility Facility list type FormulasTable FormulasTable list type GanttTasks GanttTasks list type GenericList GenericList list type HashtagStore HashtagStore list type HealthReports HealthReports list type HealthRules HealthRules list type HelpLibrary HelpLibrary list type Holidays Holidays list type HomePageLibrary HomePageLibrary list type IMEDic IMEDic list type InvalidType InvalidType list type IssueTracking IssueTracking list type ItemReferenceCollection ItemReferenceCollection list type ItemReferenceReference ItemReferenceReference list type ItemReferenceReferenceCollection ItemReferenceReferenceCollection list type Links Links list type ListTemplateCatalog ListTemplateCatalog list type MaintenanceLogs MaintenanceLogs list type MasterPageCatalog MasterPageCatalog list type MeetingObjective MeetingObjective list type Meetings Meetings list type MeetingUser MeetingUser list type MySiteDocumentLibrary MySiteDocumentLibrary list type NoCodePublic NoCodePublic list type NoCodeWorkflows NoCodeWorkflows list type NoListTemplate NoListTemplate list type PictureLibrary PictureLibrary list type Posts Posts list type PromotedLinks PromotedLinks list type RecipesTable RecipesTable list type SharingLinks SharingLinks list type SolutionCatalog SolutionCatalog list type Survey Survey list type Tasks Tasks list type TasksWithTimelineAndHierarchy TasksWithTimelineAndHierarchy list type TextBox TextBox list type ThemeCatalog ThemeCatalog list type ThingsToBring ThingsToBring list type Timecard Timecard list type UserInformation UserInformation list type WebPageLibrary WebPageLibrary list type WebPartCatalog WebPartCatalog list type WebTemplateCatalog WebTemplateCatalog list type WebTemplateExtensionsList WebTemplateExtensionsList list type Whereabouts Whereabouts list type WorkflowHistory WorkflowHistory list type WorkflowProcess WorkflowProcess list type XMLForm XMLForm list type"
  },
  "api/PnP.Core.Model.SharePoint.LogoAlignment.html": {
    "href": "api/PnP.Core.Model.SharePoint.LogoAlignment.html",
    "title": "Enum LogoAlignment | PnP Core SDK",
    "keywords": "Enum LogoAlignment Logo alignment in extended header layout Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum LogoAlignment : int Left Left alignement ( Value = 0 ) Middle Middle alignment ( Value = 1 ) Right Right alignment ( Value = 2 )"
  },
  "api/PnP.Core.Model.SharePoint.MachineLearningPublicationViewOption.html": {
    "href": "api/PnP.Core.Model.SharePoint.MachineLearningPublicationViewOption.html",
    "title": "Enum MachineLearningPublicationViewOption | PnP Core SDK",
    "keywords": "Enum MachineLearningPublicationViewOption Options that define how adding a classifier will impact the library's views Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum MachineLearningPublicationViewOption : int NewView We will create a new view for your destination library. Your classifier will appear as a content type with a view, and your extractors will appear as site columns. NewViewAsDefault We will create a new view for your destination library. Your classifier will appear as a content type with a view, and your extractors will appear as site columns. This new view will also be the default view NoNewView No view is being added"
  },
  "api/PnP.Core.Model.SharePoint.MoveCopyOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.MoveCopyOptions.html",
    "title": "Class MoveCopyOptions | PnP Core SDK",
    "keywords": "Class MoveCopyOptions Options for move and copy operations Inheritance Object MoveCopyOptions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class MoveCopyOptions : object Properties KeepBoth Indicates whether both resources should be kept if a resource already exists at the specified destination. Declaration public bool KeepBoth { get; set; } Property Value Boolean ResetAuthorAndCreatedOnCopy Indicates whether to reset author and creation datetime on the copied resource. Declaration public bool ResetAuthorAndCreatedOnCopy { get; set; } Property Value Boolean ShouldBypassSharedLocks Indicates whether the shared locks on the source resource should be by passed. Declaration public bool ShouldBypassSharedLocks { get; set; } Property Value Boolean"
  },
  "api/PnP.Core.Model.SharePoint.MoveOperations.html": {
    "href": "api/PnP.Core.Model.SharePoint.MoveOperations.html",
    "title": "Enum MoveOperations | PnP Core SDK",
    "keywords": "Enum MoveOperations Specifies criteria for how to move files. This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values. (see https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/ee542328(v=office.15) ) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum MoveOperations : int AllowBrokenThickets Complete the move operation even if supporting files are separated from the file. The value = 8. BypassApprovePermission None No move operation specified. The value = 0. Overwrite Overwrite a file with the same name if it exists. The value = 1."
  },
  "api/PnP.Core.Model.SharePoint.PageHeaderLayoutType.html": {
    "href": "api/PnP.Core.Model.SharePoint.PageHeaderLayoutType.html",
    "title": "Enum PageHeaderLayoutType | PnP Core SDK",
    "keywords": "Enum PageHeaderLayoutType Layout of the page header Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum PageHeaderLayoutType : int ColorBlock Header based upon a title shown in a color block. Can still have a background image CutInShape Header based upon a title shown as an overlap. Can still have a background image FullWidthImage Layout using a full width image as header background with a title NoImage No image in the header background, only a title"
  },
  "api/PnP.Core.Model.SharePoint.PageHeaderTitleAlignment.html": {
    "href": "api/PnP.Core.Model.SharePoint.PageHeaderTitleAlignment.html",
    "title": "Enum PageHeaderTitleAlignment | PnP Core SDK",
    "keywords": "Enum PageHeaderTitleAlignment Alignment of the title in a page header Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum PageHeaderTitleAlignment : int Center Page title is centered Left Page title is left aligned"
  },
  "api/PnP.Core.Model.SharePoint.PageHeaderType.html": {
    "href": "api/PnP.Core.Model.SharePoint.PageHeaderType.html",
    "title": "Enum PageHeaderType | PnP Core SDK",
    "keywords": "Enum PageHeaderType Types of pages headers that a page can use Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum PageHeaderType : int Custom The page use a customized header (e.g. with image + offset) Default The page uses the default page header None The page does not have a header"
  },
  "api/PnP.Core.Model.SharePoint.PageImageAlignment.html": {
    "href": "api/PnP.Core.Model.SharePoint.PageImageAlignment.html",
    "title": "Enum PageImageAlignment | PnP Core SDK",
    "keywords": "Enum PageImageAlignment Image alignment options Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum PageImageAlignment : int Center Image is centered (default) Left Image is left aligned Right Image is right aligned"
  },
  "api/PnP.Core.Model.SharePoint.PageImageOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.PageImageOptions.html",
    "title": "Class PageImageOptions | PnP Core SDK",
    "keywords": "Class PageImageOptions Defines the options to configure an image Inheritance Object PageImageOptions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class PageImageOptions : object Properties Alignment Defines the alignment of the image Declaration public PageImageAlignment Alignment { get; set; } Property Value PageImageAlignment Height Defines the height of the image Declaration public int? Height { get; set; } Property Value Nullable < Int32 > Width Defines the width of the image Declaration public int? Width { get; set; } Property Value Nullable < Int32 >"
  },
  "api/PnP.Core.Model.SharePoint.PageLayoutType.html": {
    "href": "api/PnP.Core.Model.SharePoint.PageLayoutType.html",
    "title": "Enum PageLayoutType | PnP Core SDK",
    "keywords": "Enum PageLayoutType Types of pages that can be created Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum PageLayoutType : int Article Custom article page, used for user created pages HeaderlessSearchResults Page is a custom search result page Home Home page of modern team sites RepostPage Page is a repost / link page SingleWebPartAppPage Page is an app page, hosting a single SPFX web part full screen Spaces Page is a spaces page Topic Page is a topic page (Cortex)"
  },
  "api/PnP.Core.Model.SharePoint.PageTranslationOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.PageTranslationOptions.html",
    "title": "Class PageTranslationOptions | PnP Core SDK",
    "keywords": "Class PageTranslationOptions Class that defines the languages for which a translation must be generated Inheritance Object PageTranslationOptions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class PageTranslationOptions : object Properties LanguageCodes List of languages to generate a translation for Declaration public List<string> LanguageCodes { get; } Property Value PnP.Core.Model.SharePoint.List < String > Methods AddLanguage(Int32) Add a new language to the list of langauges to be generated. Note that this language must be a language configured for multi-lingual pages on the site Declaration public void AddLanguage(int languageId) Parameters Int32 languageId Id defining the language to add. See https://capacreative.co.uk/resources/reference-sharepoint-online-languages-ids/ for a list of possible languages"
  },
  "api/PnP.Core.Model.SharePoint.PermissionKind.html": {
    "href": "api/PnP.Core.Model.SharePoint.PermissionKind.html",
    "title": "Enum PermissionKind | PnP Core SDK",
    "keywords": "Enum PermissionKind Index to check if flag for a permission is set or not in SPBasePermissions enumeration Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum PermissionKind : int AddAndCustomizePages Add, change, or delete HTML pages or Web Part Pages, and edit the Site using a Windows SharePoint Services compatible editor. AddDelPrivateWebParts Add or remove personal Web Parts on a Web Part Page. AddListItems Add items to lists, documents to document libraries, and Web discussion comments. AnonymousSearchAccessList Make content of a list or document library retrieveable for anonymous users through SharePoint search. The list permissions in the site do not change. AnonymousSearchAccessWebLists Content of lists and document libraries in the Web site will be retrieveable for anonymous users through SharePoint search if the list or document library has AnonymousSearchAccessList set. ApplyStyleSheets Apply a style sheet (.css file) to the Site. ApplyThemeAndBorder Apply a theme or borders to the entire Site. ApproveItems Approve a minor version of a list item or document. BrowseDirectories Enumerate files and folders in a Site using Microsoft Office SharePoint Designer and WebDAV interfaces. BrowseUserInfo View information about users of the Site. CancelCheckout Discard or check in a document which is checked out to another user. CreateAlerts Create e-mail alerts. CreateGroups Create a group of users that can be used anywhere within the site collection. CreateSSCSite Create a Site using Self-Service Site Creation. DeleteListItems Delete items from a list, documents from a document library, and Web discussion comments in documents. DeleteVersions Delete past versions of a list item or document. EditListItems Edit items in lists, edit documents in document libraries, edit Web discussion comments in documents, and customize Web Part Pages in document libraries. EditMyUserInfo Allows a user to change his or her user information, such as adding a picture. EmptyMask Has no permissions on the Site. Not available through the user interface. EnumeratePermissions Enumerate permissions on Site, list, folder, document, or list item. FullMask Has all permissions on the Site. Not available through the user interface. ManageAlerts Manage alerts for all users of the Site. ManageLists Create and delete lists, add or remove columns in a list, and add or remove public views of a list. ManagePermissions Create and change permission levels on the Site and assign permissions to users and groups. ManagePersonalViews Create, change, and delete personal views of lists. ManageSubwebs Create subsites such as team sites, Meeting Workspace sites, and Document Workspace sites. ManageWeb Grant the ability to perform all administration tasks for the Site as well as manage content, activate, deactivate, or edit properties of Site scoped Features through the object model or through the user interface (UI). When granted on the root Site of a Site Collection, activate, deactivate, or edit properties of site collection scoped Features through the object model. To browse to the Site Collection Features page and activate or deactivate Site Collection scoped Features through the UI, you must be a Site Collection administrator. Open Allow users to open a Site, list, or folder to access items inside that container. OpenItems View the source of documents with server-side file handlers. UpdatePersonalWebParts Update Web Parts to display personalized information. UseClientIntegration Use features that launch client applications. Otherwise, users must work on documents locally and upload changes. UseRemoteAPIs Use SOAP, WebDAV, or Microsoft Office SharePoint Designer interfaces to access the Site. ViewFormPages View forms, views, and application pages, and enumerate lists. ViewListItems View items in lists, documents in document libraries, and Web discussion comments. ViewPages View pages in a Site. ViewUsageData View reports on Site usage. ViewVersions View past versions of a list item or document."
  },
  "api/PnP.Core.Model.SharePoint.PromotedState.html": {
    "href": "api/PnP.Core.Model.SharePoint.PromotedState.html",
    "title": "Enum PromotedState | PnP Core SDK",
    "keywords": "Enum PromotedState Page promotion state Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum PromotedState : int NotPromoted Regular page Promoted Page that is promoted as news article PromoteOnPublish Page that will be promoted as news article after publishing"
  },
  "api/PnP.Core.Model.SharePoint.PublishedStatus.html": {
    "href": "api/PnP.Core.Model.SharePoint.PublishedStatus.html",
    "title": "Enum PublishedStatus | PnP Core SDK",
    "keywords": "Enum PublishedStatus Indicates if a file was published, draft or checked out Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum PublishedStatus : int Checkout File is checked out Draft File is in draft Published File is published"
  },
  "api/PnP.Core.Model.SharePoint.RecycleBinItemState.html": {
    "href": "api/PnP.Core.Model.SharePoint.RecycleBinItemState.html",
    "title": "Enum RecycleBinItemState | PnP Core SDK",
    "keywords": "Enum RecycleBinItemState Specifies the Recycle Bin stage of the Recycle Bin item. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum RecycleBinItemState : int FirstStageRecycleBin Specifies that the Recycle Bin item is in the user Recycle Bin. The value = 1. None The stage of the Recycle Bin item is not specified. The value = 0. SecondStageRecycleBin Specifies that the Recycle Bin Item is in the site collection Recycle Bin. The value = 2."
  },
  "api/PnP.Core.Model.SharePoint.RecycleBinItemType.html": {
    "href": "api/PnP.Core.Model.SharePoint.RecycleBinItemType.html",
    "title": "Enum RecycleBinItemType | PnP Core SDK",
    "keywords": "Enum RecycleBinItemType Specifies the type of the Recycle Bin item. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum RecycleBinItemType : int App Specifies that that Recycle Bin item is an app. The value = 11 Attachment Specifies that the Recycle Bin item is an attachment. The value = 7. CascadeParent Specifies that the Recycle Bin item is a list item that is the parent of one or more related list items. The value = 9. File Specifies that the Recycle Bin item is a file. The value = 1. FileVersion Specifies that the Recycle Bin item is a historical version of a file. The value = 2. Folder Specifies that the Recycle Bin item is a folder. The value = 5. FolderWithLists Specifies that the Recycle Bin item is a folder that contains a list. The value = 6. List Specifies that the Recycle Bin item is a list. The value = 4. ListItem Specifies that the Recycle Bin item is a list item. The value = 3. ListItemVersion Specifies that the Recycle Bin item is a historical version of a list item. The value = 8. None The type of the Recycle Bin item is not specified. The value = 0. Web Specifies that the Recycle Bin item is a site (Web object). The value = 10."
  },
  "api/PnP.Core.Model.SharePoint.RelationshipDeleteBehaviorType.html": {
    "href": "api/PnP.Core.Model.SharePoint.RelationshipDeleteBehaviorType.html",
    "title": "Enum RelationshipDeleteBehaviorType | PnP Core SDK",
    "keywords": "Enum RelationshipDeleteBehaviorType Specifies the optional relationship behavior of a relationship lookup field. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee537368%28v%3doffice.15%29 Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum RelationshipDeleteBehaviorType : int Cascade Enumeration whose value specifies the cascade behavior. Value = 1. None Enumeration whose value specifies that no relationship behavior is applied. . Value = 0. Restrict Enumeration whose value specifies the restrict behavior. Value = 2."
  },
  "api/PnP.Core.Model.SharePoint.RenderListDataOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.RenderListDataOptions.html",
    "title": "Class RenderListDataOptions | PnP Core SDK",
    "keywords": "Class RenderListDataOptions Options to configure the rendering of list data via the RenderListDataAsStream method of IList See https://docs.microsoft.com/en-us/sharepoint/dev/sp-add-ins/working-with-lists-and-list-items-with-rest#renderlistdataasstream-body-parameter-properties Inheritance Object RenderListDataOptions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class RenderListDataOptions : object Properties AddRequiredFields Specifies if required fields should be returned or not Declaration public bool? AddRequiredFields { get; set; } Property Value Nullable < Boolean > AllowMultipleValueFilterForTaxonomyFields Specifies if multi value filtering is allowed for taxonomy fields or not Declaration public bool? AllowMultipleValueFilterForTaxonomyFields { get; set; } Property Value Nullable < Boolean > AudienceTarget Audience to use while processing this request Declaration public bool? AudienceTarget { get; set; } Property Value Nullable < Boolean > DatesInUtc Specifies if we return DateTime field in UTC or local time Declaration public bool? DatesInUtc { get; set; } Property Value Nullable < Boolean > DeferredRender Use a deferred render? Declaration public bool? DeferredRender { get; set; } Property Value Nullable < Boolean > ExpandGroups Specifies if the grouping should be expanded or not Declaration public bool? ExpandGroups { get; set; } Property Value Nullable < Boolean > FirstGroupOnly Specifies if only the first group should be returned or not (regardless of view schema) Declaration public bool? FirstGroupOnly { get; set; } Property Value Nullable < Boolean > FolderServerRelativeUrl Specifies the url to the folder from which to return items Declaration public string FolderServerRelativeUrl { get; set; } Property Value String ImageFieldsToTryRewriteToCdnUrls Comma-separated list of field names whose values should be rewritten to CDN URLs Declaration public string ImageFieldsToTryRewriteToCdnUrls { get; set; } Property Value String MergeDefaultView Merge with the default view? Declaration public bool? MergeDefaultView { get; set; } Property Value Nullable < Boolean > OriginalDate Return the original date? Declaration public bool? OriginalDate { get; set; } Property Value Nullable < Boolean > OverrideViewXml Specifies the override XML to be combined with the View CAML. Applies only to the Query/Where part of the View CAML Declaration public string OverrideViewXml { get; set; } Property Value String Paging Specifies the paging information Declaration public string Paging { get; set; } Property Value String RenderOptions Specifies the type of output to return Declaration public RenderListDataOptionsFlags? RenderOptions { get; set; } Property Value Nullable < RenderListDataOptionsFlags > ReplaceGroup Specifies if the grouping should be replaced or not to deal with GroupBy throttling Declaration public bool? ReplaceGroup { get; set; } Property Value Nullable < Boolean > ViewXml Specifies the CAML view XML Declaration public string ViewXml { get; set; } Property Value String Methods SetViewXmlFromFields(List<String>) Populates the needed ViewXml based upon the passed field names Declaration public void SetViewXmlFromFields(List<string> fieldInternalNames) Parameters PnP.Core.Model.SharePoint.List < String > fieldInternalNames List of fields specified via their internal name"
  },
  "api/PnP.Core.Model.SharePoint.RenderListDataOptionsFlags.html": {
    "href": "api/PnP.Core.Model.SharePoint.RenderListDataOptionsFlags.html",
    "title": "Enum RenderListDataOptionsFlags | PnP Core SDK",
    "keywords": "Enum RenderListDataOptionsFlags Options to setup on the RenderListDataOptions RenderOptions property See https://docs.microsoft.com/en-us/sharepoint/dev/sp-add-ins/working-with-lists-and-list-items-with-rest#sprenderlistdataoptions-options Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum RenderListDataOptionsFlags : int AddToOneDrive Return the files representing mount points in the list ClientFormSchema Returns the client form schema to add and edit items ClientSideComponentManifest Return client-side component manifest information associated with the list (reserved for future use) ContextInfo Return list context information CustomActions Do not return non-SPFX CustomAction DisableAutoHyperlink Prevents AutoHyperlink from being run on text fields in this query EnableMediaTAUrls Enables URLs pointing to Media TA service, such as .thumbnailUrl, .videoManifestUrl, .pdfConversionUrls FileSystemItemId The returned list will have a FileSystemItemId field on each item if possible. Must be combined with the ListData flag FolderContentTypeOrder Return the order of items in the new-item menu GridInitInfo Return information to initialize Grid for quick edit ListAvailableContentTypes Return all content-types available on the list ListContentType Returns information about list content types. Must be combined with the ContextInfo flag ListData Return list data (same as None) ListSchema Return list schema MenuView Return HTML for the list menu None Return default output PageContextInfo Returns page context info for the current list being rendered ParentInfo Returns parent folder information QuickLaunch Returns QuickLaunch navigation nodes SiteUrlAsMediaTASPItemHost Indicator if the vroom API of the SPItemUrl returned in MediaTAUrlGenerator should use site url as host SPFXCustomActions Return SPFX CustomAction Spotlight Returns Spotlight rendering information ViewMetadata Returns view XML and other information about the current view Visualization Returns Visualization rendering information"
  },
  "api/PnP.Core.Model.SharePoint.RoleType.html": {
    "href": "api/PnP.Core.Model.SharePoint.RoleType.html",
    "title": "Enum RoleType | PnP Core SDK",
    "keywords": "Enum RoleType RoleType enumeration used in Role Definitions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum RoleType : int Administrator Has Contributor rights, plus rights to cancel check-out, delete items, manage lists, add and customize pages, define and apply themes and borders, and link style sheets. Includes all rights in the Contributor role, plus the following: AddAndCustomizePages, ApplyStyleSheets, ApplyThemeAndBorder, CancelCheckout, ManageLists. WebDesigners can modify the structure of the site and create new lists or document libraries. Contributor Has Reader rights, plus rights to add items, edit items, delete items, manage list permissions, manage personal views, personalize Web Part Pages, and browse directories. Includes all rights in the Reader role, plus the following: AddDelPrivateWebParts, AddListItems, BrowseDirectories, CreatePersonalGroups, DeleteListItems, EditListItems, ManagePersonalViews, UpdatePersonalWebParts. Contributors cannot create new lists or document libraries, but they can add content to existing lists and document libraries. Editor Has all rights from other roles, plus rights to manage roles and view usage analysis data. Includes all rights in the WebDesigner role, plus the following: ManageListPermissions, ManageRoles, ManageSubwebs, ViewUsageData. The Administrator role cannot be customized or deleted, and must always contain at least one member. Members of the Administrator role always have access to, or can grant themselves access to, any item in the Web site. Guest Has limited rights to view pages and specific page elements. This role is used to give users access to a particular page, list, or item in a list, without granting rights to view the entire site. Users cannot be added explicitly to the Guest role; users who are given access to lists or document libraries by way of per-list permissions are added automatically to the Guest role. The Guest role cannot be customized or deleted. None Enumeration whose values specify that there are no rights on the Web site Reader Has rights to view items, personalize Web parts, use alerts, and create a top-level Web site using Self-Service Site Creation. A reader can only read a site; the reader cannot add content. When a reader creates a site using Self-Service Site Creation, the reader becomes the site owner and a member of the Administrator role for the new site. This does not affect the user's role membership for any other site. Rights included: CreateSSCSite, ViewListItems, ViewPages. RestrictedGuest RestrictedReader Reviewer Has Contributor rights, plus rights to manage lists. Includes all rights in the Contributor role. Editors can create new lists or document libraries. System WebDesigner Has Reader rights, plus rights to add items, edit items, delete items, manage list permissions, manage personal views, personalize Web Part Pages, and browse directories. Includes all rights in the Reader role, plus the following: AddDelPrivateWebParts, AddListItems, BrowseDirectories, CreatePersonalGroups, DeleteListItems, EditListItems, ManagePersonalViews, UpdatePersonalWebParts. Contributors cannot create new lists or document libraries, but they can add content to existing lists and document libraries."
  },
  "api/PnP.Core.Model.SharePoint.SearchBoxInNavBar.html": {
    "href": "api/PnP.Core.Model.SharePoint.SearchBoxInNavBar.html",
    "title": "Enum SearchBoxInNavBar | PnP Core SDK",
    "keywords": "Enum SearchBoxInNavBar Searchbox in navigation options Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum SearchBoxInNavBar : int AllPages Show on all pages Hidden Don't show the search box in the navigation bar Inherit Inherit site config ModernOnly Show on modern pages only"
  },
  "api/PnP.Core.Model.SharePoint.SearchScope.html": {
    "href": "api/PnP.Core.Model.SharePoint.SearchScope.html",
    "title": "Enum SearchScope | PnP Core SDK",
    "keywords": "Enum SearchScope Search scopes of the site Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum SearchScope : int DefaultScope Defines the DefaultScope for the SearchScope of the site Hub Defines the Hub for the SearchScope of the site Site Defines the Site for the SearchScope of the site Tenant Defines the Tenant for the SearchScope of the site"
  },
  "api/PnP.Core.Model.SharePoint.SharePointTheme.html": {
    "href": "api/PnP.Core.Model.SharePoint.SharePointTheme.html",
    "title": "Enum SharePointTheme | PnP Core SDK",
    "keywords": "Enum SharePointTheme Out of the Box SharePoint themes Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum SharePointTheme : int Blue Blue theme DarkBlue Blue theme with dark background DarkYellow Yellow theme with dark background Gray Gray theme Green Green theme Orange Orange theme Purple Purple theme Red Red theme Teal Teal theme"
  },
  "api/PnP.Core.Model.SharePoint.SharingState.html": {
    "href": "api/PnP.Core.Model.SharePoint.SharingState.html",
    "title": "Enum SharingState | PnP Core SDK",
    "keywords": "Enum SharingState Contains the values of the 3 allowed states for Sharing properties. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum SharingState : int Off State 3: Off. Implies that Tenant Admin is forcing Sharing Property State to behave as if they are set to False On State 2: On. Implies that Tenant Admin is forcing Sharing Property State to behave as if they are set to True Unspecified State 1: Unspecified. Implies that the Tenant Adnin is choosing to let Site and Web Owners specify the behavior for Sharing Property State"
  },
  "api/PnP.Core.Model.SharePoint.ShowInFiltersPaneStatus.html": {
    "href": "api/PnP.Core.Model.SharePoint.ShowInFiltersPaneStatus.html",
    "title": "Enum ShowInFiltersPaneStatus | PnP Core SDK",
    "keywords": "Enum ShowInFiltersPaneStatus Represents status to determine whether filters pane will show the field Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum ShowInFiltersPaneStatus : int Auto field will be auto determined to show/hide in filters pane based on the list data Pinned field will always show in Filters pane Removed field will never show in filters pane"
  },
  "api/PnP.Core.Model.SharePoint.SocialActorType.html": {
    "href": "api/PnP.Core.Model.SharePoint.SocialActorType.html",
    "title": "Enum SocialActorType | PnP Core SDK",
    "keywords": "Enum SocialActorType An actor type in following APIs Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum SocialActorType : int Document A document Site A site Tag A tag User A user"
  },
  "api/PnP.Core.Model.SharePoint.SocialActorTypes.html": {
    "href": "api/PnP.Core.Model.SharePoint.SocialActorTypes.html",
    "title": "Enum SocialActorTypes | PnP Core SDK",
    "keywords": "Enum SocialActorTypes Represents an actor type, which defines types of following content to return Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum SocialActorTypes : int All Includes all actor types Documents Documents actor types ExcludeContentWithoutFeeds The set excludes documents and sites that do not have feeds. IncludeGroupsSites The set includes group sites None Defines not actor types Sites Sites actor types Tags Tags actor types Users Users actor types WithinLast24Hours The set includes only items created within the last 24 hours"
  },
  "api/PnP.Core.Model.SharePoint.SocialFollowResult.html": {
    "href": "api/PnP.Core.Model.SharePoint.SocialFollowResult.html",
    "title": "Enum SocialFollowResult | PnP Core SDK",
    "keywords": "Enum SocialFollowResult The result of the follow operation Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum SocialFollowResult : int AlreadyFollowing The content is already followed InternalError Something went wrong when follwoing an item LimitReached The following limit is reached Ok The status is OK"
  },
  "api/PnP.Core.Model.SharePoint.SocialStatusCode.html": {
    "href": "api/PnP.Core.Model.SharePoint.SocialStatusCode.html",
    "title": "Enum SocialStatusCode | PnP Core SDK",
    "keywords": "Enum SocialStatusCode A status code of the following item, a property of ISocialActor Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum SocialStatusCode : int AccessDenied AttachmentError CacheReadError CacheUpdateError CannotCreatePersonalSite DatabaseError FailedToCreatePersonalSite FeatureDisabled InternalError InvalidOperation InvalidRequest ItemNotFound ItemNotModified LimitReached NotAuthorizedToCreatePersonalSite OK PartialData PersonalSiteNotFound StorageQuotaExceeded"
  },
  "api/PnP.Core.Model.SharePoint.SPEffectiveInformationRightsManagementSettingsSource.html": {
    "href": "api/PnP.Core.Model.SharePoint.SPEffectiveInformationRightsManagementSettingsSource.html",
    "title": "Enum SPEffectiveInformationRightsManagementSettingsSource | PnP Core SDK",
    "keywords": "Enum SPEffectiveInformationRightsManagementSettingsSource The source of settings for the effective IRM of a file. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/mt684131(v=office.15) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum SPEffectiveInformationRightsManagementSettingsSource : int File File List List None None Rule Rule"
  },
  "api/PnP.Core.Model.SharePoint.SyntexModelPublishOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.SyntexModelPublishOptions.html",
    "title": "Class SyntexModelPublishOptions | PnP Core SDK",
    "keywords": "Class SyntexModelPublishOptions Information about the library to publish a Syntex model to Inheritance Object SyntexModelUnPublishOptions SyntexModelPublishOptions Inherited Members SyntexModelUnPublishOptions.TargetLibraryServerRelativeUrl SyntexModelUnPublishOptions.TargetSiteUrl SyntexModelUnPublishOptions.TargetWebServerRelativeUrl Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class SyntexModelPublishOptions : SyntexModelUnPublishOptions Constructors SyntexModelPublishOptions() Default constructor Declaration public SyntexModelPublishOptions() Properties ViewOption The view option specified when registering the model with the library Declaration public MachineLearningPublicationViewOption ViewOption { get; set; } Property Value MachineLearningPublicationViewOption"
  },
  "api/PnP.Core.Model.SharePoint.SyntexModelUnPublishOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.SyntexModelUnPublishOptions.html",
    "title": "Class SyntexModelUnPublishOptions | PnP Core SDK",
    "keywords": "Class SyntexModelUnPublishOptions Information about the library to unpublish a Syntex model from Inheritance Object SyntexModelUnPublishOptions SyntexModelPublishOptions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class SyntexModelUnPublishOptions : object Constructors SyntexModelUnPublishOptions() Default constructor Declaration public SyntexModelUnPublishOptions() Properties TargetLibraryServerRelativeUrl Server relative url of the library registered with the model Declaration public string TargetLibraryServerRelativeUrl { get; set; } Property Value String TargetSiteUrl Fully qualified URL of the site collection holding the library registered with the model Declaration public string TargetSiteUrl { get; set; } Property Value String TargetWebServerRelativeUrl Server relative url of the web holding the library registered with the model Declaration public string TargetWebServerRelativeUrl { get; set; } Property Value String"
  },
  "api/PnP.Core.Model.SharePoint.TemplateFileType.html": {
    "href": "api/PnP.Core.Model.SharePoint.TemplateFileType.html",
    "title": "Enum TemplateFileType | PnP Core SDK",
    "keywords": "Enum TemplateFileType Types of pages that can be created using the AddTemplateFile method Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum TemplateFileType : int ClientSidePage Modern page FormPage Classic form page StandardPage Classic ASPX page WikiPage Classic wiki page"
  },
  "api/PnP.Core.Model.SharePoint.TermGroupScope.html": {
    "href": "api/PnP.Core.Model.SharePoint.TermGroupScope.html",
    "title": "Enum TermGroupScope | PnP Core SDK",
    "keywords": "Enum TermGroupScope Returns type of group. Possible values are 'global', 'system' and 'siteCollection'. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum TermGroupScope : int Global Global term group SiteCollection Site collection term group System System term group"
  },
  "api/PnP.Core.Model.SharePoint.TermRelationType.html": {
    "href": "api/PnP.Core.Model.SharePoint.TermRelationType.html",
    "title": "Enum TermRelationType | PnP Core SDK",
    "keywords": "Enum TermRelationType Type of relationship between two terms Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum TermRelationType : int Pin In a pin relationship, a term can be pinned under a different term in a different term set. In a pinned relationship, new children to the term can only be added in the term set in which the term was created. Any change in the hierarchy under the term is reflected across the sets in which the term was pinned. Reuse The reuse relationship is similar to the pinned relationship except that changes to the reused term can be made from any hierarchy in which the term is reused. Also, a change in hierarchy made to the reused term does not get reflected in the other term sets in which the term is reused."
  },
  "api/PnP.Core.Model.SharePoint.UrlFieldFormatType.html": {
    "href": "api/PnP.Core.Model.SharePoint.UrlFieldFormatType.html",
    "title": "Enum UrlFieldFormatType | PnP Core SDK",
    "keywords": "Enum UrlFieldFormatType Format of the Url field Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum UrlFieldFormatType : int Hyperlink Specify that the value must be displayed as a hyperlink. Image Specify that the value must be displayed as an image."
  },
  "api/PnP.Core.Model.SharePoint.UserCustomActionRegistrationType.html": {
    "href": "api/PnP.Core.Model.SharePoint.UserCustomActionRegistrationType.html",
    "title": "Enum UserCustomActionRegistrationType | PnP Core SDK",
    "keywords": "Enum UserCustomActionRegistrationType Specifies the type of object associated with the custom action. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum UserCustomActionRegistrationType : int ContentType Enumeration whose values specify that the custom action is associated with a content type. The value = 2. FileType Enumeration whose values specify that the custom action is associated with a file extension. The value = 4. List Enumeration whose values specify that the custom action is associated with a list. The value = 1. None Enumeration whose values specify that the object association is not specified. The value = 0. ProgId Enumeration whose values specify that the custom action is associated with a ProgID. The value = 3."
  },
  "api/PnP.Core.Model.SharePoint.UserCustomActionScope.html": {
    "href": "api/PnP.Core.Model.SharePoint.UserCustomActionScope.html",
    "title": "Enum UserCustomActionScope | PnP Core SDK",
    "keywords": "Enum UserCustomActionScope Specifies the scope of the custom action. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum UserCustomActionScope : int List Enumeration whose values specify that the scope of the custom action is limited to a list. The value = 4. Site Enumeration whose values specify that the scope of the custom action is limited to a site collection. The value = 2. Unknown Enumeration whose values specify that the scope of the custom action is not specified. The value = 0. Web Enumeration whose values specify that the scope of the custom action is limited to a site. The value = 3."
  },
  "api/PnP.Core.Model.SharePoint.VariantThemeType.html": {
    "href": "api/PnP.Core.Model.SharePoint.VariantThemeType.html",
    "title": "Enum VariantThemeType | PnP Core SDK",
    "keywords": "Enum VariantThemeType Footer Variant theme type (see https://github.com/microsoft/fluentui/tree/master/packages/variants ) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum VariantThemeType : int Neutral neutral variant - light shade of original background as background ( Value = 1 ) None no emphasis - appears as normal ( Value = 0 ) Soft soft variant - light tint of the primary color as background ( Value = 2 ) Strong strong variant - primary color as background, text uses original background color; white on brand blue by default ( Value = 3 )"
  },
  "api/PnP.Core.Model.SharePoint.ViewOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.ViewOptions.html",
    "title": "Class ViewOptions | PnP Core SDK",
    "keywords": "Class ViewOptions Options for creating a view Inheritance Object ViewOptions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class ViewOptions : object Properties AssociatedContentTypeId Gets or sets the associated content type id Declaration public string AssociatedContentTypeId { get; set; } Property Value String BaseViewId Gets or sets the base view Id Declaration public int? BaseViewId { get; set; } Property Value Nullable < Int32 > CalendarViewStyles Gets of sets the Calendar view styles Declaration public string CalendarViewStyles { get; set; } Property Value String Paged Gets or sets a value that specifies whether the new list view is a paged view. Declaration public bool Paged { get; set; } Property Value Boolean PersonalView Gets or sets a value that specifies whether the new list view is a personal view. If the value is false, the new list view is a public view. Declaration public bool PersonalView { get; set; } Property Value Boolean Query Gets or sets a value that specifies the query for the new list view. Declaration public string Query { get; set; } Property Value String RowLimit Gets or sets a value that specifies the maximum number of list items that the new list view displays on a visual page of the list view. Declaration public int? RowLimit { get; set; } Property Value Nullable < Int32 > SetAsDefaultView Gets or sets a value that specifies whether the new list view is the default list view. Declaration public bool SetAsDefaultView { get; set; } Property Value Boolean Title Gets or sets the value that specifies the display name of the new list view. Declaration public string Title { get; set; } Property Value String ViewData Gets or sets the view data Declaration public string ViewData { get; set; } Property Value String ViewFields Gets or sets the value that specifies the collection of field internal names for the list fields in the new list view. Declaration public string[] ViewFields { get; set; } Property Value String [] ViewType2 Gets or sets the View Type 2 information Declaration public ViewType2 ViewType2 { get; set; } Property Value ViewType2 ViewTypeKind Gets or sets a value that specifies the type of the new list view. Declaration public ViewTypeKind ViewTypeKind { get; set; } Property Value ViewTypeKind"
  },
  "api/PnP.Core.Model.SharePoint.ViewScope.html": {
    "href": "api/PnP.Core.Model.SharePoint.ViewScope.html",
    "title": "Enum ViewScope | PnP Core SDK",
    "keywords": "Enum ViewScope Specifies the recursive scope of a view for a document library. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum ViewScope : int Default Show only the files and subfolders of a specific folder. FilesOnly Show only the files of a specific folder. Recursive Show all files of all folders. RecursiveAll Show all files and all subfolders of all folders."
  },
  "api/PnP.Core.Model.SharePoint.ViewType.html": {
    "href": "api/PnP.Core.Model.SharePoint.ViewType.html",
    "title": "Enum ViewType | PnP Core SDK",
    "keywords": "Enum ViewType Value that specifies the type of the list view. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum ViewType : int CALENDAR Calendar list view type CHART Chart list view type GANTT Gantt chart list view type GRID Datasheet list view type HTML HTML Type None The type of the list view is not specified RECURRENCE List view type that displays recurring events"
  },
  "api/PnP.Core.Model.SharePoint.ViewType2.html": {
    "href": "api/PnP.Core.Model.SharePoint.ViewType2.html",
    "title": "Enum ViewType2 | PnP Core SDK",
    "keywords": "Enum ViewType2 Modern List View Types Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum ViewType2 : int COMPACTLIST Compact List Mode NONE Empty Value TILES Tiles Mode"
  },
  "api/PnP.Core.Model.SharePoint.ViewTypeKind.html": {
    "href": "api/PnP.Core.Model.SharePoint.ViewTypeKind.html",
    "title": "Enum ViewTypeKind | PnP Core SDK",
    "keywords": "Enum ViewTypeKind Value that specifies the type of the list view. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum ViewTypeKind : int Calendar Calendar list view type Chart Chart list view type Gantt Gantt chart list view type Grid Datasheet list view type Html HTML Type None The type of the list view is not specified Recurrence List view type that displays recurring events"
  },
  "api/PnP.Core.Model.SharePoint.WebOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.WebOptions.html",
    "title": "Class WebOptions | PnP Core SDK",
    "keywords": "Class WebOptions Options to set when creating a new web Inheritance Object WebOptions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class WebOptions : object Properties Description Description to set on the new web Declaration public string Description { get; set; } Property Value String InheritPermissions Inherit permissions from the current web, defaults to true. Declaration public bool InheritPermissions { get; set; } Property Value Boolean Language Language to set for the new web, defaults to 1033 Declaration public int Language { get; set; } Property Value Int32 Template The site template to use for the new web (e.g. STS#3) Declaration public string Template { get; set; } Property Value String Title Title of the new web (e.g. My Sub Web) Declaration public string Title { get; set; } Property Value String Url Relative url of the new web (e.g. mysubweb) Declaration public string Url { get; set; } Property Value String"
  },
  "api/PnP.Core.Model.Teams.ChatMessageAttachmentOptions.html": {
    "href": "api/PnP.Core.Model.Teams.ChatMessageAttachmentOptions.html",
    "title": "Class ChatMessageAttachmentOptions | PnP Core SDK",
    "keywords": "Class ChatMessageAttachmentOptions Chat message attachment Inheritance Object ChatMessageAttachmentOptions Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public class ChatMessageAttachmentOptions : object Properties Content The content of the attachment. If the attachment is a rich card, set the property to the rich card object. This property and contentUrl are mutually exclusive. Declaration public string Content { get; set; } Property Value String ContentType The media type of the content attachment. Declaration public string ContentType { get; set; } Property Value String ContentUrl URL for the content of the attachment. Supported protocols: http, https, file and data. Declaration public Uri ContentUrl { get; set; } Property Value Uri Id Unique id of the attachment. Declaration public string Id { get; set; } Property Value String Name Name of the attachment. Declaration public string Name { get; set; } Property Value String ThumbnailUrl URL to a thumbnail image that the channel can use if it supports using an alternative, smaller form of content or contentUrl. For example, if you set contentType to application/word and set contentUrl to the location of the Word document, you might include a thumbnail image that represents the document. The channel could display the thumbnail image instead of the document. When the user clicks the image, the channel would open the document. Declaration public Uri ThumbnailUrl { get; set; } Property Value Uri"
  },
  "api/PnP.Core.Model.Teams.ChatMessageContentType.html": {
    "href": "api/PnP.Core.Model.Teams.ChatMessageContentType.html",
    "title": "Enum ChatMessageContentType | PnP Core SDK",
    "keywords": "Enum ChatMessageContentType Chat message content types Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum ChatMessageContentType : int AdaptiveCard Chat message to use adaptive card Html Chat message uses html Text Chat message uses text only"
  },
  "api/PnP.Core.Model.Teams.ChatMessageHostedContentOptions.html": {
    "href": "api/PnP.Core.Model.Teams.ChatMessageHostedContentOptions.html",
    "title": "Class ChatMessageHostedContentOptions | PnP Core SDK",
    "keywords": "Class ChatMessageHostedContentOptions Chat Message Hosted Content options Inheritance Object ChatMessageHostedContentOptions Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public class ChatMessageHostedContentOptions : object Properties ContentBytes Hosted content bytes Declaration public string ContentBytes { get; set; } Property Value String ContentType Hosted content type Declaration public string ContentType { get; set; } Property Value String Id Hosted Content Id Declaration public string Id { get; set; } Property Value String"
  },
  "api/PnP.Core.Model.Teams.ChatMessageImportance.html": {
    "href": "api/PnP.Core.Model.Teams.ChatMessageImportance.html",
    "title": "Enum ChatMessageImportance | PnP Core SDK",
    "keywords": "Enum ChatMessageImportance The importance of the chat message. Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum ChatMessageImportance : int High High importance Normal Normal importance Urgent Urgent importance"
  },
  "api/PnP.Core.Model.Teams.ChatMessageOptions.html": {
    "href": "api/PnP.Core.Model.Teams.ChatMessageOptions.html",
    "title": "Class ChatMessageOptions | PnP Core SDK",
    "keywords": "Class ChatMessageOptions Chat Message options Inheritance Object ChatMessageOptions Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public class ChatMessageOptions : object Properties Attachments Attachment options Declaration public List<ChatMessageAttachmentOptions> Attachments { get; } Property Value List < ChatMessageAttachmentOptions > Content Message content Declaration public string Content { get; set; } Property Value String ContentType Type of the message content Declaration public ChatMessageContentType ContentType { get; set; } Property Value ChatMessageContentType HostedContents Message hosted content options Declaration public List<ChatMessageHostedContentOptions> HostedContents { get; } Property Value List < ChatMessageHostedContentOptions > Subject Message Subject Declaration public string Subject { get; set; } Property Value String"
  },
  "api/PnP.Core.Model.Teams.ChatMessageReactionType.html": {
    "href": "api/PnP.Core.Model.Teams.ChatMessageReactionType.html",
    "title": "Enum ChatMessageReactionType | PnP Core SDK",
    "keywords": "Enum ChatMessageReactionType Types of reactions to a chat message Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum ChatMessageReactionType : int Angry Angry reaction Heart Heart reaction Laugh Laugh reaction Like Like reaction Sad Sad reaction Surprised Surprised reaction"
  },
  "api/PnP.Core.Model.Teams.ChatMessageType.html": {
    "href": "api/PnP.Core.Model.Teams.ChatMessageType.html",
    "title": "Enum ChatMessageType | PnP Core SDK",
    "keywords": "Enum ChatMessageType Types of chat messages Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum ChatMessageType : int Message Message type SystemEventMessage SystemEventMessage type"
  },
  "api/PnP.Core.Model.Teams.html": {
    "href": "api/PnP.Core.Model.Teams.html",
    "title": "Namespace PnP.Core.Model.Teams | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Model.Teams Classes ChatMessageAttachmentOptions Chat message attachment ChatMessageHostedContentOptions Chat Message Hosted Content options ChatMessageOptions Chat Message options Interfaces ITeam Public interface to define a Team object of Microsoft Teams ITeamApp Defines a Microsoft Teams App installation ITeamAppCollection Public interface to define a collection of TeamApp objects of Microsoft Teams ITeamAsyncOperation Represents a Microsoft Teams async operation ITeamChannel Defines a Channel of Microsoft Teams ITeamChannelCollection Public interface to define a collection of Team Channels ITeamChannelTab Defines the tab in a Team channel ITeamChannelTabCollection Public interface to define a collection of Tabs for a Team Channel ITeamChannelTabConfiguration Public interface to define the configuration settings for a Team tab ITeamChatMessage Represents an individual chat message within a channel or chat. The chat message can be a root chat message or part of a reply thread that is defined by the replyToId property in the chat message. ITeamChatMessageAttachment Attachments connected to a chat message ITeamChatMessageAttachmentCollection Collection of chat messages ITeamChatMessageCollection A chat is a collection of chatMessages between one or more participants. Participants can be users or apps. ITeamChatMessageContent Public interface to define the content of a chat message ITeamChatMessageHostedContent Attachments connected to a chat message ITeamChatMessageHostedContentCollection Collection of chat messages ITeamChatMessageMention Represents a mention in a chatMessage entity. The mention can be to a user, team, bot, or channel. ITeamChatMessageMentionCollection Chat mentions ITeamChatMessageReaction Represents a reaction to a chatMessage entity. ITeamChatMessageReactionCollection Reactions on this chat ITeamClassSettings Public interface to define the settings for a classroom ITeamDiscoverySettings Public interface to define the discovery settings for a Team ITeamFunSettings Public interface to define the fun settings for a Team ITeamGuestSettings Public interface to define the guest settings for a Team ITeamIdentitySet Identity information about a Teams element ITeamMembersSettings Public interface to define the memebers settings for a Team ITeamMessagingSettings Public interface to define the messaging settings for a Team Enums ChatMessageContentType Chat message content types ChatMessageImportance The importance of the chat message. ChatMessageReactionType Types of reactions to a chat message ChatMessageType Types of chat messages TeamChannelMembershipType Defines the Membership Type for a Team Channel TeamGiphyContentRating Giphy content rating for giphies being used in a team TeamsAppDistributionMethod Distribution method of the team app TeamSpecialization Defines the Specialization options for a Team TeamVisibility Defines the Visibility for a Team"
  },
  "api/PnP.Core.Model.Teams.ITeam.html": {
    "href": "api/PnP.Core.Model.Teams.ITeam.html",
    "title": "Interface ITeam | PnP Core SDK",
    "keywords": "Interface ITeam Public interface to define a Team object of Microsoft Teams Inherited Members IDataModel<ITeam>.Requested IDataModel<ITeam>.HasValue(String) IDataModel<ITeam>.HasChanged(String) IDataModel<ITeam>.IsPropertyAvailable(Expression<Func<ITeam, Object>>) IDataModel<ITeam>.ArePropertiesAvailable(Expression<Func<ITeam, Object>>[]) IDataModel<ITeam>.EnsureProperties(Expression<Func<ITeam, Object>>[]) IDataModel<ITeam>.EnsurePropertiesAsync(Expression<Func<ITeam, Object>>[]) IDataModel<ITeam>.ExecuteRequestAsync(ApiRequest) IDataModel<ITeam>.ExecuteRequest(ApiRequest) IDataModel<ITeam>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITeam>.ExecuteRequestBatch(ApiRequest) IDataModel<ITeam>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITeam>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITeam>.GetBatchAsync(Batch, Expression<Func<ITeam, Object>>[]) IDataModelGet<ITeam>.GetAsync(Expression<Func<ITeam, Object>>[]) IDataModelLoad<ITeam>.LoadBatchAsync(Batch, Expression<Func<ITeam, Object>>[]) IDataModelLoad<ITeam>.LoadAsync(Expression<Func<ITeam, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeam : IDataModel<ITeam>, IDataModelParent, IDataModelWithContext, ISupportModules<ITeam>, IDataModelGet<ITeam>, IDataModelLoad<ITeam>, IDataModelUpdate Properties Channels Collection of channels in this current Team Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration ITeamChannelCollection Channels { get; } Property Value ITeamChannelCollection Classification The classification of the Team Declaration string Classification { get; set; } Property Value String ClassSettings Defines the Class Settings for the Team Declaration ITeamClassSettings ClassSettings { get; } Property Value ITeamClassSettings Description The description of the Team Declaration string Description { get; set; } Property Value String DiscoverySettings Defines the Members Settings for the Team Declaration ITeamDiscoverySettings DiscoverySettings { get; } Property Value ITeamDiscoverySettings DisplayName The display name of the Team Declaration string DisplayName { get; set; } Property Value String FunSettings Defines the Members Settings for the Team Declaration ITeamFunSettings FunSettings { get; } Property Value ITeamFunSettings GuestSettings Defines the Guest Settings for the Team Declaration ITeamGuestSettings GuestSettings { get; } Property Value ITeamGuestSettings Id The Unique ID of the Team/Group Declaration Guid Id { get; } Property Value Guid InstalledApps Collection of installed apps in this current Team Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration ITeamAppCollection InstalledApps { get; } Property Value ITeamAppCollection InternalId The Internal ID of the Team Declaration string InternalId { get; } Property Value String IsArchived Defines whether the Team is archived or not Declaration bool IsArchived { get; } Property Value Boolean Members Collection of Members of the current Team Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IGraphUserCollection Members { get; } Property Value IGraphUserCollection MemberSettings Defines the Members Settings for the Team Declaration ITeamMembersSettings MemberSettings { get; } Property Value ITeamMembersSettings MessagingSettings Defines the Members Settings for the Team Declaration ITeamMessagingSettings MessagingSettings { get; } Property Value ITeamMessagingSettings Owners Collection of Owners of the current Team Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration IGraphUserCollection Owners { get; } Property Value IGraphUserCollection PrimaryChannel Reference to the Primary Channel for the Team Declaration ITeamChannel PrimaryChannel { get; } Property Value ITeamChannel Specialization The specialization of the Team Declaration TeamSpecialization Specialization { get; set; } Property Value TeamSpecialization Visibility The specialization of the Team Declaration TeamVisibility Visibility { get; set; } Property Value TeamVisibility WebUrl The Web URL of the Team Declaration Uri WebUrl { get; } Property Value Uri Methods Archive() Archives the team Declaration ITeamAsyncOperation Archive() Returns ITeamAsyncOperation Archive(Boolean) Archives the team Declaration ITeamAsyncOperation Archive(bool setSPOSiteReadOnlyForMembers) Parameters Boolean setSPOSiteReadOnlyForMembers This optional parameter defines whether to set permissions for team members to read-only on the Sharepoint Online site associated with the team Returns ITeamAsyncOperation ArchiveAsync() Archives the team Declaration Task<ITeamAsyncOperation> ArchiveAsync() Returns Task < ITeamAsyncOperation > ArchiveAsync(Boolean) Archives the team Declaration Task<ITeamAsyncOperation> ArchiveAsync(bool setSPOSiteReadOnlyForMembers) Parameters Boolean setSPOSiteReadOnlyForMembers This optional parameter defines whether to set permissions for team members to read-only on the Sharepoint Online site associated with the team Returns Task < ITeamAsyncOperation > Unarchive() Unarchives the team Declaration ITeamAsyncOperation Unarchive() Returns ITeamAsyncOperation UnarchiveAsync() Unarchives the team Declaration Task<ITeamAsyncOperation> UnarchiveAsync() Returns Task < ITeamAsyncOperation > Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamApp.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamApp.html",
    "title": "Interface ITeamApp | PnP Core SDK",
    "keywords": "Interface ITeamApp Defines a Microsoft Teams App installation Inherited Members IDataModel<ITeamApp>.Requested IDataModel<ITeamApp>.HasValue(String) IDataModel<ITeamApp>.HasChanged(String) IDataModel<ITeamApp>.IsPropertyAvailable(Expression<Func<ITeamApp, Object>>) IDataModel<ITeamApp>.ArePropertiesAvailable(Expression<Func<ITeamApp, Object>>[]) IDataModel<ITeamApp>.EnsureProperties(Expression<Func<ITeamApp, Object>>[]) IDataModel<ITeamApp>.EnsurePropertiesAsync(Expression<Func<ITeamApp, Object>>[]) IDataModel<ITeamApp>.ExecuteRequestAsync(ApiRequest) IDataModel<ITeamApp>.ExecuteRequest(ApiRequest) IDataModel<ITeamApp>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITeamApp>.ExecuteRequestBatch(ApiRequest) IDataModel<ITeamApp>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITeamApp>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITeamApp>.GetBatchAsync(Batch, Expression<Func<ITeamApp, Object>>[]) IDataModelGet<ITeamApp>.GetAsync(Expression<Func<ITeamApp, Object>>[]) IDataModelLoad<ITeamApp>.LoadBatchAsync(Batch, Expression<Func<ITeamApp, Object>>[]) IDataModelLoad<ITeamApp>.LoadAsync(Expression<Func<ITeamApp, Object>>[]) Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamApp : IDataModel<ITeamApp>, IDataModelParent, IDataModelWithContext, ISupportModules<ITeamApp>, IDataModelGet<ITeamApp>, IDataModelLoad<ITeamApp> Properties DisplayName The Display Name of the Team App Declaration string DisplayName { get; set; } Property Value String DistributionMethod The method of distribution for the Team App Declaration TeamsAppDistributionMethod DistributionMethod { get; set; } Property Value TeamsAppDistributionMethod ExternalId The external ID of the Team App as defined by the developer Declaration string ExternalId { get; set; } Property Value String Id The unique Id of the Team App in the current app catalog Declaration string Id { get; } Property Value String Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamAppCollection.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamAppCollection.html",
    "title": "Interface ITeamAppCollection | PnP Core SDK",
    "keywords": "Interface ITeamAppCollection Public interface to define a collection of TeamApp objects of Microsoft Teams Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<ITeamApp>.LoadAsync(Expression<Func<ITeamApp, Object>>[]) IDataModelCollectionLoad<ITeamApp>.LoadBatchAsync(Batch, Expression<Func<ITeamApp, Object>>[]) Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamAppCollection : IQueryable<ITeamApp>, IAsyncEnumerable<ITeamApp>, IDataModelCollection<ITeamApp>, IEnumerable<ITeamApp>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<ITeamApp>, ISupportModules<ITeamAppCollection> Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.Teams.ITeamAsyncOperation.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamAsyncOperation.html",
    "title": "Interface ITeamAsyncOperation | PnP Core SDK",
    "keywords": "Interface ITeamAsyncOperation Represents a Microsoft Teams async operation Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamAsyncOperation Properties Location Location to call to request the current status of an async operation Declaration string Location { get; } Property Value String Methods WaitForCompletion() Waits for the async operation to finish Declaration void WaitForCompletion() WaitForCompletionAsync() Waits for the async operation to finish Declaration Task WaitForCompletionAsync() Returns Task"
  },
  "api/PnP.Core.Model.Teams.ITeamChannel.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChannel.html",
    "title": "Interface ITeamChannel | PnP Core SDK",
    "keywords": "Interface ITeamChannel Defines a Channel of Microsoft Teams Inherited Members IDataModel<ITeamChannel>.Requested IDataModel<ITeamChannel>.HasValue(String) IDataModel<ITeamChannel>.HasChanged(String) IDataModel<ITeamChannel>.IsPropertyAvailable(Expression<Func<ITeamChannel, Object>>) IDataModel<ITeamChannel>.ArePropertiesAvailable(Expression<Func<ITeamChannel, Object>>[]) IDataModel<ITeamChannel>.EnsureProperties(Expression<Func<ITeamChannel, Object>>[]) IDataModel<ITeamChannel>.EnsurePropertiesAsync(Expression<Func<ITeamChannel, Object>>[]) IDataModel<ITeamChannel>.ExecuteRequestAsync(ApiRequest) IDataModel<ITeamChannel>.ExecuteRequest(ApiRequest) IDataModel<ITeamChannel>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITeamChannel>.ExecuteRequestBatch(ApiRequest) IDataModel<ITeamChannel>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITeamChannel>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITeamChannel>.GetBatchAsync(Batch, Expression<Func<ITeamChannel, Object>>[]) IDataModelGet<ITeamChannel>.GetAsync(Expression<Func<ITeamChannel, Object>>[]) IDataModelLoad<ITeamChannel>.LoadBatchAsync(Batch, Expression<Func<ITeamChannel, Object>>[]) IDataModelLoad<ITeamChannel>.LoadAsync(Expression<Func<ITeamChannel, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChannel : IDataModel<ITeamChannel>, IDataModelParent, IDataModelWithContext, ISupportModules<ITeamChannel>, IDataModelGet<ITeamChannel>, IDataModelLoad<ITeamChannel>, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties Description The description of the Team Channel Declaration string Description { get; set; } Property Value String DisplayName The display name of the Team Channel Declaration string DisplayName { get; set; } Property Value String Email The email address of the Team Channel Declaration string Email { get; } Property Value String Id The Unique ID of the Team Channel Declaration string Id { get; } Property Value String IsFavoriteByDefault Defines whether the Team Channel is favorite by default in the Team Declaration bool IsFavoriteByDefault { get; set; } Property Value Boolean MembershipType Defines the Membership type for the Team Channel Declaration TeamChannelMembershipType MembershipType { get; set; } Property Value TeamChannelMembershipType Messages Messages in this Team Channel Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration ITeamChatMessageCollection Messages { get; } Property Value ITeamChatMessageCollection Tabs Tabs in this Channel Implements . See Requesting model collections and IQueryable performance considerations to learn more. Declaration ITeamChannelTabCollection Tabs { get; } Property Value ITeamChannelTabCollection WebUrl The Web URL of the Team Channel Declaration Uri WebUrl { get; } Property Value Uri Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChannelCollection.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChannelCollection.html",
    "title": "Interface ITeamChannelCollection | PnP Core SDK",
    "keywords": "Interface ITeamChannelCollection Public interface to define a collection of Team Channels Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<ITeamChannel>.LoadAsync(Expression<Func<ITeamChannel, Object>>[]) IDataModelCollectionLoad<ITeamChannel>.LoadBatchAsync(Batch, Expression<Func<ITeamChannel, Object>>[]) IDataModelCollectionDeleteByStringId.DeleteById(String) IDataModelCollectionDeleteByStringId.DeleteByIdAsync(String) IDataModelCollectionDeleteByStringId.DeleteByIdBatch(String) IDataModelCollectionDeleteByStringId.DeleteByIdBatchAsync(String) IDataModelCollectionDeleteByStringId.DeleteByIdBatch(Batch, String) IDataModelCollectionDeleteByStringId.DeleteByIdBatchAsync(Batch, String) Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChannelCollection : IQueryable<ITeamChannel>, IAsyncEnumerable<ITeamChannel>, IDataModelCollection<ITeamChannel>, IEnumerable<ITeamChannel>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<ITeamChannel>, IDataModelCollectionDeleteByStringId, ISupportModules<ITeamChannelCollection> Methods Add(String, String) Adds a new channel Declaration ITeamChannel Add(string name, string description = null) Parameters String name Display name of the channel String description Optional description of the channel Returns ITeamChannel Newly added channel AddAsync(String, String) Adds a new channel Declaration Task<ITeamChannel> AddAsync(string name, string description = null) Parameters String name Display name of the channel String description Optional description of the channel Returns Task < ITeamChannel > Newly added channel AddBatch(Batch, String, String) Adds a new channel Declaration ITeamChannel AddBatch(Batch batch, string name, string description = null) Parameters Batch batch Batch to use String name Display name of the channel String description Optional description of the channel Returns ITeamChannel Newly added channel AddBatch(String, String) Adds a new channel Declaration ITeamChannel AddBatch(string name, string description = null) Parameters String name Display name of the channel String description Optional description of the channel Returns ITeamChannel Newly added channel AddBatchAsync(Batch, String, String) Adds a new channel Declaration Task<ITeamChannel> AddBatchAsync(Batch batch, string name, string description = null) Parameters Batch batch Batch to use String name Display name of the channel String description Optional description of the channel Returns Task < ITeamChannel > Newly added channel AddBatchAsync(String, String) Adds a new channel Declaration Task<ITeamChannel> AddBatchAsync(string name, string description = null) Parameters String name Display name of the channel String description Optional description of the channel Returns Task < ITeamChannel > Newly added channel GetByDisplayName(String, Expression<Func<ITeamChannel, Object>>[]) Method to select a channel by displayName Declaration ITeamChannel GetByDisplayName(string displayName, params Expression<Func<ITeamChannel, object>>[] selectors) Parameters String displayName The displayName to search for Expression < Func < ITeamChannel , Object >>[] selectors The expressions declaring the fields to select Returns ITeamChannel The resulting channel instance, if any GetByDisplayNameAsync(String, Expression<Func<ITeamChannel, Object>>[]) Method to select a channel by displayName asynchronously Declaration Task<ITeamChannel> GetByDisplayNameAsync(string displayName, params Expression<Func<ITeamChannel, object>>[] selectors) Parameters String displayName The displayName to search for Expression < Func < ITeamChannel , Object >>[] selectors The expressions declaring the fields to select Returns Task < ITeamChannel > The resulting channel instance, if any Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChannelTab.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChannelTab.html",
    "title": "Interface ITeamChannelTab | PnP Core SDK",
    "keywords": "Interface ITeamChannelTab Defines the tab in a Team channel Inherited Members IDataModel<ITeamChannelTab>.Requested IDataModel<ITeamChannelTab>.HasValue(String) IDataModel<ITeamChannelTab>.HasChanged(String) IDataModel<ITeamChannelTab>.IsPropertyAvailable(Expression<Func<ITeamChannelTab, Object>>) IDataModel<ITeamChannelTab>.ArePropertiesAvailable(Expression<Func<ITeamChannelTab, Object>>[]) IDataModel<ITeamChannelTab>.EnsureProperties(Expression<Func<ITeamChannelTab, Object>>[]) IDataModel<ITeamChannelTab>.EnsurePropertiesAsync(Expression<Func<ITeamChannelTab, Object>>[]) IDataModel<ITeamChannelTab>.ExecuteRequestAsync(ApiRequest) IDataModel<ITeamChannelTab>.ExecuteRequest(ApiRequest) IDataModel<ITeamChannelTab>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITeamChannelTab>.ExecuteRequestBatch(ApiRequest) IDataModel<ITeamChannelTab>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITeamChannelTab>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITeamChannelTab>.GetBatchAsync(Batch, Expression<Func<ITeamChannelTab, Object>>[]) IDataModelGet<ITeamChannelTab>.GetAsync(Expression<Func<ITeamChannelTab, Object>>[]) IDataModelLoad<ITeamChannelTab>.LoadBatchAsync(Batch, Expression<Func<ITeamChannelTab, Object>>[]) IDataModelLoad<ITeamChannelTab>.LoadAsync(Expression<Func<ITeamChannelTab, Object>>[]) IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChannelTab : IDataModel<ITeamChannelTab>, IDataModelParent, IDataModelWithContext, ISupportModules<ITeamChannelTab>, IDataModelGet<ITeamChannelTab>, IDataModelLoad<ITeamChannelTab>, IDataModelDelete, IDataModelUpdate, IQueryableDataModel Properties Configuration Container for custom settings applied to a tab. The tab is considered configured only once this property is set. Declaration ITeamChannelTabConfiguration Configuration { get; } Property Value ITeamChannelTabConfiguration DisplayName Name of the tab. Declaration string DisplayName { get; set; } Property Value String Id Identifier that uniquely identifies a specific instance of a channel tab. Read only. Declaration Guid Id { get; } Property Value Guid SortOrderIndex Index of the order used for sorting tabs. Declaration string SortOrderIndex { get; set; } Property Value String TeamsApp The application that is linked to the tab. This cannot be changed after tab creation. Declaration ITeamApp TeamsApp { get; } Property Value ITeamApp WebUrl Deep link url of the tab instance. Read only. Declaration Uri WebUrl { get; } Property Value Uri Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChannelTabCollection.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChannelTabCollection.html",
    "title": "Interface ITeamChannelTabCollection | PnP Core SDK",
    "keywords": "Interface ITeamChannelTabCollection Public interface to define a collection of Tabs for a Team Channel Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<ITeamChannelTab>.LoadAsync(Expression<Func<ITeamChannelTab, Object>>[]) IDataModelCollectionLoad<ITeamChannelTab>.LoadBatchAsync(Batch, Expression<Func<ITeamChannelTab, Object>>[]) IDataModelCollectionDeleteByGuidId.DeleteById(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdAsync(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatch(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatchAsync(Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatch(Batch, Guid) IDataModelCollectionDeleteByGuidId.DeleteByIdBatchAsync(Batch, Guid) Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChannelTabCollection : IQueryable<ITeamChannelTab>, IAsyncEnumerable<ITeamChannelTab>, IDataModelCollection<ITeamChannelTab>, IEnumerable<ITeamChannelTab>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<ITeamChannelTab>, IDataModelCollectionDeleteByGuidId, ISupportModules<ITeamChannelTabCollection> Methods AddDocumentLibraryTab(String, Uri) Adds a new DocumentLibrary channel tab Declaration ITeamChannelTab AddDocumentLibraryTab(string name, Uri documentLibraryUri) Parameters String name Display name of the DocumentLibrary channel tab Uri documentLibraryUri Uri to the document library that needs to be added as tab Returns ITeamChannelTab Newly added DocumentLibrary channel tab AddDocumentLibraryTabAsync(String, Uri) Adds a new DocumentLibrary channel tab Declaration Task<ITeamChannelTab> AddDocumentLibraryTabAsync(string name, Uri documentLibraryUri) Parameters String name Display name of the DocumentLibrary channel tab Uri documentLibraryUri Uri to the document library that needs to be added as tab Returns Task < ITeamChannelTab > Newly added DocumentLibrary channel tab AddDocumentLibraryTabBatch(Batch, String, Uri) Adds a new DocumentLibrary channel tab Declaration ITeamChannelTab AddDocumentLibraryTabBatch(Batch batch, string name, Uri documentLibraryUri) Parameters Batch batch Batch to use String name Display name of the DocumentLibrary channel tab Uri documentLibraryUri Uri to the document library that needs to be added as tab Returns ITeamChannelTab Newly added DocumentLibrary channel tab AddDocumentLibraryTabBatch(String, Uri) Adds a new DocumentLibrary channel tab Declaration ITeamChannelTab AddDocumentLibraryTabBatch(string name, Uri documentLibraryUri) Parameters String name Display name of the DocumentLibrary channel tab Uri documentLibraryUri Uri to the document library that needs to be added as tab Returns ITeamChannelTab Newly added DocumentLibrary channel tab AddDocumentLibraryTabBatchAsync(Batch, String, Uri) Adds a new DocumentLibrary channel tab Declaration Task<ITeamChannelTab> AddDocumentLibraryTabBatchAsync(Batch batch, string name, Uri documentLibraryUri) Parameters Batch batch Batch to use String name Display name of the DocumentLibrary channel tab Uri documentLibraryUri Uri to the document library that needs to be added as tab Returns Task < ITeamChannelTab > Newly added DocumentLibrary channel tab AddDocumentLibraryTabBatchAsync(String, Uri) Adds a new DocumentLibrary channel tab Declaration Task<ITeamChannelTab> AddDocumentLibraryTabBatchAsync(string name, Uri documentLibraryUri) Parameters String name Display name of the DocumentLibrary channel tab Uri documentLibraryUri Uri to the document library that needs to be added as tab Returns Task < ITeamChannelTab > Newly added DocumentLibrary channel tab AddWikiTab(String) Adds a new wiki channel tab Declaration ITeamChannelTab AddWikiTab(string name) Parameters String name Display name of the wiki channel tab Returns ITeamChannelTab Newly added wiki channel tab AddWikiTabAsync(String) Adds a new wiki channel tab Declaration Task<ITeamChannelTab> AddWikiTabAsync(string name) Parameters String name Display name of the wiki channel tab Returns Task < ITeamChannelTab > Newly added wiki channel tab AddWikiTabBatch(Batch, String) Adds a new wiki channel tab Declaration ITeamChannelTab AddWikiTabBatch(Batch batch, string name) Parameters Batch batch Batch to use String name Display name of the wiki channel tab Returns ITeamChannelTab Newly added wiki channel tab AddWikiTabBatch(String) Adds a new wiki channel tab Declaration ITeamChannelTab AddWikiTabBatch(string name) Parameters String name Display name of the wiki channel tab Returns ITeamChannelTab Newly added wiki channel tab AddWikiTabBatchAsync(Batch, String) Adds a new wiki channel tab Declaration Task<ITeamChannelTab> AddWikiTabBatchAsync(Batch batch, string name) Parameters Batch batch Batch to use String name Display name of the wiki channel tab Returns Task < ITeamChannelTab > Newly added wiki channel tab AddWikiTabBatchAsync(String) Adds a new wiki channel tab Declaration Task<ITeamChannelTab> AddWikiTabBatchAsync(string name) Parameters String name Display name of the wiki channel tab Returns Task < ITeamChannelTab > Newly added wiki channel tab Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChannelTabConfiguration.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChannelTabConfiguration.html",
    "title": "Interface ITeamChannelTabConfiguration | PnP Core SDK",
    "keywords": "Interface ITeamChannelTabConfiguration Public interface to define the configuration settings for a Team tab Inherited Members IDataModel<ITeamChannelTabConfiguration>.Requested IDataModel<ITeamChannelTabConfiguration>.HasValue(String) IDataModel<ITeamChannelTabConfiguration>.HasChanged(String) IDataModel<ITeamChannelTabConfiguration>.IsPropertyAvailable(Expression<Func<ITeamChannelTabConfiguration, Object>>) IDataModel<ITeamChannelTabConfiguration>.ArePropertiesAvailable(Expression<Func<ITeamChannelTabConfiguration, Object>>[]) IDataModel<ITeamChannelTabConfiguration>.EnsureProperties(Expression<Func<ITeamChannelTabConfiguration, Object>>[]) IDataModel<ITeamChannelTabConfiguration>.EnsurePropertiesAsync(Expression<Func<ITeamChannelTabConfiguration, Object>>[]) IDataModel<ITeamChannelTabConfiguration>.ExecuteRequestAsync(ApiRequest) IDataModel<ITeamChannelTabConfiguration>.ExecuteRequest(ApiRequest) IDataModel<ITeamChannelTabConfiguration>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITeamChannelTabConfiguration>.ExecuteRequestBatch(ApiRequest) IDataModel<ITeamChannelTabConfiguration>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITeamChannelTabConfiguration>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChannelTabConfiguration : IDataModel<ITeamChannelTabConfiguration>, IDataModelParent, IDataModelWithContext, ISupportModules<ITeamChannelTabConfiguration> Properties ContentUrl Url used for rendering tab contents in Teams. Required. Declaration string ContentUrl { get; set; } Property Value String EntityId Identifier for the entity hosted by the tab provider. Declaration string EntityId { get; } Property Value String HasContent Is there content in this tab. Declaration bool HasContent { get; set; } Property Value Boolean RemoveUrl Url called by Teams client when a Tab is removed using the Teams Client. Declaration string RemoveUrl { get; set; } Property Value String WebsiteUrl Url for showing tab contents outside of Teams. Declaration string WebsiteUrl { get; set; } Property Value String WikiDefaultTab Is this the default wiki tab. Declaration bool WikiDefaultTab { get; set; } Property Value Boolean WikiTabId Wiki tab id. Declaration int WikiTabId { get; set; } Property Value Int32 Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessage.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessage.html",
    "title": "Interface ITeamChatMessage | PnP Core SDK",
    "keywords": "Interface ITeamChatMessage Represents an individual chat message within a channel or chat. The chat message can be a root chat message or part of a reply thread that is defined by the replyToId property in the chat message. Inherited Members IDataModel<ITeamChatMessage>.Requested IDataModel<ITeamChatMessage>.HasValue(String) IDataModel<ITeamChatMessage>.HasChanged(String) IDataModel<ITeamChatMessage>.IsPropertyAvailable(Expression<Func<ITeamChatMessage, Object>>) IDataModel<ITeamChatMessage>.ArePropertiesAvailable(Expression<Func<ITeamChatMessage, Object>>[]) IDataModel<ITeamChatMessage>.EnsureProperties(Expression<Func<ITeamChatMessage, Object>>[]) IDataModel<ITeamChatMessage>.EnsurePropertiesAsync(Expression<Func<ITeamChatMessage, Object>>[]) IDataModel<ITeamChatMessage>.ExecuteRequestAsync(ApiRequest) IDataModel<ITeamChatMessage>.ExecuteRequest(ApiRequest) IDataModel<ITeamChatMessage>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITeamChatMessage>.ExecuteRequestBatch(ApiRequest) IDataModel<ITeamChatMessage>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITeamChatMessage>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITeamChatMessage>.GetBatchAsync(Batch, Expression<Func<ITeamChatMessage, Object>>[]) IDataModelGet<ITeamChatMessage>.GetAsync(Expression<Func<ITeamChatMessage, Object>>[]) IDataModelLoad<ITeamChatMessage>.LoadBatchAsync(Batch, Expression<Func<ITeamChatMessage, Object>>[]) IDataModelLoad<ITeamChatMessage>.LoadAsync(Expression<Func<ITeamChatMessage, Object>>[]) Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessage : IDataModel<ITeamChatMessage>, IDataModelParent, IDataModelWithContext, ISupportModules<ITeamChatMessage>, IDataModelGet<ITeamChatMessage>, IDataModelLoad<ITeamChatMessage>, IQueryableDataModel Properties Attachments Attached files Declaration ITeamChatMessageAttachmentCollection Attachments { get; } Property Value ITeamChatMessageAttachmentCollection Body Plaintext/HTML representation of the content of the chat message. Representation is specified by the contentType inside the body. The content is always in HTML if the chat message contains a chatMessageMention. Declaration ITeamChatMessageContent Body { get; } Property Value ITeamChatMessageContent CreatedDateTime Read only. Timestamp of when the chat message was created. Declaration DateTimeOffset CreatedDateTime { get; } Property Value DateTimeOffset DeletedDateTime Read only. Timestamp at which the chat message was deleted, or null if not deleted. Declaration DateTimeOffset DeletedDateTime { get; } Property Value DateTimeOffset Etag Read-only. Version number of the chat message. Declaration string Etag { get; } Property Value String From Read only. Details of the sender of the chat message. Declaration ITeamIdentitySet From { get; } Property Value ITeamIdentitySet HostedContents Hosted Content tiles Declaration ITeamChatMessageHostedContentCollection HostedContents { get; } Property Value ITeamChatMessageHostedContentCollection Id Read-only. Unique Id of the message. Declaration string Id { get; } Property Value String Importance The importance of the chat message. Declaration ChatMessageImportance Importance { get; set; } Property Value ChatMessageImportance LastModifiedDateTime Read only. Timestamp of when the chat message is created or edited, including when a reply is made (if it's a root chat message in a channel) or a reaction is added or removed. Declaration DateTimeOffset LastModifiedDateTime { get; } Property Value DateTimeOffset Locale Locale of the team chat message Declaration string Locale { get; set; } Property Value String Mentions List of entities mentioned in the chat message. Currently supports user, bot, team, channel. Declaration ITeamChatMessageMentionCollection Mentions { get; } Property Value ITeamChatMessageMentionCollection MessageType The type of chat message. The possible values are: message. Declaration ChatMessageType MessageType { get; set; } Property Value ChatMessageType Reactions Reactions for this chat message (for example, Like). Declaration ITeamChatMessageReactionCollection Reactions { get; } Property Value ITeamChatMessageReactionCollection ReplyToId Read-only. Id of the parent chat message or root chat message of the thread. (Only applies to chat messages in channels not chats) Declaration string ReplyToId { get; } Property Value String Subject The subject of the chat message, in plaintext. Declaration string Subject { get; set; } Property Value String Summary Summary text of the chat message that could be used for push notifications and summary views or fall back views. Only applies to channel chat messages, not chat messages in a chat. Declaration string Summary { get; set; } Property Value String WebUrl The Web URL of the team chat message Declaration Uri WebUrl { get; } Property Value Uri Extension Methods DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatchAsync<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.GetBatch<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelGetExtensions.Get<TModel>(IDataModelGet<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatchAsync<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.LoadBatch<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.Load<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelLoadExtensions.QueryProperties<TModel>(IDataModelLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessageAttachment.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessageAttachment.html",
    "title": "Interface ITeamChatMessageAttachment | PnP Core SDK",
    "keywords": "Interface ITeamChatMessageAttachment Attachments connected to a chat message Inherited Members IDataModel<ITeamChatMessageAttachment>.Requested IDataModel<ITeamChatMessageAttachment>.HasValue(String) IDataModel<ITeamChatMessageAttachment>.HasChanged(String) IDataModel<ITeamChatMessageAttachment>.IsPropertyAvailable(Expression<Func<ITeamChatMessageAttachment, Object>>) IDataModel<ITeamChatMessageAttachment>.ArePropertiesAvailable(Expression<Func<ITeamChatMessageAttachment, Object>>[]) IDataModel<ITeamChatMessageAttachment>.EnsureProperties(Expression<Func<ITeamChatMessageAttachment, Object>>[]) IDataModel<ITeamChatMessageAttachment>.EnsurePropertiesAsync(Expression<Func<ITeamChatMessageAttachment, Object>>[]) IDataModel<ITeamChatMessageAttachment>.ExecuteRequestAsync(ApiRequest) IDataModel<ITeamChatMessageAttachment>.ExecuteRequest(ApiRequest) IDataModel<ITeamChatMessageAttachment>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITeamChatMessageAttachment>.ExecuteRequestBatch(ApiRequest) IDataModel<ITeamChatMessageAttachment>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITeamChatMessageAttachment>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessageAttachment : IDataModel<ITeamChatMessageAttachment>, IDataModelParent, IDataModelWithContext, ISupportModules<ITeamChatMessageAttachment> Properties Content The content of the attachment. If the attachment is a rich card, set the property to the rich card object. This property and contentUrl are mutually exclusive. Declaration string Content { get; set; } Property Value String ContentType The media type of the content attachment. Declaration string ContentType { get; set; } Property Value String ContentUrl URL for the content of the attachment. Supported protocols: http, https, file and data. Declaration Uri ContentUrl { get; set; } Property Value Uri Id Read-only. Unique id of the attachment. Declaration string Id { get; } Property Value String Name Name of the attachment. Declaration string Name { get; set; } Property Value String ThumbnailUrl URL to a thumbnail image that the channel can use if it supports using an alternative, smaller form of content or contentUrl. For example, if you set contentType to application/word and set contentUrl to the location of the Word document, you might include a thumbnail image that represents the document. The channel could display the thumbnail image instead of the document. When the user clicks the image, the channel would open the document. Declaration Uri ThumbnailUrl { get; set; } Property Value Uri Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessageAttachmentCollection.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessageAttachmentCollection.html",
    "title": "Interface ITeamChatMessageAttachmentCollection | PnP Core SDK",
    "keywords": "Interface ITeamChatMessageAttachmentCollection Collection of chat messages Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<ITeamChatMessageAttachment>.LoadAsync(Expression<Func<ITeamChatMessageAttachment, Object>>[]) IDataModelCollectionLoad<ITeamChatMessageAttachment>.LoadBatchAsync(Batch, Expression<Func<ITeamChatMessageAttachment, Object>>[]) Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessageAttachmentCollection : IDataModelCollection<ITeamChatMessageAttachment>, IEnumerable<ITeamChatMessageAttachment>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<ITeamChatMessageAttachment>, ISupportQuery<ITeamChatMessageAttachment>, ISupportModules<ITeamChatMessageAttachmentCollection> Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.QueryProperties<TResult>(ISupportQuery<TResult>, Expression<Func<TResult, Object>>[]) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessageCollection.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessageCollection.html",
    "title": "Interface ITeamChatMessageCollection | PnP Core SDK",
    "keywords": "Interface ITeamChatMessageCollection A chat is a collection of chatMessages between one or more participants. Participants can be users or apps. Inherited Members IDataModelCollectionLoad<ITeamChatMessage>.LoadAsync(Expression<Func<ITeamChatMessage, Object>>[]) IDataModelCollectionLoad<ITeamChatMessage>.LoadBatchAsync(Batch, Expression<Func<ITeamChatMessage, Object>>[]) IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessageCollection : IQueryable<ITeamChatMessage>, IAsyncEnumerable<ITeamChatMessage>, IDataModelCollectionLoad<ITeamChatMessage>, IDataModelCollection<ITeamChatMessage>, IEnumerable<ITeamChatMessage>, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportModules<ITeamChatMessageCollection> Methods Add(ChatMessageOptions) Adds a new channel chat Declaration ITeamChatMessage Add(ChatMessageOptions options) Parameters ChatMessageOptions options Full chat message options Returns ITeamChatMessage Add(String, ChatMessageContentType, String) Adds a new channel chat Declaration ITeamChatMessage Add(string content, ChatMessageContentType contentType = ChatMessageContentType.Text, string subject = null) Parameters String content Content of the message ChatMessageContentType contentType Message content type e.g. Text, Html String subject Message Subject Returns ITeamChatMessage AddAsync(ChatMessageOptions) Adds a new channel chat message Declaration Task<ITeamChatMessage> AddAsync(ChatMessageOptions options) Parameters ChatMessageOptions options Full chat message options Returns Task < ITeamChatMessage > AddAsync(String, ChatMessageContentType, String) Adds a new channel chat message Declaration Task<ITeamChatMessage> AddAsync(string content, ChatMessageContentType contentType = ChatMessageContentType.Text, string subject = null) Parameters String content Content of the message ChatMessageContentType contentType Message content type e.g. Text, Html String subject Message Subject Returns Task < ITeamChatMessage > AddBatch(ChatMessageOptions) Adds a new channel chat message Declaration ITeamChatMessage AddBatch(ChatMessageOptions options) Parameters ChatMessageOptions options Full chat message options Returns ITeamChatMessage Newly added channel chat message AddBatch(Batch, ChatMessageOptions) Adds a new channel chat message Declaration ITeamChatMessage AddBatch(Batch batch, ChatMessageOptions options) Parameters Batch batch Batch the message is associated with ChatMessageOptions options Full chat message options Returns ITeamChatMessage Newly added channel chat message AddBatch(Batch, String, ChatMessageContentType, String) Adds a new channel chat message Declaration ITeamChatMessage AddBatch(Batch batch, string content, ChatMessageContentType contentType = ChatMessageContentType.Text, string subject = null) Parameters Batch batch Batch the message is associated with String content Content of the message ChatMessageContentType contentType Message content type e.g. Text, Html String subject Message Subject Returns ITeamChatMessage Newly added channel chat message AddBatch(String, ChatMessageContentType, String) Adds a new channel chat message Declaration ITeamChatMessage AddBatch(string content, ChatMessageContentType contentType = ChatMessageContentType.Text, string subject = null) Parameters String content Content of the message ChatMessageContentType contentType Message content type e.g. Text, Html String subject Message Subject Returns ITeamChatMessage Newly added channel chat message AddBatchAsync(ChatMessageOptions) Adds a new channel chat message Declaration Task<ITeamChatMessage> AddBatchAsync(ChatMessageOptions options) Parameters ChatMessageOptions options Full chat message options Returns Task < ITeamChatMessage > Newly added channel chat message AddBatchAsync(Batch, ChatMessageOptions) Adds a new channel chat message Declaration Task<ITeamChatMessage> AddBatchAsync(Batch batch, ChatMessageOptions options) Parameters Batch batch Batch the message is associated with ChatMessageOptions options Full chat message options Returns Task < ITeamChatMessage > Newly added channel chat message AddBatchAsync(Batch, String, ChatMessageContentType, String) Adds a new channel chat message Declaration Task<ITeamChatMessage> AddBatchAsync(Batch batch, string content, ChatMessageContentType contentType = ChatMessageContentType.Text, string subject = null) Parameters Batch batch Batch the message is associated with String content Content of the message ChatMessageContentType contentType Message content type e.g. Text, Html String subject Message Subject Returns Task < ITeamChatMessage > Newly added channel chat message AddBatchAsync(String, ChatMessageContentType, String) Adds a new channel chat message Declaration Task<ITeamChatMessage> AddBatchAsync(string content, ChatMessageContentType contentType = ChatMessageContentType.Text, string subject = null) Parameters String content Content of the message ChatMessageContentType contentType Message content type e.g. Text, Html String subject Message Subject Returns Task < ITeamChatMessage > Newly added channel chat message Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessageContent.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessageContent.html",
    "title": "Interface ITeamChatMessageContent | PnP Core SDK",
    "keywords": "Interface ITeamChatMessageContent Public interface to define the content of a chat message Inherited Members IDataModel<ITeamChatMessageContent>.Requested IDataModel<ITeamChatMessageContent>.HasValue(String) IDataModel<ITeamChatMessageContent>.HasChanged(String) IDataModel<ITeamChatMessageContent>.IsPropertyAvailable(Expression<Func<ITeamChatMessageContent, Object>>) IDataModel<ITeamChatMessageContent>.ArePropertiesAvailable(Expression<Func<ITeamChatMessageContent, Object>>[]) IDataModel<ITeamChatMessageContent>.EnsureProperties(Expression<Func<ITeamChatMessageContent, Object>>[]) IDataModel<ITeamChatMessageContent>.EnsurePropertiesAsync(Expression<Func<ITeamChatMessageContent, Object>>[]) IDataModel<ITeamChatMessageContent>.ExecuteRequestAsync(ApiRequest) IDataModel<ITeamChatMessageContent>.ExecuteRequest(ApiRequest) IDataModel<ITeamChatMessageContent>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITeamChatMessageContent>.ExecuteRequestBatch(ApiRequest) IDataModel<ITeamChatMessageContent>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITeamChatMessageContent>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessageContent : IDataModel<ITeamChatMessageContent>, IDataModelParent, IDataModelWithContext, ISupportModules<ITeamChatMessageContent> Properties Content The content of the item. Declaration string Content { get; set; } Property Value String ContentType The type of the content. Possible values are text and html. Declaration ChatMessageContentType ContentType { get; set; } Property Value ChatMessageContentType Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessageHostedContent.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessageHostedContent.html",
    "title": "Interface ITeamChatMessageHostedContent | PnP Core SDK",
    "keywords": "Interface ITeamChatMessageHostedContent Attachments connected to a chat message Inherited Members IDataModel<ITeamChatMessageHostedContent>.Requested IDataModel<ITeamChatMessageHostedContent>.HasValue(String) IDataModel<ITeamChatMessageHostedContent>.HasChanged(String) IDataModel<ITeamChatMessageHostedContent>.IsPropertyAvailable(Expression<Func<ITeamChatMessageHostedContent, Object>>) IDataModel<ITeamChatMessageHostedContent>.ArePropertiesAvailable(Expression<Func<ITeamChatMessageHostedContent, Object>>[]) IDataModel<ITeamChatMessageHostedContent>.EnsureProperties(Expression<Func<ITeamChatMessageHostedContent, Object>>[]) IDataModel<ITeamChatMessageHostedContent>.EnsurePropertiesAsync(Expression<Func<ITeamChatMessageHostedContent, Object>>[]) IDataModel<ITeamChatMessageHostedContent>.ExecuteRequestAsync(ApiRequest) IDataModel<ITeamChatMessageHostedContent>.ExecuteRequest(ApiRequest) IDataModel<ITeamChatMessageHostedContent>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITeamChatMessageHostedContent>.ExecuteRequestBatch(ApiRequest) IDataModel<ITeamChatMessageHostedContent>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITeamChatMessageHostedContent>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessageHostedContent : IDataModel<ITeamChatMessageHostedContent>, IDataModelParent, IDataModelWithContext, ISupportModules<ITeamChatMessageHostedContent> Properties ContentBytes The content bytes of the attachment as Base64-encoded bytes Declaration string ContentBytes { get; set; } Property Value String ContentType The media type of the content attachment. Declaration string ContentType { get; set; } Property Value String Id Read-only. Unique id of the attachment. Declaration string Id { get; } Property Value String Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessageHostedContentCollection.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessageHostedContentCollection.html",
    "title": "Interface ITeamChatMessageHostedContentCollection | PnP Core SDK",
    "keywords": "Interface ITeamChatMessageHostedContentCollection Collection of chat messages Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<ITeamChatMessageHostedContent>.LoadAsync(Expression<Func<ITeamChatMessageHostedContent, Object>>[]) IDataModelCollectionLoad<ITeamChatMessageHostedContent>.LoadBatchAsync(Batch, Expression<Func<ITeamChatMessageHostedContent, Object>>[]) Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessageHostedContentCollection : IDataModelCollection<ITeamChatMessageHostedContent>, IEnumerable<ITeamChatMessageHostedContent>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<ITeamChatMessageHostedContent>, ISupportQuery<ITeamChatMessageHostedContent>, ISupportModules<ITeamChatMessageHostedContentCollection> Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.QueryProperties<TResult>(ISupportQuery<TResult>, Expression<Func<TResult, Object>>[]) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessageMention.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessageMention.html",
    "title": "Interface ITeamChatMessageMention | PnP Core SDK",
    "keywords": "Interface ITeamChatMessageMention Represents a mention in a chatMessage entity. The mention can be to a user, team, bot, or channel. Inherited Members IDataModel<ITeamChatMessageMention>.Requested IDataModel<ITeamChatMessageMention>.HasValue(String) IDataModel<ITeamChatMessageMention>.HasChanged(String) IDataModel<ITeamChatMessageMention>.IsPropertyAvailable(Expression<Func<ITeamChatMessageMention, Object>>) IDataModel<ITeamChatMessageMention>.ArePropertiesAvailable(Expression<Func<ITeamChatMessageMention, Object>>[]) IDataModel<ITeamChatMessageMention>.EnsureProperties(Expression<Func<ITeamChatMessageMention, Object>>[]) IDataModel<ITeamChatMessageMention>.EnsurePropertiesAsync(Expression<Func<ITeamChatMessageMention, Object>>[]) IDataModel<ITeamChatMessageMention>.ExecuteRequestAsync(ApiRequest) IDataModel<ITeamChatMessageMention>.ExecuteRequest(ApiRequest) IDataModel<ITeamChatMessageMention>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITeamChatMessageMention>.ExecuteRequestBatch(ApiRequest) IDataModel<ITeamChatMessageMention>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITeamChatMessageMention>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessageMention : IDataModel<ITeamChatMessageMention>, IDataModelParent, IDataModelWithContext, ISupportModules<ITeamChatMessageMention> Properties Id Index of an entity being mentioned in the specified chatMessage. Declaration int Id { get; set; } Property Value Int32 Mentioned The entity (user, application, team, or channel) that was mentioned. If it was a channel or team that was @mentioned, the identitySet contains a conversation property giving the ID of the team/channel, and a conversationIdentityType property that represents either the team or channel. Declaration ITeamIdentitySet Mentioned { get; } Property Value ITeamIdentitySet MentionText String used to represent the mention. For example, a user's display name, a team name. Declaration string MentionText { get; set; } Property Value String Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessageMentionCollection.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessageMentionCollection.html",
    "title": "Interface ITeamChatMessageMentionCollection | PnP Core SDK",
    "keywords": "Interface ITeamChatMessageMentionCollection Chat mentions Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<ITeamChatMessageMention>.LoadAsync(Expression<Func<ITeamChatMessageMention, Object>>[]) IDataModelCollectionLoad<ITeamChatMessageMention>.LoadBatchAsync(Batch, Expression<Func<ITeamChatMessageMention, Object>>[]) Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessageMentionCollection : IDataModelCollection<ITeamChatMessageMention>, IEnumerable<ITeamChatMessageMention>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<ITeamChatMessageMention>, ISupportQuery<ITeamChatMessageMention>, ISupportModules<ITeamChatMessageMentionCollection> Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.QueryProperties<TResult>(ISupportQuery<TResult>, Expression<Func<TResult, Object>>[]) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessageReaction.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessageReaction.html",
    "title": "Interface ITeamChatMessageReaction | PnP Core SDK",
    "keywords": "Interface ITeamChatMessageReaction Represents a reaction to a chatMessage entity. Inherited Members IDataModel<ITeamChatMessageReaction>.Requested IDataModel<ITeamChatMessageReaction>.HasValue(String) IDataModel<ITeamChatMessageReaction>.HasChanged(String) IDataModel<ITeamChatMessageReaction>.IsPropertyAvailable(Expression<Func<ITeamChatMessageReaction, Object>>) IDataModel<ITeamChatMessageReaction>.ArePropertiesAvailable(Expression<Func<ITeamChatMessageReaction, Object>>[]) IDataModel<ITeamChatMessageReaction>.EnsureProperties(Expression<Func<ITeamChatMessageReaction, Object>>[]) IDataModel<ITeamChatMessageReaction>.EnsurePropertiesAsync(Expression<Func<ITeamChatMessageReaction, Object>>[]) IDataModel<ITeamChatMessageReaction>.ExecuteRequestAsync(ApiRequest) IDataModel<ITeamChatMessageReaction>.ExecuteRequest(ApiRequest) IDataModel<ITeamChatMessageReaction>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITeamChatMessageReaction>.ExecuteRequestBatch(ApiRequest) IDataModel<ITeamChatMessageReaction>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITeamChatMessageReaction>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessageReaction : IDataModel<ITeamChatMessageReaction>, IDataModelParent, IDataModelWithContext, ISupportModules<ITeamChatMessageReaction> Properties CreatedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z' Declaration DateTimeOffset CreatedDateTime { get; set; } Property Value DateTimeOffset ReactionType Type of reaction Declaration ChatMessageReactionType ReactionType { get; set; } Property Value ChatMessageReactionType User The user who reacted to the message. Declaration ITeamIdentitySet User { get; set; } Property Value ITeamIdentitySet Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessageReactionCollection.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessageReactionCollection.html",
    "title": "Interface ITeamChatMessageReactionCollection | PnP Core SDK",
    "keywords": "Interface ITeamChatMessageReactionCollection Reactions on this chat Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems IRequestableCollection.Clear() IDataModelCollectionLoad<ITeamChatMessageReaction>.LoadAsync(Expression<Func<ITeamChatMessageReaction, Object>>[]) IDataModelCollectionLoad<ITeamChatMessageReaction>.LoadBatchAsync(Batch, Expression<Func<ITeamChatMessageReaction, Object>>[]) Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessageReactionCollection : IDataModelCollection<ITeamChatMessageReaction>, IEnumerable<ITeamChatMessageReaction>, IDataModelParent, IDataModelWithContext, IRequestableCollection, IDataModelCollectionLoad<ITeamChatMessageReaction>, ISupportQuery<ITeamChatMessageReaction>, ISupportModules<ITeamChatMessageReactionCollection> Extension Methods DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatchAsync<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Batch, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.LoadBatch<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) DataModelCollectionLoadExtensions.Load<TModel>(IDataModelCollectionLoad<TModel>, Expression<Func<TModel, Object>>[]) RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>) QueryableExtensions.QueryProperties<TResult>(ISupportQuery<TResult>, Expression<Func<TResult, Object>>[]) QueryableExtensions.AsRequested<TSource>(IDataModelCollection<TSource>)"
  },
  "api/PnP.Core.Model.Teams.ITeamClassSettings.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamClassSettings.html",
    "title": "Interface ITeamClassSettings | PnP Core SDK",
    "keywords": "Interface ITeamClassSettings Public interface to define the settings for a classroom Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamClassSettings Properties NotifyGuardiansAboutAssignments Do guardians need to be notified about assignments? Declaration bool NotifyGuardiansAboutAssignments { get; set; } Property Value Boolean"
  },
  "api/PnP.Core.Model.Teams.ITeamDiscoverySettings.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamDiscoverySettings.html",
    "title": "Interface ITeamDiscoverySettings | PnP Core SDK",
    "keywords": "Interface ITeamDiscoverySettings Public interface to define the discovery settings for a Team Inherited Members IDataModel<ITeamDiscoverySettings>.Requested IDataModel<ITeamDiscoverySettings>.HasValue(String) IDataModel<ITeamDiscoverySettings>.HasChanged(String) IDataModel<ITeamDiscoverySettings>.IsPropertyAvailable(Expression<Func<ITeamDiscoverySettings, Object>>) IDataModel<ITeamDiscoverySettings>.ArePropertiesAvailable(Expression<Func<ITeamDiscoverySettings, Object>>[]) IDataModel<ITeamDiscoverySettings>.EnsureProperties(Expression<Func<ITeamDiscoverySettings, Object>>[]) IDataModel<ITeamDiscoverySettings>.EnsurePropertiesAsync(Expression<Func<ITeamDiscoverySettings, Object>>[]) IDataModel<ITeamDiscoverySettings>.ExecuteRequestAsync(ApiRequest) IDataModel<ITeamDiscoverySettings>.ExecuteRequest(ApiRequest) IDataModel<ITeamDiscoverySettings>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITeamDiscoverySettings>.ExecuteRequestBatch(ApiRequest) IDataModel<ITeamDiscoverySettings>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITeamDiscoverySettings>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamDiscoverySettings : IDataModel<ITeamDiscoverySettings>, IDataModelParent, IDataModelWithContext, ISupportModules<ITeamDiscoverySettings> Properties ShowInTeamsSearchAndSuggestions Show team in Teams search and suggestions? Declaration bool ShowInTeamsSearchAndSuggestions { get; set; } Property Value Boolean Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamFunSettings.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamFunSettings.html",
    "title": "Interface ITeamFunSettings | PnP Core SDK",
    "keywords": "Interface ITeamFunSettings Public interface to define the fun settings for a Team Inherited Members IDataModel<ITeamFunSettings>.Requested IDataModel<ITeamFunSettings>.HasValue(String) IDataModel<ITeamFunSettings>.HasChanged(String) IDataModel<ITeamFunSettings>.IsPropertyAvailable(Expression<Func<ITeamFunSettings, Object>>) IDataModel<ITeamFunSettings>.ArePropertiesAvailable(Expression<Func<ITeamFunSettings, Object>>[]) IDataModel<ITeamFunSettings>.EnsureProperties(Expression<Func<ITeamFunSettings, Object>>[]) IDataModel<ITeamFunSettings>.EnsurePropertiesAsync(Expression<Func<ITeamFunSettings, Object>>[]) IDataModel<ITeamFunSettings>.ExecuteRequestAsync(ApiRequest) IDataModel<ITeamFunSettings>.ExecuteRequest(ApiRequest) IDataModel<ITeamFunSettings>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITeamFunSettings>.ExecuteRequestBatch(ApiRequest) IDataModel<ITeamFunSettings>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITeamFunSettings>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamFunSettings : IDataModel<ITeamFunSettings>, IDataModelParent, IDataModelWithContext, ISupportModules<ITeamFunSettings> Properties AllowCustomMemes Defines whether the custom memes are allowed in the Team Declaration bool AllowCustomMemes { get; set; } Property Value Boolean AllowGiphy Defines whether the Giphy are allowed in the Team Declaration bool AllowGiphy { get; set; } Property Value Boolean AllowStickersAndMemes Defines whether the stickers and meme are allowed in the Team Declaration bool AllowStickersAndMemes { get; set; } Property Value Boolean GiphyContentRating Defines the Giphy content rating (strict or moderate) Declaration TeamGiphyContentRating GiphyContentRating { get; set; } Property Value TeamGiphyContentRating Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamGuestSettings.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamGuestSettings.html",
    "title": "Interface ITeamGuestSettings | PnP Core SDK",
    "keywords": "Interface ITeamGuestSettings Public interface to define the guest settings for a Team Inherited Members IDataModel<ITeamGuestSettings>.Requested IDataModel<ITeamGuestSettings>.HasValue(String) IDataModel<ITeamGuestSettings>.HasChanged(String) IDataModel<ITeamGuestSettings>.IsPropertyAvailable(Expression<Func<ITeamGuestSettings, Object>>) IDataModel<ITeamGuestSettings>.ArePropertiesAvailable(Expression<Func<ITeamGuestSettings, Object>>[]) IDataModel<ITeamGuestSettings>.EnsureProperties(Expression<Func<ITeamGuestSettings, Object>>[]) IDataModel<ITeamGuestSettings>.EnsurePropertiesAsync(Expression<Func<ITeamGuestSettings, Object>>[]) IDataModel<ITeamGuestSettings>.ExecuteRequestAsync(ApiRequest) IDataModel<ITeamGuestSettings>.ExecuteRequest(ApiRequest) IDataModel<ITeamGuestSettings>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITeamGuestSettings>.ExecuteRequestBatch(ApiRequest) IDataModel<ITeamGuestSettings>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITeamGuestSettings>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamGuestSettings : IDataModel<ITeamGuestSettings>, IDataModelParent, IDataModelWithContext, ISupportModules<ITeamGuestSettings> Properties AllowCreateUpdateChannels Defines whether the guests can create or update channels Declaration bool AllowCreateUpdateChannels { get; set; } Property Value Boolean AllowDeleteChannels Defines whether the guests can delete channels Declaration bool AllowDeleteChannels { get; set; } Property Value Boolean Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamIdentitySet.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamIdentitySet.html",
    "title": "Interface ITeamIdentitySet | PnP Core SDK",
    "keywords": "Interface ITeamIdentitySet Identity information about a Teams element Inherited Members IDataModel<ITeamIdentitySet>.Requested IDataModel<ITeamIdentitySet>.HasValue(String) IDataModel<ITeamIdentitySet>.HasChanged(String) IDataModel<ITeamIdentitySet>.IsPropertyAvailable(Expression<Func<ITeamIdentitySet, Object>>) IDataModel<ITeamIdentitySet>.ArePropertiesAvailable(Expression<Func<ITeamIdentitySet, Object>>[]) IDataModel<ITeamIdentitySet>.EnsureProperties(Expression<Func<ITeamIdentitySet, Object>>[]) IDataModel<ITeamIdentitySet>.EnsurePropertiesAsync(Expression<Func<ITeamIdentitySet, Object>>[]) IDataModel<ITeamIdentitySet>.ExecuteRequestAsync(ApiRequest) IDataModel<ITeamIdentitySet>.ExecuteRequest(ApiRequest) IDataModel<ITeamIdentitySet>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITeamIdentitySet>.ExecuteRequestBatch(ApiRequest) IDataModel<ITeamIdentitySet>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITeamIdentitySet>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamIdentitySet : IDataModel<ITeamIdentitySet>, IDataModelParent, IDataModelWithContext, ISupportModules<ITeamIdentitySet> Properties Application Optional. The application associated with this action. Declaration IIdentity Application { get; } Property Value IIdentity Conversation Optional. The team or channel associated with this action. Declaration IIdentity Conversation { get; } Property Value IIdentity ConversationIdentityType Optional. Indicates whether the conversation property identifies a team or channel. Declaration IIdentity ConversationIdentityType { get; } Property Value IIdentity Device Optional. The device associated with this action. Declaration IIdentity Device { get; } Property Value IIdentity Phone Optional. The phone number associated with this action. Declaration IIdentity Phone { get; } Property Value IIdentity User Optional. The user associated with this action. Declaration IIdentity User { get; } Property Value IIdentity Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamMembersSettings.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamMembersSettings.html",
    "title": "Interface ITeamMembersSettings | PnP Core SDK",
    "keywords": "Interface ITeamMembersSettings Public interface to define the memebers settings for a Team Inherited Members IDataModel<ITeamMembersSettings>.Requested IDataModel<ITeamMembersSettings>.HasValue(String) IDataModel<ITeamMembersSettings>.HasChanged(String) IDataModel<ITeamMembersSettings>.IsPropertyAvailable(Expression<Func<ITeamMembersSettings, Object>>) IDataModel<ITeamMembersSettings>.ArePropertiesAvailable(Expression<Func<ITeamMembersSettings, Object>>[]) IDataModel<ITeamMembersSettings>.EnsureProperties(Expression<Func<ITeamMembersSettings, Object>>[]) IDataModel<ITeamMembersSettings>.EnsurePropertiesAsync(Expression<Func<ITeamMembersSettings, Object>>[]) IDataModel<ITeamMembersSettings>.ExecuteRequestAsync(ApiRequest) IDataModel<ITeamMembersSettings>.ExecuteRequest(ApiRequest) IDataModel<ITeamMembersSettings>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITeamMembersSettings>.ExecuteRequestBatch(ApiRequest) IDataModel<ITeamMembersSettings>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITeamMembersSettings>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamMembersSettings : IDataModel<ITeamMembersSettings>, IDataModelParent, IDataModelWithContext, ISupportModules<ITeamMembersSettings> Properties AllowAddRemoveApps Defines whether the team members can add or remove apps Declaration bool AllowAddRemoveApps { get; set; } Property Value Boolean AllowCreatePrivateChannels Defines whether the team members can create private channels Declaration bool AllowCreatePrivateChannels { get; set; } Property Value Boolean AllowCreateUpdateChannels Defines whether the team members can update channels Declaration bool AllowCreateUpdateChannels { get; set; } Property Value Boolean AllowCreateUpdateRemoveConnectors Defines whether the team members can create, update, or remove connectors Declaration bool AllowCreateUpdateRemoveConnectors { get; set; } Property Value Boolean AllowCreateUpdateRemoveTabs Defines whether the team members can update or remove tabs Declaration bool AllowCreateUpdateRemoveTabs { get; set; } Property Value Boolean AllowDeleteChannels Defines whether the team members can delete channels Declaration bool AllowDeleteChannels { get; set; } Property Value Boolean Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamMessagingSettings.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamMessagingSettings.html",
    "title": "Interface ITeamMessagingSettings | PnP Core SDK",
    "keywords": "Interface ITeamMessagingSettings Public interface to define the messaging settings for a Team Inherited Members IDataModel<ITeamMessagingSettings>.Requested IDataModel<ITeamMessagingSettings>.HasValue(String) IDataModel<ITeamMessagingSettings>.HasChanged(String) IDataModel<ITeamMessagingSettings>.IsPropertyAvailable(Expression<Func<ITeamMessagingSettings, Object>>) IDataModel<ITeamMessagingSettings>.ArePropertiesAvailable(Expression<Func<ITeamMessagingSettings, Object>>[]) IDataModel<ITeamMessagingSettings>.EnsureProperties(Expression<Func<ITeamMessagingSettings, Object>>[]) IDataModel<ITeamMessagingSettings>.EnsurePropertiesAsync(Expression<Func<ITeamMessagingSettings, Object>>[]) IDataModel<ITeamMessagingSettings>.ExecuteRequestAsync(ApiRequest) IDataModel<ITeamMessagingSettings>.ExecuteRequest(ApiRequest) IDataModel<ITeamMessagingSettings>.ExecuteRequestBatchAsync(ApiRequest) IDataModel<ITeamMessagingSettings>.ExecuteRequestBatch(ApiRequest) IDataModel<ITeamMessagingSettings>.ExecuteRequestBatchAsync(Batch, ApiRequest) IDataModel<ITeamMessagingSettings>.ExecuteRequestBatch(Batch, ApiRequest) IDataModelParent.Parent IDataModelWithContext.PnPContext Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamMessagingSettings : IDataModel<ITeamMessagingSettings>, IDataModelParent, IDataModelWithContext, ISupportModules<ITeamMessagingSettings> Properties AllowChannelMentions Defines whether users can use channel mentions Declaration bool AllowChannelMentions { get; set; } Property Value Boolean AllowOwnerDeleteMessages Defines whether owners can delete messages Declaration bool AllowOwnerDeleteMessages { get; set; } Property Value Boolean AllowTeamMentions Defines whether users can use team mentions Declaration bool AllowTeamMentions { get; set; } Property Value Boolean AllowUserDeleteMessages Defines whether users can delete messages Declaration bool AllowUserDeleteMessages { get; set; } Property Value Boolean AllowUserEditMessages Defines whether users can edit messages Declaration bool AllowUserEditMessages { get; set; } Property Value Boolean Extension Methods RequestModuleExtensions.WithHeaders<TModel>(ISupportModules<TModel>, Dictionary<String, String>, Action<Dictionary<String, String>>)"
  },
  "api/PnP.Core.Model.Teams.TeamChannelMembershipType.html": {
    "href": "api/PnP.Core.Model.Teams.TeamChannelMembershipType.html",
    "title": "Enum TeamChannelMembershipType | PnP Core SDK",
    "keywords": "Enum TeamChannelMembershipType Defines the Membership Type for a Team Channel Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum TeamChannelMembershipType : int Private Private channel membership Standard Standard channel membership UnknownFutureValue Reserved for future use"
  },
  "api/PnP.Core.Model.Teams.TeamGiphyContentRating.html": {
    "href": "api/PnP.Core.Model.Teams.TeamGiphyContentRating.html",
    "title": "Enum TeamGiphyContentRating | PnP Core SDK",
    "keywords": "Enum TeamGiphyContentRating Giphy content rating for giphies being used in a team Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum TeamGiphyContentRating : int Moderate Moderate content rating Strict Strict content rating"
  },
  "api/PnP.Core.Model.Teams.TeamsAppDistributionMethod.html": {
    "href": "api/PnP.Core.Model.Teams.TeamsAppDistributionMethod.html",
    "title": "Enum TeamsAppDistributionMethod | PnP Core SDK",
    "keywords": "Enum TeamsAppDistributionMethod Distribution method of the team app Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum TeamsAppDistributionMethod : int Organization From your organization SideLoaded Side loaded (developer scenario) Store From store"
  },
  "api/PnP.Core.Model.Teams.TeamSpecialization.html": {
    "href": "api/PnP.Core.Model.Teams.TeamSpecialization.html",
    "title": "Enum TeamSpecialization | PnP Core SDK",
    "keywords": "Enum TeamSpecialization Defines the Specialization options for a Team Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum TeamSpecialization : int EducationClass Education class EducationProfessionalLearningCommunity Education professional learning community EducationStaff Education staff EducationStandard Education Standard None None UnknownFutureValue Reserved for future use"
  },
  "api/PnP.Core.Model.Teams.TeamVisibility.html": {
    "href": "api/PnP.Core.Model.Teams.TeamVisibility.html",
    "title": "Enum TeamVisibility | PnP Core SDK",
    "keywords": "Enum TeamVisibility Defines the Visibility for a Team Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum TeamVisibility : int Private Private team Public Public team"
  },
  "api/PnP.Core.Model.TransientDictionary.html": {
    "href": "api/PnP.Core.Model.TransientDictionary.html",
    "title": "Class TransientDictionary | PnP Core SDK",
    "keywords": "Class TransientDictionary Class for tracking Dictionary changes Inheritance Object TransientDictionary Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public class TransientDictionary : Dictionary<string, object> Properties HasChanges Does this model instance have changes? Declaration public bool HasChanges { get; } Property Value Boolean Item[String] Gets or sets the value of an object in this dictionary Declaration public object this[string key] { get; set; } Parameters String key Key of the object to set Property Value Object Methods Add(String, Object) Adds a new item to the dictionary Declaration public void Add(string key, object value) Parameters String key Key of the item to add Object value Value of the item to add"
  },
  "api/PnP.Core.PnPException.html": {
    "href": "api/PnP.Core.PnPException.html",
    "title": "Class PnPException | PnP Core SDK",
    "keywords": "Class PnPException Base class for the pnp core sdk exceptions Inheritance Object PnPException AuthenticationException ClientException ServiceException Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public abstract class PnPException : Exception Constructors PnPException() Creates a PnP Exception Declaration public PnPException() PnPException(String) Creates a PnP Exception Declaration public PnPException(string message) Parameters String message Exception message PnPException(String, Exception) Creates a PnP Exception Declaration public PnPException(string message, Exception innerException) Parameters String message Exception message Exception innerException Inner exception to be linked to this PnPException Properties Error Additional error information Declaration public BaseError Error { get; set; } Property Value BaseError"
  },
  "api/PnP.Core.QueryModel.BaseDataModelExtensions.html": {
    "href": "api/PnP.Core.QueryModel.BaseDataModelExtensions.html",
    "title": "Class BaseDataModelExtensions | PnP Core SDK",
    "keywords": "Class BaseDataModelExtensions Class holding data model extension methods Inheritance Object BaseDataModelExtensions Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public static class BaseDataModelExtensions : object Methods AndThen<TIn, TOut>(Task<TIn>, Func<TIn, Task<TOut>>) Chains async calls. See https://stackoverflow.com/a/52739551 for more information Declaration public static Task<TOut> AndThen<TIn, TOut>(this Task<TIn> inputTask, Func<TIn, Task<TOut>> mapping) Parameters Task <TIn> inputTask Async operatation to start from Func <TIn, Task <TOut>> mapping Async operation to run next Returns Task <TOut> Task outcome from the ran async operation Type Parameters TIn Input task TOut Output task"
  },
  "api/PnP.Core.QueryModel.BaseQueryProvider.html": {
    "href": "api/PnP.Core.QueryModel.BaseQueryProvider.html",
    "title": "Class BaseQueryProvider | PnP Core SDK",
    "keywords": "Class BaseQueryProvider Base abstract class to implement the basic logic of an IQueryProvider Inheritance Object BaseQueryProvider Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public abstract class BaseQueryProvider : object, IAsyncQueryProvider, IQueryProvider Methods AddToBatchAsync<TResult>(Expression, Batch) Adds the expression to the batch specified Declaration public abstract Task<IEnumerableBatchResult<TResult>> AddToBatchAsync<TResult>(Expression expression, Batch batch) Parameters Expression expression Batch batch Returns Task < IEnumerableBatchResult <TResult>> Type Parameters TResult Implements IAsyncQueryProvider.AddToBatchAsync<TResult>(Expression, Batch) AddToCurrentBatchAsync<TResult>(Expression) Adds the expression to the current batch Declaration public abstract Task<IEnumerableBatchResult<TResult>> AddToCurrentBatchAsync<TResult>(Expression expression) Parameters Expression expression Returns Task < IEnumerableBatchResult <TResult>> Type Parameters TResult Implements IAsyncQueryProvider.AddToCurrentBatchAsync<TResult>(Expression) CreateQuery(Expression) Creates a query for the provided expression Declaration public abstract IQueryable CreateQuery(Expression expression) Parameters Expression expression Expression to create a query for Returns IQueryable CreateQuery<TResult>(Expression) Creates a query for the provided expression Declaration public IQueryable<TResult> CreateQuery<TResult>(Expression expression) Parameters Expression expression Expression that will be translated into a query Returns IQueryable <TResult> Created query Type Parameters TResult Result type of the query Execute(Expression) Executes the provided expression Declaration public object Execute(Expression expression) Parameters Expression expression Expression to execute Returns Object Execute<TResult>(Expression) Executes the provided expression Declaration public TResult Execute<TResult>(Expression expression) Parameters Expression expression Expression to execute Returns TResult Loaded model instace of type TResult Type Parameters TResult Resulting type of the linq expression execution ExecuteAsync<TResult>(Expression, CancellationToken) Executes the provided expression Declaration public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken) Parameters Expression expression Expression to execute CancellationToken cancellationToken Cancellation token Returns TResult Loaded model instace of type TResult Type Parameters TResult Resulting type of the linq expression execution Implements IAsyncQueryProvider.ExecuteAsync<TResult>(Expression, CancellationToken) ExecuteObjectAsync(Expression, CancellationToken) Executes the provided expression Declaration public abstract Task<object> ExecuteObjectAsync(Expression expression, CancellationToken token) Parameters Expression expression Expression to execute CancellationToken token Token for cancellation Returns Task < Object >"
  },
  "api/PnP.Core.QueryModel.FilteringConcatOperator.html": {
    "href": "api/PnP.Core.QueryModel.FilteringConcatOperator.html",
    "title": "Enum FilteringConcatOperator | PnP Core SDK",
    "keywords": "Enum FilteringConcatOperator Enumeration of logical concat operators for queries Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public enum FilteringConcatOperator : int AND Logical AND for query items in query groups OR Logical OR for query items in query groups"
  },
  "api/PnP.Core.QueryModel.FilteringCriteria.html": {
    "href": "api/PnP.Core.QueryModel.FilteringCriteria.html",
    "title": "Enum FilteringCriteria | PnP Core SDK",
    "keywords": "Enum FilteringCriteria Enumeration of filtering criteria for queries Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public enum FilteringCriteria : int Equal Corresponds to the = operator GreaterThan Corresponds to the > operator GreaterThanOrEqual Corresponds to the >= operator LessThan Corresponds to the < operator LessThanOrEqual Corresponds to the <= operator Not Corresponds to the ! operator NotEqual Corresponds to the != operator"
  },
  "api/PnP.Core.QueryModel.FilterItem.html": {
    "href": "api/PnP.Core.QueryModel.FilterItem.html",
    "title": "Class FilterItem | PnP Core SDK",
    "keywords": "Class FilterItem Defines a filtering criteria item Inheritance Object ODataFilter FilterItem Inherited Members ODataFilter.ConcatOperator Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public class FilterItem : ODataFilter Properties Criteria The filtering criteria. Default: Equal. Declaration public FilteringCriteria Criteria { get; set; } Property Value FilteringCriteria Field The name of the field for the filtering criteria Declaration public string Field { get; set; } Property Value String Value The actual value for the filtering criteria Declaration public object Value { get; set; } Property Value Object"
  },
  "api/PnP.Core.QueryModel.FiltersGroup.html": {
    "href": "api/PnP.Core.QueryModel.FiltersGroup.html",
    "title": "Class FiltersGroup | PnP Core SDK",
    "keywords": "Class FiltersGroup Defines a group of filters Inheritance Object ODataFilter FiltersGroup Inherited Members ODataFilter.ConcatOperator Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public class FiltersGroup : ODataFilter Constructors FiltersGroup() Constructs a group of filters Declaration public FiltersGroup() FiltersGroup(List<ODataFilter>) Constructs a group of filters based upon the provide list of filters Declaration public FiltersGroup(List<ODataFilter> filters) Parameters List < ODataFilter > filters List of ODataFilter filters Properties Filters Declaration public List<ODataFilter> Filters { get; } Property Value List < ODataFilter >"
  },
  "api/PnP.Core.QueryModel.html": {
    "href": "api/PnP.Core.QueryModel.html",
    "title": "Namespace PnP.Core.QueryModel | PnP Core SDK",
    "keywords": "Namespace PnP.Core.QueryModel Classes BaseDataModelExtensions Class holding data model extension methods BaseQueryProvider Base abstract class to implement the basic logic of an IQueryProvider FilterItem Defines a filtering criteria item FiltersGroup Defines a group of filters ODataFilter Interface to define the basic functionalities of a filtering item (either a single item or a group of items) OrderByItem Defines a single sorting item QueryableExtensions Useful extension methods for use with Entity Framework LINQ queries. Interfaces IAsyncQueryProvider Defines method to execute queries asynchronously that are described by an IQueryable object. Enums FilteringConcatOperator Enumeration of logical concat operators for queries FilteringCriteria Enumeration of filtering criteria for queries ODataTargetPlatform Defines the target platform for the query OrderByDirection Enumeration of the ordering criteria for sorting results"
  },
  "api/PnP.Core.QueryModel.IAsyncQueryProvider.html": {
    "href": "api/PnP.Core.QueryModel.IAsyncQueryProvider.html",
    "title": "Interface IAsyncQueryProvider | PnP Core SDK",
    "keywords": "Interface IAsyncQueryProvider Defines method to execute queries asynchronously that are described by an IQueryable object. Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public interface IAsyncQueryProvider : IQueryProvider Methods AddToBatchAsync<TResult>(Expression, Batch) Adds the expression to the specified batch Declaration Task<IEnumerableBatchResult<TResult>> AddToBatchAsync<TResult>(Expression expression, Batch batch) Parameters Expression expression Batch batch Returns Task < IEnumerableBatchResult <TResult>> Type Parameters TResult AddToCurrentBatchAsync<TResult>(Expression) Adds the expression to the current batch Declaration Task<IEnumerableBatchResult<TResult>> AddToCurrentBatchAsync<TResult>(Expression expression) Parameters Expression expression Returns Task < IEnumerableBatchResult <TResult>> Type Parameters TResult ExecuteAsync<TResult>(Expression, CancellationToken) Executes the strongly-typed query represented by a specified expression tree asynchronously. Declaration TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken = null) Parameters Expression expression CancellationToken cancellationToken Returns TResult Type Parameters TResult"
  },
  "api/PnP.Core.QueryModel.ODataFilter.html": {
    "href": "api/PnP.Core.QueryModel.ODataFilter.html",
    "title": "Class ODataFilter | PnP Core SDK",
    "keywords": "Class ODataFilter Interface to define the basic functionalities of a filtering item (either a single item or a group of items) Inheritance Object ODataFilter FilterItem FiltersGroup Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public abstract class ODataFilter : object Properties ConcatOperator The concatenation operator between the current filter item and the next one in the chain, within the current filtering group. Default: AND. Declaration public FilteringConcatOperator ConcatOperator { get; set; } Property Value FilteringConcatOperator"
  },
  "api/PnP.Core.QueryModel.ODataTargetPlatform.html": {
    "href": "api/PnP.Core.QueryModel.ODataTargetPlatform.html",
    "title": "Enum ODataTargetPlatform | PnP Core SDK",
    "keywords": "Enum ODataTargetPlatform Defines the target platform for the query Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public enum ODataTargetPlatform : int Graph Microsoft Graph (primary choice) SPORest Microsoft SharePoint Online REST API (fallback)"
  },
  "api/PnP.Core.QueryModel.OrderByDirection.html": {
    "href": "api/PnP.Core.QueryModel.OrderByDirection.html",
    "title": "Enum OrderByDirection | PnP Core SDK",
    "keywords": "Enum OrderByDirection Enumeration of the ordering criteria for sorting results Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public enum OrderByDirection : int Asc Ascending sorting Desc Descending sorting"
  },
  "api/PnP.Core.QueryModel.OrderByItem.html": {
    "href": "api/PnP.Core.QueryModel.OrderByItem.html",
    "title": "Class OrderByItem | PnP Core SDK",
    "keywords": "Class OrderByItem Defines a single sorting item Inheritance Object OrderByItem Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public class OrderByItem : object Properties Direction The direction (Ascending/Descending) for the sorting criteria. Default: Ascending. Declaration public OrderByDirection Direction { get; set; } Property Value OrderByDirection Field The name of the field to sort by Declaration public string Field { get; set; } Property Value String"
  },
  "api/PnP.Core.QueryModel.QueryableExtensions.html": {
    "href": "api/PnP.Core.QueryModel.QueryableExtensions.html",
    "title": "Class QueryableExtensions | PnP Core SDK",
    "keywords": "Class QueryableExtensions Useful extension methods for use with Entity Framework LINQ queries. Inheritance Object QueryableExtensions Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public static class QueryableExtensions : object Methods AsAsyncEnumerable<TSource>(IQueryable<TSource>) Returns an which can be enumerated asynchronously. Declaration public static IAsyncEnumerable<TSource> AsAsyncEnumerable<TSource>(this IQueryable<TSource> source) Parameters IQueryable <TSource> source An to enumerate. Returns IAsyncEnumerable <TSource> The query results. Type Parameters TSource The type of the elements of source . Remarks Multiple active operations on the same context instance are not supported. Use await to ensure that any asynchronous operations have completed before calling another method on this context. AsBatch<TSource>(IQueryable<TSource>) Adds the query to the current batch Declaration public static IEnumerableBatchResult<TSource> AsBatch<TSource>(this IQueryable<TSource> source) Parameters IQueryable <TSource> source Returns IEnumerableBatchResult <TSource> Type Parameters TSource AsBatch<TSource>(IQueryable<TSource>, Batch) Adds the query to the specified batch Declaration public static IEnumerableBatchResult<TSource> AsBatch<TSource>(this IQueryable<TSource> source, Batch batch) Parameters IQueryable <TSource> source Batch batch Returns IEnumerableBatchResult <TSource> Type Parameters TSource AsBatchAsync<TSource>(IQueryable<TSource>) Adds the query to the current batch Declaration public static Task<IEnumerableBatchResult<TSource>> AsBatchAsync<TSource>(this IQueryable<TSource> source) Parameters IQueryable <TSource> source Returns Task < IEnumerableBatchResult <TSource>> Type Parameters TSource AsBatchAsync<TSource>(IQueryable<TSource>, Batch) Adds the query to the specified batch Declaration public static Task<IEnumerableBatchResult<TSource>> AsBatchAsync<TSource>(this IQueryable<TSource> source, Batch batch) Parameters IQueryable <TSource> source Batch batch Returns Task < IEnumerableBatchResult <TSource>> Type Parameters TSource AsRequested<TSource>(IDataModelCollection<TSource>) Returns an which can be enumerated without executing an actual LINQ query on the target data provider. Declaration public static IEnumerable<TSource> AsRequested<TSource>(this IDataModelCollection<TSource> source) Parameters IDataModelCollection <TSource> source An IDataModelCollection<TModel> to enumerate. Returns IEnumerable <TSource> The query results. Type Parameters TSource The type of the elements of source . FirstAsync<TSource>(IQueryable<TSource>, CancellationToken) Asynchronously returns the first element of a sequence. Declaration public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null) Parameters IQueryable <TSource> source An to return the first element of. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task <TSource> A task that represents the asynchronous operation. The task result contains the first element in source . Type Parameters TSource The type of the elements of source . Remarks Multiple active operations on the same context instance are not supported. Use await to ensure that any asynchronous operations have completed before calling another method on this context. FirstAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Asynchronously returns the first element of a sequence that satisfies a specified condition. Declaration public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null) Parameters IQueryable <TSource> source An to return the first element of. Expression < Func <TSource, Boolean >> predicate A function to test each element for a condition. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task <TSource> A task that represents the asynchronous operation. The task result contains the first element in source that passes the test in predicate . Type Parameters TSource The type of the elements of source . Remarks Multiple active operations on the same context instance are not supported. Use await to ensure that any asynchronous operations have completed before calling another method on this context. FirstOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements. Declaration public static Task<TSource> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null) Parameters IQueryable <TSource> source An to return the first element of. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task <TSource> A task that represents the asynchronous operation. The task result contains langword_csharp_default ( TSource ) if source is empty; otherwise, the first element in source . Type Parameters TSource The type of the elements of source . Remarks Multiple active operations on the same context instance are not supported. Use await to ensure that any asynchronous operations have completed before calling another method on this context. FirstOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Asynchronously returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found. Declaration public static Task<TSource> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null) Parameters IQueryable <TSource> source An to return the first element of. Expression < Func <TSource, Boolean >> predicate A function to test each element for a condition. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task <TSource> A task that represents the asynchronous operation. The task result contains langword_csharp_default ( TSource ) if source is empty or if no element passes the test specified by predicate ; otherwise, the first element in source that passes the test specified by predicate . Type Parameters TSource The type of the elements of source . Remarks Multiple active operations on the same context instance are not supported. Use await to ensure that any asynchronous operations have completed before calling another method on this context. ForEachAsync<T>(IQueryable<T>, Action<T>, CancellationToken) Asynchronously enumerates the query results and performs the specified action on each element. Declaration public static Task ForEachAsync<T>(this IQueryable<T> source, Action<T> action, CancellationToken cancellationToken = null) Parameters IQueryable <T> source An to enumerate. Action <T> action The action to perform on each element. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task A task that represents the asynchronous operation. Type Parameters T The type of the elements of source . Remarks Multiple active operations on the same context instance are not supported. Use await to ensure that any asynchronous operations have completed before calling another method on this context. QueryProperties<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>[]) Extension method to declare the fields/metadata properties to load while executing the REST query Declaration public static IQueryable<TResult> QueryProperties<TResult>(this IQueryable<TResult> source, params Expression<Func<TResult, object>>[] selectors) Parameters IQueryable <TResult> source The collection of items to load fields/metadata from Expression < Func <TResult, Object >>[] selectors An array of selectors for the fields/metadata Returns IQueryable <TResult> The resulting collection Type Parameters TResult The type of the target entity QueryProperties<TResult>(ISupportQuery<TResult>, Expression<Func<TResult, Object>>[]) Extension method to declare a field/metadata property to load while executing the REST query Declaration public static ISupportQuery<TResult> QueryProperties<TResult>(this ISupportQuery<TResult> source, params Expression<Func<TResult, object>>[] selectors) Parameters ISupportQuery <TResult> source The collection of items to load the field/metadata from Expression < Func <TResult, Object >>[] selectors A selector for a field/metadata Returns ISupportQuery <TResult> The resulting collection Type Parameters TResult The type of the target entity ToArrayAsync<TSource>(IQueryable<TSource>, CancellationToken) Asynchronously creates an array from an by enumerating it asynchronously. Declaration public static Task<TSource[]> ToArrayAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null) Parameters IQueryable <TSource> source An to create an array from. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task <TSource[]> A task that represents the asynchronous operation. The task result contains an array that contains elements from the input sequence. Type Parameters TSource The type of the elements of source . Remarks Multiple active operations on the same context instance are not supported. Use await to ensure that any asynchronous operations have completed before calling another method on this context. ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, CancellationToken) Creates a from an by enumerating it asynchronously according to a specified key selector function. Declaration public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, CancellationToken cancellationToken = null) Parameters IQueryable <TSource> source An to create a from. Func <TSource, TKey> keySelector A function to extract a key from each element. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task < Dictionary <TKey, TSource>> A task that represents the asynchronous operation. The task result contains a that contains selected keys and values. Type Parameters TSource The type of the elements of source . TKey The type of the key returned by keySelector . Remarks Multiple active operations on the same context instance are not supported. Use await to ensure that any asynchronous operations have completed before calling another method on this context. ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, CancellationToken) Creates a from an by enumerating it asynchronously according to a specified key selector function and a comparer. Declaration public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer, CancellationToken cancellationToken = null) Parameters IQueryable <TSource> source An to create a from. Func <TSource, TKey> keySelector A function to extract a key from each element. IEqualityComparer <TKey> comparer An to compare keys. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task < Dictionary <TKey, TSource>> A task that represents the asynchronous operation. The task result contains a that contains selected keys and values. Type Parameters TSource The type of the elements of source . TKey The type of the key returned by keySelector . Remarks Multiple active operations on the same context instance are not supported. Use await to ensure that any asynchronous operations have completed before calling another method on this context. ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, CancellationToken) Creates a from an by enumerating it asynchronously according to a specified key selector and an element selector function. Declaration public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, CancellationToken cancellationToken = null) Parameters IQueryable <TSource> source An to create a from. Func <TSource, TKey> keySelector A function to extract a key from each element. Func <TSource, TElement> elementSelector A transform function to produce a result element value from each element. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task < Dictionary <TKey, TElement>> A task that represents the asynchronous operation. The task result contains a that contains values of type TElement selected from the input sequence. Type Parameters TSource The type of the elements of source . TKey The type of the key returned by keySelector . TElement The type of the value returned by elementSelector . Remarks Multiple active operations on the same context instance are not supported. Use await to ensure that any asynchronous operations have completed before calling another method on this context. ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, CancellationToken) Creates a from an by enumerating it asynchronously according to a specified key selector function, a comparer, and an element selector function. Declaration public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer, CancellationToken cancellationToken = null) Parameters IQueryable <TSource> source An to create a from. Func <TSource, TKey> keySelector A function to extract a key from each element. Func <TSource, TElement> elementSelector A transform function to produce a result element value from each element. IEqualityComparer <TKey> comparer An to compare keys. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task < Dictionary <TKey, TElement>> A task that represents the asynchronous operation. The task result contains a that contains values of type TElement selected from the input sequence. Type Parameters TSource The type of the elements of source . TKey The type of the key returned by keySelector . TElement The type of the value returned by elementSelector . Remarks Multiple active operations on the same context instance are not supported. Use await to ensure that any asynchronous operations have completed before calling another method on this context. ToListAsync<TSource>(IQueryable<TSource>, CancellationToken) Asynchronously creates a from an by enumerating it asynchronously. Declaration public static Task<List<TSource>> ToListAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null) Parameters IQueryable <TSource> source An to create a list from. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task < List <TSource>> A task that represents the asynchronous operation. The task result contains a that contains elements from the input sequence. Type Parameters TSource The type of the elements of source . Remarks Multiple active operations on the same context instance are not supported. Use await to ensure that any asynchronous operations have completed before calling another method on this context."
  },
  "api/PnP.Core.ServiceError.html": {
    "href": "api/PnP.Core.ServiceError.html",
    "title": "Class ServiceError | PnP Core SDK",
    "keywords": "Class ServiceError Error information for a service error Inheritance Object BaseError ServiceError CsomError MicrosoftGraphError SharePointRestError Inherited Members BaseError.Type BaseError.PnPCorrelationId BaseError.AdditionalData BaseError.AddAdditionalData(String, Object) Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class ServiceError : BaseError Constructors ServiceError(ErrorType, Int32) ServiceError constructor using error type and http response code to create a backend service request error Declaration public ServiceError(ErrorType type, int httpResponseCode) Parameters ErrorType type Type of the error Int32 httpResponseCode Http response code of the error Properties ClientRequestId Client request id header returned in the response. Declaration public string ClientRequestId { get; } Property Value String Code Graph error code Declaration public string Code { get; } Property Value String HttpResponseCode Http response code that was linked to the service error Declaration public int HttpResponseCode { get; } Property Value Int32 Message Error message that was linked to the service error Declaration public string Message { get; } Property Value String"
  },
  "api/PnP.Core.ServiceException.html": {
    "href": "api/PnP.Core.ServiceException.html",
    "title": "Class ServiceException | PnP Core SDK",
    "keywords": "Class ServiceException Abstract class representing service errors Inheritance Object PnPException ServiceException CsomServiceException MicrosoftGraphServiceException SharePointRestServiceException Inherited Members PnPException.Error Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class ServiceException : PnPException Constructors ServiceException() Creates a service request exception Declaration public ServiceException() ServiceException(ErrorType, Int32, String) Creates a service request exception Declaration public ServiceException(ErrorType type, int httpResponseCode, string message) Parameters ErrorType type Error type Int32 httpResponseCode Http response code of the service request that got an error back String message Exception message ServiceException(String) Creates a service request exception Declaration public ServiceException(string message) Parameters String message Exception message ServiceException(String, Exception) Creates a service request exception Declaration public ServiceException(string message, Exception innerException) Parameters String message Exception message Exception innerException Inner exception to be linked to this ServiceException"
  },
  "api/PnP.Core.Services.ApiRequest.html": {
    "href": "api/PnP.Core.Services.ApiRequest.html",
    "title": "Class ApiRequest | PnP Core SDK",
    "keywords": "Class ApiRequest Defines an API request that can be executed Inheritance Object ApiRequest Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class ApiRequest : object Constructors ApiRequest(HttpMethod, ApiRequestType, String, String, Dictionary<String, String>) Creates an API request to execute Declaration public ApiRequest(HttpMethod httpMethod, ApiRequestType type, string request, string body, Dictionary<string, string> headers = null) Parameters HttpMethod httpMethod Http method to use ApiRequestType type ApiRequestType of the request String request Actual API call to issue String body Optional body of the request Dictionary < String , String > headers Optional headers for the request ApiRequest(ApiRequestType, String) Creates an API request to execute Declaration public ApiRequest(ApiRequestType type, string request) Parameters ApiRequestType type ApiRequestType of the request String request Actual API call to issue Properties Body The optional payload/body of the API call to execute Declaration public string Body { get; set; } Property Value String Headers The optional headers of the API call to execute - for example IF-Match for PATCH Request. Declaration public Dictionary<string, string> Headers { get; } Property Value Dictionary < String , String > HttpMethod The Http method to use Declaration public HttpMethod HttpMethod { get; set; } Property Value HttpMethod Request The REST/Graph API call to execute Declaration public string Request { get; set; } Property Value String Type The type of API call to execute Declaration public ApiRequestType Type { get; set; } Property Value ApiRequestType"
  },
  "api/PnP.Core.Services.ApiRequestResponse.html": {
    "href": "api/PnP.Core.Services.ApiRequestResponse.html",
    "title": "Class ApiRequestResponse | PnP Core SDK",
    "keywords": "Class ApiRequestResponse The response of an executed ApiRequest Inheritance Object ApiRequestResponse Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class ApiRequestResponse : object Properties ApiRequest Gets the ApiRequest that resulted in this response Declaration public ApiRequest ApiRequest { get; } Property Value ApiRequest Headers Contains additional response headers (if any) Declaration public Dictionary<string, string> Headers { get; } Property Value Dictionary < String , String > Response The JSON response Declaration public string Response { get; } Property Value String StatusCode Contains the request http status code Declaration public HttpStatusCode StatusCode { get; } Property Value HttpStatusCode"
  },
  "api/PnP.Core.Services.ApiRequestType.html": {
    "href": "api/PnP.Core.Services.ApiRequestType.html",
    "title": "Enum ApiRequestType | PnP Core SDK",
    "keywords": "Enum ApiRequestType Types of API requests that can be executed Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public enum ApiRequestType : int Graph Using the production v1 Microsoft Graph REST API GraphBeta Using the beta Microsoft Graph REST API SPORest Using the SharePoint REST API"
  },
  "api/PnP.Core.Services.ApiResponse.html": {
    "href": "api/PnP.Core.Services.ApiResponse.html",
    "title": "Struct ApiResponse | PnP Core SDK",
    "keywords": "Struct ApiResponse Defines the response of an executed API call Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public struct ApiResponse"
  },
  "api/PnP.Core.Services.Batch.html": {
    "href": "api/PnP.Core.Services.Batch.html",
    "title": "Class Batch | PnP Core SDK",
    "keywords": "Class Batch Defines a Batch of requests to execute Inheritance Object Batch Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class Batch : object Constructors Batch() Default public constructor, instantiates a Batch Declaration public Batch() Properties Executed Was this Batch executed? Declaration public bool Executed { get; } Property Value Boolean Requests List with requests Declaration public SortedList<int, BatchRequest> Requests { get; } Property Value SortedList < Int32 , BatchRequest >"
  },
  "api/PnP.Core.Services.BatchRequest.html": {
    "href": "api/PnP.Core.Services.BatchRequest.html",
    "title": "Class BatchRequest | PnP Core SDK",
    "keywords": "Class BatchRequest Defines a request in a Batch Inheritance Object BatchRequest Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class BatchRequest : object Properties ResponseHttpStatusCode Http response code for this request (only populated when the Batch was executed) Declaration public HttpStatusCode ResponseHttpStatusCode { get; } Property Value HttpStatusCode ResponseJson Json response for this request (only populated when the Batch was executed) Declaration public string ResponseJson { get; } Property Value String"
  },
  "api/PnP.Core.Services.BatchResult.html": {
    "href": "api/PnP.Core.Services.BatchResult.html",
    "title": "Class BatchResult | PnP Core SDK",
    "keywords": "Class BatchResult Holds information about the outcome of each batch request Inheritance Object BatchResult Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class BatchResult : object Properties ApiBody API call body Declaration public string ApiBody { get; } Property Value String ApiMethod API call method Declaration public HttpMethod ApiMethod { get; } Property Value HttpMethod ApiRequest API call request Declaration public string ApiRequest { get; } Property Value String ApiResponse The response content from the batch request Declaration public string ApiResponse { get; } Property Value String ApiType API call Type Declaration public string ApiType { get; } Property Value String Error If an error happened then the error information is stored here Declaration public ServiceError Error { get; } Property Value ServiceError StatusCode Status code of the request Declaration public HttpStatusCode StatusCode { get; } Property Value HttpStatusCode"
  },
  "api/PnP.Core.Services.BatchResultValue-1.html": {
    "href": "api/PnP.Core.Services.BatchResultValue-1.html",
    "title": "Class BatchResultValue<T> | PnP Core SDK",
    "keywords": "Class BatchResultValue<T> Wraps a reference or value type in an object Inheritance Object BatchResultValue<T> Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class BatchResultValue<T> : object Type Parameters T Type of the value/reference type to wrap Properties Value The wrapped reference/value type Declaration public T Value { get; } Property Value T"
  },
  "api/PnP.Core.Services.Builder.Configuration.html": {
    "href": "api/PnP.Core.Services.Builder.Configuration.html",
    "title": "Namespace PnP.Core.Services.Builder.Configuration | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Services.Builder.Configuration Classes PnPCoreContextOptions Microsoft Graph global settings PnPCoreHttpRequestsAzureActiveDirectoryOptions Microsoft Graph REST options PnPCoreHttpRequestsGraphOptions Microsoft Graph REST options PnPCoreHttpRequestsOptions Http request global settings PnPCoreHttpRequestsSharePointRestOptions SharePoint Online REST options PnPCoreOptions Options for configuring PnP Core SDK PnPCoreSiteOptions Options for configuring a single site in PnP Core SDK PnPCoreSitesOptions Options for configuring PnP Core SDK"
  },
  "api/PnP.Core.Services.Builder.Configuration.PnPCoreContextOptions.html": {
    "href": "api/PnP.Core.Services.Builder.Configuration.PnPCoreContextOptions.html",
    "title": "Class PnPCoreContextOptions | PnP Core SDK",
    "keywords": "Class PnPCoreContextOptions Microsoft Graph global settings Inheritance Object PnPCoreContextOptions Namespace : PnP.Core.Services.Builder.Configuration Assembly : PnP.Core.dll Syntax public class PnPCoreContextOptions : object Properties GraphAlwaysUseBeta If true than all requests to Microsoft Graph use the beta endpoint Declaration public bool GraphAlwaysUseBeta { get; set; } Property Value Boolean GraphCanUseBeta If true than the Graph beta endpoint is used when there's no other option, default approach stays using the v1 endpoint Declaration public bool GraphCanUseBeta { get; set; } Property Value Boolean GraphFirst Controls whether the library will try to use Microsoft Graph over REST whenever that's defined in the model Declaration public bool GraphFirst { get; set; } Property Value Boolean"
  },
  "api/PnP.Core.Services.Builder.Configuration.PnPCoreHttpRequestsAzureActiveDirectoryOptions.html": {
    "href": "api/PnP.Core.Services.Builder.Configuration.PnPCoreHttpRequestsAzureActiveDirectoryOptions.html",
    "title": "Class PnPCoreHttpRequestsAzureActiveDirectoryOptions | PnP Core SDK",
    "keywords": "Class PnPCoreHttpRequestsAzureActiveDirectoryOptions Microsoft Graph REST options Inheritance Object PnPCoreHttpRequestsAzureActiveDirectoryOptions Namespace : PnP.Core.Services.Builder.Configuration Assembly : PnP.Core.dll Syntax public class PnPCoreHttpRequestsAzureActiveDirectoryOptions : object Properties DelayInSeconds How many seconds to wait for the next retry attempt. Defaults to 3 Declaration public int DelayInSeconds { get; set; } Property Value Int32 MaxRetries When not using retry-after, how many times can a retry be made. Defaults to 10 Declaration public int MaxRetries { get; set; } Property Value Int32 UseIncrementalDelay Use an incremental strategy for the delay: each retry doubles the previous delay time. Defaults to true Declaration public bool UseIncrementalDelay { get; set; } Property Value Boolean UseRetryAfterHeader Use the Retry-After header for calculating the delay in case of a retry. Defaults to true Declaration public bool UseRetryAfterHeader { get; set; } Property Value Boolean"
  },
  "api/PnP.Core.Services.Builder.Configuration.PnPCoreHttpRequestsGraphOptions.html": {
    "href": "api/PnP.Core.Services.Builder.Configuration.PnPCoreHttpRequestsGraphOptions.html",
    "title": "Class PnPCoreHttpRequestsGraphOptions | PnP Core SDK",
    "keywords": "Class PnPCoreHttpRequestsGraphOptions Microsoft Graph REST options Inheritance Object PnPCoreHttpRequestsGraphOptions Namespace : PnP.Core.Services.Builder.Configuration Assembly : PnP.Core.dll Syntax public class PnPCoreHttpRequestsGraphOptions : object Properties DelayInSeconds How many seconds to wait for the next retry attempt. Defaults to 3 Declaration public int DelayInSeconds { get; set; } Property Value Int32 MaxRetries When not using retry-after, how many times can a retry be made. Defaults to 10 Declaration public int MaxRetries { get; set; } Property Value Int32 UseIncrementalDelay Use an incremental strategy for the delay: each retry doubles the previous delay time. Defaults to true Declaration public bool UseIncrementalDelay { get; set; } Property Value Boolean UseRetryAfterHeader Use the Retry-After header for calculating the delay in case of a retry. Defaults to true Declaration public bool UseRetryAfterHeader { get; set; } Property Value Boolean"
  },
  "api/PnP.Core.Services.Builder.Configuration.PnPCoreHttpRequestsOptions.html": {
    "href": "api/PnP.Core.Services.Builder.Configuration.PnPCoreHttpRequestsOptions.html",
    "title": "Class PnPCoreHttpRequestsOptions | PnP Core SDK",
    "keywords": "Class PnPCoreHttpRequestsOptions Http request global settings Inheritance Object PnPCoreHttpRequestsOptions Namespace : PnP.Core.Services.Builder.Configuration Assembly : PnP.Core.dll Syntax public class PnPCoreHttpRequestsOptions : object Properties AzureActiveDirectory Azure AD options Declaration public PnPCoreHttpRequestsAzureActiveDirectoryOptions AzureActiveDirectory { get; set; } Property Value PnPCoreHttpRequestsAzureActiveDirectoryOptions MicrosoftGraph Microsoft Graph REST options Declaration public PnPCoreHttpRequestsGraphOptions MicrosoftGraph { get; set; } Property Value PnPCoreHttpRequestsGraphOptions SharePointRest SharePoint Online REST options Declaration public PnPCoreHttpRequestsSharePointRestOptions SharePointRest { get; set; } Property Value PnPCoreHttpRequestsSharePointRestOptions Timeout HTTP request timeout in seconds to use when making calls to SharePoint or Microsoft Graph Declaration public int Timeout { get; set; } Property Value Int32 UserAgent User agent value, can be customized via configuration Declaration public string UserAgent { get; set; } Property Value String"
  },
  "api/PnP.Core.Services.Builder.Configuration.PnPCoreHttpRequestsSharePointRestOptions.html": {
    "href": "api/PnP.Core.Services.Builder.Configuration.PnPCoreHttpRequestsSharePointRestOptions.html",
    "title": "Class PnPCoreHttpRequestsSharePointRestOptions | PnP Core SDK",
    "keywords": "Class PnPCoreHttpRequestsSharePointRestOptions SharePoint Online REST options Inheritance Object PnPCoreHttpRequestsSharePointRestOptions Namespace : PnP.Core.Services.Builder.Configuration Assembly : PnP.Core.dll Syntax public class PnPCoreHttpRequestsSharePointRestOptions : object Properties DefaultPageSize Defines the default page size for querying items in SharePoint REST Declaration public int DefaultPageSize { get; set; } Property Value Int32 DelayInSeconds How many seconds to wait for the next retry attempt. Defaults to 3 Declaration public int DelayInSeconds { get; set; } Property Value Int32 MaxRetries When not using retry-after, how many times can a retry be made. Defaults to 10 Declaration public int MaxRetries { get; set; } Property Value Int32 UseIncrementalDelay Use an incremental strategy for the delay: each retry doubles the previous delay time. Defaults to true Declaration public bool UseIncrementalDelay { get; set; } Property Value Boolean UseRetryAfterHeader Use the Retry-After header for calculating the delay in case of a retry. Defaults to false Declaration public bool UseRetryAfterHeader { get; set; } Property Value Boolean"
  },
  "api/PnP.Core.Services.Builder.Configuration.PnPCoreOptions.html": {
    "href": "api/PnP.Core.Services.Builder.Configuration.PnPCoreOptions.html",
    "title": "Class PnPCoreOptions | PnP Core SDK",
    "keywords": "Class PnPCoreOptions Options for configuring PnP Core SDK Inheritance Object PnPCoreOptions Namespace : PnP.Core.Services.Builder.Configuration Assembly : PnP.Core.dll Syntax public class PnPCoreOptions : object Properties AADTenantId AAD tenant id, used for telemetry purposes. Can be customized via configuration Declaration public Guid AADTenantId { get; set; } Property Value Guid DefaultAuthenticationProvider The default Authentication Provider for the sites Declaration public IAuthenticationProvider DefaultAuthenticationProvider { get; set; } Property Value IAuthenticationProvider DisableTelemetry Turns on/off telemetry, can be customized via configuration. Defaults to false. Declaration public bool DisableTelemetry { get; set; } Property Value Boolean Environment The Microsoft 365 cloud environment that's used Declaration public string Environment { get; set; } Property Value String HttpRequests The global HTTP requests settings Declaration public PnPCoreHttpRequestsOptions HttpRequests { get; set; } Property Value PnPCoreHttpRequestsOptions PnPContext The global PnPContext options Declaration public PnPCoreContextOptions PnPContext { get; set; } Property Value PnPCoreContextOptions Sites The sites options Declaration public PnPCoreSitesOptions Sites { get; } Property Value PnPCoreSitesOptions"
  },
  "api/PnP.Core.Services.Builder.Configuration.PnPCoreSiteOptions.html": {
    "href": "api/PnP.Core.Services.Builder.Configuration.PnPCoreSiteOptions.html",
    "title": "Class PnPCoreSiteOptions | PnP Core SDK",
    "keywords": "Class PnPCoreSiteOptions Options for configuring a single site in PnP Core SDK Inheritance Object PnPCoreSiteOptions Namespace : PnP.Core.Services.Builder.Configuration Assembly : PnP.Core.dll Syntax public class PnPCoreSiteOptions : object Properties AuthenticationProvider The Authentication Provider Declaration public IAuthenticationProvider AuthenticationProvider { get; set; } Property Value IAuthenticationProvider SiteUrl The URL of the target site Declaration public string SiteUrl { get; set; } Property Value String"
  },
  "api/PnP.Core.Services.Builder.Configuration.PnPCoreSitesOptions.html": {
    "href": "api/PnP.Core.Services.Builder.Configuration.PnPCoreSitesOptions.html",
    "title": "Class PnPCoreSitesOptions | PnP Core SDK",
    "keywords": "Class PnPCoreSitesOptions Options for configuring PnP Core SDK Inheritance Object PnPCoreSitesOptions Namespace : PnP.Core.Services.Builder.Configuration Assembly : PnP.Core.dll Syntax public class PnPCoreSitesOptions : Dictionary<string, PnPCoreSiteOptions>"
  },
  "api/PnP.Core.Services.Builder.html": {
    "href": "api/PnP.Core.Services.Builder.html",
    "title": "Namespace PnP.Core.Services.Builder | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Services.Builder Classes PnPCoreBuilder Used to configure PnP Core SDK Interfaces IPnPCoreBuilder Used to configure PnP Core SDK"
  },
  "api/PnP.Core.Services.Builder.IPnPCoreBuilder.html": {
    "href": "api/PnP.Core.Services.Builder.IPnPCoreBuilder.html",
    "title": "Interface IPnPCoreBuilder | PnP Core SDK",
    "keywords": "Interface IPnPCoreBuilder Used to configure PnP Core SDK Namespace : PnP.Core.Services.Builder Assembly : PnP.Core.dll Syntax public interface IPnPCoreBuilder Properties Services Collection of services for Dependecy Injection Declaration IServiceCollection Services { get; } Property Value IServiceCollection"
  },
  "api/PnP.Core.Services.Builder.PnPCoreBuilder.html": {
    "href": "api/PnP.Core.Services.Builder.PnPCoreBuilder.html",
    "title": "Class PnPCoreBuilder | PnP Core SDK",
    "keywords": "Class PnPCoreBuilder Used to configure PnP Core SDK Inheritance Object PnPCoreBuilder Namespace : PnP.Core.Services.Builder Assembly : PnP.Core.dll Syntax public class PnPCoreBuilder : object, IPnPCoreBuilder Constructors PnPCoreBuilder(IServiceCollection) Constructor Declaration public PnPCoreBuilder(IServiceCollection services) Parameters IServiceCollection services The services being configured. Properties Services The services being configured Declaration public virtual IServiceCollection Services { get; } Property Value IServiceCollection Implements IPnPCoreBuilder.Services"
  },
  "api/PnP.Core.Services.FromJson.html": {
    "href": "api/PnP.Core.Services.FromJson.html",
    "title": "Class FromJson | PnP Core SDK",
    "keywords": "Class FromJson Class that represents the JSON context that's being used during call outs when parsing JSON responses Inheritance Object FromJson Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class FromJson : object"
  },
  "api/PnP.Core.Services.html": {
    "href": "api/PnP.Core.Services.html",
    "title": "Namespace PnP.Core.Services | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Services Classes ApiRequest Defines an API request that can be executed ApiRequestResponse The response of an executed ApiRequest Batch Defines a Batch of requests to execute BatchRequest Defines a request in a Batch BatchResult Holds information about the outcome of each batch request BatchResultValue<T> Wraps a reference or value type in an object FromJson Class that represents the JSON context that's being used during call outs when parsing JSON responses MicrosoftGraphClient Client that handles all Microsoft Graph requests PnPContext PnP Context class...the glue between the model and the data stores PnPContextExtensions Extends the PnPContext with additional functionality PnPContextFactory Public factory service to create PnPContext object instances PnPContextFactoryCollectionExtensions Extension class for the IServiceCollection type to provide supporting methods for the PnPContextFactory service PnPContextFactoryOptions Defines the options to configure the PnPContextFactory object PnPContextFactoryOptionsConfiguration PnPContext configuration options PnPContextOptions Options used when a PnPContext is created PnPGlobalSettingsOptions PnP Core SDK settings class SharePointRestClient Client that handles all SharePoint REST requests Structs ApiResponse Defines the response of an executed API call Interfaces IAuthenticationProvider Defines the public interface that any Authentication Provider must implement ILegacyAuthenticationProvider Defines the interface that a legacy Authentication Provider must implement. Note: this is only meant to be used by PnP Framework, no 3rd party support will be provided. IPnPContextFactory Public interface for the injectable service to create an PnPContext Enums ApiRequestType Types of API requests that can be executed Microsoft365Environment Microsoft 365 environments"
  },
  "api/PnP.Core.Services.IAuthenticationProvider.html": {
    "href": "api/PnP.Core.Services.IAuthenticationProvider.html",
    "title": "Interface IAuthenticationProvider | PnP Core SDK",
    "keywords": "Interface IAuthenticationProvider Defines the public interface that any Authentication Provider must implement Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public interface IAuthenticationProvider Methods AuthenticateRequestAsync(Uri, HttpRequestMessage) Authenticates the specified request message. Declaration Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) Parameters Uri resource Request uri HttpRequestMessage request The to authenticate. Returns Task The task to await. GetAccessTokenAsync(Uri) Gets an access token for the requested resource Declaration Task<string> GetAccessTokenAsync(Uri resource) Parameters Uri resource Resource to request an access token for Returns Task < String > An access token GetAccessTokenAsync(Uri, String[]) Gets an access token for the requested resource and scope Declaration Task<string> GetAccessTokenAsync(Uri resource, String[] scopes) Parameters Uri resource Resource to request an access token for String [] scopes Scopes to request Returns Task < String > An access token"
  },
  "api/PnP.Core.Services.ILegacyAuthenticationProvider.html": {
    "href": "api/PnP.Core.Services.ILegacyAuthenticationProvider.html",
    "title": "Interface ILegacyAuthenticationProvider | PnP Core SDK",
    "keywords": "Interface ILegacyAuthenticationProvider Defines the interface that a legacy Authentication Provider must implement. Note: this is only meant to be used by PnP Framework, no 3rd party support will be provided. Inherited Members IAuthenticationProvider.AuthenticateRequestAsync(Uri, HttpRequestMessage) IAuthenticationProvider.GetAccessTokenAsync(Uri, String[]) IAuthenticationProvider.GetAccessTokenAsync(Uri) Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public interface ILegacyAuthenticationProvider : IAuthenticationProvider Properties RequiresCookieAuthentication Allows to see if the authentication provider should prioritize the cookie authentication Declaration bool RequiresCookieAuthentication { get; } Property Value Boolean Methods GetCookieHeader(Uri) Provides the value of the Cookie header for legacy cookie-based authentication Declaration string GetCookieHeader(Uri targetUrl) Parameters Uri targetUrl The URL of the target API Returns String The string value of the Cookie header to use for cookie authentication GetRequestDigest() Provides the value of the Request Digest header for legacy cookie-based authentication Declaration string GetRequestDigest() Returns String The string value of the Request Digest header to use for cookie authentication"
  },
  "api/PnP.Core.Services.IPnPContextFactory.html": {
    "href": "api/PnP.Core.Services.IPnPContextFactory.html",
    "title": "Interface IPnPContextFactory | PnP Core SDK",
    "keywords": "Interface IPnPContextFactory Public interface for the injectable service to create an PnPContext Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public interface IPnPContextFactory Methods Create(Guid, IAuthenticationProvider, PnPContextOptions) Creates a new instance of PnPContext based on a provided group and Authentication Provider instance Declaration PnPContext Create(Guid groupId, IAuthenticationProvider authenticationProvider, PnPContextOptions options = null) Parameters Guid groupId The id of an Microsoft 365 group IAuthenticationProvider authenticationProvider The Authentication Provider to use to authenticate within the PnPContext PnPContextOptions options Options used to configure the created context Returns PnPContext A PnPContext object based on the provided configuration name Create(Guid, PnPContextOptions) Creates a new instance of PnPContext based on a provided group and using the default Authentication Provider Declaration PnPContext Create(Guid groupId, PnPContextOptions options = null) Parameters Guid groupId The id of an Microsoft 365 group PnPContextOptions options Options used to configure the created context Returns PnPContext A PnPContext object based on the provided configuration name Create(String, Action<IAuthenticationProvider>, PnPContextOptions) Creates a new instance of PnPContext based on a provided configuration name and on a custom initialization function for the IAuthenticationProvider reference instance Declaration PnPContext Create(string name, Action<IAuthenticationProvider> initializeAuthenticationProvider, PnPContextOptions options = null) Parameters String name The name of the configuration to use Action < IAuthenticationProvider > initializeAuthenticationProvider The function to initialize the context PnPContextOptions options Options used to configure the created context Returns PnPContext A PnPContext object based on the provided configuration name Create(String, PnPContextOptions) Creates a new instance of PnPContext based on a provided configuration name Declaration PnPContext Create(string name, PnPContextOptions options = null) Parameters String name The name of the configuration to use PnPContextOptions options Options used to configure the created context Returns PnPContext A PnPContext object based on the provided configuration name Create(Uri, IAuthenticationProvider, PnPContextOptions) Creates a new instance of PnPContext based on a provided URL and Authentication Provider instance Declaration PnPContext Create(Uri url, IAuthenticationProvider authenticationProvider, PnPContextOptions options = null) Parameters Uri url The URL of the PnPContext as a URI IAuthenticationProvider authenticationProvider The Authentication Provider to use to authenticate within the PnPContext PnPContextOptions options Options used to configure the created context Returns PnPContext A PnPContext object based on the provided configuration name Create(Uri, PnPContextOptions) Creates a new instance of PnPContext based on a provided URL and using the default Authentication Provider Declaration PnPContext Create(Uri url, PnPContextOptions options = null) Parameters Uri url The URL of the PnPContext as a URI PnPContextOptions options Options used to configure the created context Returns PnPContext A PnPContext object based on the provided configuration name CreateAsync(Guid, IAuthenticationProvider, PnPContextOptions) Creates a new instance of PnPContext based on a provided group and Authentication Provider instance Declaration Task<PnPContext> CreateAsync(Guid groupId, IAuthenticationProvider authenticationProvider, PnPContextOptions options = null) Parameters Guid groupId The id of an Microsoft 365 group IAuthenticationProvider authenticationProvider The Authentication Provider to use to authenticate within the PnPContext PnPContextOptions options Options used to configure the created context Returns Task < PnPContext > A PnPContext object based on the provided configuration name CreateAsync(Guid, PnPContextOptions) Creates a new instance of PnPContext based on a provided group and using the default Authentication Provider Declaration Task<PnPContext> CreateAsync(Guid groupId, PnPContextOptions options = null) Parameters Guid groupId The id of an Microsoft 365 group PnPContextOptions options Options used to configure the created context Returns Task < PnPContext > A PnPContext object based on the provided configuration name CreateAsync(String, Action<IAuthenticationProvider>, PnPContextOptions) Creates a new instance of PnPContext based on a provided configuration name and on a custom initialization function for the IAuthenticationProvider reference instance Declaration Task<PnPContext> CreateAsync(string name, Action<IAuthenticationProvider> initializeAuthenticationProvider, PnPContextOptions options = null) Parameters String name The name of the configuration to use Action < IAuthenticationProvider > initializeAuthenticationProvider The function to initialize the context PnPContextOptions options Options used to configure the created context Returns Task < PnPContext > A PnPContext object based on the provided configuration name CreateAsync(String, PnPContextOptions) Creates a new instance of PnPContext based on a provided configuration name Declaration Task<PnPContext> CreateAsync(string name, PnPContextOptions options = null) Parameters String name The name of the configuration to use PnPContextOptions options Options used to configure the created context Returns Task < PnPContext > A PnPContext object based on the provided configuration name CreateAsync(Uri, IAuthenticationProvider, PnPContextOptions) Creates a new instance of PnPContext based on a provided URL and Authentication Provider instance Declaration Task<PnPContext> CreateAsync(Uri url, IAuthenticationProvider authenticationProvider, PnPContextOptions options = null) Parameters Uri url The URL of the PnPContext as a URI IAuthenticationProvider authenticationProvider The Authentication Provider to use to authenticate within the PnPContext PnPContextOptions options Options used to configure the created context Returns Task < PnPContext > A PnPContext object based on the provided configuration name CreateAsync(Uri, PnPContextOptions) Creates a new instance of PnPContext based on a provided URL and using the default Authentication Provider Declaration Task<PnPContext> CreateAsync(Uri url, PnPContextOptions options = null) Parameters Uri url The URL of the PnPContext as a URI PnPContextOptions options Options used to configure the created context Returns Task < PnPContext > A PnPContext object based on the provided configuration name"
  },
  "api/PnP.Core.Services.Microsoft365Environment.html": {
    "href": "api/PnP.Core.Services.Microsoft365Environment.html",
    "title": "Enum Microsoft365Environment | PnP Core SDK",
    "keywords": "Enum Microsoft365Environment Microsoft 365 environments Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public enum Microsoft365Environment : int China China environment, see https://docs.microsoft.com/en-us/office365/servicedescriptions/office-365-platform-service-description/office-365-operated-by-21vianet Germany German environment, see https://docs.microsoft.com/en-us/office365/servicedescriptions/office-365-platform-service-description/office-365-germany PreProduction Pre-production environment Production Production environment USGovernment GCC US Government environment, see https://docs.microsoft.com/en-us/office365/servicedescriptions/office-365-platform-service-description/office-365-us-government/office-365-us-government USGovernmentDoD DOD US Government environment, see https://docs.microsoft.com/en-us/office365/servicedescriptions/office-365-platform-service-description/office-365-us-government/gcc-high-and-dod USGovernmentHigh GCC High US Government environment, see https://docs.microsoft.com/en-us/office365/servicedescriptions/office-365-platform-service-description/office-365-us-government/gcc-high-and-dod"
  },
  "api/PnP.Core.Services.MicrosoftGraphClient.html": {
    "href": "api/PnP.Core.Services.MicrosoftGraphClient.html",
    "title": "Class MicrosoftGraphClient | PnP Core SDK",
    "keywords": "Class MicrosoftGraphClient Client that handles all Microsoft Graph requests Inheritance Object MicrosoftGraphClient Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class MicrosoftGraphClient : object Constructors MicrosoftGraphClient(HttpClient, ILogger<MicrosoftGraphClient>, IOptions<PnPGlobalSettingsOptions>) Constructs the Microsoft Graph http client Declaration public MicrosoftGraphClient(HttpClient client, ILogger<MicrosoftGraphClient> log, IOptions<PnPGlobalSettingsOptions> options) Parameters HttpClient client Http client instance ILogger < MicrosoftGraphClient > log Logger IOptions < PnPGlobalSettingsOptions > options Settings to configure the http client Properties Client Returns the configured Microsoft Graph http client Declaration public HttpClient Client { get; } Property Value HttpClient"
  },
  "api/PnP.Core.Services.PnPContext.html": {
    "href": "api/PnP.Core.Services.PnPContext.html",
    "title": "Class PnPContext | PnP Core SDK",
    "keywords": "Class PnPContext PnP Context class...the glue between the model and the data stores Inheritance Object PnPContext Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class PnPContext : IDisposable Properties AuthenticationProvider Connected authentication provider Declaration public IAuthenticationProvider AuthenticationProvider { get; } Property Value IAuthenticationProvider CurrentBatch Current batch, used for implicit batching Declaration public Batch CurrentBatch { get; } Property Value Batch Environment Returns the used Microsoft 365 cloud environment Declaration public Microsoft365Environment? Environment { get; } Property Value Nullable < Microsoft365Environment > GraphAlwaysUseBeta If true than all requests to Microsoft Graph use the beta endpoint Declaration public bool GraphAlwaysUseBeta { get; set; } Property Value Boolean GraphCanUseBeta If true than the Graph beta endpoint is used when there's no other option, default approach stays using the v1 endpoint Declaration public bool GraphCanUseBeta { get; set; } Property Value Boolean GraphClient Connected Microsoft Graph client Declaration public MicrosoftGraphClient GraphClient { get; } Property Value MicrosoftGraphClient GraphFirst Controls whether the library will try to use Microsoft Graph over REST whenever that's defined in the model Declaration public bool GraphFirst { get; set; } Property Value Boolean Group Entry point for the Microsoft 365 Group Object Declaration public IGraphGroup Group { get; } Property Value IGraphGroup HasPendingRequests Are there pending requests to execute (in the case of batching) Declaration public bool HasPendingRequests { get; } Property Value Boolean Logger Connected logger Declaration public ILogger Logger { get; } Property Value ILogger RestClient Connected SharePoint REST client Declaration public SharePointRestClient RestClient { get; } Property Value SharePointRestClient Site Entry point for the Site Object Declaration public ISite Site { get; } Property Value ISite Social Entry point for the social-related APIs Declaration public ISocial Social { get; } Property Value ISocial Team Entry point for the Team Object Declaration public ITeam Team { get; } Property Value ITeam TermStore Entry point for the Microsoft 365 TermStore Declaration public ITermStore TermStore { get; } Property Value ITermStore Uri Uri of the SharePoint site we're working against Declaration public Uri Uri { get; } Property Value Uri Web Entry point for the Web Object Declaration public IWeb Web { get; } Property Value IWeb Methods Clone() Clones this context into a new context for the same SharePoint site Declaration public PnPContext Clone() Returns PnPContext New PnPContext Clone(Guid) Clones this context for another SharePoint site Declaration public PnPContext Clone(Guid groupId) Parameters Guid groupId Id of the other Microsoft 365 group to create a PnPContext for Returns PnPContext New PnPContext Clone(String) Clones this context for another SharePoint site provided as configuration Declaration public PnPContext Clone(string name) Parameters String name The name of the SPOContext configuration to use Returns PnPContext New PnPContext for the request config Clone(Uri) Clones this context for another SharePoint site Declaration public PnPContext Clone(Uri uri) Parameters Uri uri Uri of the other SharePoint site Returns PnPContext New PnPContext CloneAsync() Clones this context into a new context for the same SharePoint site Declaration public Task<PnPContext> CloneAsync() Returns Task < PnPContext > New PnPContext CloneAsync(Guid) Clones this context for another SharePoint site Declaration public Task<PnPContext> CloneAsync(Guid groupId) Parameters Guid groupId Id of the other Microsoft 365 group to create a PnPContext for Returns Task < PnPContext > New PnPContext CloneAsync(String) Clones this context for another SharePoint site provided as configuration Declaration public Task<PnPContext> CloneAsync(string name) Parameters String name The name of the SPOContext configuration to use Returns Task < PnPContext > New PnPContext for the request config CloneAsync(Uri) Clones this context for another SharePoint site Declaration public Task<PnPContext> CloneAsync(Uri uri) Parameters Uri uri Uri of the other SharePoint site Returns Task < PnPContext > New PnPContext Dispose() Disposes this PnPContext Declaration public void Dispose() Dispose(Boolean) Disposes this PnPContext Declaration protected virtual void Dispose(bool disposing) Parameters Boolean disposing Do we need to dispose resources Execute(Batch, Boolean) Method to execute a given batch Declaration public List<BatchResult> Execute(Batch batch, bool throwOnError = true) Parameters Batch batch Batch to execute Boolean throwOnError Throw an exception on the first encountered error in the batch Returns PnP.Core.Model.SharePoint.List < BatchResult > The asynchronous task that will be executed Execute(Boolean) Method to execute the current batch Declaration public List<BatchResult> Execute(bool throwOnError = true) Parameters Boolean throwOnError Throw an exception on the first encountered error in the batch Returns PnP.Core.Model.SharePoint.List < BatchResult > The asynchronous task that will be executed ExecuteAsync(Batch, Boolean) Method to execute a given batch Declaration public Task<List<BatchResult>> ExecuteAsync(Batch batch, bool throwOnError = true) Parameters Batch batch Batch to execute Boolean throwOnError Throw an exception on the first encountered error in the batch Returns Task < PnP.Core.Model.SharePoint.List < BatchResult >> The asynchronous task that will be executed ExecuteAsync(Boolean) Method to execute the current batch Declaration public Task<List<BatchResult>> ExecuteAsync(bool throwOnError = true) Parameters Boolean throwOnError Throw an exception on the first encountered error in the batch Returns Task < PnP.Core.Model.SharePoint.List < BatchResult >> The asynchronous task that will be executed NewBatch() Creates a new batch Declaration public Batch NewBatch() Returns Batch Extension Methods PnPContextExtensions.GetSharePointAdmin(PnPContext) PnPContextExtensions.GetSiteCollectionManager(PnPContext) PnPContextExtensions.GetTeamManager(PnPContext) PnPContextExtensions.GetTenantAppManager(PnPContext) PnPContextExtensions.GetSiteCollectionAppManager(PnPContext) PnPContextExtensions.GetMicrosoft365Admin(PnPContext)"
  },
  "api/PnP.Core.Services.PnPContextExtensions.html": {
    "href": "api/PnP.Core.Services.PnPContextExtensions.html",
    "title": "Class PnPContextExtensions | PnP Core SDK",
    "keywords": "Class PnPContextExtensions Extends the PnPContext with additional functionality Inheritance Object PnPContextExtensions Namespace : PnP.Core.Services Assembly : PnP.Core.Admin.dll Syntax public static class PnPContextExtensions : object Methods GetMicrosoft365Admin(PnPContext) Extends a PnPContext with Microsoft 365 admin functionality Declaration public static IMicrosoft365Admin GetMicrosoft365Admin(this PnPContext context) Parameters PnPContext context PnPContext to extend Returns IMicrosoft365Admin An IMicrosoft365Admin instance enabling Microsoft 365 admin operations GetSharePointAdmin(PnPContext) Extends a PnPContext with SharePoint admin functionality Declaration public static ISharePointAdmin GetSharePointAdmin(this PnPContext context) Parameters PnPContext context PnPContext to extend Returns ISharePointAdmin An ISharePointAdmin instance enabling SharePoint admin operations GetSiteCollectionAppManager(PnPContext) Extends a PnPContext with site collection Application Lifecycle Management (ALM) functionality Declaration public static ISiteCollectionAppManager GetSiteCollectionAppManager(this PnPContext context) Parameters PnPContext context PnPContext to extend Returns ISiteCollectionAppManager An ISiteCollectionAppManager instance enabling site collection app catalog operations GetSiteCollectionManager(PnPContext) Extends a PnPContext with site collection admin functionality Declaration public static ISiteCollectionManager GetSiteCollectionManager(this PnPContext context) Parameters PnPContext context PnPContext to extend Returns ISiteCollectionManager An ISiteCollectionManager instance enabling site collection admin operations GetTeamManager(PnPContext) Extends a PnPContext with Teams admin functionality Declaration public static ITeamManager GetTeamManager(this PnPContext context) Parameters PnPContext context PnPContext to extend Returns ITeamManager An ISiteCollectionManager instance enabling site collection admin operations GetTenantAppManager(PnPContext) Extends a PnPContext with tenant Application Lifecycle Management (ALM) functionality Declaration public static ITenantAppManager GetTenantAppManager(this PnPContext context) Parameters PnPContext context PnPContext to extend Returns ITenantAppManager An ITenantAppManager instance enabling tenant app catalog operations"
  },
  "api/PnP.Core.Services.PnPContextFactory.html": {
    "href": "api/PnP.Core.Services.PnPContextFactory.html",
    "title": "Class PnPContextFactory | PnP Core SDK",
    "keywords": "Class PnPContextFactory Public factory service to create PnPContext object instances Inheritance Object PnPContextFactory Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class PnPContextFactory : object, IPnPContextFactory Constructors PnPContextFactory(ILogger<PnPContext>, SharePointRestClient, MicrosoftGraphClient, IOptions<PnPContextFactoryOptions>, IOptions<PnPGlobalSettingsOptions>) Default constructor for PnPContextFactory Declaration public PnPContextFactory(ILogger<PnPContext> logger, SharePointRestClient sharePointRestClient, MicrosoftGraphClient microsoftGraphClient, IOptions<PnPContextFactoryOptions> contextOptions, IOptions<PnPGlobalSettingsOptions> globalOptions) Parameters ILogger < PnPContext > logger Connected logger SharePointRestClient sharePointRestClient SharePoint REST http client to use MicrosoftGraphClient microsoftGraphClient Microsoft Graph http client to use IOptions < PnPContextFactoryOptions > contextOptions PnPContextFactory options IOptions < PnPGlobalSettingsOptions > globalOptions Global options to use Properties ContextOptions Options used to configure this PnPContext Declaration protected PnPContextFactoryOptions ContextOptions { get; } Property Value PnPContextFactoryOptions GlobalOptions Options used to configure this PnPContext Declaration protected PnPGlobalSettingsOptions GlobalOptions { get; } Property Value PnPGlobalSettingsOptions Log Connected logger Declaration protected ILogger Log { get; } Property Value ILogger MicrosoftGraphClient Connected Microsoft Graph http client Declaration protected MicrosoftGraphClient MicrosoftGraphClient { get; } Property Value MicrosoftGraphClient SharePointRestClient Connected SharePoint REST http client Declaration protected SharePointRestClient SharePointRestClient { get; } Property Value SharePointRestClient Methods Create(Guid, IAuthenticationProvider, PnPContextOptions) Creates a new instance of PnPContext based on a provided group and Authentication Provider instance Declaration public virtual PnPContext Create(Guid groupId, IAuthenticationProvider authenticationProvider, PnPContextOptions options = null) Parameters Guid groupId The id of an Microsoft 365 group IAuthenticationProvider authenticationProvider The Authentication Provider to use to authenticate within the PnPContext PnPContextOptions options Options used to configure the created context Returns PnPContext A PnPContext object based on the provided configuration name Implements IPnPContextFactory.Create(Guid, IAuthenticationProvider, PnPContextOptions) Create(Guid, PnPContextOptions) Creates a new instance of PnPContext based on a provided group and using the default Authentication Provider Declaration public virtual PnPContext Create(Guid groupId, PnPContextOptions options = null) Parameters Guid groupId The id of an Microsoft 365 group PnPContextOptions options Options used to configure the created context Returns PnPContext A PnPContext object based on the provided configuration name Implements IPnPContextFactory.Create(Guid, PnPContextOptions) Create(String, Action<IAuthenticationProvider>, PnPContextOptions) Creates a new instance of PnPContext based on a provided configuration name Declaration public virtual PnPContext Create(string name, Action<IAuthenticationProvider> initializeAuthenticationProvider, PnPContextOptions options = null) Parameters String name The name of the PnPContext configuration to use Action < IAuthenticationProvider > initializeAuthenticationProvider The function to initialize the authentication provider PnPContextOptions options Options used to configure the created context Returns PnPContext A PnPContext object based on the provided configuration name Implements IPnPContextFactory.Create(String, Action<IAuthenticationProvider>, PnPContextOptions) Create(String, PnPContextOptions) Creates a new instance of PnPContext based on a provided configuration name Declaration public virtual PnPContext Create(string name, PnPContextOptions options = null) Parameters String name The name of the PnPContext configuration to use PnPContextOptions options Options used to configure the created context Returns PnPContext A PnPContext object based on the provided configuration name Implements IPnPContextFactory.Create(String, PnPContextOptions) Create(Uri, IAuthenticationProvider, PnPContextOptions) Creates a new instance of PnPContext based on a provided configuration name Declaration public virtual PnPContext Create(Uri url, IAuthenticationProvider authenticationProvider, PnPContextOptions options = null) Parameters Uri url The URL of the PnPContext as a URI IAuthenticationProvider authenticationProvider The Authentication Provider to use to authenticate within the PnPContext PnPContextOptions options Options used to configure the created context Returns PnPContext A PnPContext object based on the provided configuration name Implements IPnPContextFactory.Create(Uri, IAuthenticationProvider, PnPContextOptions) Create(Uri, PnPContextOptions) Creates a new instance of PnPContext based on a provided configuration name Declaration public virtual PnPContext Create(Uri url, PnPContextOptions options = null) Parameters Uri url The URL of the PnPContext as a URI PnPContextOptions options Options used to configure the created context Returns PnPContext A PnPContext object based on the provided configuration name Implements IPnPContextFactory.Create(Uri, PnPContextOptions) CreateAsync(Guid, IAuthenticationProvider, PnPContextOptions) Creates a new instance of PnPContext based on a provided group and Authentication Provider instance Declaration public virtual Task<PnPContext> CreateAsync(Guid groupId, IAuthenticationProvider authenticationProvider, PnPContextOptions options = null) Parameters Guid groupId The id of an Microsoft 365 group IAuthenticationProvider authenticationProvider The Authentication Provider to use to authenticate within the PnPContext PnPContextOptions options Options used to configure the created context Returns Task < PnPContext > A PnPContext object based on the provided configuration name Implements IPnPContextFactory.CreateAsync(Guid, IAuthenticationProvider, PnPContextOptions) CreateAsync(Guid, PnPContextOptions) Creates a new instance of PnPContext based on a provided group and using the default Authentication Provider Declaration public virtual Task<PnPContext> CreateAsync(Guid groupId, PnPContextOptions options = null) Parameters Guid groupId The id of an Microsoft 365 group PnPContextOptions options Options used to configure the created context Returns Task < PnPContext > A PnPContext object based on the provided configuration name Implements IPnPContextFactory.CreateAsync(Guid, PnPContextOptions) CreateAsync(String, Action<IAuthenticationProvider>, PnPContextOptions) Creates a new instance of PnPContext based on a provided configuration name Declaration public virtual Task<PnPContext> CreateAsync(string name, Action<IAuthenticationProvider> initializeAuthenticationProvider, PnPContextOptions options = null) Parameters String name The name of the PnPContext configuration to use Action < IAuthenticationProvider > initializeAuthenticationProvider The function to initialize the authentication provider PnPContextOptions options Options used to configure the created context Returns Task < PnPContext > A PnPContext object based on the provided configuration name Implements IPnPContextFactory.CreateAsync(String, Action<IAuthenticationProvider>, PnPContextOptions) CreateAsync(String, PnPContextOptions) Creates a new instance of PnPContext based on a provided configuration name Declaration public virtual Task<PnPContext> CreateAsync(string name, PnPContextOptions options = null) Parameters String name The name of the PnPContext configuration to use PnPContextOptions options Options used to configure the created context Returns Task < PnPContext > A PnPContext object based on the provided configuration name Implements IPnPContextFactory.CreateAsync(String, PnPContextOptions) CreateAsync(Uri, IAuthenticationProvider, PnPContextOptions) Creates a new instance of PnPContext based on a provided configuration name Declaration public virtual Task<PnPContext> CreateAsync(Uri url, IAuthenticationProvider authenticationProvider, PnPContextOptions options = null) Parameters Uri url The URL of the PnPContext as a URI IAuthenticationProvider authenticationProvider The Authentication Provider to use to authenticate within the PnPContext PnPContextOptions options Options used to configure the created context Returns Task < PnPContext > A PnPContext object based on the provided configuration name Implements IPnPContextFactory.CreateAsync(Uri, IAuthenticationProvider, PnPContextOptions) CreateAsync(Uri, PnPContextOptions) Creates a new instance of PnPContext based on a provided configuration name Declaration public virtual Task<PnPContext> CreateAsync(Uri url, PnPContextOptions options = null) Parameters Uri url The URL of the PnPContext as a URI PnPContextOptions options Options used to configure the created context Returns Task < PnPContext > A PnPContext object based on the provided configuration name Implements IPnPContextFactory.CreateAsync(Uri, PnPContextOptions)"
  },
  "api/PnP.Core.Services.PnPContextFactoryCollectionExtensions.html": {
    "href": "api/PnP.Core.Services.PnPContextFactoryCollectionExtensions.html",
    "title": "Class PnPContextFactoryCollectionExtensions | PnP Core SDK",
    "keywords": "Class PnPContextFactoryCollectionExtensions Extension class for the IServiceCollection type to provide supporting methods for the PnPContextFactory service Inheritance Object PnPContextFactoryCollectionExtensions Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public static class PnPContextFactoryCollectionExtensions : object Methods AddPnPContextFactory(IServiceCollection) Adds the PnPContextFactory to the collection of services Declaration public static IServiceCollection AddPnPContextFactory(this IServiceCollection collection) Parameters IServiceCollection collection Collection of loaded services Returns IServiceCollection Collection of loaded services AddPnPContextFactory(IServiceCollection, Action<PnPContextFactoryOptions>) Adds the PnPContextFactory to the collection of services with options Declaration public static IServiceCollection AddPnPContextFactory(this IServiceCollection collection, Action<PnPContextFactoryOptions> options) Parameters IServiceCollection collection Collection of loaded services Action < PnPContextFactoryOptions > options PnPContextFactory configuration options Returns IServiceCollection Collection of loaded services"
  },
  "api/PnP.Core.Services.PnPContextFactoryOptions.html": {
    "href": "api/PnP.Core.Services.PnPContextFactoryOptions.html",
    "title": "Class PnPContextFactoryOptions | PnP Core SDK",
    "keywords": "Class PnPContextFactoryOptions Defines the options to configure the PnPContextFactory object Inheritance Object PnPContextFactoryOptions Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class PnPContextFactoryOptions : object Properties Configurations Collection of configurations for PnPContextFactory Declaration public List<PnPContextFactoryOptionsConfiguration> Configurations { get; } Property Value List < PnPContextFactoryOptionsConfiguration > DefaultAuthenticationProvider The Default Authentication Provider configuration Declaration public IAuthenticationProvider DefaultAuthenticationProvider { get; set; } Property Value IAuthenticationProvider GraphAlwaysUseBeta If true than all requests to Microsoft Graph use the beta endpoint Declaration public bool GraphAlwaysUseBeta { get; set; } Property Value Boolean GraphCanUseBeta If true than the Graph beta endpoint is used when there's no other option, default approach stays using the v1 endpoint Declaration public bool GraphCanUseBeta { get; set; } Property Value Boolean GraphFirst Controls whether the library will try to use Microsoft Graph over REST whenever that's defined in the model Declaration public bool GraphFirst { get; set; } Property Value Boolean"
  },
  "api/PnP.Core.Services.PnPContextFactoryOptionsConfiguration.html": {
    "href": "api/PnP.Core.Services.PnPContextFactoryOptionsConfiguration.html",
    "title": "Class PnPContextFactoryOptionsConfiguration | PnP Core SDK",
    "keywords": "Class PnPContextFactoryOptionsConfiguration PnPContext configuration options Inheritance Object PnPContextFactoryOptionsConfiguration Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class PnPContextFactoryOptionsConfiguration : object Properties AuthenticationProvider The Authentication Provider configuration Declaration public IAuthenticationProvider AuthenticationProvider { get; set; } Property Value IAuthenticationProvider Name The Name of the configuration Declaration public string Name { get; set; } Property Value String SiteUrl The URL of the target SPO Site Declaration public Uri SiteUrl { get; set; } Property Value Uri"
  },
  "api/PnP.Core.Services.PnPContextOptions.html": {
    "href": "api/PnP.Core.Services.PnPContextOptions.html",
    "title": "Class PnPContextOptions | PnP Core SDK",
    "keywords": "Class PnPContextOptions Options used when a PnPContext is created Inheritance Object PnPContextOptions Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class PnPContextOptions : object Properties AdditionalSitePropertiesOnCreate Additional ISite properties to load when creating a new PnPContext . Declaration public IEnumerable<Expression<Func<ISite, object>>> AdditionalSitePropertiesOnCreate { get; set; } Property Value IEnumerable < Expression < Func < ISite , Object >>> AdditionalWebPropertiesOnCreate Additional IWeb properties to load when creating a new PnPContext . Declaration public IEnumerable<Expression<Func<IWeb, object>>> AdditionalWebPropertiesOnCreate { get; set; } Property Value IEnumerable < Expression < Func < IWeb , Object >>>"
  },
  "api/PnP.Core.Services.PnPGlobalSettingsOptions.html": {
    "href": "api/PnP.Core.Services.PnPGlobalSettingsOptions.html",
    "title": "Class PnPGlobalSettingsOptions | PnP Core SDK",
    "keywords": "Class PnPGlobalSettingsOptions PnP Core SDK settings class Inheritance Object PnPGlobalSettingsOptions Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class PnPGlobalSettingsOptions : object Constructors PnPGlobalSettingsOptions() Default constructor Declaration public PnPGlobalSettingsOptions() Properties AADTenantId AAD tenant id, used for telemetry purposes. Can be customized via configuration Declaration public Guid AADTenantId { get; set; } Property Value Guid DisableTelemetry Turns on/off telemetry, can be customized via configuration. Defaults to false. Declaration public bool DisableTelemetry { get; set; } Property Value Boolean Environment The Microsoft 365 cloud environment that's used Declaration public Microsoft365Environment? Environment { get; set; } Property Value Nullable < Microsoft365Environment > HttpAzureActiveDirectoryDelayInSeconds How many seconds to wait for the next retry attempt. Defaults to 3 Declaration public int HttpAzureActiveDirectoryDelayInSeconds { get; set; } Property Value Int32 HttpAzureActiveDirectoryMaxRetries When not using retry-after, how many times can a retry be made. Defaults to 10 Declaration public int HttpAzureActiveDirectoryMaxRetries { get; set; } Property Value Int32 HttpAzureActiveDirectoryUseIncrementalDelay Use an incremental strategy for the delay: each retry doubles the previous delay time. Defaults to true Declaration public bool HttpAzureActiveDirectoryUseIncrementalDelay { get; set; } Property Value Boolean HttpAzureActiveDirectoryUseRetryAfterHeader Use the Retry-After header for calculating the delay in case of a retry. Defaults to true Declaration public bool HttpAzureActiveDirectoryUseRetryAfterHeader { get; set; } Property Value Boolean HttpMicrosoftGraphDelayInSeconds How many seconds to wait for the next retry attempt. Defaults to 3 Declaration public int HttpMicrosoftGraphDelayInSeconds { get; set; } Property Value Int32 HttpMicrosoftGraphMaxRetries When not using retry-after, how many times can a retry be made. Defaults to 10 Declaration public int HttpMicrosoftGraphMaxRetries { get; set; } Property Value Int32 HttpMicrosoftGraphUseIncrementalDelay Use an incremental strategy for the delay: each retry doubles the previous delay time. Defaults to true Declaration public bool HttpMicrosoftGraphUseIncrementalDelay { get; set; } Property Value Boolean HttpMicrosoftGraphUseRetryAfterHeader Use the Retry-After header for calculating the delay in case of a retry. Defaults to true Declaration public bool HttpMicrosoftGraphUseRetryAfterHeader { get; set; } Property Value Boolean HttpSharePointRestDefaultPageSize Defines the default page size for querying items in SharePoint REST Declaration public int HttpSharePointRestDefaultPageSize { get; set; } Property Value Int32 HttpSharePointRestDelayInSeconds How many seconds to wait for the next retry attempt. Defaults to 3 Declaration public int HttpSharePointRestDelayInSeconds { get; set; } Property Value Int32 HttpSharePointRestMaxRetries When not using retry-after, how many times can a retry be made. Defaults to 10 Declaration public int HttpSharePointRestMaxRetries { get; set; } Property Value Int32 HttpSharePointRestUseIncrementalDelay Use an incremental strategy for the delay: each retry doubles the previous delay time. Defaults to true Declaration public bool HttpSharePointRestUseIncrementalDelay { get; set; } Property Value Boolean HttpSharePointRestUseRetryAfterHeader Use the Retry-After header for calculating the delay in case of a retry. Defaults to false Declaration public bool HttpSharePointRestUseRetryAfterHeader { get; set; } Property Value Boolean HttpTimeout Max duration of a http request in seconds. Defaults to 100 seconds, set to value -1 for an infinite timeout Declaration public int HttpTimeout { get; set; } Property Value Int32 HttpUserAgent User agent value, can be customized via configuration Declaration public string HttpUserAgent { get; } Property Value String VersionTag Version tag used in telemetry Declaration public string VersionTag { get; } Property Value String"
  },
  "api/PnP.Core.Services.SharePointRestClient.html": {
    "href": "api/PnP.Core.Services.SharePointRestClient.html",
    "title": "Class SharePointRestClient | PnP Core SDK",
    "keywords": "Class SharePointRestClient Client that handles all SharePoint REST requests Inheritance Object SharePointRestClient Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class SharePointRestClient : object Constructors SharePointRestClient(HttpClient, ILogger<SharePointRestClient>, IOptions<PnPGlobalSettingsOptions>) Default Constructor Declaration public SharePointRestClient(HttpClient client, ILogger<SharePointRestClient> log, IOptions<PnPGlobalSettingsOptions> options) Parameters HttpClient client Http Client coming from the .Net http client factory ILogger < SharePointRestClient > log Logger service IOptions < PnPGlobalSettingsOptions > options Options service Properties Client Http client which needs to be used for making a SharePoint REST call Declaration public HttpClient Client { get; } Property Value HttpClient"
  },
  "api/PnP.Core.SharePointRestError.html": {
    "href": "api/PnP.Core.SharePointRestError.html",
    "title": "Class SharePointRestError | PnP Core SDK",
    "keywords": "Class SharePointRestError SharePoint Rest service error Inheritance Object BaseError ServiceError SharePointRestError Inherited Members ServiceError.HttpResponseCode ServiceError.Message ServiceError.ClientRequestId ServiceError.Code BaseError.Type BaseError.PnPCorrelationId BaseError.AdditionalData BaseError.AddAdditionalData(String, Object) Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class SharePointRestError : ServiceError Constructors SharePointRestError(ErrorType, Int32, String, Dictionary<String, String>) Default constructor for the SharePointRestError error Declaration public SharePointRestError(ErrorType type, int httpResponseCode, string response, Dictionary<string, string> responseHeaders = null) Parameters ErrorType type ErrorType type of the error Int32 httpResponseCode Http response code of the service request that failed String response Service request response content Dictionary < String , String > responseHeaders Optional collection of request response headers Properties ServerErrorCode SharePoint server error code Declaration public long ServerErrorCode { get; } Property Value Int64 Methods ToString() Outputs a SharePointRestError to a string representation Declaration public override string ToString() Returns String String representation"
  },
  "api/PnP.Core.SharePointRestServiceException.html": {
    "href": "api/PnP.Core.SharePointRestServiceException.html",
    "title": "Class SharePointRestServiceException | PnP Core SDK",
    "keywords": "Class SharePointRestServiceException Microsoft SharePoint REST Service exception Inheritance Object PnPException ServiceException SharePointRestServiceException Inherited Members PnPException.Error Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class SharePointRestServiceException : ServiceException Constructors SharePointRestServiceException(ErrorType, Int32, String, Dictionary<String, String>) Creates a SharePointRestServiceException using the provided error type, http response code and request response Declaration public SharePointRestServiceException(ErrorType type, int httpResponseCode, string response, Dictionary<string, string> responseHeaders = null) Parameters ErrorType type Type of the error Int32 httpResponseCode Http response code of the service request String response Response of the service request that errored out Dictionary < String , String > responseHeaders Optional collection of request response headers Methods ToString() Outputs a SharePointRestServiceException to a string representation Declaration public override string ToString() Returns String String representation"
  },
  "contributing/configuring-for-auth-tests.html": {
    "href": "contributing/configuring-for-auth-tests.html",
    "title": "Configuring the environment to run PnP.Core.Auth tests | PnP Core SDK",
    "keywords": "Configuring the environment to run PnP.Core.Auth tests The PnP.Core.Auth library has some requirements in order to properly execute its automated tests (PnP.Core.Auth.Test). Specifically, you need to: Register in Azure Active Directory a generic test application for authentication tests Register in Azure Active Directory a frontend application for the OnBehalfOf authentication tests Register in Azure Active Directory a backend application for the OnBehalfOf authentication tests Enable the frontend application to consume the backend application Configure a set of credentials in the Windows Credential Manager Configure the appsettings.json file of the PnP.Core.Auth.Test project Register in AAD a generic test application for authentication tests In order to execute both tests with application and delegated access tokens, you will need to register an application in AAD both as app-only and delegated. The easiest way to register an application in Azure Active Directory for app-only is to use the PnP PowerShell cmdlets. Specifically you can use the Register-PnPAzureADApp command with the following syntax: $app = Register-PnPAzureADApp -ApplicationName \"PnP.Core.Test\" -Tenant contoso.onmicrosoft.com -OutPath c:\\temp -CertificatePassword (ConvertTo-SecureString -String \"password\" -AsPlainText -Force) -Scopes \"MSGraph.Group.ReadWrite.All\",\"MSGraph.Directory.ReadWrite.All\",\"SPO.Sites.FullControl.All\",\"SPO.TermStore.ReadWrite.All\",\"SPO.User.ReadWrite.All\" -Store CurrentUser The above command will register for you in Azure Active Directory an app with name PnP.Core.Test , with a self-signed certificate that will be also saved on your filesystem under the c:\\temp folder (remember to create the folder or to provide the path of an already existing folder), with a certificate password value of password (you should provide your own strong password, indeed). Remember to replace contoso.onmicrosoft.com with your Azure AD tenant name, which typically is company.onmicrosoft.com . The permissions granted to the app will be: SharePoint -> Application Permissions -> Sites -> Sites.FullControl.All SharePoint -> Application Permissions -> TermStore -> TermStore.ReadWrite.All SharePoint -> Application Permissions -> User -> User.ReadWrite.All Microsoft Graph -> Application Permissions -> Group -> Group.ReadWrite.All Microsoft Graph -> Application Permissions -> Directory -> Directory.ReadWrite.All Executing the command you will first have to authenticate against the target tenant, providing the credentials of a Global Tenant Admin. Then you will see a message like the following one: Waiting 60 seconds to launch consent flow in a browser window. This wait is required to make sure that Azure AD is able to initialize all required artifacts......... Almost 60 seconds later, the command will prompt you for authentication again and to grant the selected permissions to the app you are registering. Once you have done that, in the $app variable you will find information about the just registered app. You can copy in your clipboard the Application ID (Client ID) executing the following command: $app.'AzureAppId/ClientId' | clip And you can copy in your clipboard the thumbprint of the generated X.509 certificate executing the following command: $app.'Certificate Thumbprint' | clip Paste this copied values in a safe place, because you will need them soon. Now, configure the same application also for delegated access tokens following the below steps: Navigate to https://aad.portal.azure.com/ Click on Azure Active Directory from the left navigation Click on App registrations in the Manage left navigation group Write the Client ID of the just created application in the search box Select the application with name PnP.Core.Test in the list of results Click on the API Permissions in the Manage left navigation group Click on Add Permissions and add the following permissions to this application: SharePoint -> Delegated Permissions -> AllSites -> AllSites.FullControl SharePoint -> Delegated Permissions -> TermStore -> TermStore.ReadWrite.All SharePoint -> Delegated Permissions -> User -> User.ReadWrite.All Microsoft Graph -> Delegated Permissions -> Group -> Group.ReadWrite.All Microsoft Graph -> Delegated Permissions -> User -> User.Read Microsoft Graph -> Delegated Permissions -> Directory -> Directory.ReadWrite.All At the end, the overall list of permissions for the application will be the following one: SharePoint -> Delegated Permissions -> AllSites -> AllSites.FullControl SharePoint -> Delegated Permissions -> TermStore -> TermStore.ReadWrite.All SharePoint -> Delegated Permissions -> User -> User.ReadWrite.All SharePoint -> Application Permissions -> Sites -> Sites.FullControl.All SharePoint -> Application Permissions -> TermStore -> TermStore.ReadWrite.All SharePoint -> Application Permissions -> User -> User.ReadWrite.All Microsoft Graph -> Delegated Permissions -> Group -> Group.ReadWrite.All Microsoft Graph -> Delegated Permissions -> User -> User.Read Microsoft Graph -> Delegated Permissions -> Directory -> Directory.ReadWrite.All Microsoft Graph -> Application Permissions -> Group -> Group.ReadWrite.All Microsoft Graph -> Application Permissions -> Directory -> Directory.ReadWrite.All Click on the Grant admin consent for button to consent to these permissions for the users in your organization Click on Authentication in the Manage left navigation group Change Default client type to Treat application as public client and hit Save Click on Authentication and then click on Add a platform , choose Mobile and desktop applications and provide http://localhost as the Redirect URI Register in AAD a frontend application for the OnBehalfOf authentication tests You need to register an application that will be the frontend for the OnBehalfOf flow. Follow the below steps: Navigate to https://aad.portal.azure.com/ Click on Azure Active Directory from the left navigation Click on App registrations in the Manage left navigation group Click on New registration Give the application a name (e.g. PnP.Core.Test.OnBehalfOf.Frontend ) and click on Register Copy the Application ID (Client ID) from the Overview page, you'll need this GUID value later on Copy the Directory ID (Tenant ID) from the Overview page, you'll need this GUID value later on Click on Authentication and then click on Add a platform , choose Mobile and desktop applications and provide http://localhost as the Redirect URI Register in AAD a backend application for the OnBehalfOf authentication tests You need to register an application that will be the backend for the OnBehalfOf flow. Follow the below steps: Navigate to https://aad.portal.azure.com/ Click on Azure Active Directory from the left navigation Click on App registrations in the Manage left navigation group Click on New registration Give the application a name (e.g. PnP.Core.Test.OnBehalfOf.Backend ) and click on Register Copy the Application ID (Client ID) from the Overview page, you'll need this GUID value later on Copy the Directory ID (Tenant ID) from the Overview page, you'll need this GUID value later on Click on API Permissions in the Manage left navigation group Click on Add Permissions and add the permissions you want to give to this application. Below list is a recommendation, you can grant less permissions but that might result in some PnP Core SDK calls to fail due getting access denied errors. SharePoint -> Delegated Permissions -> AllSites -> AllSites.Read Microsoft Graph -> Delegated Permissions -> Sites -> Sites.Read.All Microsoft Graph -> Delegated Permissions -> User -> User.Read Click on the Grant admin consent for button to consent to these permissions for the users in your organization Click on the Expose an API in the Manage left navigation group Configure the Application ID URI with a value like api://pnp.core.test.onbehalfof.backend Click on Add a scope and configure a new scope with name Backend.Consume with Admins Only consent. Provide a display name and a description for admins and click Add scope . Click on the Manifest in the Manage left navigation group In the JSON file representing the manifest of the application search for the knownClientApplications value. It is an array of IDs and assign to it an array made of a single item, which is the Client ID of the application with name PnP.Core.Test.OnBehalfOf.Frontend . Save the updated manifest Click on Certificates & secrets in the Manage left navigation group Click on New client secret to create a new client secret for the backend application. Choose a name (for example ClientSecret ) and a lifetime (for example 2 years). Click on Add and store the Client Secret value in a safe place Click on Upload certificate , browse your file system for the .CER file that you created when you registered the application with PowerShell (the path should c:\\temp , unless you changed it, and the file should be PnP.Core.Test.CER ) Enable the frontend application to consume the backend application Now, you need to go back to the application registered with name PnP.Core.Test.OnBehalfOf.Frontend and update its setting accordingly to the following steps: Navigate to https://aad.portal.azure.com/ Click on Azure Active Directory from the left navigation Click on App registrations in the Manage left navigation group Write PnP.Core.Test.OnBehalfOf.Frontend in the search box Select the application with name PnP.Core.Test.OnBehalfOf.Frontend in the list of results Click on the API Permissions in the Manage left navigation group Click on Add Permissions , select My APIs and choose PnP.Core.Test.OnBehalfOf.Backend Select the permission with name Backend.Consume Click on the Grant admin consent for button to consent to these permissions for the users in your organization Now the frontend application is enabled to consume the backend application. Configure a set of credentials in the Windows Credential Manager In order to test the CredentialManagerAuthenticationProvider you need to register a set of credentials in the Windows Credential Manager, by following the below steps. Click on the Windows Start button in the taskbar and type credential manager . Click on the Credential Manager link. Go to Windows Credentials and click on Add a generic credential . Give the credential a name (e.g. Contoso), a user name (e.g. joe@contoso.onmicrosoft.com) and a password. Hit OK to save. Copy in a safe place the name you provided to the Credential Manager item, because you will reuse it shortly. Configure the appsettings.json file of the PnP.Core.Auth.Test project Copy the file appsettings.copyme.json defined in the root folder of the PnP.Core.Auth.Test project and paste it to create a new copy. Rename the copied file with a name like appsettings.yourname.json , where yourname should be replaced with something the identifies you (like your name or your company name). Now copy the file env.sample defined in the root folder of the PnP.Core.Auth.Test project and paste it to create a new copy. Rename the copied file with name env.txt . Open the file env.txt and write in its content the value that you choose for the yourname token in the name of the appsettings.json file. For example, if you renamed the settings file as appsettings.contoso.json you will have to write contoso as the unique content of the env.txt file. Open the appsettings.yourname.json file, it will look like the following one. { \"PnPCore\": { \"DisableTelemetry\": \"true\", \"PnPContext\": { \"GraphFirst\": \"true\", \"GraphCanUseBeta\": \"true\", \"GraphAlwaysUseBeta\": \"false\" }, \"Credentials\": { \"DefaultConfiguration\": \"credentialManager\", \"Configurations\": { \"usernamePassword\": { \"ClientId\": \"{PnP.Core.Test-ClientId}\", \"TenantId\": \"{TenantId}\", \"UsernamePassword\": { \"Username\": \"{Test-Username}\", \"Password\": \"{Test-Password}\" } }, \"credentialManager\": { \"ClientId\": \"{PnP.Core.Test-ClientId}\", \"TenantId\": \"{TenantId}\", \"CredentialManager\": { \"CredentialManagerName\": \"{Credential-Manager}\" } }, \"onBehalfOf\": { \"ClientId\": \"{PnP.Core.Test.OnBehalfOf.Backend-ClientID}\", \"TenantId\": \"{TenantId}\", \"OnBehalfOf\": { \"StoreName\": \"My\", \"StoreLocation\": \"CurrentUser\", \"Thumbprint\": \"{Backend-Certificate-Thumbprint}\", \"ClientSecret\": \"{Backend-Client-Secret}\" } }, \"interactive\": { \"ClientId\": \"{PnP.Core.Test-ClientId}\", \"TenantId\": \"{TenantId}\", \"Interactive\": { \"RedirectUri\": \"http://localhost\" } }, \"x509Certificate\": { \"ClientId\": \"{PnP.Core.Test-ClientId}\", \"TenantId\": \"{TenantId}\", \"X509Certificate\": { \"StoreName\": \"My\", \"StoreLocation\": \"CurrentUser\", \"ThumbPrint\": \"{Certificate-Thumbprint}\" } }, \"onBehalfFrontEnd\": { \"ClientId\": \"{PnP.Core.Test.OnBehalfOf.Frontend-ClientID}\", \"TenantId\": \"{TenantId}\", \"Interactive\": { \"RedirectUri\": \"http://localhost\" } }, \"deviceCode\": { \"ClientId\": \"{PnP.Core.Test-ClientId}\", \"TenantId\": \"{TenantId}\", \"DeviceCode\": { \"RedirectUri\": \"http://localhost\" } }, \"externalRealProvider\": { \"ClientId\": \"{PnP.Core.Test-ClientId}\", \"TenantId\": \"{TenantId}\", \"CredentialManager\": { \"CredentialManagerName\": \"{Credential-Manager}\" } } } }, \"Sites\": { \"TestSiteCredentialManager\": { \"SiteUrl\": \"https://contoso.sharepoint.com/sites/pnpcoresdktestgroup\", \"AuthenticationProviderName\": \"credentialManager\" }, \"TestSiteUsernamePassword\": { \"SiteUrl\": \"https://contoso.sharepoint.com/sites/pnpcoresdktestgroup\", \"AuthenticationProviderName\": \"usernamePassword\" }, \"TestSiteInteractive\": { \"SiteUrl\": \"https://contoso.sharepoint.com/sites/pnpcoresdktestgroup\", \"AuthenticationProviderName\": \"interactive\" }, \"TestSiteOnBehalfOf\": { \"SiteUrl\": \"https://contoso.sharepoint.com/sites/pnpcoresdktestgroup\", \"AuthenticationProviderName\": \"onBehalfOf\" }, \"TestSiteX509Certificate\": { \"SiteUrl\": \"https://contoso.sharepoint.com/sites/pnpcoresdktestgroup\", \"AuthenticationProviderName\": \"x509Certificate\" }, \"TestSiteDeviceCode\": { \"SiteUrl\": \"https://contoso.sharepoint.com/sites/pnpcoresdktestgroup\", \"AuthenticationProviderName\": \"deviceCode\" } } }, \"Logging\": { \"LogLevel\": { \"Default\": \"Debug\" } } } In the file replace: {PnP.Core.Test-ClientId} with the ClientId of the PnP.Core.Test application that you registered before {TenantId} with the TenantId of your target tenant {Test-Username} with the username (UPN) of a user that you want to use for tests and that must have access to the target test SharePoint sites and Teams. It might be a user account dedicated to tests. {Test-Password} with the password of the username declared in the previous step {Credential-Manager} with the name of the Credential Manager item that you created before {Certificate-Thumbprint} with the thumbprint of the certificate created before Lastly, replace all the occurrences of the URL of the site https://contoso.sharepoint.com/sites/pnpcoresdktestgroup with the URL of a site that you want to use for testing purposes."
  },
  "contributing/event handlers.html": {
    "href": "contributing/event handlers.html",
    "title": "Event handlers | PnP Core SDK",
    "keywords": "Event handlers When you add/extend the model, you will have an option to use event handlers. This article lists and explains the available event handlers, providing short samples. Event handler overview Event handler Delegate Description AddApiCallHandler Task<ApiCall> AddApiCall(Dictionary<string, object> additionalInformation); When you want to implement Add on a model class you need to use this event handler GetApiCallOverrideHandler Task<ApiCallRequest> GetApiCallOverride(ApiCallRequest input); You can use this handler to override or cancel the get API call that was created based upon the model decoration UpdateApiCallOverrideHandler Task<ApiCallRequest> UpdateApiCallOverride(ApiCallRequest input); You can use this handler to override or cancel the update API call that was created based upon the model decoration DeleteApiCallOverrideHandler Task<ApiCallRequest> DeleteApiCallOverride(ApiCallRequest input); You can use this handler to override or cancel the delete API call that was created based upon the model decoration MappingHandler TResult Func<in T, out TResult>(T arg); Use this handler to customize how the JSON received from the server is mapped to the model. Typically used to handle enumerations and special fields PostMappingHandler void Action<in T>(T obj); This handler is fired after the complete JSON to model mapping was done and allows you to perform extra logic using the JSON snippet received from the server ValidateUpdateHandler void ValidateUpdate(ref FieldUpdateRequest fieldUpdateRequest); If you want to perform checks before you allow a property in the model to be updated, then use this event handler Event handlers in the model lifecycle Event handlers fire in a certain order when triggered by an action on the model. In below example a Team is loaded requiring a get request, as such the GetApiCallOverrideHandler fires. Unless the get request is cancelled in the event handler, the server is queried and JSON results are returned. During mapping of the JSON results to the model the MappingHandler is fired for each property for which there's no default mapping. Finally the full JSON to model mapping is done and the PostMappingHandler fires allowing you to perform extra processing if needed. AddApiCallHandler This handler is required when you want to implement Add functionality on a model class. In the handler you use the properties of the model class instance to be added ( DisplayName and Description ) to construct the JSON payload, which you then wrap into the respective Microsoft Graph or SharePoint REST API call. internal partial class TeamChannel { private const string baseUri = \"teams/{Parent.GraphId}/channels\"; internal TeamChannel() { // Handler to construct the Add request for this channel AddApiCallHandler = async (additionalInformation) => { // Define the JSON body of the update request based on the actual changes dynamic body = new ExpandoObject(); body.displayName = DisplayName; if (!string.IsNullOrEmpty(Description)) { body.description = Description; } // Serialize object to json var bodyContent = JsonSerializer.Serialize(body, typeof(ExpandoObject), new JsonSerializerOptions { WriteIndented = false }); return new ApiCall(ParseApiRequest(baseUri), ApiType.Graph, bodyContent); }; } } GetApiCallOverrideHandler This event handler is meant to be a last resort, it can override/cancel the generated get query. Typically one should not have to do this, but the option is available for special cases like shown in below example where the system prevents getting the Team if the connected SharePoint site collection is not group connected (as it never can have a Team in that case). internal partial class Team { internal Team() { GetApiCallOverrideHandler = async (ApiCallRequest api) => { if (!PnPContext.Site.IsPropertyAvailable(p => p.GroupId) || PnPContext.Site.GroupId == Guid.Empty) { api.CancelRequest(\"There is no Microsoft 365 group attached to the current site\"); } return api; }; } } UpdateApiCallOverrideHandler and DeleteApiCallOverrideHandler Manipulating updates and deletes is a more common scenario, especially preventing updates/deletes from happening. In below example, you see how sending an update or delete request to the server for the General channel of a Team is prevented. internal partial class TeamChannel { internal TeamChannel() { UpdateApiCallOverrideHandler = async (ApiCallRequest apiCallRequest) => { if (DisplayName == \"General\") { apiCallRequest.CancelRequest(\"Updating the general channel is not allowed.\"); } return apiCallRequest; }; DeleteApiCallOverrideHandler = async (ApiCallRequest apiCallRequest) => { if (DisplayName == \"General\") { apiCallRequest.CancelRequest(\"Deleting the general channel is not allowed.\"); } return apiCallRequest; }; } } MappingHandler The MappingHandler is the most commonly used event handler. You'll see a lot of the model and complex type classes implement this handler. The core purpose of this handler is to handle the JSON to model mapping in cases where this is not done automatically. Also note that when you set the UseCustomMapping property of the GraphFieldMapping or SharePointFieldMapping attributes to true, this handler will also be called for those properties. By default the handler will only be called when there's no automatic JSON to model mapping available, for example in the case of enumerations. internal partial class TeamChannel { internal TeamChannel() { MappingHandler = (FromJson input) => { switch (input.TargetType.Name) { case \"TeamChannelMembershipType\": return ToEnum<TeamChannelMembershipType>(input.JsonElement); } input.Log.LogDebug($\"Field {input.FieldName} could not be mapped when converting from JSON\"); return null; }; } } PostMappingHandler This handler fires after the received JSON has been fully processed. You get the processed JSON as a string for additional needs. internal Web() { PostMappingHandler = (string json) => { // implement post mapping handler, in case you want to do extra data loading/mapping work }; } ValidateUpdateHandler Validating properties being updated is a common use case. Sometimes you want to prevent certain model properties from being updated, or you want to \"rewrite\" the updated value. In below example updating model properties for the General Team channel is prevented. internal partial class TeamChannel { internal TeamChannel() { // Validation handler to prevent updating the general channel ValidateUpdateHandler = (PropertyUpdateRequest propertyUpdateRequest) => { // Prevent setting all values on the general channel if (DisplayName == \"General\") { propertyUpdateRequest.CancelUpdate(\"Updating the general channel is not allowed.\"); } }; } }"
  },
  "contributing/extending the model - Microsoft Graph.html": {
    "href": "contributing/extending the model - Microsoft Graph.html",
    "title": "Extending the model for Microsoft Graph | PnP Core SDK",
    "keywords": "Extending the model for Microsoft Graph The PnP Core SDK model contains model, collection, and complex type classes which are populated via either Microsoft Graph or SharePoint REST. In this chapter you'll learn more on how to decorate your classes and their properties to interact with Microsoft 365 via the Microsoft Graph API. Configuring model classes Public model (interface) decoration All model classes need to link their concrete type (so the implementation) to the public interface via the ConcreteType class attribute: [ConcreteType(typeof(TeamChannel))] public interface ITeamChannel : IDataModel<ITeamChannel>, IDataModelGet<ITeamChannel>, IDataModelLoad<ITeamChannel>, IDataModelUpdate, IDataModelDelete { // Ommitted for brevity } Model class decoration Each model class that uses Microsoft Graph needs to have at least one GraphType attribute: [GraphType(Uri = \"teams/{Site.GroupId}\")] internal partial class Team : BaseDataModel<ITeam>, ITeam { // Ommitted for brevity } When configuring the GraphType attribute for Microsoft Graph you need to set the attribute properties: Property Required Description Uri No Defines the URI that uniquely identifies this object. See model tokens to learn more about the possible tokens you can use. Target No A model can be used from multiple scope and if so the Target property defines the scope of the GraphType attribute. Id No Defines the Microsoft graph object field which serves as unique id for the object. Typically this field is called id and that's also the default value, but you can provide another value if needed. Get No Overrides the Uri property for get operations. LinqGet No Some model classes do support linq queries which are translated in corresponding server calls. If a class supports linq in this way, then it also needs to have the LinqGet attribute set. Update No Overrides the Uri property for update operations. Delete No Overrides the Uri property for delete operations. OverflowProperty No Used when working with a dynamic property/value pair (e.g. fields in a SharePoint ListItem) whenever the Microsoft Graph field containing these dynamic properties is not named Values . Beta No Defines that a model can only be handled using the Microsoft Graph beta endpoint. If a user opted out of using the Microsoft Graph beta endpoint then this model will not be populated. Property decoration The property level decoration is done using the GraphProperty and KeyProperty attributes. Each model instance requires to have an override of the Key property and that Key property must be decorated with the KeyProperty attribute which specifies which of the actual fields in the model must be selected as key. The key is for example used to ensure there are no duplicate model class instances in a single collection. Whereas the KeyProperty attribute is always there once in each model class, the usage of the GraphProperty attribute is only required for special cases. // In graph the fieldname is \"name\" whereas in the model the name is \"Title\" [GraphProperty(\"name\")] public string Title { get => GetValue<string>(); set => SetValue(value); } // Mark the property that serves as Key field // (used to ensure there are no duplicates in collections), // use a JsonPath to get the specific value you need [GraphProperty(\"sharepointIds\", JsonPath = \"webId\")] public Guid Id { get => GetValue<Guid>(); set => SetValue(value); } // Define a collection as expandable [GraphProperty(\"lists\", Expandable = true)] public IListCollection Lists { get => GetModelCollectionValue<IListCollection>(); } // Configure an additional query to load this model class this is a non expandable collection [GraphProperty(\"channels\", ExpandByDefault = true, Get = \"teams/{Site.GroupId}/channels\")] public ITeamChannelCollection Channels { get => GetModelCollectionValue<ITeamChannelCollection>(); } // Set the keyfield for this model class [KeyProperty(nameof(Id))] public override object Key { get => Id; set => Id = Guid.Parse(value.ToString()); } You can set following properties on this attribute: Property Required Description FieldName Yes Use this property when the Microsoft Graph fieldname differs from the model property name. Since the field name is required by the default constructor you always need to provide this value when you add this property. JsonPath No When the information returned from Microsoft Graph is a complex type and you only need a single value from it, then you can specify the JsonPath for that value. E.g. when you get sharePointIds.webId as response you tell the model that the fieldname is sharePointIds and the path to get there is webId. The path can be more complex, using a point to define property you need (e.g. property.child.childofchild). Using JsonPath can be a good alternative over using a Complex Type classes if your scenario only requires to reading some properties. Expandable No Defines that a collection is expandable, meaning it can be loaded via the $expand query parameter and used in the lambda expression in Get and GetAsync operations. ExpandByDefault No When the model contains a collection of other model objects then setting this attribute to true will automatically result in the population of that collection. This can negatively impact performance, so only set this when the collection is almost always needed. Get No Sometimes it is not possible to load the complete model via a single Microsoft Graph request, often this is the case with collections (so the collection is not expandable). In this case you need to explain how to load the collection via specifying the needed query. See model tokens to learn more about the possible tokens you can use. UseCustomMapping No Allows you to force a callout to the model's MappingHandler event handler whenever this property is populated. See the Event Handlers article to learn more. Beta No Defines that a model property can only be handled using the Microsoft Graph beta endpoint. If a user opted out of using the Microsoft Graph beta endpoint, then this model property will not be populated. Configuring collection classes Public model (interface) decoration All model collection classes need to link their concrete type (so the implementation) to the public interface via the ConcreteType class attribute: [ConcreteType(typeof(TeamChannelCollection))] public interface ITeamChannelCollection : IQueryable<ITeamChannel>, IDataModelCollection<ITeamChannel>, IDataModelCollectionLoad<ITeamChannel>, IDataModelCollectionDeleteByStringId { // Omitted for brevity } Implementing \"Add\" functionality In contradiction with get, update, and delete which are fully handled by decorating classes and properties using attributes, you'll need to write actual code to implement add. Adding is implemented as follows: The public part (interface) is defined on the collection interface. Each functionality (like Add) is implemented via three methods: An async method An async batch method An async batch method that allows to pass in a Batch as first method parameter A sync method that calls the async method with a GetAwaiter().GetResult() A sync batch method that calls the async method with a GetAwaiter().GetResult() A sync batch method that calls the async method with a GetAwaiter().GetResult() and allows to pass in a Batch as first method parameter Add methods defined on the interface are implemented in the collection classes as proxies that call into the respective add methods of the added model class The implementation that performs the actual add is implemented as an AddApiCallHandler event handler in the model class. See the Event Handlers page for more details. Below code snippets show the above three concepts. First one shows the collection interface (e.g. ITeamChannelCollection.cs) with the Add methods: /// <summary> /// Public interface to define a collection of Team Channels /// </summary> [ConcreteType(typeof(TeamChannelCollection))] public interface ITeamChannelCollection : IQueryable<ITeamChannel>, IDataModelCollection<ITeamChannel>, IDataModelCollectionLoad<ITeamChannel>, IDataModelCollectionDeleteByStringId { /// <summary> /// Adds a new channel /// </summary> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public Task<ITeamChannel> AddAsync(string name, string description = null); /// <summary> /// Adds a new channel /// </summary> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public ITeamChannel Add(string name, string description = null); /// <summary> /// Adds a new channel /// </summary> /// <param name=\"batch\">Batch to use</param> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public Task<ITeamChannel> AddBatchAsync(Batch batch, string name, string description = null); /// <summary> /// Adds a new channel /// </summary> /// <param name=\"batch\">Batch to use</param> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public ITeamChannel AddBatch(Batch batch, string name, string description = null); /// <summary> /// Adds a new channel /// </summary> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public Task<ITeamChannel> AddBatchAsync(string name, string description = null); /// <summary> /// Adds a new channel /// </summary> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public ITeamChannel AddBatch(string name, string description = null); } Implementation of the interface in the collection class (e.g. TeamChannelCollection.cs): internal partial class TeamChannelCollection : QueryableDataModelCollection<ITeamChannel>, ITeamChannelCollection { public TeamChannelCollection(PnPContext context, IDataModelParent parent, string memberName = null) : base(context, parent, memberName) { this.PnPContext = context; this.Parent = parent; } /// <summary> /// Adds a new channel /// </summary> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public async Task<ITeamChannel> AddAsync(string name, string description = null) { if (string.IsNullOrEmpty(name)) { throw new ArgumentNullException(nameof(name)); } // TODO: validate name restrictions var newChannel = CreateNewAndAdd() as TeamChannel; // Assign field values newChannel.DisplayName = name; newChannel.Description = description; return await newChannel.AddAsync().ConfigureAwait(false) as TeamChannel; } /// <summary> /// Adds a new channel /// </summary> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public ITeamChannel Add(string name, string description = null) { return AddAsync(name, description).GetAwaiter().GetResult(); } /// <summary> /// Adds a new channel /// </summary> /// <param name=\"batch\">Batch to use</param> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public async Task<ITeamChannel> AddBatchAsync(Batch batch, string name, string description = null) { if (string.IsNullOrEmpty(name)) { throw new ArgumentNullException(nameof(name)); } var newChannel = CreateNewAndAdd() as TeamChannel; // Assign field values newChannel.DisplayName = name; newChannel.Description = description; return await newChannel.AddBatchAsync(batch).ConfigureAwait(false) as TeamChannel; } /// <summary> /// Adds a new channel /// </summary> /// <param name=\"batch\">Batch to use</param> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public ITeamChannel AddBatch(Batch batch, string name, string description = null) { return AddBatchAsync(batch, name, description).GetAwaiter().GetResult(); } /// <summary> /// Adds a new channel /// </summary> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public async Task<ITeamChannel> AddBatchAsync(string name, string description = null) { return await AddBatchAsync(PnPContext.CurrentBatch, name, description).ConfigureAwait(false); } /// <summary> /// Adds a new channel /// </summary> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public ITeamChannel AddBatch(string name, string description = null) { return AddBatchAsync(name, description).GetAwaiter().GetResult(); } } And finally you'll see the actual add logic being implemented in the model class (e.g. TeamChannel.cs) via implementing the AddApiCallHandler : internal partial class TeamChannel : BaseDataModel<ITeamChannel>, ITeamChannel { private const string baseUri = \"teams/{Parent.GraphId}/channels\"; internal TeamChannel() { // Handler to construct the Add request for this channel AddApiCallHandler = async (additionalInformation) => { // Define the JSON body of the update request based on the actual changes dynamic body = new ExpandoObject(); body.displayName = DisplayName; if (!string.IsNullOrEmpty(Description)) { body.description = Description; } // Serialize object to json var bodyContent = JsonSerializer.Serialize(body, typeof(ExpandoObject), new JsonSerializerOptions { WriteIndented = false }); var apiCall = await ApiHelper.ParseApiRequestAsync(this, baseUri).ConfigureAwait(false); return new ApiCall(apiCall, ApiType.Graph, bodyContent); }; } } Providing additional parameters for add requests The AddApiCall handler accepts an optional key value pair parameter: Task<ApiCall> AddApiCall(Dictionary<string, object> additionalInformation = null) . You can use this to provide additional input when you call the Add from your code in the collection class. Below sample shows how this feature is used to offer different SDK consumer methods for creating Team channel tabs (on the TeamChannelTabCollection class) while there's only one generic creation method implementation in the TeamChannelTab class. Let's start with the code in the TeamChannelTabCollection class: public async Task<ITeamChannelTab> AddWikiTabAsync(string name) { if (string.IsNullOrEmpty(name)) { throw new ArgumentNullException(nameof(name)); } (TeamChannelTab newTab, Dictionary<string, object> additionalInformation) = CreateTeamChannelWikiTab(name); return await newTab.AddAsync(additionalInformation).ConfigureAwait(false) as TeamChannelTab; } public async Task<ITeamChannelTab> AddDocumentLibraryTabAsync(string name, Uri documentLibraryUri) { if (string.IsNullOrEmpty(name)) { throw new ArgumentNullException(nameof(name)); } (TeamChannelTab newTab, Dictionary<string, object> additionalInformation) = CreateTeamChannelDocumentLibraryTab(name, documentLibraryUri); return await newTab.AddAsync(additionalInformation).ConfigureAwait(false) as TeamChannelTab; } private Tuple<TeamChannelTab, Dictionary<string, object>> CreateTeamChannelDocumentLibraryTab(string displayName, Uri documentLibraryUri) { var newTab = CreateTeamChannelTab(displayName); Dictionary<string, object> additionalInformation = new Dictionary<string, object> { { \"teamsAppId\", \"com.microsoft.teamspace.tab.files.sharepoint\" }, }; newTab.Configuration = new TeamChannelTabConfiguration { EntityId = \"\", ContentUrl = documentLibraryUri.ToString() }; return new Tuple<TeamChannelTab, Dictionary<string, object>>(newTab, additionalInformation); } private Tuple<TeamChannelTab, Dictionary<string, object>> CreateTeamChannelWikiTab(string displayName) { var newTab = CreateTeamChannelTab(displayName); Dictionary<string, object> additionalInformation = new Dictionary<string, object> { { \"teamsAppId\", \"com.microsoft.teamspace.tab.wiki\" } }; return new Tuple<TeamChannelTab, Dictionary<string, object>>(newTab, additionalInformation); } The code in the TeamChannelTab class then uses the additional parameter values to drive the creation behavior: AddApiCallHandler = async (additionalInformation) => { // Define the JSON body of the update request based on the actual changes dynamic tab = new ExpandoObject(); tab.displayName = DisplayName; string teamsAppId = additionalInformation[\"teamsAppId\"].ToString(); tab.teamsAppId = teamsAppId; switch (teamsAppId) { case \"com.microsoft.teamspace.tab.wiki\": // Wiki, no configuration possible break; default: { tab.Configuration = new ExpandoObject(); if (Configuration.IsPropertyAvailable<ITeamChannelTabConfiguration>(p=>p.EntityId)) { tab.Configuration.EntityId = Configuration.EntityId; } if (Configuration.IsPropertyAvailable<ITeamChannelTabConfiguration>(p => p.ContentUrl)) { tab.Configuration.ContentUrl = Configuration.ContentUrl; } if (Configuration.IsPropertyAvailable<ITeamChannelTabConfiguration>(p => p.RemoveUrl)) { tab.Configuration.RemoveUrl = Configuration.RemoveUrl; } if (Configuration.IsPropertyAvailable<ITeamChannelTabConfiguration>(p => p.WebsiteUrl)) { tab.Configuration.WebsiteUrl = Configuration.WebsiteUrl; } break; } } // Serialize object to json var bodyContent = JsonSerializer.Serialize(tab, typeof(ExpandoObject), new JsonSerializerOptions { WriteIndented = false }); var parsedApiCall = await ApiHelper.ParseApiRequestAsync(this, baseUri).ConfigureAwait(false); return new ApiCall(parsedApiCall, ApiType.GraphBeta, bodyContent); }; Doing additional API calls Above example showed the AddApiCallHandler which provides a framework for doing add requests, but you often also need to do other types of requests and for that you need to be able to execute API calls. There are 2 ways to do this: Run an API call and automatically load the resulting API call response in the model Run an API call and process the resulting JSON as part of your code Above methods are described in the next chapters. Running an API call and loading the result in the model When you know that the API call you're making will return JSON data that has to be loaded into the model then you should use the RequestAsync method for immediate async processing or Request method for batch processing. These methods accept an ApiCall instance as input together with the HttpMethod . // to update Running an API call and processing the resulting JSON as part of your code Some API calls do return data, but the returned data cannot be loaded into the current model. In those cases you should use the RawRequestAsync method. This method accepts an ApiCall instance as input together with the HttpMethod . Below sample shows how you can archive a Team. The sample shows how the ApiCall is built and executed via the RawRequestAsync method. This method returns an ApiCallResponse object that contains the http response code, the JSON response and additional response headers from the server, which is processed and as a result the recycle bin item id is returned and the list is removed from the model. public async Task<ITeamAsyncOperation> ArchiveAsync(bool setSPOSiteReadOnlyForMembers) { if (Requested) { dynamic body = new ExpandoObject(); body.shouldSetSpoSiteReadOnlyForMembers = setSPOSiteReadOnlyForMembers; var bodyContent = JsonSerializer.Serialize(body, typeof(ExpandoObject), new JsonSerializerOptions { WriteIndented = false }); var apiCall = new ApiCall($\"teams/{Id}/archive\", ApiType.Graph, bodyContent); var response = await RawRequestAsync(apiCall, HttpMethod.Post).ConfigureAwait(false); if (response.StatusCode == System.Net.HttpStatusCode.Accepted && response.Headers != null && response.Headers.ContainsKey(\"Location\")) { // The archiving operation is in progress, already set the Team IsArchived flag to true (this as ITeam).SetSystemProperty(p => p.IsArchived, true); // we get back a url to request a teamsAsyncOperation (https://docs.microsoft.com/en-us/graph/api/resources/teamsasyncoperation?view=graph-rest-beta) return new TeamAsyncOperation(response.Headers[\"Location\"], PnPContext); } } return null; }"
  },
  "contributing/extending the model - SharePoint REST.html": {
    "href": "contributing/extending the model - SharePoint REST.html",
    "title": "Extending the model for SharePoint REST | PnP Core SDK",
    "keywords": "Extending the model for SharePoint REST The PnP Core SDK model contains model, collection, and complex type classes which are populated via either Microsoft Graph and/or SharePoint REST. In this chapter you'll learn more on how to decorate your classes and their properties to interact with Microsoft 365 via the SharePoint REST API. Configuring model classes Public model (interface) decoration All model classes need to link their concrete type (so the implementation) to the public interface via the ConcreteType class attribute: [ConcreteType(typeof(List))] public interface IList : IDataModel<IList>, IDataModelGet<IList>, IDataModelLoad<IList>,IDataModelUpdate, IDataModelDelete { // Omitted for brevity } Model class decoration Each model class that uses SharePoint REST does need to have at least one SharePointType attribute: [SharePointType(\"SP.List\", Uri = \"_api/Web/Lists(guid'{Id}')\", Update = \"_api/web/lists/getbyid(guid'{Id}')\", LinqGet = \"_api/web/lists\")] internal partial class List : BaseDataModel<IList>, IList { // Omitted for brevity } When configuring the SharePointType attribute for SharePoint REST you need to set attribute properties: Property Required Description Type Yes Defines the SharePoint REST type that maps with the model class. Each model that requires SharePoint REST requires this attribute, hence the type is requested via the attribute constructor. Uri Yes Defines the URI that uniquely identifies this object. See model tokens to learn more about the possible tokens you can use. Target No A model can be used from multiple scope (e.g. the ContentTypeCollection is available for both Web and List model classes) and if so the Target property defines the scope of the SharePointType attribute. Get No Overrides the Uri property for get operations. LinqGet No Some model classes do support linq queries which are translated in corresponding server calls. If a class supports linq in this way, then it also needs to have the LinqGet attribute set. Update No Overrides the Uri property for update operations. Delete No Overrides the Uri property for delete operations. OverflowProperty No Used when working with a dynamic property/value pair (e.g. fields in a SharePoint ListItem) whenever the SharePoint REST field containing these dynamic properties is not named Values . Sample of using multiple SharePointType decorations Below sample shows how a model can be decorated for multiple scopes: [SharePointType(\"SP.ContentType\", Target = typeof(Web), Uri = \"_api/Web/ContentTypes('{Id}')\", Get = \"_api/web/contenttypes\", LinqGet = \"_api/web/contenttypes\")] [SharePointType(\"SP.ContentType\", Target = typeof(List), Uri = \"_api/Web/Lists(guid'{Parent.Id}')/ContentTypes('{Id}')\", Get = \"_api/Web/Lists(guid'{Parent.Id}')/contenttypes\", LinqGet = \"_api/Web/Lists(guid'{Parent.Id}')/contenttypes\")] internal partial class ContentType : BaseDataModel<IContentType>, IContentType { // Omitted for brevity } Property decoration The property level decoration is done using the SharePointProperty and KeyProperty attributes. Each model instance does require to have a override of the Key property and that Key property must be decorated with the KeyProperty attribute, which specifies the actual fields in the model that must be selected as key. The key is for example used to ensure there are no duplicate model class instances in a single collection. Whereas the KeyProperty attribute is always there once in each model class, the usage of the SharePointProperty attribute is only needed whenever it makes sense. For most properties you do not need to set this attribute, it's only required for special cases. // Configure the SharePoint REST field used to populate this model property [SharePointProperty(\"DocumentTemplateUrl\")] public string DocumentTemplate { get => GetValue<string>(); set => SetValue(value); } // Set the keyfield for this model class [KeyProperty(nameof(Id))] public override object Key { get => Id; set => Id = Guid.Parse(value.ToString()); } You can set following properties on this attribute: Property Required Description FieldName Yes Use this property when the SharePoint REST fieldname differs from the model property name, since the field name is required by the default constructor you always need to provide this value when you add this property. JsonPath No When the information returned from SharePoint REST is a complex type and you only need a single value from it, then you can specify the JsonPath for that value. E.g. when you get sharePointIds.webId as response you tell the model that the fieldname is sharePointIds and the path to get there is webId. The path can be more complex, using a point to define property you need (e.g. property.child.childofchild). ExpandByDefault No When the model contains a collection of other model objects then setting this attribute to true will automatically result in the population of that collection. This can negatively impact performance, so only set this when the collection is almost always needed. UseCustomMapping No Allows you to force a callout to the model's MappingHandler event handler whenever this property is populated. See the Event Handlers article to learn more. Configuring collection classes Public model (interface) decoration All model collection classes need to link their concrete type (so the implementation) to the public interface via the ConcreteType class attribute: [ConcreteType(typeof(ListCollection))] public interface IListCollection : IDataModelCollection<IList>, IDataModelCollectionLoad<IList>, IQueryable<IList>, IDataModelCollectionDeleteByGuidId, IAsyncEnumerable<IList> { // Omitted for brevity } Implementing \"Add\" functionality In contradiction with get, update, and delete which are fully handled by decorating classes and properties using attributes, you'll need to write actual code to implement add. Adding is implemented as follows: The public part (interface) is defined on the collection interface. Each functionality (like Add) is implemented via 6 methods: An async method An async batch method An async batch method that allows to pass in a Batch as first method parameter A sync method that calls the async method with a GetAwaiter().GetResult() A sync batch method that calls the async method with a GetAwaiter().GetResult() A sync batch method that calls the async method with a GetAwaiter().GetResult() and allows to pass in a Batch as first method parameter Add methods defined on the interface are implemented in the collection classes as proxies that call into the respective add methods of the added model class. The implementation that performs the actual add is implemented as an AddApiCallHandler event handler in the model class. See the Event Handlers page for more details. Below code snippets show the above three concepts. First one shows the collection interface (e.g. IListCollection.cs) with the Add methods: /// <summary> /// Public interface to define a collection of List objects of SharePoint Online /// </summary> [ConcreteType(typeof(ListCollection))] public interface IListCollection : IQueryable<IList>, IDataModelCollection<IList>, IDataModelCollectionDeleteByGuidId, IAsyncEnumerable<IList> { /// <summary> /// Adds a new list /// </summary> /// <param name=\"title\">Title of the list</param> /// <param name=\"templateType\">Template type</param> /// <returns>Newly added list</returns> public Task<IList> AddAsync(string title, ListTemplateType templateType); /// <summary> /// Adds a new list /// </summary> /// <param name=\"title\">Title of the list</param> /// <param name=\"templateType\">Template type</param> /// <returns>Newly added list</returns> public IList Add(string title, ListTemplateType templateType); /// <summary> /// Adds a new list /// </summary> /// <param name=\"batch\">Batch to use</param> /// <param name=\"title\">Title of the list</param> /// <param name=\"templateType\">Template type</param> /// <returns>Newly added list</returns> public Task<IList> AddBatchAsync(Batch batch, string title, ListTemplateType templateType); /// <summary> /// Adds a new list /// </summary> /// <param name=\"batch\">Batch to use</param> /// <param name=\"title\">Title of the list</param> /// <param name=\"templateType\">Template type</param> /// <returns>Newly added list</returns> public IList AddBatch(Batch batch, string title, ListTemplateType templateType); /// <summary> /// Adds a new list /// </summary> /// <param name=\"title\">Title of the list</param> /// <param name=\"templateType\">Template type</param> /// <returns>Newly added list</returns> public Task<IList> AddBatchAsync(string title, ListTemplateType templateType); /// <summary> /// Adds a new list /// </summary> /// <param name=\"title\">Title of the list</param> /// <param name=\"templateType\">Template type</param> /// <returns>Newly added list</returns> public IList AddBatch(string title, ListTemplateType templateType); } Implementation of the interface in the collection class (e.g. ListCollection.cs): internal partial class ListCollection : QueryableDataModelCollection<IList>, IListCollection { public ListCollection(PnPContext context, IDataModelParent parent, string memberName = null) : base(context, parent, memberName) { this.PnPContext = context; this.Parent = parent; } public async Task<IList> AddBatchAsync(string title, ListTemplateType templateType) { return await AddBatchAsync(PnPContext.CurrentBatch, title, templateType).ConfigureAwait(false); } public IList AddBatch(string title, ListTemplateType templateType) { return AddBatchAsync(title, templateType).GetAwaiter().GetResult(); } public async Task<IList> AddBatchAsync(Batch batch, string title, ListTemplateType templateType) { if (title == null) { throw new ArgumentNullException(nameof(title)); } if (templateType == 0) { throw new ArgumentException($\"{nameof(templateType)} cannot be 0\"); } var newList = CreateNewAndAdd() as List; newList.Title = title; newList.TemplateType = templateType; return await newList.AddBatchAsync(batch).ConfigureAwait(false) as List; } public IList AddBatch(Batch batch, string title, ListTemplateType templateType) { return AddBatchAsync(batch, title, templateType).GetAwaiter().GetResult(); } public async Task<IList> AddAsync(string title, ListTemplateType templateType) { if (title == null) { throw new ArgumentNullException(nameof(title)); } if (templateType == 0) { throw new ArgumentException($\"{nameof(templateType)} cannot be 0\"); } var newList = CreateNewAndAdd() as List; newList.Title = title; newList.TemplateType = templateType; return await newList.AddAsync().ConfigureAwait(false) as List; } public IList Add(string title, ListTemplateType templateType) { return AddAsync(title, templateType).GetAwaiter().GetResult(); } } And finally you'll see the actual add logic being implemented in the model class (e.g. List.cs) via implementing the AddApiCallHandler : [SharePointType(\"SP.List\", Uri = \"_api/Web/Lists(guid'{Id}')\", Update = \"_api/web/lists/getbyid(guid'{Id}')\", LinqGet = \"_api/web/lists\")] internal partial class List : BaseDataModel<IList>, IList { internal List() { // Handler to construct the Add request for this list AddApiCallHandler = async (additionalInformation) => { var entity = EntityManager.Instance.GetClassInfo(GetType(), this); var addParameters = new { __metadata = new { type = entity.SharePointType }, BaseTemplate = TemplateType, Title }.AsExpando(); string body = JsonSerializer.Serialize(addParameters, typeof(ExpandoObject)); return new ApiCall($\"_api/web/lists\", ApiType.SPORest, body); }; } } Providing additional parameters for add requests The AddApiCall handler accepts an optional key value pair parameter: Task<ApiCall> AddApiCall(Dictionary<string, object> additionalInformation = null) . You can use this to provide additional input when you call the Add from your code in the collection class. Below sample shows how this feature is used to offer different SDK consumer methods for creating Team channel tabs (on the TeamChannelTabCollection class) while there's only one generic creation method implementation in the TeamChannelTab class. Let's start with the code in the TeamChannelTabCollection class: public async Task<ITeamChannelTab> AddWikiTabAsync(string name) { if (string.IsNullOrEmpty(name)) { throw new ArgumentNullException(nameof(name)); } (TeamChannelTab newTab, Dictionary<string, object> additionalInformation) = CreateTeamChannelWikiTab(name); return await newTab.AddAsync(additionalInformation).ConfigureAwait(false) as TeamChannelTab; } public async Task<ITeamChannelTab> AddDocumentLibraryTabAsync(string name, Uri documentLibraryUri) { if (string.IsNullOrEmpty(name)) { throw new ArgumentNullException(nameof(name)); } (TeamChannelTab newTab, Dictionary<string, object> additionalInformation) = CreateTeamChannelDocumentLibraryTab(name, documentLibraryUri); return await newTab.AddAsync(additionalInformation).ConfigureAwait(false) as TeamChannelTab; } private Tuple<TeamChannelTab, Dictionary<string, object>> CreateTeamChannelDocumentLibraryTab(string displayName, Uri documentLibraryUri) { var newTab = CreateTeamChannelTab(displayName); Dictionary<string, object> additionalInformation = new Dictionary<string, object> { { \"teamsAppId\", \"com.microsoft.teamspace.tab.files.sharepoint\" }, }; newTab.Configuration = new TeamChannelTabConfiguration { EntityId = \"\", ContentUrl = documentLibraryUri.ToString() }; return new Tuple<TeamChannelTab, Dictionary<string, object>>(newTab, additionalInformation); } private Tuple<TeamChannelTab, Dictionary<string, object>> CreateTeamChannelWikiTab(string displayName) { var newTab = CreateTeamChannelTab(displayName); Dictionary<string, object> additionalInformation = new Dictionary<string, object> { { \"teamsAppId\", \"com.microsoft.teamspace.tab.wiki\" } }; return new Tuple<TeamChannelTab, Dictionary<string, object>>(newTab, additionalInformation); } The code in the TeamChannelTab class then uses the additional parameter values to drive the creation behavior: AddApiCallHandler = async (additionalInformation) => { // Define the JSON body of the update request based on the actual changes dynamic tab = new ExpandoObject(); tab.displayName = DisplayName; string teamsAppId = additionalInformation[\"teamsAppId\"].ToString(); tab.teamsAppId = teamsAppId; switch (teamsAppId) { case \"com.microsoft.teamspace.tab.wiki\": // Wiki, no configuration possible break; default: { tab.Configuration = new ExpandoObject(); if (Configuration.IsPropertyAvailable<ITeamChannelTabConfiguration>(p=>p.EntityId)) { tab.Configuration.EntityId = Configuration.EntityId; } if (Configuration.IsPropertyAvailable<ITeamChannelTabConfiguration>(p => p.ContentUrl)) { tab.Configuration.ContentUrl = Configuration.ContentUrl; } if (Configuration.IsPropertyAvailable<ITeamChannelTabConfiguration>(p => p.RemoveUrl)) { tab.Configuration.RemoveUrl = Configuration.RemoveUrl; } if (Configuration.IsPropertyAvailable<ITeamChannelTabConfiguration>(p => p.WebsiteUrl)) { tab.Configuration.WebsiteUrl = Configuration.WebsiteUrl; } break; } } // Serialize object to json var bodyContent = JsonSerializer.Serialize(tab, typeof(ExpandoObject), new JsonSerializerOptions { WriteIndented = false }); return new ApiCall((await ApiHelper.ParseApiRequestAsync(this, baseUri)), ApiType.GraphBeta, bodyContent); }; Doing additional API calls Above example showed the AddApiCallHandler which provides a framework for doing add requests, but you often also need to do other types of requests (e.g. adding an available content type to a list, recycling a list, ...) and for that you need to be able to execute API calls. There are 2 ways to do this: Run an API call and automatically load the resulting API call response in the model Run an API call and process the resulting JSON as part of your code Above methods are described in the next chapters. Running an API call and loading the result in the model When you know that the API call you're making will return JSON data that has to be loaded into the model then you should use the RequestAsync method for immediate async processing or Request method for batch processing. These methods accept an ApiCall instance as input together with the HttpMethod . Below sample shows how this can be used to add an existing content type to a list. The AddAvailableContentTypeApiCall method defines the API call to be executed and in the AddAvailableContentTypeBatchAsync and AddAvailableContentTypeAsync methods this API call is executed via the respective Request and RequestAsync methods. When executing the API calls the resulting JSON is automatically processed and loaded into the model, so in the below case the content type will show up in the list content type collection. private ApiCall AddAvailableContentTypeApiCall(string id) { dynamic body = new ExpandoObject(); body.contentTypeId = id; var bodyContent = JsonSerializer.Serialize(body, typeof(ExpandoObject), new JsonSerializerOptions { WriteIndented = false }); // Given this method can apply on both Web.ContentTypes as List.ContentTypes we're getting the entity info which will // automatically provide the correct 'parent' var entity = EntityManager.Instance.GetClassInfo<IContentType>(GetType(), this); return new ApiCall($\"{entity.SharePointGet}/AddAvailableContentType\", ApiType.SPORest, bodyContent); } internal IContentType AddAvailableContentTypeBatchAsync(Batch batch, string id) { var apiCall = AddAvailableContentTypeApiCall(id); await RequestBatchAsync(batch, apiCall, HttpMethod.Post).ConfigureAwait(false); return this; } internal async Task<IContentType> AddAvailableContentTypeAsync(string id) { var apiCall = AddAvailableContentTypeApiCall(id); await RequestAsync(apiCall, HttpMethod.Post).ConfigureAwait(false); return this; } Running an API call and processing the resulting JSON as part of your code Some API calls do return data, but the returned data cannot be loaded into the current model. In those cases you should use the RawRequestAsync method. This method accepts an ApiCall instance as input together with the HttpMethod . Below sample shows how this can be used to recycle a list (= move list to the site's recycle bin). The sample shows how the ApiCall is built and executed via the RawRequestAsync method. This method returns an ApiCallResponse object that contains the JSON response from the server, which is processed and as a result the recycle bin item id is returned and the list is removed from the model. public async Task<Guid> RecycleAsync() { var apiCall = new ApiCall($\"_api/Web/Lists(guid'{Id}')/recycle\", ApiType.SPORest); var response = await RawRequestAsync(apiCall, HttpMethod.Post).ConfigureAwait(false); if (!string.IsNullOrEmpty(response.Json)) { var document = JsonSerializer.Deserialize<JsonElement>(response.Json); if (document.TryGetProperty(\"d\", out JsonElement root)) { if (root.TryGetProperty(\"Recycle\", out JsonElement recycleBinItemId)) { // Remove this item from the lists collection RemoveFromParentCollection(); // return the recycle bin item id return recycleBinItemId.GetGuid(); } } } return Guid.Empty; }"
  },
  "contributing/extending the model.html": {
    "href": "contributing/extending the model.html",
    "title": "Extending the model - step by step guidance | PnP Core SDK",
    "keywords": "Extending the model - step by step guidance Extending the model is a very common type of work, especially in the early days of this SDK. This page will walk you through the needed steps, but before engaging it's recommended that you've read this article: The PnP Core SDK model . Important In order to speed up the model development the needed SharePoint REST model classes are for the most part pre created, these classes can be copied over and modified to suit your needs. You can find the pre-generated classes in https://github.com/pnp/pnpcore/tree/dev/src/generated . If you're not able to find your model classes then please create an issue in the issue list so we can update the generation logic to include those. Step 1: Define the public model Step 1.1: Create the interface(s) The public model is an interface and lives in the Public folder. So when extending the SharePoint model you would create the new interface in for example Model\\SharePoint\\Core\\Public or in Model\\SharePoint\\Navigation\\Public . If you feel there's a need to add a new sub level (e.g. Core, Navigation, etc) then you can do that. Key things to check are: Let's consider a model called Model in SharePoint Your interface(s) are in the Public folder Your interface(s) are public (e.g. public interface IWeb ) and follow the standard interface naming convention (so starting with an I e.g. IModel ) Your interface(s) extends the needed base interfaces (see The PnP Core SDK model for more details). At a minimum, a model interface extends the IDataModel<IModel> interface and a collection interface extends the IDataModelCollection<IModel> interface Your interface(s) namespace reflects the top level model folder (e.g. all SharePoint interfaces live in the PnP.Core.Model.SharePoint namespace) Your interface(s) have triple slash comments explaining their purpose Sample of a Model interface namespace PnP.Core.Model.SharePoint { /// <summary> /// Public interface to define a {Model} object of SharePoint Online /// </summary> [ConcreteType(typeof(Model))] public interface IModel : IDataModel<IModel> { } } Sample of a collection of Model items interface namespace PnP.Core.Model.SharePoint { /// <summary> /// Public interface to define a collection of {Model} object of SharePoint Online /// </summary> [ConcreteType(typeof(ModelCollection))] public interface IModelCollection : IDataModelCollection<IModel> { } } Step 1.2: Add the properties Once the interface is created you need to add properties to it, the properties you want to add are quite often inspired by what the called APIs return. So if the API you plan to call to populate this model returns a string field with name FieldA you would want to add a property for it: public string FieldA { get; set; } . Key things to check are: The added properties are public properties The added properties have a getter and a setter, unless the property is model collection (e.g. public IListCollection Lists { get; } in IWeb.cs ) The properties are simple .Net types, Enums (see below), complex types or collections of already defined model classes or complex types. See The PnP Core SDK model for more details Properties have triple slash comments explaining their purpose Sample of a Model interface with properties namespace PnP.Core.Model.SharePoint { /// <summary> /// Public interface to define a {Model} object of SharePoint Online /// </summary> [ConcreteType(typeof(Model))] public interface IModel : IDataModel<IModel> { /// <summary> /// The unique ID of the {Model} object /// </summary> public string Id { get; set; } /// <summary> /// Gets or Sets the FieldA of the {Model} /// </summary> public string FieldA { get; set; } } } Sample of a ModelCollection interface and a Model2 interface that uses it namespace PnP.Core.Model.SharePoint { /// <summary> /// Public interface to define a collection of {Model} object of SharePoint Online /// </summary> [ConcreteType(typeof(ModelCollection))] public interface IModelCollection : IDataModelCollection<IModel> { } } namespace PnP.Core.Model.SharePoint { /// <summary> /// Public interface to define a {Model2} object of SharePoint Online /// </summary> [ConcreteType(typeof(Model2))] public interface IModel2 : IDataModel<IModel> { /// <summary> /// Collection of Model items in the current Model2 object /// </summary> public IModelCollection Items { get; } } } Step 2: Define the internal model Once you've defined the public interface the next step is defining the internal classes that implement the created interface(s). These internal classes live at the same level as your interface classes but then in the Internal folder instead of the Public folder. So if the interface lives in the Model\\SharePoint\\Core\\Public folder then the respective internal class lives in the Model\\SharePoint\\Core\\Internal folder. The model.cs class contains the internal code, key things to check are: It's an internal partial class, e.g. internal partial class Web The class name is aligned to the interface name (e.g. IWeb and Web ) The namespace is the same as the one used for the interface The class implements the needed base classes and interfaces: A model class typically implements BaseDataModel<IModel> and the public interface IModel A collection class BaseDataModelCollection<IModel> and the public interface IModelCollection The used interface needs to be implemented, which means all the properties defined in the interface will be added: Properties are public Properties use the GetValue<> base class method for getting and the SetValue base class method for setting of simple properties Properties use the GetModelValue<> base class method for getting and the SetModelValue base class method for setting of Model properties Properties use the GetModelCollectionValue<> base class method for getting of Model Collection properties You've added the Key property and it points to the property that uniquely identifies your model instance. Ensure you've also updated the KeyProperty value to match how you've implemented the Key property: // Property that uniquely identifies this model instance is a guid named Id public Guid Id { get => GetValue<Guid>(); set => SetValue(value); } // Implement they Key property to use the guid ID: [KeyProperty(nameof(Id))] public override object Key { get => Id; set => Id = Guid.Parse(value.ToString()); } Step 3: Decorate the model to enable create/read/update/delete functionality With step 1 and 2 done you've a model definition, but there's no behavior yet. To bring the model to life, you'll need to decorate it with class and property attributes. Depending on whether you're targeting SharePoint REST APIs or Microsoft Graph APIs you would use different attributes to decorate the model: Decorating the model for SharePoint REST APIs Decorating the model for Microsoft Graph APIs Important If you're extending the SharePoint model and there's both a Microsoft Graph and a SharePoint REST API available then start with implementing the model using SharePoint REST. Once that works you can add additional Microsoft Graph based decoration. Step 4: Add additional functionality At this point you should have a working model that can be used to read data and depending on the implementation also supports adding, updating and deleting. The power of the SDK however will not just be the model, but also the \"rich\" extensions on top of it. The extensions can be implemented as methods on the model, e.g. you could imagine an UploadFile method on the ITeamChannel model. For implementing this additional functions you quite often will need to execute API calls and optionally have the resulting JSON response loaded into the model. For doing that there are the RequestAsync and Request base class methods in case you want the resulting JSON be processed or the RawRequestAsync method in case you want to process the resulting JSON as part of your implementation. You'll find more details on this on the pages that explain the model decoration for Graph/REST: Decorating the model for SharePoint REST APIs Decorating the model for Microsoft Graph APIs Step 5: Write test cases Quality is key aspect of this library and test cases do help to guarantee quality. See the Writing test cases article to learn more about how to do that."
  },
  "contributing/model tokens.html": {
    "href": "contributing/model tokens.html",
    "title": "Model tokens | PnP Core SDK",
    "keywords": "Model tokens Introduction When decorating model classes and properties via attributes, often you need to define an API request. To ensure that these API requests offer the needed flexibility, you can use tokens in the URL request definition. Tokens are embedded between curly brackets. Below snippet shows some samples in which tokens are used: // Site.GroupId token to grab the id of the Microsoft 365 group connected to the current site [GraphType(Uri = \"teams/{Site.GroupId}\")] [GraphProperty(\"installedApps\", Get = \"teams/{Site.GroupId}/installedapps?expand=TeamsApp\")] // Parent.GraphId to get Microsoft Graph Id value of the parent class instance of the model // GraphId to get the If value of the model class instance [GraphType(Uri = \"teams/{Parent.GraphId}/channels/{GraphId}\")] // Id property to get the SharePoint REST Id value of the model class instance [SharePointType(\"SP.List\", Uri = \"_api/Web/Lists(guid'{Id}')\", Get = \"_api/web/lists\", Update = \"_api/web/lists/getbyid(guid'{Id}')\", LinqGet = \"_api/web/lists\")] [GraphType(Get = \"sites/{Parent.GraphId}/lists/{GraphId}\")] // Web.GraphId to get the Microsoft Graph Id value of the SharePoint Web model instance of the current PnPContext instance [GraphProperty(\"items\", Get = \"/sites/{Web.GraphId}/lists/{GraphId}/items?expand=fields\")] Model tokens that can be used Token Description {Id} Value of the SharePoint Id property of the current model instance (e.g. List). {Parent.Id} Value of the SharePoint Id property of the current model's parent instance (e.g. Web for a List --> ListCollection is skipped in this approach). {GraphId} Value of the Microsoft Graph Id property of the current model instance (e.g. TeamChannel). {Parent.GraphId} Value of the Microsoft Graph Id property of the current model's parent instance (e.g. Team for a TeamChannel --> TeamChannelCollection is skipped in this approach). {Site.GroupId} Id value of the Microsoft 365 Group connected to the Site loaded in the current PnPContext (Id is the same for SharePoint REST as Microsoft Graph usage). {Site.Id} SharePoint Id value of the Site loaded in the current PnPContext. {Web.Id} SharePoint Id value of the Web loaded in the current PnPContext. {Web.GraphId} Microsoft Graph Id value of the Web loaded in the current PnPContext. {List.Id} SharePoint Id value of the List loaded in the current PnPContext (works only when the target object is of type List or ListItem). {hostname} Host name of the current site (so for https://contoso.sharepoint.com/sites/team1 this is contoso.sharepoint.com) {serverrelativepath} Server relative path of the current site (so for https://contoso.sharepoint.com/sites/team1 this is /sites/team1)"
  },
  "contributing/readme.html": {
    "href": "contributing/readme.html",
    "title": "The PnP Core SDK model | PnP Core SDK",
    "keywords": "The PnP Core SDK model The model in PnP Core SDK is what the SDK users use to interact with Microsoft 365: it defines the model classes (e.g. List), their fields (Title, Description,...) and their operations (e.g. GetAsync or Get). This model has a public part (interfaces) and an implementation (internal, partial classes). In order to translate the model into respective SharePoint REST and/or Microsoft Graph v1.0 or beta queries the model needs to be decorated with attributes. These attributes drive the needed API calls to Microsoft 365 and the serialization of returned responses (JSON) into the model. As a contributor, extending and enriching the model is how you provide functionality to the developers that will be using this SDK . Where is the code? The PnP Core SDK is maintained in the PnP GitHub repository: https://github.com/pnp/pnpcore . You'll find: The code of the PnP Core SDK in the src\\sdk folder Examples of how to use the PnP Core SDK in the src\\samples folder Generated code to speed up contribution of new model logic in the src\\generated folder The source of the documentation you are reading right now in the docs folder Setting up your environment for building the PnP Core SDK Starting to code is simple, pull down the code from GitHub and then use either Visual Studio 2019 or Visual Studio Code. More details can be found in our setup article. General model principles The model design principles are agnostic to whether the model will be populated via a SharePoint REST or Microsoft Graph call, and therefore starting here to understand the general model principles is advised. Once you understand the model design principles you can learn more about how to decorate the model to work with either SharePoint REST and/or Microsoft Graph. Below picture gives an overview of the used classes in the model based on the Team model implementation: In the model there are 2 types of classes: The majority of the model is built from model classes Model classes often live in a collection, so we do have model collection classes Each of these classes has a public model implemented via interfaces and an internal model implemented via internal partial classes. Model classes The model classes are the most commonly used classes in our domain model as they represent a Microsoft 365 object that can be queried via either the SharePoint REST or the Microsoft Graph interface. Samples of model classes are Web, Team, List,... Public model The public model is built via public interfaces. Below sample shows the public model for a SharePoint List /// <summary> /// Public interface to define a List object of SharePoint Online /// </summary> [ConcreteType(typeof(List))] public interface IList : IDataModel<IList>, IDataModelGet<IList>, IDataModelLoad<IList>, IDataModelUpdate, IDataModelDelete, IQueryableDataModel { /// <summary> /// The Unique ID of the List object /// </summary> public Guid Id { get; } /// <summary> /// Gets or sets the list title /// </summary> public string Title { get; set; } /// <summary> /// Gets or sets the description of the list /// </summary> public string Description { get; set; } // Other properties left for brevity } Each public model: Uses a public interface (e.g. IList in our example) with public fields Uses the ConcreteType attribute to define the implementation type that belongs to this interface Has inline documentation on the model class and fields Always implements the IDataModel<TModel> interface where TModel is the actual interface (e.g. IList in above sample) Optionally implements the IDataModelLoad<TModel> interface whenever load functionality is needed on this model class (most of the models have this) Optionally implements the IDataModelGet<TModel> interface whenever get functionality is needed on this model class (most of the models have this) Optionally implements the IDataModelUpdate interface whenever update functionality in needed on this model class Optionally implements the IDataModelDelete interface whenever delete functionality is needed on this model class Optionally implements the IQueryableDataModel interface whenever the model supports LINQ querying. This goes hand in hand with using the QueryableDataModelCollection base class for the model's collection class The properties in the model use either basic .Net data types, enumerations, other model/collection types or so called complex types: // Simple .Net type public string Title { get; set; } // Enum public ListReadingDirection Direction { get; set; } // Other model/collection types public IListItemCollection Items { get; } // Complex types (sample comes from the Team model class) public ITeamFunSettings FunSettings { get; set; } Note When a property is read-only you only need to provide a ´get´ in the public model. Internal implementation The internal model implementation is what brings the public model to life: this split approach ensures that library consumers only work with the public model, and as such the library implementation can be updated without breaking the public contract with library consumers. Here's a snippet of the List.cs class: [SharePointType(\"SP.List\", Uri = \"_api/Web/Lists(guid'{Id}')\", Update = \"_api/web/lists/getbyid(guid'{Id}')\", LinqGet = \"_api/web/lists\")] [GraphType(Get = \"sites/{Parent.GraphId}/lists/{GraphId}\", LinqGet = \"sites/{Parent.GraphId}/lists\")] internal partial class List : BaseDataModel<IList>, IList { public List() { // Handler to construct the Add request for this list AddApiCallHandler = () => { var entity = EntityManager.GetClassInfo(GetType(), this); var addParameters = new { __metadata = new { type = entity.SharePointType }, BaseTemplate = TemplateType, Title }.AsExpando(); string body = JsonSerializer.Serialize(addParameters, typeof(ExpandoObject)); return new ApiCall($\"_api/web/lists\", ApiType.SPORest, body); }; } public Guid Id { get => GetValue<Guid>(); set => SetValue(value); } [GraphProperty(\"displayName\")] public string Title { get => GetValue<string>(); set => SetValue(value); } [GraphProperty(\"description\")] public string Description { get => GetValue<string>(); set => SetValue(value); } public IFolder RootFolder { get => GetModelValue<IFolder>(); } [GraphProperty(\"items\", Get = \"/sites/{Web.GraphId}/lists/{GraphId}/items?expand=fields\")] public IListItemCollection Items { get => GetModelCollectionValue<IListItemCollection>(); } // Other properties left for brevity [KeyProperty(nameof(Id))] public override object Key { get => this.Id; set => this.Id = Guid.Parse(value.ToString()); } } Each model class: Inherits from the BaseDataModel<TModel> class and implements TModel Is an internal , partial class Does have a public default constructor Can implement event handlers which are used to (see the Event Handlers page for more details): Optionally customize the JSON to Model mapping via the MappingHandler = (FromJson input) handler Implement the API call for doing an Add operation via the AddApiCallHandler = async () handler Optionally implement API call overrides that allow you to update the generated API call before it's sent off to the server. There are these handlers: GetApiCallOverrideHandler = async (ApiCall apiCall) , UpdateApiCallOverrideHandler = async (ApiCall apiCall) and DeleteApiCallOverrideHandler = async (ApiCall apiCall) Optionally implement property validation (prevent property updates, alter values) via the ValidateUpdateHandler = (ref FieldUpdateRequest fieldUpdateRequest) handler Contains class level attributes that are used to define the requests to Microsoft 365 and serialization of the received data. These attributes are explained in more detail in their respective chapters later on Has public properties that: Use the GetValue and SetValue inherited methods to get and set simple property values Use the GetModelValue and optionally SetModelValue base class methods to get and set model property values (e.g. IFolder ) Use the GetModelCollectionValue base class method to get a model collection property value (e.g. IListItemCollection ) Has a Key property override which can be used to set/get the key value. The Key is used to organize objects in collections Has property attributes that are used to define the requests to Microsoft 365 and serialization of the received data. These attributes are explained in more detail in their respective chapters later on Model specific methods can be foreseen. These methods provide additional operations on the model class Collection classes Collection classes contain zero or more model class instances, so for example the ListCollection will contain zero or more List model class instances. Public model The public model is built via public interfaces. Below sample shows the public model for a SharePoint ListCollection /// <summary> /// Public interface to define a collection of List objects of SharePoint Online /// </summary> [ConcreteType(typeof(ListCollection))] public interface IListCollection : IDataModelCollection<IList>, IDataModelCollectionLoad<IList>, IQueryable<IList>, IDataModelCollectionDeleteByGuidId, IAsyncEnumerable<IList> { /// <summary> /// Adds a new list /// </summary> /// <param name=\"title\">Title of the list</param> /// <param name=\"templateType\">Template type</param> /// <returns>Newly added list</returns> public Task<IList> AddAsync(string title, int templateType); /// <summary> /// Select a list by title /// </summary> /// <param name=\"title\">The title to search for</param> /// <param name=\"selectors\">The expressions declaring the fields to select</param> /// <returns>The resulting list instance, if any</returns> public Task<IList> GetByTitleAsync(string title, params Expression<Func<IList, object>>[] selectors); // Other methods omitted for brevity } Each public model interface for a Collection class: Uses a public interface (e.g. IListCollection in our example) with optionally public methods Contains the implementation of the methods defined in the public interface Has inline documentation on the model class and methods Always implements the IDataModelCollection<TModel> interface where TModel is the actual interface (e.g. IList in above sample) Optionally implements the IDataModelCollectionLoad<TModel> interface where TModel is the actual interface (e.g. IList in above sample) whenever the collection can loaded Optionally implements the IQueryable<TModel> interface where TModel is the actual interface (e.g. IList in above sample) whenever the model can be queried using linq queries Optionally implements the IAsyncEnumerable<TModel> interface whenever the data in the collection can be asynchronously enumerated Optionally implements either the IDataModelCollectionDeleteByGuidId , IDataModelCollectionDeleteByIntegerId or IDataModelCollectionDeleteByStringId interface matching the data type of the collection model's key if you want to offer a DeleteById method on the model collection. You should only do this if you've also implemented the IDataModelDelete on the collection's model Optionally a collection interface defines methods which add behavior to the collection. Internal implementation For the internal collection class implementation, we've opted to use internal partial classes. Here's a snippet of the ListCollection.cs class, which is linq queryable: internal partial class ListCollection : QueryableDataModelCollection<IList>, IListCollection { public ListCollection(PnPContext context, IDataModelParent parent, string memberName = null) : base(context, parent, memberName) { this.PnPContext = context; this.Parent = parent; } // Other methods omitted for brevity public async Task<IList> AddAsync(string title, int templateType) { if (title == null) { throw new ArgumentNullException(nameof(title)); } if (templateType == 0) { throw new ArgumentException($\"{nameof(templateType)} cannot be 0\"); } var newList = CreateNewAndAdd() as List; newList.Title = title; newList.TemplateType = templateType; return await newList.AddAsync().ConfigureAwait(false) as List; } public async Task<IList> GetByTitleAsync(string title, params Expression<Func<IList, object>>[] selectors) { if (title == null) { throw new ArgumentNullException(nameof(title)); } return await BaseDataModelExtensions.BaseLinqGetAsync(this, l => l.Title == title, selectors).ConfigureAwait(false); } // Other methods omitted for brevity } If the collection is not linq queryable the collection class is very simple: internal partial class TeamAppCollection : BaseDataModelCollection<ITeamApp>, ITeamAppCollection { } Each collection class: Inherits from either the BaseDataModelCollection<TModel> for regular collections or from the QueryableDataModelCollection<TModel> class for linq queryable collections and implements the previously created collection interface (e.g. IListCollection ) Is an internal , partial class Implements a specific constructor in case the class inherits from QueryableDataModelCollection<TModel> Can use the CreateNewAndAdd collection base class method to create a new instance and add it to the collection Decorating the model The model, collections and complex type classes you create can be populated via either SharePoint REST queries, Microsoft Graph queries or both. Depending on the needed query approach you'll need to decorate the model classes and/or fields with properties. It's these properties that drive the automatic query generation . When you populate your model via SharePoint REST queries then continue here , in case the model is populated via Microsoft Graph continue here ."
  },
  "contributing/setup.html": {
    "href": "contributing/setup.html",
    "title": "Setting up your environment for developing | PnP Core SDK",
    "keywords": "Setting up your environment for developing Pulling down the source code The PnP Core SDK source code lives in the https://github.com/pnp/pnpcore repository. If you want contribute to it you'll need to issue pull requests against the dev branch and for doing that you need to first fork the repo: Click on the Fork button (top right on the https://github.com/pnp/pnpcore home page) Create a fork in your account or organization of choice Pull down your forked version via: Clicking on the green Code button and copy the git URL Ensure you've installed a Git client (e.g. https://git-scm.com/downloads ) Open your command prompt and navigate to the folder where you want to pull down the source code (e.g. c:\\github) Pull down your forked repo via git clone <the copied git url> If you want to update your forked repo then you can either use the GitHub UI or command line, check out https://medium.com/@sahoosunilkumar/how-to-update-a-fork-in-git-95a7daadc14e for more instructions Setting up your development environment I want to use Visual Studio for development Using Visual Studio requires you to: Download and install Visual Studio 2019: https://visualstudio.microsoft.com/free-developer-offers/ , ensure that you install at least Visual Studio 2019 version 16.8.0 upwards as PnP Core depends on .NET 5.0 Ensure you've installed the .NET 5.0 SDK Navigate to the ./src/sdk folder and open the PnP.Core.sln solution I want to use Visual Studio Code for development Using Visual Studio Code requires you to: Download and install Visual Studio Code: https://visualstudio.microsoft.com/free-developer-offers/ Ensure you've installed the .NET 5.0 SDK Open Visual Studio Code and install these extensions (click on the Extensions button in the vertical toolbar and search for it, then click on the Install link) and close it again once done The C# extension (mandatory): this extension brings support for compiling and debugging C# The .NET Core Test Explorer (optional): this extension always you to easily navigate the test cases and run a group of test cases Navigate to the ./src/sdk folder, right click and choose Open with Code or alternatively when using command line type code . Making changes and testing them The recommended approach for making changes and testing them is by writing the appropriate unit tests (see the Writing tests article). Create a PR with your changes Note When you want to make changes it's recommended to isolate each change in a separate PR and that's best done by creating a branch per change. Having a branch per change allows you to work on multiple changes while you still can submit them as individual PR's. To create a new branch starting from the dev branch you can use git checkout -b mybranch dev . To push this branch to GitHub you can use git push -u mybranch . Once you've coded and tested your contribution you'll need to create a pull request (PR) again the dev branch of the https://github.com/pnp/pnpcore repository: Go to Pull requests in your fork and click on the green New pull request button Ensure you've configured the base repository to be the pnp/pnpcore repo using the dev branch Click on Create pull request , provide a descriptive title and description and click on Create pull request Ensure all checks have passed"
  },
  "contributing/using paging.html": {
    "href": "contributing/using paging.html",
    "title": "Implementing paging | PnP Core SDK",
    "keywords": "Implementing paging If you want a model (e.g. List ) to retrieved using paging, then you'll need to explicitly enable paging and this article will explain how. Using ISupportPaging To enable paging support you need to add the ISupportPaging<> interface on the public collection class interface of the model for which you want to use paging. If you for example want to enabled paged retrieval of Lists then you need to add the interface to the ListCollection class. public interface IListCollection : IQueryable<IList>, IDataModelCollection<IList>, ISupportPaging<IList> { } Once you've done that the paging methods/attribute can be used as shown in this example: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Get a first page of lists of size 2 await context.Web.Lists.GetPagedAsync(2, p => p.Title); // Do we have a pointer to the next page? if (context.Web.Lists.CanPage) { // Load the next page await context.Web.Lists.GetNextPageAsync(); // Load all pages await context.Web.Lists.GetAllPagesAsync(); } } Important Since paging depends on the ODATA $top operator you also need to make your class linq queryable (by implementing IQueryable<> , next to the default IDataModelCollection<> ). If for some reason you cannot make your collection class linq queryable, then ensure that you've decorated your model class ( List in this case) with LinqGet as shown below [SharePointType(\"SP.List\", Uri = \"_api/Web/Lists(guid'{Id}')\", Update = \"_api/web/lists/getbyid(guid'{Id}')\", LinqGet = \"_api/web/lists\")] [GraphType(Get = \"sites/{Parent.GraphId}/lists/{GraphId}\", LinqGet = \"sites/{Parent.GraphId}/lists\")] internal partial class List { }"
  },
  "contributing/writing documentation.html": {
    "href": "contributing/writing documentation.html",
    "title": "Writing documentation | PnP Core SDK",
    "keywords": "Writing documentation The documentation system is based on DocFX , and combines inline code comments (the so called triple slash comments) with articles written in MD format. The resulting generated documentation is hosted on https://pnp.github.io/pnpcore . To extend documentation you can: Author articles Write inline code documentation via the triple slash comments Once you've made changes to the documentation and your changes are merged into the dev branch then a GitHub workflow will be triggered and this workflow will refresh documentation automatically. Writing articles Articles are at the core of the PnP Core SDK documentation and they live in the docs\\articles folder. Articles are written in DocFX Flavored Markdown , which is an extension on top of GitHub flavored markdown. Articles target either the library consumer or the library contributor, hence they should be added to the consumer or contributor folder respectively. When an article requires images, then all images are added in the docs\\images folder. You can eventually organize images in sub-folders of the docs\\images folder. If you want to show your article in the table of contents, then you need to make the needed changes in toc.yml , which you find in the root of the docs folder. Writing inline code documentation Documentation written in the code files themselves is used to generate the Api Documentation and depends on docfx parsing the triple slash comments that you add to the code. Below resources help you get started: Triple slash (also called XML documents) commenting in .Net code files DocFX support for triple slash comments"
  },
  "contributing/writing tests.html": {
    "href": "contributing/writing tests.html",
    "title": "Writing test cases | PnP Core SDK",
    "keywords": "Writing test cases Test cases are a crucial part of the PnP Core SDK as they help ensuring code quality and provide feedback to contributors on how well their changes are working. All new contributions must be covered by test cases unless the added functionality is already somehow covered by existing test cases. Setting up your environment to run the tests cases If you want to use and extend these unit tests then you'll need to do a simple onetime setup: Go to the test project folder (src\\sdk\\PnP.Core.Test) Copy appsettings.copyme.json to appsettings.xxx.json (xxx identifies your test environment) and update the url's and accounts to match with what's available in your tenant. The test system requires that you have setup the following sites (optionally use setuptestenv.ps1 to help create the needed sites): A modern, group connected, team site (recommended name is pnpcoresdktestgroup ) which was teamified and which has a sub site (recommended name is subsite ) A modern communication site (recommended name is pnpcoresdktest ) which has a sub site (recommended name is subsite ) Copy env.sample to env.txt Open env.txt and put as content the value xxx (xxx identifies your test environment) Ensure that you have the PnP O365 Management Shell multi-tenant app registered in Azure AD and Consented - this is used for the Graph and SharePoint tests. Quickest way to set this up, is to either: Use PnP PowerShell to connect to a site using the '-PnPO365ManagementShell' parameter see reference: https://docs.microsoft.com/en-us/powershell/module/sharepoint-pnp/connect-pnponline?view=sharepoint-ps Refer to the User documentation article Using the multi-tenant PnP Azure AD application If you want run the taxonomy tests live you need to configure your term store: Ensure your account is a term store administrator. Go to your SharePoint admin center (e.g. https://contoso-admin.sharepoint.com ), under Content services select Term store and add your account as admin Ensure you've added Dutch as working language for your term store. Go to your SharePoint admin center (e.g. https://contoso-admin.sharepoint.com ), under Content services select Term store and ensure Dutch is in the list of working languages That should be it. Happy testing! Running the existing tests in offline mode The test model runs tests by default in an offline modus. This means that tests run really quick and that they should always work, even if you are offline (not connected to the Internet network). There are just few tests that forcibly require to be executed online, and those will fail when you are offline. After you've setup your environment for testing you should open the Visual Studio Test Explorer and click on the Run all tests button to verify that all tests run successfully on your computer. Authoring new test cases Where do I put my test case? All test cases belong to the PnP.Core.Test project and generally speaking the test cases will either be linked to extending the model or linked to the \"core\" part that handles the interaction with SharePoint or Microsoft Graph. For model related test cases, please add them to existing test classes in the respective model folders: SharePoint model tests go into the SharePoint folder. You either create a new file with test cases or add your test into an existing file. Teams model tests go into the Teams folder. You either create a new file with test cases or add your test into an existing file. Azure Active Directory model tests go into the AzureActiveDirectory folder. You either create a new file with test cases or add your test into an existing file If your test extends an already tested model then most likely you'll be able to add your test to one of the existing test classes. When you add \"core\" tests these will need to be added in the Base folder for core tests or in the QueryModel folder for linq tests. Anatomy of a typical test file and test case It's easier to learn this by looking at a sample: [TestClass] public class GetTests { [ClassInitialize] public static void TestFixtureSetup(TestContext context) { // Configure mocking default for all tests in this class, unless override by a specific test //TestCommon.Instance.Mocking = false; } #region Tests that use REST to hit SharePoint [TestMethod] public async Task GetSinglePropertyViaRest() { //TestCommon.Instance.Mocking = false; using (var context = await TestCommon.Instance.GetContextAsync(TestCommon.TestSite)) { var web = await context.Web.GetAsync(p => p.WelcomePage); // Is the property populated Assert.IsTrue(web.IsPropertyAvailable(p => p.WelcomePage)); Assert.IsTrue(!string.IsNullOrEmpty(web.WelcomePage)); // Are other properties still not available Assert.IsFalse(web.IsPropertyAvailable(p => p.Title)); } } } All test classes will have a TestFixtureSetup static method which is marked as class initializer. Using this method you can turn all tests in a given class from offline testing to online testing (so testing without using the mock data). Looking at the test method itself you'll notice that: To create a PnPContext the test cases uses the TestCommon.Instance.GetContext method: it's important to use this method as this one is hooked up to the configuration you specified plus it will deliver a context that understands how to work with mock data. Uncommenting the TestCommon.Instance.Mocking = false; line can be used to put this specific test in online mode: when you start developing your test you'll have do that (as you initially don't have mock data) Mocking of server responses in tests The PnP Core SDK tests use a custom built mocking system which essentially simply saves server responses when running in online mode. When running in offline mode (so when mocking data) the saved server responses are used to mock the server response. All of this works automatically and can be turned on/off by setting the TestCommon.Instance.Mocking property to true or false (see also the FAQ at the end of this page to learn more). When running in online mode each response for a server request will be stored as a file in a sub folder of the current test class. This folder is always named MockData and has a sub folder per test class, which ensures that mocking files for a given test can be easily identified. The filename uses the following pattern {testname}-{context order}-{sequence}.response . Steps to create a test case If you follow below steps you'll be creating test cases according to the PnP Core SDK guidelines: Find the right location to add your test, either use an existing file or create a new test file Add below test to get started [TestMethod] public async Task NameOfYourTestMethod() { TestCommon.Instance.Mocking = false; using (var context = await TestCommon.Instance.GetContextAsync(TestCommon.TestSite)) { // here comes your actual test code using (var context1 = await TestCommon.Instance.GetContextAsync(TestCommon.TestSite, 1)) { // here comes your actual test code, eg code that validates what was created in the first part } } } Write your test with mocking turned off Once your test is ready delete the generated mock data files (see the .response files in the MockData folder) and run your test once more to regenerate them. This step ensures that no stale mocking files will be checked in. Turn mocking on (commenting the TestCommon.Instance.Mocking = false; line) and verify your test still works Check in your test case together with the offline files generated in the mockdata folder Optionally : if your test is creating artifacts in Microsoft 365 it's best to code the cleanup in the test or in the default cleantestenv.copyme.ps1 script Important Each checked in test must be checked in with mocking turned on and as such with the appropriate offline test files (the .response files). This is important as it ensures that test cases execute really fast and that tests can be used in build/deploy pipelines. When you use GetContextAsync multiple times in a single test case then use a sequence number for all but the first usage. The second usage would be like this: await TestCommon.Instance.GetContextAsync(TestCommon.TestSite, 1) , the third usage await TestCommon.Instance.GetContextAsync(TestCommon.TestSite, 2) . Analyze Code Coverage PnP Core SDK is built with quality in mind, thus among other things, we maintain good code coverage > 80%. Ideally, all new code you add to the library should be covered with tests at not less than 80%. If you want to see, which lines are covered and which are not, you can use one of the methods below. If you have Visual Studio Ultimate In this case, seeing the coverage is as easy as opening Test Explorer and right-clicking on the desired test and selecting \"Analyze Code Coverage\" : Visual Studio will run the tests and will highlight all the covered and uncovered lines in your source code. If you do not have Visual Studio Ultimate In case if you use any other Visual Studio editions or use VSCode, you can see the coverage by running a PowerShell script. The script is cross-platform, so you can use it on any OS. Install the prerequisites. The script uses a special ReportGenerator tool to convert code coverage reports into the human-readable format. You should install it globally first: dotnet tool install -g dotnet-reportgenerator-globaltool You may need to restart all your shells so that reportgenerator becomes globally available in PowerShell. Navigate to src\\tools\\CodeCoverage\\ and run .\\Analyze-Code-Coverage.ps1 . You should provide either -TestProjectName or -FqdnClassName parameters. For example below command will run all tests in the specified class and will launch a browser with the coverage report: .\\Analyze-Code-Coverage.ps1 -FqdnClassName PnP.Core.Test.SharePoint.FilesTests Or run all tests in the specified test project and do not open a browser with the coverage report: .\\Analyze-Code-Coverage.ps1 -TestProjectName PnP.Core.Test -OpenReport $false If you use -OpenReport $false , you can just refresh the page in a browser to see the updated results. Analyze the report. By default, it shows you all the files. You should narrow down the results to find the file(s) you're interested in by applying a filter at the top right input above the files list: Then you can click on each individual file to see the actual line coverage: Frequently Asked Questions Do I need to recreate the sites after each live test run? You can opt to recreate the sites each time, but that will be time consuming. It's better to clean the created artifacts before launching a new live test run. The artifacts to clean obviously depend on the written test cases and it's a best practice to keep the cleantestenv.copyme.ps1 script up to date with the needed cleaning work. You can tailor this script for your environment and save it as cleantestenv.xxx.ps1 (xxx identifies your test environment) to add your specific cleanup instructions. In addition, we strongly recommend you to prefix the name of any asset or artifact created in the tests with the constant TestCommon.PnPCoreSDKTestPrefix . This will help identifying the assets and ease up the cleaning process. Alternatively, you can use the helper method TestCommon.GetPnPSdkTestAssetName(string name) to ensure any name you choose is always prefixed following our convention. How can I configure tests to run live versus the default offline run? By default all the tests run based upon offline data, this is done to enable fast test execution without being dependent on a Microsoft 365 backend to be available and configured for testing. If you however are adding new test cases or refactoring code you might want to run one or more tests in live mode. There are 3 options: Run a single test live To run a single test live you simply need to uncomment the TestCommon.Instance.Mocking = false; line to configure the test to run without using the mocking data, so run live. [TestMethod] public async Task GetSinglePropertyViaRest() { TestCommon.Instance.Mocking = false; using (var context = await TestCommon.Instance.GetContextAsync(TestCommon.TestSite)) { var web = await context.Web.GetAsync(p => p.WelcomePage); // Is the property populated Assert.IsTrue(web.IsPropertyAvailable(p => p.WelcomePage)); Assert.IsTrue(!string.IsNullOrEmpty(web.WelcomePage)); // Are other properties still not available Assert.IsFalse(web.IsPropertyAvailable(p => p.Title)); } } Note Please only commit tests that can run offline: tests need to have offline data + mocking must be turned on. Run all the tests in a test class live To run all tests in a given test class live you can turn off mocking via a test class initialized: [ClassInitialize] public static void TestFixtureSetup(TestContext context) { // Configure mocking default for all tests in this class, unless override by a specific test TestCommon.Instance.Mocking = false; } Note Please only commit tests that can run offline: tests need to have offline data + mocking must be turned on. Run all the tests live In the rare case you want to run all the test cases live you need to change the default setting of the Mocking property from true to false in TestCommon.cs (in the Utilities folder): public bool Mocking { get; set; } = false; Note Please only commit tests that can run offline: tests need to have offline data + mocking must be turned on. Can I rename test files or test cases Yes, if naming needs to change you can do that. Keep in mind that the offline files live in a folder named accordingly to the test file and the offline files depend on the test case name, so you'll have to do similar renames in offline files or folder. My test cannot run in offline mode and as such it breaks the GitHub \"Build and Test\" workflow If you really can't make your test work offline then you'll need to exclude the test from being executed in the GitHub Build and Test workflow. This can be done by adding the following check to your test case: if (TestCommon.RunningInGitHubWorkflow()) Assert.Inconclusive(\"Skipping live test because we're running inside a GitHub action\"); My tests for Terms fail when running in Live Mode Please add \"Dutch\" to language support for terms, this is only required for live running for term set tests only, this will take a few minutes before it is effective in the Microsoft Graph. If this persists, the test uses a Sleep (of 10 seconds) method to \"wait\" for the removal of test artefacts, sometimes the artefacts are not removed within this time, this will show the test to fail."
  },
  "demos/Demo.ASPNetCore/README.html": {
    "href": "demos/Demo.ASPNetCore/README.html",
    "title": "PnP Core SDK - ASP.NET Core Sample | PnP Core SDK",
    "keywords": "PnP Core SDK - ASP.NET Core Sample This solution demonstrates how the PnP Core SDK can be used in a ASP.NET Core web application Source code You can find the sample source code here: /samples/Demo.ASPNetCore Run the sample Register and configure an AAD app In order for the user to authenticate on the App, A new app registration should be created on Azure Portal Go to Azure Active Directory Portal In App registrations, click New registration Enter a name for your new app, make sure Accounts in this organizational directory only is selected. As the Redirect URI, in Web platform enter https://localhost:44336/signin-oidc (The port may vary according to your Visual Studio) Under Implicit grant section, check ID tokens Go to API permissions section , click Add a permission Select Microsoft Graph > Delegated permissions > select Directory.Read.All Select Microsoft Graph > Delegated permissions > select User.Read Select Microsoft Graph > Delegated permissions > select Sites.Read.All Select Microsoft Graph > Delegated permissions > select Files.Read.All Select SharePoint > Delegated permissions > select AllSites.Read Select Azure Active Directory Graph > Delegated permissions > select Directory.Read.All Select Azure Active Directory Graph > Delegated permissions > select User.Read Click Grant admin consent for {tenant} Go to Certificates & Secrets and register a new client secret. From Overview , -- copy the value of Directory (tenant) ID -- copy the value of Application (client) ID Configure your application Configure the name of your tenant as the value of AzureAd:Domain in appsettings.json setting Configure the Tenant ID of your app as the value of AzureAd:TenantId in appsettings.json setting Configure the Client ID of your app as the value of AzureAd:ClientId in appsettings.json setting Configure the Client Secret of your app as the value of AzureAd:ClientSecret in appsettings.json setting Configure the URL of the target \"modern\" team site as the value of PnPCore:Sites:DemoSite:SiteUrl in appsettings.json setting Be sure to have a Team in Microsoft Teams backing the modern team site in the above site collection Execute Hit F5 in Visual studio to execute the ASP.Net Core app. When trying to access one of the sections, the applications prompts you for signing in."
  },
  "demos/Demo.AzureFunction.OutOfProcess.AppOnly/readme.html": {
    "href": "demos/Demo.AzureFunction.OutOfProcess.AppOnly/readme.html",
    "title": "PnP Core SDK - Azure Function v4 Sample using out-of-process with .NET 6 | PnP Core SDK",
    "keywords": "PnP Core SDK - Azure Function v4 Sample using out-of-process with .NET 6 This solution demonstrates how to build a simple backend API in the form of an HTTP Trigger Azure Function. The sample contains a CreateSite function that creates a new site collection including a new site page containing some text and an image. This Azure function is using application permissions (app-only). Source code You can find the sample source code here: /samples/Demo.AzureFunction.OutOfProcess.AppOnly Note This sample was created with Visual Studio 2022 using .NET 6.0 and has been created as an Azure Function v4 running out-of-process (so using process isolation). Sample configuration Note For the sample setup, you will need to have a recent version of PnP.PowerShell installed on your machine. Create and configure the Azure AD application Using PnP PowerShell this becomes really simple. Below cmdlet will create a new Azure AD application, will create a new self-signed certificate and will configure that cert with the Azure AD application. Finally the right permissions are configured and you're prompted to consent these permissions. # Ensure you replace contoso.onmicrosoft.com with your Azure AD tenant name # Ensure you replace joe@contoso.onmicrosoft.com with the user id that's an Azure AD admin (or global admin) Register-PnPAzureADApp -ApplicationName FunctionDemoSiteProvisiong -Tenant contoso.onmicrosoft.com -Store CurrentUser -GraphApplicationPermissions \"Sites.FullControl.All\" -SharePointApplicationPermissions \"Sites.FullControl.All\" -Username \"joe@contoso.onmicrosoft.com\" -Interactive Important Approving application permissions requires you to use a user which is Azure AD admin or global admin in your tenant Once this cmdlet is done you do need to to copy certificate thumbprint and ClientId values as these will be needed for the configuration step If you prefer to manually create and configure the Azure AD application then follow these steps: Create a new (self-signed) certificate Create a new Azure AD application and take note of the shown Application (client) ID Under Certificates & secrets upload your certificate and take note of the shown thumbprint Under API permissions add these two application permissions: Microsoft Graph -> Sites.FullControl.All application permission SharePoint -> Sites.FullControl.All application permission Click on Grant consent for to consent the permissions for the application Configure the sample's configuration file The demo function needs a configuration file named local.settings.json , copy the local.settings.copyme.json file into a file named local.settings.json and in the file properties set Copy to output directory to Copy if newer . Once that's done you do have this file in project: { \"IsEncrypted\": false, \"Values\": { \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\", \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet-isolated\", \"SiteUrl\": \"<base site collection url to connect to>\", \"TenantId\": \"<tenant id>\", \"ClientId\": \"<application client id>\", \"CertificateThumbPrint\": \"<thumbprint>\", \"WEBSITE_LOAD_CERTIFICATES\": \"<thumbprint>\" }, \"Host\": { \"CORS\": \"*\" } } After filling in the configuration data your file will look like this: { \"IsEncrypted\": false, \"Values\": { \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\", \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet-isolated\", \"SiteUrl\": \"https://contoso.sharepoint.com\", \"TenantId\": \"9bd71689-66cb-4560-bb09-ab908ec21437\", \"ClientId\": \"8bb62681-cddd-41e0-bfdf-ab908ec8a3c3\", \"CertificateThumbPrint\": \"1C3342BA9B5269FDBCDCAB5D6334F1A60C73B184\", \"WEBSITE_LOAD_CERTIFICATES\": \"1C3342BA9B5269FDBCDCAB5D6334F1A60C73B184\" }, \"Host\": { \"CORS\": \"*\" } } Run the sample If you're using Visual Studio then press F5 to launch the sample, if you're using command line then use func start . Note To use command line you first have to install the Azure function core tools version 4.x With the sample running go to your browser and load this url: http://localhost:7071/api/CreateSite?owner=joe@contoso.onmicrosoft.com&sitename=azurefunctiondemo001 , doing this will call into your Azure function passing the owner of the site collection that will be created and the site collection name. You have to update the url parameters accordingly, above sample will result in a site collection with url https://contoso.sharepoint.com/sites/azurefunctiondemo001 having joe@contoso.onmicrosoft.com set as owner. Deploy the sample to Azure Create Azure Function App Go to the Azure Portal and create a new Function App (consumption plan) using following settings: Publish: Code Runtime stack: .NET Version: 6 Region: pick the region that works best for you Click Review + create , verify the settings and click Create . Now your function is provisioned in Azure. Configure the Function App Once the Function App has been created navigate to Settings -> Configuration and add the following Application settings : Name Value SiteUrl base site collection url to connect to, e.g. https://contoso.sharepoint.com TenantId tenant id, e.g. 9bd71689-66cb-4560-bb09-ab908ec21437 ClientId application client id, e.g. 8bb62681-cddd-41e0-bfdf-ab908ec8a3c3 Click Save to persist the changes. Under Function runtime settings verify the Runtime version is set to ~4 . Deploying the certificate - use KeyVault Final configuration step needed is ensuring the Azure Function App can use the configured certificate. Quite often you want to reuse your certificate across multiple Azure resources and then consolidating all secrets and certificates in an Azure KeyVault is a commonly used scenario. So let's explain how to make that happen. Ensure the managed identity of the function is on: click on Settings -> Identity and ensure System assigned status is set to On Navigate to your Azure KeyVault or create a new one if you've none available In KeyVault click on Settings -> Certificates -> Generate/Import -> select Import in the dropdown and provide a name and path the PFX file you've created earlier on via the Register-PnPAzureADApp Powershell cmdlet. Click Create to add the certificate In KeyVault click on Settings -> Access Policies -> + Add Access Policy : Select Secret Permission Get Select Certificate Permission Get Select principal: Click on none selected In the Principal page enter the name of the Azure Function App, this selects the managed identity that you've enabled before. Click Select to pick that principal Click Add to add the new Access Policy Click Save to persist the changes Using above steps you've now uploaded your certificate in a KeyVault and you've enabled your Function App to read secrets from the vault using it's managed identity. Final step is letting the Azure Function App now which certificate to pick. For that follow these steps: In KeyVault click on your certificate and then click on the Current version . The certificate details will be shown, copy the Certificate Identifier e.g. https://mykeyvault.vault.azure.net/certificates/PnPCoreSDKDemo/6c752ad7218248b0976f387ef288523a In the Function App navigate to Settings -> Configuration and add the following Application setting . Note the certificate version identifier has been dropped from the URL. Name Value CertificateFromKeyVault @Microsoft.KeyVault(SecretUri=https://mykeyvault.vault.azure.net/certificates/PnPCoreSDKDemo/) Click Save to persist the changes. Deploying the certificate - local upload to Function App Previous steps showed you how to manage your certificate via KeyVault, but you can also opt to simply upload the certificate to the Azure Function App. Navigate to Settings -> TLS/SSL Settings and click on Private Key Certificates (.pfx) Click on Upload Certificate , browse to the location of the PFX file you've created earlier on via the Register-PnPAzureADApp Powershell cmdlet. Click Upload to upload the certificate Navigate to Settings -> Configuration and add the following Application settings Name Value CertificateThumbPrint thumbprint, e.g. 1C3342BA9B5269FDBCDCAB5D6334F1A60C73B184 WEBSITE_LOAD_CERTIFICATES thumbprint, e.g. 1C3342BA9B5269FDBCDCAB5D6334F1A60C73B184 Deploy the Function App code from Visual Studio Final step now that the Function App is configured is to deploy our bits. Right click the project in Visual Studio and choose Publish... Chose the Import Profile option: Navigate to your Azure Function App in Azure Portal and click on Get publish profile from the Overview page Select the downloaded profile Click on Publish to push your project to the Azure Function App Test your Function App in Azure To test your Function App you now need to build an URL that points to your Azure Function App + it's function authorization key. To that URL the owner and siteName URL parameters have to be added. To get your Azure Function URL follow these steps: Navigate to your Azure Function App in Azure Portal and Navigate to Functions -> Functions Click on the CreateSite function Click on Get Function Url and copy the proposed URL Append &owner=joe@contoso.onmicrosoft.com&sitename=azurefunctiondemo001 The final result will be something along these lines: https://myfunctionapphost.azurewebsites.net/api/CreateSite?code=OerO/tVAIGbCacM1e6PYi6MsH5rsHmzpjUmZMlKTYayDhcYMJ9zjZw==&owner=joe@contoso.onmicrosoft.com&sitename=azurefunctiondemo001"
  },
  "demos/Demo.AzureFunction/README.html": {
    "href": "demos/Demo.AzureFunction/README.html",
    "title": "PnP Core SDK - Azure Function v3 Sample | PnP Core SDK",
    "keywords": "PnP Core SDK - Azure Function v3 Sample This solution demonstrates how to build a simple backend API in the form of an HTTP Trigger Azure Function. A GetSiteDocuments() function that returns the list of documents in the Shared Documents library of the configured site via using an App-Only context authenticated with a self signed certificate. Source code You can find the sample source code here: /samples/Demo.AzureFunction Note This sample was created with Visual Studio 2019 (v16.7.3) and has been tested with a Windows Azure Function v3. Quickstart Setup Note For the quickstart setup, you will need to have a recent version (> 1.2.0) of PnP.PowerShell installed on your machine. From the solution folder execute the following PowerShell. (Make sure you set the values of the variables according to your environment and preferences) $site = \"https://contoso.sharepoint.com/sites/pnpcoresdktestgroup\" $tenant = \"contoso.onmicrosoft.com\" $pwd = \"pwd\" .\\Configure.ps1 -SiteUrl $site -Tenant $tenant -CertificatePassword $pwd This script will: uses DeviceLogin method to connect to Azure AD register a new Azure AD application grant it the permissions to allow the use of all PnP Core SDK features Create a self signed certificate, save it to your local store and export it as .cer and .pfx files Pre-fill your local.settings.json file with the needed information from operations above Feel free to have a look at the Configure.ps1 to check what it does. The settings of the Azure Function will contain the following { \"IsEncrypted\": false, \"Values\": { \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\", \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet\", \"SiteUrl\": \"https://contoso.sharepoint.com/sites/pnpcoresdktestgroup\", \"TenantId\": \"[TENANT ID]\", \"ClientId\": \"[CLIENT ID]\", \"CertificateThumbPrint\": \"[CERTIFICATE THUMBPRINT]\", \"WEBSITE_LOAD_CERTIFICATES\": \"[CERTIFICATE THUMBPRINT]\" } } The settings above are mostly necessary for authentication. Setting Description SiteUrl This parameter allows you to configure the URL of the Site to use for your Default configuration. TenantId The ID (GUID) of your tenant. Used by the PnP Core authentication provider. ClientId The Client ID of your Azure AD app. Used by the PnP Core authentication provider. CertificateThumbPrint The Thumbprint of the certificate. Used by the PnP Core authentication provider. WEBSITE_LOAD_CERTIFICATES The Thumbprint of the certificate. Indicates the Azure Function runtime to load the certificate from its registered certificates. Note For more information about configuring authentication, please visit PnPCoreSDK Documentation: Using the SDK - Authentication Try it locally Open the solution in Visual Studio and hit F5 to launch the Azure Function emulator When you see the following your local Azure Function is up and running Azure Functions Core Tools (3.0.2912 Commit hash: bfcbbe48ed6fdacdf9b309261ecc8093df3b83f2) Function Runtime Version: 3.0.14287.0 Hosting environment: Production Content root path: C:\\wrk\\pnp\\pnpcore\\src\\samples\\Demo.AzureFunction\\bin\\Debug\\netcoreapp3.1 Now listening on: http://0.0.0.0:7071 Application started. Press Ctrl+C to shut down. Functions: GetSiteDocuments: [GET] http://localhost:7071/api/GetSiteDocuments To test the API, you can open the above URL in a browser or by typing the following command in a console: curl http://localhost:7071/api/GetSiteDocuments Try it on Azure If you followed all the steps above and the Function is working well locally, you can publish your Azure Function on Azure. For the sake of simplicity, in this sample, we will use the Publish feature from Visual Studio. The extra steps consist in: Make sure the app settings are specified in the Azure Function App Make sure the Certificate we use for authentication is uploaded to the Azure Function App To publish the Azure Function: In the Visual Studio Solution Explorer, right-click the Demo.AzureFunction project and click Publish Create or Import a publishing profile to an Azure Function App Click Publish Click the Manage Azure App Service settings link For each setting for which a Remote value is not yet specified, click the Insert value from Local link Click the Manage in Azure Portal link In the TLS/SSL settings tab, choose Private Key Certificates (.pfx) and click Upload Certificate Browse your computer and select the .pfx certificate we created earlier, enter the password chosen earlier and click Upload To Make sure the Azure Function is working properly, on the Azure Portal go to your Function App blade: Go to the Functions tab Select the GetSiteDocuments function On the Code + Test tab, click the Test/Run button Make sure the chosen Method is GET Click Run Alternatively, from Code + Test tab mentioned aboved you can click the Get Function URL button and copy the URL. Then paste it in your browser or using curl in a terminal (see example here below) # On Windows 10 curl https://pnpcoresdk-demo.azurewebsites.net/api/GetSiteDocuments?code=gqyZ4H259HbYfk7axxxxxxxxxxxxxxxaqmtleLUHISazg/FDvSbLtYaw== StatusCode : 200 StatusDescription : OK Content : {\"documents\":[{\"name\":\"test.docx\",\"timeLastModified\":\"2020-08-31T21:29:56Z\",\"uniqueId\":\"fbc3c372-c1 36-45ee-8341-1e768c973182\"}]} RawContent : HTTP/1.1 200 OK Content-Length: 128 Content-Type: application/json; charset=utf-8 Date: Sun, 27 Sep 2020 15:52:36 GMT {\"documents\":[{\"name\":\"test.docx\",\"timeLastModified\":\"2020-08-31T21:29:56Z\",... Forms : {} Headers : {[Content-Length, 128], [Content-Type, application/json; charset=utf-8], [Date, Sun, 27 Sep 2020 15:52:36 GMT]} Images : {} InputFields : {} Links : {} ParsedHtml : mshtml.HTMLDocumentClass RawContentLength : 128"
  },
  "demos/Demo.Blazor/README.html": {
    "href": "demos/Demo.Blazor/README.html",
    "title": "PnP Core SDK - Blazor Sample | PnP Core SDK",
    "keywords": "PnP Core SDK - Blazor Sample This solution demonstrates how the PnP Core SDK can be used in a Blazor WebAssembly app Source code You can find the sample source code here: /samples/Demo.Blazor Run the sample Register and configure an AAD app In order for the user to authenticate on the App, A new app registration should be created on Azure Portal Go to Azure Active Directory Portal In App registrations, click New registration Enter a name for your new app, make sure Accounts in this organizational directory only is selected. As the Redirect URI, in Web platform enter https://localhost:44349/authentication/login-callback (The port may vary according to your Visual Studio) Under Implicit grant section, check Access tokens and ID tokens Go to API permissions section , click Add a permission -- Select SharePoint > Delegated permissions > select AllSites.FullControl -- Select Microsoft Graph > Delegated permissions > select email , openid and Sites.FullControl.All Click Grant admin consent for {tenant} From Overview , -- copy the value of Directory (tenant) ID -- copy the value of Application (client) ID Configure your application Configure the URL of your SharePoint site as the value of SharePoint:SiteUrl app setting in the file wwwroot/appsettings.json , replace the {app_id} and the {tenant_id} accordingly with the values from above Execute Hit F5 in Visual studio to execute the Blazor app. When trying to access one of the sections, the applications prompts you for signing in"
  },
  "demos/Demo.Console.Minimal/readme.html": {
    "href": "demos/Demo.Console.Minimal/readme.html",
    "title": "PnP Core SDK - Minimal getting started sample | PnP Core SDK",
    "keywords": "PnP Core SDK - Minimal getting started sample This solution aims at showing you how you can use PnP Core SDK using the minimal amount of configuration and code. Source code You can find the sample source code here: /samples/Demo.Console.Minimal Note This sample was created with Visual Studio 2022 using .NET 6.0 . Sample configuration Create an Azure AD application The one thing to configure before you can use this sample is an Azure AD application: Navigate to https://aad.portal.azure.com Click on Azure Active Directory , followed by navigating to App registrations Add a new application via the New registration link Give your application a name, e.g. PnPCoreSDKConsoleDemo and add http://localhost as redirect URI. Clicking on Register will create the application and open it Take note of the Application (client) ID value, you'll need it in the next step Click on API permissions and add these delegated permissions Microsoft Graph -> Sites.Manage.All SharePoint -> AllSites.Manage Consent the application permissions by clicking on Grant admin consent Configure the application Open Program.cs and update the value assigned to the clientId and siteUrl variables to the created Azure AD client id and valid site URL for your tenant. using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using PnP.Core.Auth; using PnP.Core.Services; string clientId = \"c6b15c83-d569-4514-b4af-d433110123de\"; string siteUrl = \"https://bertonline.sharepoint.com/sites/prov-1\"; // Creates and configures the host var host = Host.CreateDefaultBuilder() .ConfigureServices((context, services) => { // Add PnP Core SDK services.AddPnPCore(options => { // Configure the interactive authentication provider as default options.DefaultAuthenticationProvider = new InteractiveAuthenticationProvider() { ClientId = clientId, RedirectUri = new Uri(\"http://localhost\") }; }); }) .UseConsoleLifetime() .Build(); // Start the host await host.StartAsync(); using (var scope = host.Services.CreateScope()) { // Ask an IPnPContextFactory from the host var pnpContextFactory = scope.ServiceProvider.GetRequiredService<IPnPContextFactory>(); // Create a PnPContext using (var context = await pnpContextFactory.CreateAsync(new Uri(siteUrl))) { // Load the Title property of the site's root web await context.Web.LoadAsync(p => p.Title); Console.WriteLine($\"The title of the web is {context.Web.Title}\"); } } Run the sample Press F5 to launch the sample. A new browser window/tab will open asking you to authenticate with your Microsoft 365 account. Once you've done that the application will get the title of the site and display it."
  },
  "demos/Demo.Console/README.html": {
    "href": "demos/Demo.Console/README.html",
    "title": "PnP Core SDK - Console Sample | PnP Core SDK",
    "keywords": "PnP Core SDK - Console Sample This solution demonstrates how the PnP Core SDK can be used in a console application. In this sample we're querying a modern group connected SharePoint site which also has Teams. If you're testing this code against a modern communication site or another classic site then please comment out the \"teams\" parts. Source code You can find the sample source code here: /samples/Demo.Console Run the sample Register and configure an AAD app In order for the user to authenticate on the App, A new app registration should be created on Azure Portal Go to Azure Active Directory Portal In App registrations, click New registration Enter a name for your new app, make sure Accounts in this organizational directory only is selected. As the Redirect URI, change from Web Platform to \"Mobile and Desktop Applications\" use http://localhost for the redirect URI (only needed if you want use an interactive authentication flow) Under Implicit grant section, check ID tokens and Access tokens Under Advanced settings section, set Allow public client flows to yes Go to API permissions section , click Add a permission Select Microsoft Graph > Delegated permissions > select Directory.Read.All Select Microsoft Graph > Delegated permissions > select User.Read Select Microsoft Graph > Delegated permissions > select ChannelMessage.Read.All Select Microsoft Graph > Delegated permissions > select ChannelMessage.Send Select Microsoft Graph > Delegated permissions > select TeamSettings.ReadWrite.All Select Microsoft Graph > Delegated permissions > select TeamsTab.ReadWrite.All Select Microsoft Graph > Delegated permissions > select Sites.Read.All Select Microsoft Graph > Delegated permissions > select Files.Read.All Select SharePoint > Delegated permissions > select AllSites.Read Click Grand admin consent for {tenant} From Overview , copy the value of Directory (tenant) ID copy the value of Application (client) ID Configure your application This demo application comes with code for 2 different authentication providers, the CredentialManagerAuthenticationProvider or the InteractiveAuthenticationProvider can be used. The latter is the default value. To configure the app update the appsettings.json file with: Configure the Tenant ID of your app as the value of CustomSettings:TenantId in appsettings.json setting Configure the Client ID of your app as the value of CustomSettings:ClientId in appsettings.json setting Configure the URL of a target Microsoft SharePoint Online modern team site collection as the value of CustomSettings:DemoSiteUrl in appsettings.json setting Configure the URL of a target Microsoft SharePoint Online sub site as the value of CustomSettings:DemoSubSiteUrl in appsettings.json setting Be sure to have a Team in Microsoft Teams backing the modern team site in the above site collection Execute Hit F5 in Visual studio to execute the console app. The app will prompt for an interactive login (via a browser window)."
  },
  "demos/Demo.PersistentTokenCache/README.html": {
    "href": "demos/Demo.PersistentTokenCache/README.html",
    "title": "PnP Core SDK - Console Sample with PersistentTokenCache | PnP Core SDK",
    "keywords": "PnP Core SDK - Console Sample with PersistentTokenCache This solution demonstrates how the PnP Core SDK can be extended to implement a persistent cache and reuse access tokens after application restart. After initial authentication the MSAL tokens are cached locally and when the application restarts there's no credential prompting needed anymore. This is realized by building a custom IAuthenticationProvider . Source code Note This sample was authored by Stefano Driussi 💪🥇 and the original source code can be found here . This code was copied to the PnP Core SDK samples after approval of the author, see this GitHub discussion for the background. You can find the sample source code here: /samples/Demo.PersistentTokenCache Run the sample Register and configure an AAD app In order for the user to authenticate on the App, A new app registration should be created on Azure Portal Go to Azure Active Directory Portal In App registrations, click New registration Enter a name for your new app, make sure Accounts in this organizational directory only is selected. As the Redirect URI, change from Web Platform to \"Mobile and Desktop Applications\" use http://localhost for the redirect URI (only needed if you want use an interactive authentication flow) Under Implicit grant section, check ID tokens and Access tokens Under Advanced settings section, set Allow public client flows to yes Go to API permissions section , click Add a permission Select Microsoft Graph > Delegated permissions > select Directory.Read.All Select Microsoft Graph > Delegated permissions > select User.Read Select Microsoft Graph > Delegated permissions > select ChannelMessage.Read.All Select Microsoft Graph > Delegated permissions > select ChannelMessage.Send Select Microsoft Graph > Delegated permissions > select TeamSettings.ReadWrite.All Select Microsoft Graph > Delegated permissions > select TeamsTab.ReadWrite.All Click Grand admin consent for {tenant} From Overview , copy the value of Directory (tenant) ID copy the value of Application (client) ID Configure your application This demo application is configured directly inside Program.cs . Replace all parameters between curly braces with actual values from your SharePoint/Azure app. Be sure to have a Team in Microsoft Teams backing the modern team site in the above site collection Execute Hit F5 in Visual studio to execute the console app. The app will prompt for an interactive login (via a browser window). Execute the application a second time and the code will fetch the last access token without requiring any user interaction."
  },
  "demos/Demo.RPi/README.html": {
    "href": "demos/Demo.RPi/README.html",
    "title": "Introduction | PnP Core SDK",
    "keywords": "Introduction This sample demonstrates using the pnp core library running on a Raspberry Pi device. Source code You can find the sample source code here: /samples/Demo.RPi Setup Hardware The hardware used: Raspberry Pi 4 (4 GB edition) HyperPixel 4-inch screen (optional) Note: this does not imply any limitations or minimal specifications for the apps to run on these types of devices, just a description of the hard used for the project. Software The operating system installed on the Raspberry Pi device is: \"Raspbian GNU/Linux 10 (buster)\" Before, ASP.NET core application can execute, you must install the ASP.NET Core 3.1 Runtime and SDK. # Download the script from Microsoft wget https://dotnet.microsoft.com/download/dotnet-core/scripts/v1/dotnet-install.sh chmod +x dotnet-install.sh # Ignore warnings ./dotnet-install.sh --channel Current --architecture arm --install-dir ~/cli # Allows running dotnet anywhere - thanks to # this article https://edi.wang/post/2019/9/29/setup-net-core-30-runtime-and-sdk-on-raspberry-pi-4 sudo nano .profile export DOTNET_ROOT=$HOME/cli export PATH=$PATH:$HOME/cli Running the app Configure your application Go to GitHub and clone the repoitory in a local folder Update appsettings.json with the connection details to a demo SharePoint site: Configure the user name to use as the value of CustomSettings:UserPrincipalName in appsettings.json setting Configure the password to use as the value of CustomSettings:Password in appsettings.json setting Configure the URL of a target Microsoft SharePoint Online modern team site collection as the value of CustomSettings:DemoSiteUrl in appsettings.json setting To get running: Either download this to the Raspberry Pi device directly or FTP the files over from a desktop PC. Run in Terminal dotnet build Run in Terminal dotnet run This will then output to the console the communications to SharePoint and the resulting details of the site."
  },
  "demos/Demo.WPF/README.html": {
    "href": "demos/Demo.WPF/README.html",
    "title": "PnP Core SDK - WPF Sample | PnP Core SDK",
    "keywords": "PnP Core SDK - WPF Sample This solution demonstrates how the PnP Core SDK can be used in a WPF application Source code You can find the sample source code here: /samples/Demo.WPF Run the sample Register and configure an AAD app In order for the user to authenticate on the App, A new app registration should be created on Azure Portal Go to Azure Active Directory Portal In App registrations, click New registration Enter a name for your new app, make sure Accounts in this organizational directory only is selected. As the Redirect URI, in Web platform enter http://localhost (only needed if you want use an interactive authentication flow) Under Implicit grant section, check ID tokens and Access tokens Under Advanced settings section, set Allow public client flows to yes Go to API permissions section , click Add a permission Select Microsoft Graph > Delegated permissions > select Directory.Read.All Select Microsoft Graph > Delegated permissions > select User.Read Select Microsoft Graph > Delegated permissions > select ChannelMessage.Read.All Select Microsoft Graph > Delegated permissions > select ChannelMessage.Send Select Microsoft Graph > Delegated permissions > select TeamSettings.ReadWrite.All Select Microsoft Graph > Delegated permissions > select TeamsTab.ReadWrite.All Click Grand admin consent for {tenant} From Overview , -- copy the value of Directory (tenant) ID -- copy the value of Application (client) ID Configure your application The application can be used with different authentication providers, see https://pnp.github.io/pnpcore/articles/consumer/configuring%20authentication.html for more details on the options. In this the sample uses an interactive flow, so you need to: Configure the Tenant ID of your app as the value of PnPCore:Credentials:InteractiveFlow:TenantId in appsettings.json setting Configure the Client ID of your app as the value of PnPCore:Credentials:InteractiveFlow:ClientId in appsettings.json setting Configure the URL of a target Microsoft SharePoint Online modern team site collection as the value of PnPCore:Credentials:Sites:DemoSite:SiteUrl in appsettings.json setting Be sure to have a Team in Microsoft Teams backing the modern team site in the above site collection Execute Hit F5 in Visual studio to execute the WPF app. When clicking on one of the buttons to load data, the applications prompts you for signing in via your browser."
  },
  "demos/README.html": {
    "href": "demos/README.html",
    "title": "PnP Core Samples | PnP Core SDK",
    "keywords": "PnP Core Samples Samples are best way to learn how to use, hence we've some example PnP Core SDK sample applications for you to learn. Following samples are available: Azure functions Sample Description .NET version PnP Core version Authentication Type Function mode Out of process Azure v4 Function using PnP Core SDK via dependency injection showing how to create and configure a site collection .NET 6 v1.4.0 Application permissions ( X509CertificateAuthenticationProvider ) V4, isolated process V3 function Azure v3 Function that shows how to use the PnP Core SDK via dependency injection .NET Core 3.1 v1.4.0 Application permissions ( X509CertificateAuthenticationProvider ) V3, in-process Important Another very useful Azure Functions sample is described on Sergei Sergeev's blog How to access SharePoint data from Azure Function with SPFx and PnP Core SDK . It shows how to setup an Azure Function using an on-behalf-of auth flow via the OnBehalfOfAuthenticationProvider and then call this Azure Function from a SharePoint Framework web part. Web applications Sample Description .NET version PnP Core version Authentication Type ASPNet Core site Demo application showing how use the PnP Core SDK from an ASP.Net Core application .NET 5 v1.4.0 Custom authentication is used via the ( ExternalAuthenticationProvider ) ASPNET Blazor app Sample Blazor WASM application that prototypes how the PnP Core SDK can be used in Blazor development .NET 5 v1.4.0 Custom IAuthenticationProvider implementation Console applications Sample Description .NET version PnP Core version Authentication Type Minimal Console demo Most simplistic console app that shows how to use the PnP Core SDK for working with Microsoft 365 data .NET 6 v1.4.0 Interactive login ( InteractiveAuthenticationProvider ) Console demo Demo console app that shows how to use the PnP Core SDK for working with Microsoft 365 data .NET 5 v1.4.0 Interactive login ( InteractiveAuthenticationProvider ) Persistent TokenCache Demo console app that shows how to use the PnP Core SDK with a custom authentication provider that utilizes an MSAL token cache avoiding credential prompts after first login .NET 5 v1.4.0 Custom IAuthenticationProvider implementation Pi demo Sample application running on dotNet Core on the Raspberry Pi .NET 5 v1.4.0 Username password login ( UsernamePasswordAuthenticationProvider ) Desktop applications Sample Description .NET version PnP Core version Authentication Type WPF app Sample WPF windows application showing how dependency injection and the PnP Core SDK can be used in WPF/XAML apps .NET 5 v1.4.0 Interactive login ( InteractiveAuthenticationProvider )"
  },
  "index.html": {
    "href": "index.html",
    "title": "PnP Core SDK | PnP Core SDK",
    "keywords": "PnP Core SDK Intro The PnP Core SDK is an SDK designed to work for Microsoft 365. It provides a unified object model for working with SharePoint Online and Teams which is agnostic to the underlying APIs being called. The initial goal for this library will be to cover the needs of developers working with either SharePoint Online or Teams, but we're also open to extend this library further towards other Microsoft 365 workloads if there's community demand for doing so. Important If you've used PnP Core SDK in a version before Beta3 then please check these instructions on how to upgrade your code to the current version. Getting started using this library Using the PnP Core SDK is simple, check out the getting started guide. Where is the code? The PnP Core SDK is maintained in the PnP GitHub repository: https://github.com/pnp/pnpcore . How can you help? The model implemented in the preview only covers a small part of what's possible and what's needed. We're asking the community to help us expand the model by: Extending the model via the creation of new model, complex type and collection classes. Check out the Extending the model article to learn how to do this. Adding \"functionalities\" to the model: after extending the model, the typical CRUD functionality is there, but for some parts of the model it makes sense to add functionalities by adding methods on top of the model classes. Check out the Extending the model article to learn how to do this. Writing sample programs that use this library: since this is a .Net Standard library, it doesn't target Windows only, but also macOS and Linux, as well as mobile OS's like Android and iOS. With the rise of Blazor , this library can also be used to build .Net based apps running in the browser. Samples can be added in the samples folder. Working on documentation : good documentation is critical to help developers work with this library, either by using it or by extending it. See the Writing documentation article for more details. Best practices when contributing This is all new and we're here to help, don't hesitate to reach out with your questions and feedback via our issue list or our discussions . To avoid overlapping efforts in the startup phase please let us know if you plan to take on a particular chunk of work (e.g. let's say you want to extend the model to support Planner) If you are extending the model and you need to update the model base logic then please reach out, we want to align and agree on those changes first as these need to fit into our model approach Note The best way to reach out is by creating an issue in the issue list: https://github.com/pnp/pnpcore/issues This community rocks, sharing is caring!"
  },
  "readme.html": {
    "href": "readme.html",
    "title": "PnP Core SDK documentation | PnP Core SDK",
    "keywords": "PnP Core SDK documentation This folder contains the PnP Core SDK documentation. The documentation system is based upon DocFX and combines inline code comments (the so called triple slash comments) with articles written in MD format. The resulting generated documentation is hosted on https://pnp.github.io/pnpcore . Documentation generation The document generation consists of 3 steps outlined below, currently these are manual steps, but we plan to automate them via GitHub Actions: Extract the PnP Core SDK into YML based API documentation: use docfx.exe metadata docfx.json Build the documentation: in this step the YML API documentation and the articles are merged into a documentation site. Use docfx.exe build docfx.json and then check the generated _site folder To check locally, Use docfx.exe build docfx.json --serve to build the site and host on http://localhost:8080 On submission, the generated documentation site is automatically generated by GitHub Actions on acceptance of PR submission. Note Install the latest DocFX release to get docfx.exe To run anywhere add docfx directory to your environment variables in windows References Setting up the gh-pages branch as an orphaned branch was done using the steps outlined in https://www.gep13.co.uk/blog/how-to-create-gh-pages-branch . To actually work with both \"code\" and \"docs\" branches it's easiest to git clone the repo twice, once for coding and once for publishing documents to the gh-pages branch. Contributing to the documentation We strongly encourage documentation contributions which can be done via improving API documentation (via the triple slash comments in the source code) or creating/updating articles in the articles folder. Martial UI Credit to Oscar Vásquez https://ovasquez.github.io/docfx-material/ for awesome work on the skin."
  },
  "tutorials/azurefunctions/v4processisolatedapponly.html": {
    "href": "tutorials/azurefunctions/v4processisolatedapponly.html",
    "title": "Build an v4 Azure Function that runs as an isolated process while using application (app-only) permissions | PnP Core SDK",
    "keywords": "Build an v4 Azure Function that runs as an isolated process while using application (app-only) permissions PnP Core SDK works great in Azure functions and this tutorial will walk you through the needed steps to create an .NET 6.0 Azure V4 function which runs as an isolated process . Process isolation is a feature in Azure Functions that will ensure your function code will not collide with the code already loaded by the Azure Function host process. Pre-requisites Before you start this tutorial your development environment needs to be correctly setup and you do need to have a Microsoft 365 tenant available. If you don't have one, you can get a Microsoft 365 developer subscription when you join the Microsoft 365 Developer Program . See the Microsoft 365 Developer Program documentation for step-by-step instructions about how to join the Microsoft 365 Developer Program and sign up and configure your subscription. As development environment this tutorial uses Visual Studio 2022, you can either use the free community edition or subscription based professional or enterprise editions. See the Microsoft Visual Studio site to learn more about Visual Studio and how to install and use it. Tutorial source code If you follow this tutorial you end up with a working Azure Function that uses PnP Core SDK. This same tutorial is also available as a sample containing the source code and brief setup instructions . Create and configure the Azure AD application Install PnP PowerShell To configure the Azure AD application with the needed permissions and configured with a certificate (needed for application permissions) we're using PnP.PowerShell . If you already have PnP.PowerShell installed you can skip this step, if not run below command from a PowerShell prompt: Install-Module -Name PnP.PowerShell Create the Azure AD application Using PnP PowerShell this becomes really simple. Running cmdlet will create a new Azure AD application, will create a new self-signed certificate and will configure that certificate with the Azure AD application. Finally the right permissions are configured and you're prompted to consent these permissions. Important Approving application permissions requires you to use a user which is Azure AD admin or global admin in your tenant # Ensure you replace contoso.onmicrosoft.com with your Azure AD tenant name # Ensure you replace joe@contoso.onmicrosoft.com with the user id that's an Azure AD admin (or global admin) Register-PnPAzureADApp -ApplicationName FunctionDemoSiteProvisiong -Tenant contoso.onmicrosoft.com -Store CurrentUser -GraphApplicationPermissions \"Sites.FullControl.All\" -SharePointApplicationPermissions \"Sites.FullControl.All\" -Username \"joe@contoso.onmicrosoft.com\" -Interactive Important Once this cmdlet is done you do need to to copy Certificate Thumbprint and AzureAppID/ClientId values from the cmdlet output as these will be needed later in this tutorial. Create the Azure Function Scaffold a new Azure Function project Open up Visual Studio 2022 and choose the Create a new project option, select Azure in the platforms dropdown and then pick Azure Functions and click Next . Enter a Project name and Location and click on Create . In the Create a new Azure Functions application choose .NET 6 isolated in the drop down and then pick Http trigger and click on Create . Add configuration settings and code Start with adding a new class to the project: right click the project, choose Add and then pick Class... . Name the class AzureFunctionSettings.cs and click on Add . Replace the class code with below snippet: public class AzureFunctionSettings { public string SiteUrl { get; set; } public string TenantId { get; set; } public string ClientId { get; set; } public StoreName CertificateStoreName { get; set; } public StoreLocation CertificateStoreLocation { get; set; } public string CertificateThumbprint { get; set; } } On top of the class add this using statement: using System.Security.Cryptography.X509Certificates; Open the local.settings.json file and replace it's contents with below: { \"IsEncrypted\": false, \"Values\": { \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\", \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet-isolated\", \"SiteUrl\": \"<base site collection url to connect to>\", \"TenantId\": \"<tenant id>\", \"ClientId\": \"<application client id>\", \"CertificateThumbPrint\": \"<thumbprint>\", \"WEBSITE_LOAD_CERTIFICATES\": \"<thumbprint>\" }, \"Host\": { \"CORS\": \"*\" } } Next update the configuration file to match your environment: Add a SharePoint site url: e.g. https://contoso.sharepoint.com Add the ClientId you've captured before Fill the CertificateThumbPrint and WEBSITE_LOAD_CERTIFICATES keys with the ThumbPrint value you've captured before To get your tenant id you can use below PnP PowerShell cmdlet, just replace contoso with your tenant name. Insert the returned tenant id in the configuration file. Get-PnPTenantId -TenantUrl https://contoso.sharepoint.com Your local.settings.json file should now be similar to below sample: { \"IsEncrypted\": false, \"Values\": { \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\", \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet-isolated\", \"SiteUrl\": \"https://contoso.sharepoint.com\", \"TenantId\": \"9bd71689-66cb-4560-bb09-ab908ec21437\", \"ClientId\": \"8bb62681-cddd-41e0-bfdf-ab908ec8a3c3\", \"CertificateThumbPrint\": \"1C3342BA9B5269FDBCDCAB5D6334F1A60C73B184\", \"WEBSITE_LOAD_CERTIFICATES\": \"1C3342BA9B5269FDBCDCAB5D6334F1A60C73B184\" }, \"Host\": { \"CORS\": \"*\" } } Add and Configure PnP Core SDK Right click the project, choose Manage Nuget Packages... , ensure Include prerelease is checked, click on the Browse tab and enter PnP.Core in the search box. Select PnP.Core.Auth and click on Install . A Preview Changes dialog appears, click OK to continue. In the License Acceptance dialog click I Accept . Now repeat the same process for the PnP.Core.Admin package. Clicking on the Installed tab should then show this: Continue with opening Program.cs : this class is executed and function startup and this is the place where we can add and configure the PnP Core SDK services. Replace the contents of the Main() method with below code: public static void Main() { AzureFunctionSettings azureFunctionSettings = null; var host = new HostBuilder() .ConfigureFunctionsWorkerDefaults() .ConfigureServices((context, services) => { // Add our global configuration instance services.AddSingleton(options => { var configuration = context.Configuration; azureFunctionSettings = new AzureFunctionSettings(); configuration.Bind(azureFunctionSettings); return configuration; }); // Add our configuration class services.AddSingleton(options => { return azureFunctionSettings; }); // Add and configure PnP Core SDK services.AddPnPCore(options => { // Add the base site url options.Sites.Add(\"Default\", new PnPCoreSiteOptions { SiteUrl = azureFunctionSettings.SiteUrl }); }); services.AddPnPCoreAuthentication(options => { // Load the certificate to use X509Certificate2 cert = LoadCertificate(azureFunctionSettings); // Configure certificate based auth options.Credentials.Configurations.Add(\"CertAuth\", new PnPCoreAuthenticationCredentialConfigurationOptions { ClientId = azureFunctionSettings.ClientId, TenantId = azureFunctionSettings.TenantId, X509Certificate = new PnPCoreAuthenticationX509CertificateOptions { Certificate = LoadCertificate(azureFunctionSettings), } }); // Connect this auth method to the configured site options.Sites.Add(\"Default\", new PnPCoreAuthenticationSiteOptions { AuthenticationProviderName = \"CertAuth\", }); }); }) .Build(); host.Run(); } private static X509Certificate2 LoadCertificate(AzureFunctionSettings azureFunctionSettings) { // Will only be populated correctly when running in the Azure Function host string certBase64Encoded = Environment.GetEnvironmentVariable(\"CertificateFromKeyVault\"); if (!string.IsNullOrEmpty(certBase64Encoded)) { // Azure Function flow return new X509Certificate2(Convert.FromBase64String(certBase64Encoded), \"\", X509KeyStorageFlags.Exportable | X509KeyStorageFlags.MachineKeySet | X509KeyStorageFlags.EphemeralKeySet); } else { // Local flow var store = new X509Store(StoreName.My, StoreLocation.CurrentUser); store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly); var certificateCollection = store.Certificates.Find(X509FindType.FindByThumbprint, azureFunctionSettings.CertificateThumbprint, false); store.Close(); return certificateCollection.First(); } } Replace the using statements at the top of Program.cs with these: using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using PnP.Core.Auth.Services.Builder.Configuration; using PnP.Core.Services.Builder.Configuration; using System; using System.Linq; using System.Security.Cryptography.X509Certificates; With above code in place PnP Core SDK is added to the services container of the Azure Function (via AddPnPCore ). During the add we've configured the site URL to use. Next using AddPnPCoreAuthentication authentication is setup to use X509Certificate based authentication. The needed certificate is read using the LoadCertificate certificate method which supports various certificate load methods. With authentication configured the final step is connect the configured authentication provider with the site we configured earlier on. For configuring PnP Core SDK we also needed data from the local.settings.json configuration file which implemented by creating and populating a AzureFunctionSettings class and adding that to the function's services container. Using PnP Core SDK in the function The final step before we can test the Azure Function is adding our actual function code. Start with right clicking on Function1.cs , choose Rename and name it CreateSite.cs . Click Yes on the rename ask. Open CreateSite.cs and replace the CreateSite class with below class public class CreateSite { private readonly ILogger logger; private readonly IPnPContextFactory contextFactory; private readonly AzureFunctionSettings azureFunctionSettings; public CreateSite(IPnPContextFactory pnpContextFactory, ILoggerFactory loggerFactory, AzureFunctionSettings settings) { logger = loggerFactory.CreateLogger<CreateSite>(); contextFactory = pnpContextFactory; azureFunctionSettings = settings; } /// <summary> /// Demo function that creates a site collection, uploads an image to site assets and creates a page with an image web part /// GET/POST url: http://localhost:7071/api/CreateSite?owner=joe@contoso.onmicrosoft.com&sitename=myPnPCoreSDKDemoSite1 /// </summary> /// <param name=\"req\"></param> /// <returns></returns> [Function(\"CreateSite\")] public async Task<HttpResponseData> Run([HttpTrigger(AuthorizationLevel.Function, \"get\", \"post\")] HttpRequestData req) { logger.LogInformation(\"CreateSite function starting...\"); // Parse the url parameters NameValueCollection parameters = HttpUtility.ParseQueryString(req.Url.Query); var siteName = parameters[\"siteName\"]; var owner = parameters[\"owner\"]; HttpResponseData response = null; try { using (var pnpContext = await contextFactory.CreateAsync(\"Default\")) { response = req.CreateResponse(HttpStatusCode.OK); response.Headers.Add(\"Content-Type\", \"application/json\"); var communicationSiteToCreate = new CommunicationSiteOptions(new Uri($\"https://{pnpContext.Uri.DnsSafeHost}/sites/{siteName}\"), \"Demo site\") { Description = \"PnP Core SDK demo site\", Language = Language.English, Owner = $\"i:0#.f|membership|{owner}\" }; logger.LogInformation($\"Creating site: {communicationSiteToCreate.Url}\"); // Create the new site collection using (var newSiteContext = await pnpContext.GetSiteCollectionManager().CreateSiteCollectionAsync(communicationSiteToCreate)) { logger.LogInformation($\"Site created: {communicationSiteToCreate.Url}\"); // Step 1: Upload image to site assets library var siteAssetsLibrary = await newSiteContext.Web.Lists.EnsureSiteAssetsLibraryAsync(p => p.RootFolder); var uploadFolder = await siteAssetsLibrary.RootFolder.EnsureFolderAsync(\"SitePages/PnP\"); var addedFile = await uploadFolder.Files.AddAsync(\"parker.png\",File.OpenRead($\".{Path.DirectorySeparatorChar}parker.png\"), true); // Step 2: Create the page var page = await newSiteContext.Web.NewPageAsync(); page.AddSection(CanvasSectionTemplate.OneColumn, 1); // Add text with inline image var text = page.NewTextPart(); var parker = await page.GetInlineImageAsync(text, addedFile.ServerRelativeUrl, new PageImageOptions { Alignment = PageImageAlignment.Left }); text.Text = $\"<H2>Hello everyone!</H2>{parker}<P>Community rocks, sharing is caring!</P>\"; page.AddControl(text, page.Sections[0].Columns[0]); // Save the page await page.SaveAsync(\"PnP.aspx\"); // Return the URL of the created site await response.WriteStringAsync(JsonSerializer.Serialize(new { siteUrl = newSiteContext.Uri.AbsoluteUri })); } return response; } } catch (Exception ex) { response = req.CreateResponse(HttpStatusCode.OK); response.Headers.Add(\"Content-Type\", \"application/json\"); await response.WriteStringAsync(JsonSerializer.Serialize(new { error = ex.Message })); return response; } } } Replace the namespaces on top of the file with these: using Microsoft.Azure.Functions.Worker; using Microsoft.Azure.Functions.Worker.Http; using Microsoft.Extensions.Logging; using PnP.Core.Admin.Model.SharePoint; using PnP.Core.Model.SharePoint; using PnP.Core.Services; using System; using System.Collections.Specialized; using System.IO; using System.Net; using System.Text.Json; using System.Threading.Tasks; using System.Web; This CreateSite Azure Function will do a number of things: It will create a PnPContext for the site you've setup in local.settings.json It will create a new site collection using the name and owner information passed in via the request It will ensure there is a Site Assets library in the newly created SharePoint site It will ensure there's a folder SitePages having a sub folder PnP in the Site Assets library It will upload an image named parker.png to the PnP folder It will create a new page with a one column section and insert text with an inline image Before we can test the sample we still need to add the parker.png image file, you can grab the original PnP parker from here but you can obviously take any image you have and name if parker.png . Important is that you you change the Copy to Output Directory to Copy Always Test the Azure Function Start with putting a breakpoint on the first line of the Run method (line 38) so a breakpoint is hit when the function is invoked. Now press F5 to start the function, you should see a console window: To test the function we need to construct a URL first, start with copying the URL the function is running on ( http://localhost:7071/api/CreateSite ) and then add owner and siteName URL parameters so that you get this: http://localhost:7071/api/CreateSite?owner=joe@contoso.onmicrosoft.com&sitename=myPnPCoreSDKDemoSite1 Ensure you use an owner that exists in your tenant and that the provided site name does not yet exist, in above case a site collection named https://contoso.sharepoint.com/sites/myPnPCoreSDKDemoSite1 will be created. Now copy the crafted URL and paste it into your browser address bar and hit enter. What will happen is that the function will be invoked and execution will stop at your breakpoint. By pressing F10 you can walk over the code step by step, press F5 to just continue execution. Once the execution ended you see the created site collection URL in the output: Feel free to open the created site collection and navigate the PnP.aspx page to see parker :-) Deploy the sample to Azure Create Azure Function App Go to the Azure Portal and create a new Function App (consumption plan) using following settings: Publish: Code Runtime stack: .NET Version: 6 Region: pick the region that works best for you Click Review + create , verify the settings and click Create . Now your function is provisioned in Azure. Configure the Function App Once the Function App has been created navigate to Settings -> Configuration and add the following Application settings : Name Value SiteUrl base site collection url to connect to, e.g. https://contoso.sharepoint.com TenantId tenant id, e.g. 9bd71689-66cb-4560-bb09-ab908ec21437 ClientId application client id, e.g. 8bb62681-cddd-41e0-bfdf-ab908ec8a3c3 Click Save to persist the changes. Under Function runtime settings verify the Runtime version is set to ~4 . Deploying the certificate - use KeyVault Final configuration step needed is ensuring the Azure Function App can use the configured certificate. Quite often you want to reuse your certificate across multiple Azure resources and then consolidating all secrets and certificates in an Azure KeyVault is a commonly used scenario. So let's explain how to make that happen. Ensure the managed identity of the function is on: click on Settings -> Identity and ensure System assigned status is set to On Navigate to your Azure KeyVault or create a new one if you've none available In KeyVault click on Settings -> Certificates -> Generate/Import -> select Import in the dropdown and provide a name and path the PFX file you've created earlier on via the Register-PnPAzureADApp Powershell cmdlet. Click Create to add the certificate In KeyVault click on Settings -> Access Policies -> + Add Access Policy : Select Secret Permission Get Select Certificate Permission Get Select principal: Click on none selected In the Principal page enter the name of the Azure Function App, this selects the managed identity that you've enabled before. Click Select to pick that principal Click Add to add the new Access Policy Click Save to persist the changes Using above steps you've now uploaded your certificate in a KeyVault and you've enabled your Function App to read secrets from the vault using it's managed identity. Final step is letting the Azure Function App now which certificate to pick. For that follow these steps: In KeyVault click on your certificate and then click on the Current version . The certificate details will be shown, copy the Certificate Identifier e.g. https://mykeyvault.vault.azure.net/certificates/PnPCoreSDKDemo/6c752ad7218248b0976f387ef288523a In the Function App navigate to Settings -> Configuration and add the following Application setting . Note the certificate version identifier has been dropped from the URL. Name Value CertificateFromKeyVault @Microsoft.KeyVault(SecretUri=https://mykeyvault.vault.azure.net/certificates/PnPCoreSDKDemo/) Click Save to persist the changes. Deploying the certificate - local upload to Function App Previous steps showed you how to manage your certificate via KeyVault, but you can also opt to simply upload the certificate to the Azure Function App. Navigate to Settings -> TLS/SSL Settings and click on Private Key Certificates (.pfx) Click on Upload Certificate , browse to the location of the PFX file you've created earlier on via the Register-PnPAzureADApp Powershell cmdlet. Click Upload to upload the certificate Navigate to Settings -> Configuration and add the following Application settings Name Value CertificateThumbPrint thumbprint, e.g. 1C3342BA9B5269FDBCDCAB5D6334F1A60C73B184 WEBSITE_LOAD_CERTIFICATES thumbprint, e.g. 1C3342BA9B5269FDBCDCAB5D6334F1A60C73B184 Deploy the Function App code from Visual Studio Final step now that the Function App is configured is to deploy our bits. Right click the project in Visual Studio and choose Publish... Chose the Import Profile option: Navigate to your Azure Function App in Azure Portal and click on Get publish profile from the Overview page Select the downloaded profile Click on Publish to push your project to the Azure Function App Test your Function App in Azure To test your Function App you now need to build an URL that points to your Azure Function App + it's function authorization key. To that URL the owner and siteName URL parameters have to be added. To get your Azure Function URL follow these steps: Navigate to your Azure Function App in Azure Portal and Navigate to Functions -> Functions Click on the CreateSite function Click on Get Function Url and copy the proposed URL Append &owner=joe@contoso.onmicrosoft.com&sitename=azurefunctiondemo001 The final result will be something along these lines: https://myfunctionapphost.azurewebsites.net/api/CreateSite?code=OerO/tVAIGbCacM1e6PYi6MsH5rsHmzpjUmZMlKTYayDhcYMJ9zjZw==&owner=joe@contoso.onmicrosoft.com&sitename=azurefunctiondemo001"
  },
  "tutorials/console/minimalconsole.html": {
    "href": "tutorials/console/minimalconsole.html",
    "title": "Minimal PnP Core SDK sample | PnP Core SDK",
    "keywords": "Minimal PnP Core SDK sample PnP Core SDK works great in .NET console applications and this tutorial will walk you through the needed steps to create a minimal .NET 6.0 console application . Pre-requisites Before you start this tutorial your development environment needs to be correctly setup and you do need to have a Microsoft 365 tenant available. If you don't have one, you can get a Microsoft 365 developer subscription when you join the Microsoft 365 Developer Program . See the Microsoft 365 Developer Program documentation for step-by-step instructions about how to join the Microsoft 365 Developer Program and sign up and configure your subscription. As development environment this tutorial uses Visual Studio 2022, you can either use the free community edition or subscription based professional or enterprise editions. See the Microsoft Visual Studio site to learn more about Visual Studio and how to install and use it. Tutorial source code If you follow this tutorial you end up with a working console application that uses PnP Core SDK. This same tutorial is also available as a sample containing the source code and brief setup instructions . Create and configure the Azure AD application PnP Core SDK requires an Azure AD application to authenticate to SharePoint: Navigate to https://aad.portal.azure.com Click on Azure Active Directory , followed by navigating to App registrations Add a new application via the New registration link Give your application a name, e.g. PnPCoreSDKConsoleDemo and add http://localhost as redirect URI. Clicking on Register will create the application and open it Take note of the Application (client) ID value, you'll need it in the next step Click on API permissions and add these delegated permissions Microsoft Graph -> Sites.Manage.All SharePoint -> AllSites.Manage Consent the application permissions by clicking on Grant admin consent Create the console application Open up Visual Studio 2022 and choose the Create a new project option, select Console in the project types dropdown, pick c# in the languages dropdown and then choose Console App and click Next . Enter a Project name and Location and click on Create . In the Additional information dialog choose .NET 6.0 (Long-term support) and click on Create . Right click the project, choose Manage Nuget Packages... , ensure Include prerelease is checked, click on the Browse tab and enter PnP.Core in the search box. Select PnP.Core.Auth and click on Install . A Preview Changes dialog appears, click OK to continue. In the License Acceptance dialog click I Accept . Now repeat the same process for the Microsoft.Extensions.Hosting package. Clicking on the Installed tab should then show this: Now continue with opening Program.cs and completely replace the code with below snippet: using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using PnP.Core.Auth; using PnP.Core.Services; string clientId = \"c6b15c83-d569-4514-b4af-d433110123de\"; string siteUrl = \"https://bertonline.sharepoint.com/sites/prov-1\"; // Creates and configures the host var host = Host.CreateDefaultBuilder() .ConfigureServices((context, services) => { // Add PnP Core SDK services.AddPnPCore(options => { // Configure the interactive authentication provider as default options.DefaultAuthenticationProvider = new InteractiveAuthenticationProvider() { ClientId = clientId, RedirectUri = new Uri(\"http://localhost\") }; }); }) .UseConsoleLifetime() .Build(); // Start the host await host.StartAsync(); using (var scope = host.Services.CreateScope()) { // Ask an IPnPContextFactory from the host var pnpContextFactory = scope.ServiceProvider.GetRequiredService<IPnPContextFactory>(); // Create a PnPContext using (var context = await pnpContextFactory.CreateAsync(new Uri(siteUrl))) { // Load the Title property of the site's root web await context.Web.LoadAsync(p => p.Title); Console.WriteLine($\"The title of the web is {context.Web.Title}\"); } } Configure the console application Before the console application can be tested there are two variables that have to be set: Update clientId to match the client id of the Azure AD application you've created previously Set siteUrl to a site in your tenant Test the console application Press F5 to launch the application. A new browser window/tab will open asking you to authenticate with your Microsoft 365 account. Once you've done that the application will get the title of the site and display it."
  },
  "tutorials/readme.html": {
    "href": "tutorials/readme.html",
    "title": "Tutorials and training material for developing with PnP Core SDK | PnP Core SDK",
    "keywords": "Tutorials and training material for developing with PnP Core SDK Here are the different tutorials and training assets available for you to get started on developing with PnP Core SDK for your SharePoint and Microsoft Teams applications. Getting started with PnP Core SDK Minimal .NET 6 console application Using PnP Core SDK in Azure Functions V4 Azure function using .NET 6 running as an isolated process"
  },
  "using-the-sdk/admin-m365-informationprotection.html": {
    "href": "using-the-sdk/admin-m365-informationprotection.html",
    "title": "Information protection | PnP Core SDK",
    "keywords": "Information protection The Core SDK Admin library provides Microsoft 365 Admin APIs for working with information protection. Creating Context In this article, you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for doing Microsoft 365 admin operations } PnP.Core.Admin dependency The functionality shown in this article depends on the PnP.Core.Admin nuget package . Once the PnP.Core.Admin nuget package has been installed you can get to the Microsoft 365 admin features via using the GetMicrosoft365Admin extension method: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Use the GetMicrosoft365Admin extension method on any PnPContext // to tap into the Microsoft 365 admin features var isMultiGeo = await context.GetMicrosoft365Admin().IsMultiGeoTenantAsync(); } Enumerate the available sensitivity labels Sensitivity labels from the Microsoft Information Protection solution let you classify and protect your organization's data, while making sure that user productivity and their ability to collaborate isn't hindered. When you want to set a sensitivity label you first need to enumerate the labels to understand which labels there are via one of the GetSensitivityLabels methods: var labels = await context.GetMicrosoft365Admin().GetSensitivityLabelsAsync();"
  },
  "using-the-sdk/admin-m365-multigeo.html": {
    "href": "using-the-sdk/admin-m365-multigeo.html",
    "title": "Multi-Geo | PnP Core SDK",
    "keywords": "Multi-Geo The Core SDK Admin library provides Microsoft 365 Admin APIs for understanding the multi-geo setup of a tenant. Creating Context In this article, you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for doing Microsoft 365 admin operations } PnP.Core.Admin dependency The functionality shown in this article depends on the PnP.Core.Admin nuget package . Once the PnP.Core.Admin nuget package has been installed you can get to the Microsoft 365 admin features via using the GetMicrosoft365Admin extension method: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Use the GetMicrosoft365Admin extension method on any PnPContext // to tap into the Microsoft 365 admin features var isMultiGeo = await context.GetMicrosoft365Admin().IsMultiGeoTenantAsync(); } Discover if a tenant is a multi-geo tenant Most tenants are single geo, meaning their data lives in one region. If the tenant you're working with is multi-geo it's data is spread over two or more geo locations, for example the tenant can have SharePoint and Teams data hosted in Europe and in the US. Each geo location will have it's own Tenant Admin Center site, it's own personal and portal site hosts and more. If you want to find out if the tenant you're working with supports multiple geo's you can use the IsMultiGeoTenant methods: if (await context.GetMicrosoft365Admin().IsMultiGeoTenantAsync()) { // Enumerate geo locations and perform admin task per geo } else { // Perform admin task for the tenant } Listing the geo locations of a tenant If you want to understand the multi-geo setup of a tenant then using the GetMultiGeoLocations methods will give you the needed details. These methods will return the key information per geo location in the tenant. The returned data includes: Data location code: a code identifying a geo location SharePoint Tenant Admin Center url SharePoint Portal url SharePoint my site host url Below sample shows how to use the GetMultiGeoLocations methods: foreach(var location in await context.GetMicrosoft365Admin().GetMultiGeoLocationsAsync()) { // Do admin work per geo location } Creating new site collections in the right geo location How to use PnP Core SDK to create site collections is described in the Site Collections page. When working in a multi-geo tenant it's important to control where a site collection will be created and therefore some additional steps have to be taken in account. These steps depend per category of sites and used permissions: Category Delegated permissions Application permissions Modern, no group Ensure the context you use is for a site in the target geo location + specify URL valid for the target geo location Ensure the context you use is for a site in the target geo location + specify URL valid for the target geo location Modern, with group Ensure the context you use is for a site in the target geo location + set the PreferredDataLocation value in the TeamSiteOptions Set the PreferredDataLocation value in the TeamSiteOptions Classic site Ensure the context you use is for a site in the target geo location + specify URL valid for the target geo location Ensure the context you use is for a site in the target geo location + specify URL valid for the target geo location So for modern sites without group and classic sites the story is simple: ensure the context and new site url you specify are valid for the target geo location. For group connected sites the story is different as the group's location determines where the associated SharePoint site will be created. To correctly do that you need to specify the PreferredDataLocation : teamSiteToCreate = new TeamSiteOptions(alias, \"PnP Core SDK Test\") { Description = \"This is a test site collection\", Language = Language.English, IsPublic = true, PreferredDataLocation = GeoLocation.NAM }; // Ensure the used context is for a site in NAM geo location using (var newSiteContext = await context.GetSiteCollectionManager().CreateSiteCollectionAsync(teamSiteToCreate)) { // Do work on the created site collection via the newSiteContext } If you don't specify the PreferredDataLocation during the creation then the preferred data location from the account creating the team site (if any) is taken, if not the site will be created in the default geo location."
  },
  "using-the-sdk/admin-m365-security.html": {
    "href": "using-the-sdk/admin-m365-security.html",
    "title": "Security | PnP Core SDK",
    "keywords": "Security The Core SDK Admin library provides Microsoft 365 Admin APIs for working with security like for example understanding if the current access token has certain permissions or uses for example application permissions. Creating Context In this article, you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for doing Microsoft 365 admin operations } PnP.Core.Admin dependency The functionality shown in this article depends on the PnP.Core.Admin nuget package . Once the PnP.Core.Admin nuget package has been installed you can get to the Microsoft 365 admin features via using the GetMicrosoft365Admin extension method: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Use the GetMicrosoft365Admin extension method on any PnPContext // to tap into the Microsoft 365 admin features var isMultiGeo = await context.GetMicrosoft365Admin().IsMultiGeoTenantAsync(); } Verify if you're running using Application permissions If you're application supports application and delegated permissions you might want to know whether the current user/app is using application permissions. This can be checked via the AccessTokenUsesApplicationPermissions methods. if (await context.GetMicrosoft365Admin().AccessTokenUsesApplicationPermissionsAsync()) { // We're using application permissions } else { // We're using delegated permissions } Verify if the current access token has a specific scope or role When using application permissions and access token contains one or more roles that identify the permissions granted to the app for which the access token was issued. Using the AccessTokenHasRole methods you can verify that. Note This method checks for the actual granted role, so if you check for Sites.Read.All and the token contains Sites.Manage.All then the check will return false. Sample code: if (await context.GetMicrosoft365Admin().AccessTokenHasRoleAsync(\"Sites.Read.All\")) { // We have the needed permissions, let's continue } else { // Oops... } When using delegated permissions and access token contains one or more scopes that identify the permissions granted to the app+user for which the access token was issued. Using the AccessTokenHasScope methods you can verify that. Note This method checks for the actual granted role, so if you check for Sites.Read.All and the token contains Sites.Manage.All then the check will return false. Sample code: if (await context.GetMicrosoft365Admin().AccessTokenHasScopeAsync(\"Sites.Read.All\")) { // We have the needed permissions, let's continue } else { // Oops... }"
  },
  "using-the-sdk/admin-sharepoint-apps.html": {
    "href": "using-the-sdk/admin-sharepoint-apps.html",
    "title": "Apps | PnP Core SDK",
    "keywords": "Apps The Core SDK Admin library provides SharePoint Apps related APIs for configuring app prerequisites for managing apps. Creating Context In this article, you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and shown below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for doing SharePoint admin operations } PnP.Core.Admin dependency The functionality shown in this article depends on the PnP.Core.Admin nuget package . Once the PnP.Core.Admin nuget package has been installed you can get to the SharePoint admin features via using the GetSharePointAdmin , GetSiteCollectionAppManager , GetTenantAppManager and GetSiteCollectionManager extension methods: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Use the GetSharePointAdmin extension method on any PnPContext // to tap into the SharePoint admin features var url = context.GetSharePointAdmin().GetTenantAdminCenterUri(); } Two types of app catalogs There are two types of app catalogs available in SharePoint Online. One is global at the tenant level called tenant app catalog. It hosts all the apps that are available for all sites in your tenant. The other app catalog type is a site collection app catalog. It's aimed to host apps for the specific site collection only. PnP.Core.Admin package provides an explicit way of managing either tenant or site collection scoped apps. To do so, you should create an instance of the corresponding app manager using one of the extension methods GetTenantAppManager or GetSiteCollectionAppManager : // instantiate a class to work with various tenant app catalog related operations var tenantAppManager = context.GetTenantAppManager(); // instantiate a class to work with various site collection app catalog related operations var siteCollectionAppManager = context.GetSiteCollectionAppManager(); Important If you're willing to work with the site collection app catalog, you should call the GetSiteCollectionAppManager extension method using the site collection's app catalog context. Depending on your requirements you will create any of the above objects to work with apps in your app catalog sites. Common app operations Tenant and site collection app managers provide some common app operations like GetAvailable , Add , Deploy , Install , etc. These operations are available for both tenant and site collection app managers and are listed below. In the samples below you will see a lot of appManager usages. appManager can be either tenant or site collection app catalog manager (depending on which extension method you use). As mentioned above, all the below methods apply to any of the app catalog managers. Get available app(s) You can use the method GetAvailable to get either all or specific apps by their id or title. The app's id corresponds to the UniqueId field value inside the out-of-the-box AppCatalog list where all the apps are located. // gets all available apps for the app catalog var allApps = await appManager.GetAvailableAsync(); // gets the app instance by it's unique id var app = await appManager.GetAvailableAsync(new Guid(\"34427a18-486d-45d2-b4e5-9fd5324ede53\")); // get the app instance by it's title var app = await appManager.GetAvailableAsync(\"title of my app\"); Add an app To add an app to the app catalog you should use the Add method. It accepts a file path or a binary file as a bytes array: // adds app package to the app catalog and overwrites if there is an existing one var app = await appManager.AddAsync(\"path/to/file.sppkg\", true); // adds app package using bytes array and app name var bytes = System.IO.File.ReadAllBytes(\"path/to/file.sppkg\"); var app = await appManager.AddAsync(bytes, \"My App\", true); Add method returns an instance of the App object, which you can use to perform further operations. Deploy an app When your app is added to the app catalog, it's not yet available to the sites. To make it available you should first deploy it using the corresponding method: var app = await appManager.AddAsync(packagePath, true); // deploy the app using the app's unique id var result = await appManager.DeployAsync(app.Id, false); Upon deployment, you can specify whether to perform global deployment (when your app immediately becomes available for all the sites). In SharePoint Framework this feature is called \"Skip feature deployment\". When you provide skipFeatureDeployment=true for the Deploy method, the app will be deployed globally. To deploy the app you can also use the app instance itself: var app = await appManager.AddAsync(packagePath, true); // deploys app globally using app instance await app.DeployAsync(true); Under the hood, the app instance calls the Deploy method from the appManager . Install an app To install the app into the specific site you need to call the Install method: // install the app to the site await appManager.InstallAsync(app.Id); // or use app instance await app.InstallAsync(); Important Install operation is context-specific. It means that you should use the PnPContext instance from the corresponding site to install the app to that site. Upgrade an app To upgrade the app on the specific site you need to call the Upgrade method: // upgrades the app on the site await appManager.UpgradeAsync(app.Id); // or use app instance await app.UpgradeAsync(); Important Upgrade operation is context-specific. It means that you should use the PnPContext instance from the corresponding site to upgrade the app on that site. Uninstall an app To uninstall the app from the specific site you need to call the Uninstall method: // uninstalls the app from the site await appManager.uninstallAsync(app.Id); // or use app instance await app.UninstallAsync(); Important Uninstall operation is context-specific. It means that you should use the PnPContext instance from the corresponding site to uninstall the app from that site. Retract an app Retract operation is the opposite to Deploy. If you don't want your app to be available for sites, you should call Retract . Retract command does not delete the app from the app catalog. // retracts app await appManager.RetractAsync(app.Id); // or use app instance await app.RetractAsync(); Remove an app To completely remove the app from the app catalog you should call the Remove method: // removes the app from the corresponding app catalog await appManager.RemoveAsync(app.Id); // or use app instance await app.RemoveAsync(); Tenant app catalog specific operations Some methods are available only for the tenant app catalog. They are listed below. Getting the url for the tenant app catalog site When you're running setup tasks you need to ensure there's an app catalog site setup, using the GetTenantAppCatalogUri methods you can get the current tenant app catalog site url: // Get the tenant app catalog url, returns null if there's none setup var url = await context.GetTenantAppManager().GetTenantAppCatalogUriAsync(); Ensuring there's a tenant app catalog If you want to ensure there's a tenant app catalog because you need to deploy an app to it, you can use the EnsureTenantAppCatalog methods. If the tenant app catalog site exists the methods return false, if there was no app catalog it will be setup using the default path of sites/appcatalog and the method returns true. // Get the tenant app catalog url, returns null if there's none setup if (await context.GetTenantAppManager().EnsureTenantAppCatalogAsync()) { // App catalog site was missing, but now added as /sites/appcatalog } else { // The app catalog site was already available } Note that you have to use the GetTenantAppCatalogUri to get the actual app catalog site url, even when there was no app catalog site and it was created by calling EnsureTenantAppCatalog it's still recommended to get the actual url. Check whether the solution contains MS Teams component SharePoint Framework solutions might extend MS Teams as well. You can check, whether a particular SPFx app extends MS Teams or not: // get tenant app manager var tenantAppManager = context.GetTenantAppManager(); // get app var app = await tenantAppManager.GetAvailableAsync(\"My App Title\"); // check it var containsTeams = await tenantAppManager.SolutionContainsTeamsComponentAsync(app.Id); For example, If your SPFx solution lists any webpart with TeamsPersonalApp or TeamsTab as supported hosts, the method above will return true . List all site collection app catalogs Using the GetSiteCollectionAppCatalogs you can get all site collection app catalogs from the whole tenant: var tenantAppManager = context.GetTenantAppManager(); var siteAppCatalogList = await tenantAppManager.GetSiteCollectionAppCatalogsAsync(); The result includes site collection app catalog metadata like absolute url and unique id. Get all apps, acquired from SharePoint Store Your tenant app catalog hosts not only custom apps, but also apps installed from the SharePoint store. To easily get all third-party apps from the SharePoint Store, use the method below: var tenantAppManager = context.GetTenantAppManager(); var storeApps = await tenantAppManager.GetStoreAppsAsync(); storeApps is a collection of App instances, where you can do all common operations like Install , UnInstall , etc. Automate SharePoint Store apps deployment and installation With tenant app manager you can also automate the process of installing apps from the SharePoint Store. To deploy an app from SharePoint Store you should know the unique store asset id. You can easily find it in the query string on the app home page. Usually the url has a format https://appsource.microsoft.com/en-us/product/office/WA200001111 or <your tenant>sites/appcatalog/_layouts/15/appStore.aspx/appDetail/WA200001111 . The last part of the url is your asset id, i.e. WA200001111 . Then you can use the below code to add the app: var tenantAppManager = context.GetTenantAppManager(); var app = tenantAppManager.AddAndDeployStoreApp(\"WA200001111\", CultureInfo.GetCultureInfo(1033).Name, false, true); The method returns an App instance so that you can further install it to any SharePoint site using apps API. Check if an upgrade for an app is available Use below API to check whether the upgrade is available for the specific app on a site: var tenantAppManager = context.GetTenantAppManager(); var app = await tenantAppManager.GetAvailableAsync(\"My App Title\"); var result = await tenantAppManager.IsAppUpgradeAvailableAsync(app.Id); The method returns true if the app can be upgraded from the app catalog using the most recent version. Download MS Teams solution from SharePoint Framework app SharePoint Framework solutions might extend MS Teams as well. If you want to download Teams specific component from SharePoint Framework solution, you should use DownloadTeamsSolution method: var tenantAppManager = context.GetTenantAppManager(); var app = await tenantAppManager.GetAvailableAsync(\"My App Title\"); // download MS Teams's solution stream using (var stream = await tenantAppManager.DownloadTeamsSolutionAsync(app.Id)) using (var outputFileStream = new FileStream(\"teams app.zip\", FileMode.Create)) { // save stream to a file stream.CopyTo(outputFileStream); }"
  },
  "using-the-sdk/admin-sharepoint-modernize.html": {
    "href": "using-the-sdk/admin-sharepoint-modernize.html",
    "title": "Modernize your sites | PnP Core SDK",
    "keywords": "Modernize your sites The Core SDK Admin library provides SharePoint Modernization APIs that allow you to \"upgrade\" classic sites to become modern Team or Communication sites. To learn more about modernizing your SharePoint sites checkout https://aka.ms/sharepoint/modernization . Creating Context In this article, you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and shown below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for doing SharePoint admin operations } PnP.Core.Admin dependency The functionality shown in this article depends on the PnP.Core.Admin nuget package . Once the PnP.Core.Admin nuget package has been installed you can get to the SharePoint admin features via using the GetSharePointAdmin , GetSiteCollectionAppManager , GetTenantAppManager and GetSiteCollectionManager extension methods: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Use the GetSharePointAdmin extension method on any PnPContext // to tap into the SharePoint admin features var url = context.GetSharePointAdmin().GetTenantAdminCenterUri(); } Connecting a site to a new Microsoft 365 group By default only new team sites are connected to a Microsoft 365 group, but what if you'd wanted to connect your existing classic team sites to a Microsoft 365 group? A reason to do this would be for example the need to set up a Teams team for the site or use any other Microsoft 365 service that's connected to a Microsoft 365 group. Luckily you can take an existing site, create a new Microsoft 365 group for it, and hook it up to site. To do this you have to use one of the ConnectSiteCollectionToGroup methods: these methods take in an ConnectSiteToGroupOptions object defining the three mandatory properties: the url of the site that needs to be connected to group, the alias to use for the group and the display name to use for the group: ConnectSiteToGroupOptions groupConnectOptions = new ConnectSiteToGroupOptions( new Uri(\"https://contoso.sharepoint.com/sites/sitetogroupconnect\"), \"sitealias\", \"Site title\"); await context.GetSiteCollectionManager().ConnectSiteCollectionToGroupAsync(groupConnectOptions); Control the \"Add Teams\" prompt Microsoft 365 group connected sites by default show a prompt in their left navigation to enable the creation of Team. Sometimes you might not want your users to create a Team or you do want to create the Team programmatically. For those cases you can use the IsAddTeamsPromptHidden and HideAddTeamsPrompt methods: // Check if the Add Teams prompt is hidden var isAddTeamsPromptHidden = await context.GetSiteCollectionManager().IsAddTeamsPromptHiddenAsync( new Uri(\"https://contoso.sharepoint.com/sites/sitetogroupconnect\")); if (!isAddTeamsPromptHidden) { // Hide the Add Teams prompt await context.GetSiteCollectionManager().HideAddTeamsPromptAsync( new Uri(\"https://contoso.sharepoint.com/sites/sitetogroupconnect\")); } Create a Team for a Microsoft 365 Group connected site Once a site collection is connected to a Microsoft 365 group it's eligible to be \"teamified\", so creating a Team linked to the site's Microsoft 365 group. To do so, the PnP Core SDK Teams admin API features are needed, more specifically the CreateTeam methods. Guid groupId = Guid.Parse(\"\"); using (var contextWithTeam = await context.GetTeamManager().CreateTeamAsync( new TeamForGroupOptions(groupId))) { // Post a message in the Teams general channel await context.Team.LoadAsync(p => p.PrimaryChannel); await context.Team.PrimaryChannel.LoadAsync(p => p.Messages); await context.Team.PrimaryChannel.Messages.AddAsync(\"Hi Teams!\"); } Enabling communication site features Connecting to a Microsoft 365 group and possible also adding a Team is one way to modernize your classic team sites, but you can also turn a classic team site into a communication site by enabling the communication site features. Communication site features can be enabled on a site collection assuming that: The site collection is not connected to a Microsoft 365 group The site collection's template is STS#0 or EHS#1 If above requirements are met you can use the EnableCommunicationSiteFeatures methods to transform your classic site into a communication site. // Enable the communication site features on this classic site, uses Topic design package (default) await context.GetSiteCollectionManager().EnableCommunicationSiteFeaturesAsync(context.Uri); // Enable the communication site features on this classic site, uses Showcase design package await context.GetSiteCollectionManager().EnableCommunicationSiteFeaturesAsync(context.Uri, Guid.Parse(\"6142d2a0-63a5-4ba0-aede-d9fefca2c767\"));"
  },
  "using-the-sdk/admin-sharepoint-security.html": {
    "href": "using-the-sdk/admin-sharepoint-security.html",
    "title": "Security | PnP Core SDK",
    "keywords": "Security The Core SDK Admin library provides SharePoint Admin security related APIs like listing the SharePoint Tenant admins and more. Creating Context In this article, you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and shown below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for doing SharePoint admin operations } PnP.Core.Admin dependency The functionality shown in this article depends on the PnP.Core.Admin nuget package . Once the PnP.Core.Admin nuget package has been installed you can get to the SharePoint admin features via using the GetSharePointAdmin , GetSiteCollectionAppManager , GetTenantAppManager and GetSiteCollectionManager extension methods: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Use the GetSharePointAdmin extension method on any PnPContext // to tap into the SharePoint admin features var url = context.GetSharePointAdmin().GetTenantAdminCenterUri(); } Is the current user a SharePoint tenant administrator? If the code you want to run requires SharePoint tenant administrator privileges then you can use the IsCurrentUserSharePointAdmin methods to verify. // Checks if the current user is a SharePoint tenant admin if (await context.GetSharePointAdmin().IsCurrentUserTenantAdminAsync()) { // Do the admin operations } else { // Handle non admin scenario } Getting the SharePoint tenant administrators Important You need to be either a SharePoint Administrator or Global Administrator to use these methods. If you need to list all the SharePoint admins use the GetTenantAdmins methods which will return a ISharePointUser instance for each admin user. // Get the tenant admins var admins = await context.GetSharePointAdmin().GetTenantAdminsAsync(); foreach(var admin in admins) { // Do something with the admin user } Getting the administrators of a site collection Important You need to be either a SharePoint Administrator or Global Administrator to use these methods. To get the administrators of a given site collection use the GetSiteCollectionAdmins methods. You do not have to have access to the site collection to enumerate it's administrators as these methods depend on tenant APIs that only work for SharePoint administrators. When getting the administrators you'll see a difference between Microsoft 365 group connected site collections and the other site collections: For Microsoft 365 group connected site collections the Microsoft 365 group owners are included, they have the IsMicrosoft365GroupOwner property set to true . These users don't have the LoginName property set, instead the Id property is set For the other site collections the returned users all have the LoginName property set, the Id property is not set. Also one of the admins is marked as IsSecondaryAdmin == false , that one administrator is the primary site collection administrator // Get the site collection admins var admins = await context.GetSharePointAdmin().GetSiteCollectionAdminsAsync(new Uri(\"https://contoso.sharepoint.com/sites/somesite\")); foreach(var admin in admins) { // Do something with the site collection admin user } Setting the administrators of a site collection Important You need to be either a SharePoint Administrator or Global Administrator to use these methods. To set the administrators of a given site collection use the SetSiteCollectionAdmins methods. You do not have to have access to the site collection to set it's administrators as these methods depend on tenant APIs that only work for SharePoint administrators. When setting the administrators you'll see a difference between Microsoft 365 group connected site collections and the other site collections: For the other site collections you provide a list of login names (e.g. i:0#.f|membership|anna@contoso.onmicrosoft.com or c:0-.f|rolemanager|spo-grid-all-users/6492ece7-7f5d-4499-8130-50e761e25bd9 ). The first one if the list will be set as the primary site collection administrator, the others will be set as secondary site collection administrators For Microsoft 365 group connected site collections you do have the same option as for the other site collections with the difference that the primary site collection administrator of group connected sites is never updated. Next to that you can also specify the Azure AD user id's of users you want to grant site collection admin permissions by adding them to the Microsoft 365 group's owners. To stay in sync with with SharePoint Tenant admin center does, when adding a Microsoft 365 group owner the user is also added as a Microsoft 365 group member. // Set the site collection admins for a regular site List<string> newAdmins = new List<string>(); newAdmins.Add(\"i:0#.f|membership|anna@contoso.onmicrosoft.com\"); newAdmins.Add(\"c:0-.f|rolemanager|spo-grid-all-users/6492ece7-7f5d-4499-8130-50e761e25bd9\"); context.GetSiteCollectionManager().SetSiteCollectionAdmins(new Uri(\"https://contoso.sharepoint.com/sites/somesite\"), newAdmins); // Set the site collection admins for a Microsoft 365 group connected site List<Guid> newGroupOwners = new List<Guid>(); newGroupOwners.Add(Guid.Parse(\"3d25e9c4-b20f-443b-ab4d-8ab0668f72ee\")); context.GetSiteCollectionManager().SetSiteCollectionAdmins(new Uri(\"https://contoso.sharepoint.com/sites/somesite\"), newGroupOwners);"
  },
  "using-the-sdk/admin-sharepoint-sites.html": {
    "href": "using-the-sdk/admin-sharepoint-sites.html",
    "title": "Site Collections | PnP Core SDK",
    "keywords": "Site Collections The Core SDK Admin library provides SharePoint Admin security related APIs for enumerating, creating, updating and deleting site collections. Creating Context In this article, you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and shown below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for doing SharePoint admin operations } PnP.Core.Admin dependency The functionality shown in this article depends on the PnP.Core.Admin nuget package . Once the PnP.Core.Admin nuget package has been installed you can get to the SharePoint admin features via using the GetSharePointAdmin , GetSiteCollectionAppManager , GetTenantAppManager and GetSiteCollectionManager extension methods: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Use the GetSharePointAdmin extension method on any PnPContext // to tap into the SharePoint admin features var url = context.GetSharePointAdmin().GetTenantAdminCenterUri(); } Enumerate the site collections in a tenant The typical SharePoint Online tenants contains hundreds of site collections and for quite often there's a need to perform admin tasks on all site collections, so being able to enumerate sites is important. The PnP Core SDK Admin component offers two approaches. Getting all site collections Using the GetSiteCollections methods any user/app can enumerate site collections but depending on the user/app's permissions the results will be different: When using application permissions with Sites.Read.All the Microsoft Graph Sites endpoint is queried and all site collections in the tenant are returned When using delegated permissions with Sites.Read.All and a user that's not a SharePoint Tenant admin then the Microsoft Graph Search endpoint is queried to return all site collections that the user can access, so a subset of the site collections is returned When using delegated permissions and the user is a SharePoint Tenant administrator then a hidden list in the SharePoint Tenant Admin Center site is queried and all site collections in the tenant are returned Below sample shows how to use the GetSiteCollections methods: // Get a list of site collections var siteCollections = await context.GetSiteCollectionManager().GetSiteCollectionsAsync(); Getting all site collections with details Important You need to be either a SharePoint Administrator or Global Administrator to use these methods. Whereas above approach works for any user, the amount of information returned for a given site collection is limited. If you want to get site collection list with more details about each site collection then consider using the GetSiteCollectionsWithDetails or GetSiteCollectionWithDetails methods. The collected information per site collection is: The various id's such as site collection id, root web id and Microsoft Graph site id The site collection url The name of the site collection Creation time and creator External sharing information Site owner name and email Storage quota information Template details Below sample shows how to use the GetSiteCollectionsWithDetails methods: // Get a list of site collections with details about each site collection var siteCollections = await context.GetSiteCollectionManager().GetSiteCollectionsWithDetailsAsync(); // Get details for one given site collection var siteToCheckDetails = await context.GetSiteCollectionManager().GetSiteCollectionWithDetailsAsync(new Uri(\"https://contoso.sharepoint.com/sites/sitetocheck\")); Getting and setting site collection properties Important You need to be either a SharePoint Administrator or Global Administrator to use these methods. A site collection has many properties which can only be set as a SharePoint Administrator. For example you can configure a site collection to not allow Power Automate Flows. Before site collection properties can be set you first need to get the current properties via on of the GetSiteCollectionProperties methods, followed by changing the properties you want to change and calling an Update method to send the change to SharePoint: // Get all the properties of this site collection var siteProperties = await context.GetSiteCollectionManager().GetSiteCollectionPropertiesAsync(new Uri(\"https://contoso.sharepoint.com/sites/sitetocheck\")); // Update site properties siteProperties.Title = \"New site title\"; siteProperties.DisableFlows = FlowsPolicy.Disabled; // Send the changes back to the server await siteProperties.UpdateAsync(); Creating site collections In SharePoint site collections can be split up into three categories: Modern, non group connected, sites (e.g. communication site) Modern group connected site collections (e.g. team site) Classic site collections (e.g. classic team site, classic publishing portal) It's highly recommended to use one of the \"modern\" site collections as these offer more features and are faster to provision. When it comes to provisioning site collections then the site collection category and used authentication approach determine how a site collection is create and how long that will take. For the PnP Core SDK user all site collections are created via one of the CreateSiteCollection methods, but it's good to understand the needed Options as outlined in below table. Category Delegated permissions Application permissions Modern, no group Use CommunicationSiteOptions or TeamSiteWithoutGroupOptions Use CommunicationSiteOptions or TeamSiteWithoutGroupOptions . The Owner property must be set. Modern, with group Use TeamSiteOptions coming soon Classic site Use ClassicSiteOptions Use ClassicSiteOptions All provisioning flows will only return once the site collection is done, for the modern sites this is a matter of seconds, for classic sites this can take up to 10-15 minutes. Note If your tenant is a multi-geo tenant then go here to checkout how you can control the geo location where the site collection will be created. Basic site collection creation flow Important When creating classic sites you need to be either a SharePoint Administrator or Global Administrator to use these methods. The code structure to create a site collection is identical, regardless of which site you're creating or which type of permission you're using: var communicationSiteToCreate = new CommunicationSiteOptions(new Uri(\"https://contoso.sharepoint.com/sites/sitename\"), \"My communication site\") { Description = \"My site description\", Language = Language.English, }; using (var newSiteContext = await context.GetSiteCollectionManager().CreateSiteCollectionAsync(communicationSiteToCreate)) { // Do work on the created site collection via the newSiteContext } So depending on what Options object you pass into the CreateSiteCollection method a different type of site collection will be created. The constructors of the respective Options classes will ensure you're providing the minimally needed information needed to create the site collection, additional input can always be provided via the other Options class attributes. Controlling the site collection creation behavior The CreateSiteCollection methods accept an optional SiteCreationOptions instance that you can use to control the site collection creation flow. Following properties can be set: Option Default Applies to Description WaitAfterCreation not set Modern + Classic Defines the wait time in seconds after the site collection creation call returns. If specified this overrides the WaitForAsyncProvisioning setting WaitAfterStatusCheck 10 Modern The modern site provisioning might seldomly be queued, if so this property determines how many seconds the code waits between queue checks. MaxStatusChecks 12 Modern The modern site provisioning might seldomly be queued, if so this property determines how often the queue will be checked WaitForAsyncProvisioning not set Modern Modern sites are provisioned very fast, but there's an async completion that needs to happen. If you want to wait for the async provisioning logic to complete then set this value to true WaitAfterAsyncProvisioningStatusCheck 15 Modern If WaitForAsyncProvisioning is true then this property determines the wait time between the async provisioning status checks MaxAsyncProvisioningStatusChecks 80 Modern If WaitForAsyncProvisioning is true then this property determines the maximum amount of async provisioning status checks UsingApplicationPermissions Automatic check Modern + Classic By default CreateSiteCollection methods will check if application permissions are used, if you need to create multiple site collections your code can use one of the AccessTokenUsesApplicationPermissions methods store the outcome in this property. This way the check only happens once. Below sample creates a communication site and waits for the async provisioning to complete: var communicationSiteToCreate = new CommunicationSiteOptions(new Uri(\"https://contoso.sharepoint.com/sites/sitename\"), \"My communication site\") { Description = \"My site description\", Language = Language.English, }; SiteCreationOptions siteCreationOptions = new SiteCreationOptions() { WaitForAsyncProvisioning = true }; using (var newSiteContext = await context.GetSiteCollectionManager().CreateSiteCollectionAsync(communicationSiteToCreate, siteCreationOptions)) { // Do work on the created site collection via the newSiteContext } Connecting a site to a new Microsoft 365 group By default only new team sites are connected to a Microsoft 365 group, but what if you'd wanted to connect your existing classic team sites to a Microsoft 365 group? A reason to do this would be for example the need to set up a Teams team for the site or use any other Microsoft 365 service that's connected to a Microsoft 365 group. Luckily you can take an existing site, create a new Microsoft 365 group for it, and hook it up to site. To do this you have to use one of the ConnectSiteCollectionToGroup methods: these methods take in an ConnectSiteToGroupOptions object defining the three mandatory properties: the url of the site that needs to be connected to group, the alias to use for the group and the display name to use for the group: ConnectSiteToGroupOptions groupConnectOptions = new ConnectSiteToGroupOptions(new Uri(\"https://contoso.sharepoint.com/sites/sitetogroupconnect\"), \"sitealias\", \"Site title\"); await context.GetSiteCollectionManager().ConnectSiteCollectionToGroupAsync(groupConnectOptions); Recycling site collections Important You need to be either a SharePoint Administrator or Global Administrator to use these methods. A site collection can be recycled and then later on permanently deleted or restored. Recycling site collection is done using one of the RecycleSiteCollection methods: // Recycle the site collection await context.GetSiteCollectionManager().RecycleSiteCollectionAsync(new Uri(\"https://contoso.sharepoint.com/sites/sitename\")); Note When a group connected site is recycled then also the linked Microsoft 365 group is recycled Enumerate the recycled site collections Important You need to be either a SharePoint Administrator or Global Administrator to use these methods. To get a list of recycled site collections you can use the GetRecycledSiteCollections methods: var recycledSites = await context.GetSiteCollectionManager().GetRecycledSiteCollectionsAsync(); foreach(var site in recycledSites) { // restore the recycled site or permanently delete it } Restoring a recycled site collection Important You need to be either a SharePoint Administrator or Global Administrator to use these methods. A recycled site collection can be restored as long it still sits in the site collection recycle bin. To do so use the RestoreSiteCollection methods: var recycledSites = await context.GetSiteCollectionManager().GetRecycledSiteCollectionsAsync(); foreach(var site in recycledSites) { // restore all recycled site collections await context.GetSiteCollectionManager().RestoreSiteCollectionAsync(site.Url); } Deleting site collections Important You need to be either a SharePoint Administrator or Global Administrator to use these methods. A site collection can also deleted via one of the DeleteSiteCollection methods. Note A group connected site will not be permanently deleted, calling the DeleteSiteCollection methods will recycle the site collection and group. await context.GetSiteCollectionManager().DeleteSiteCollectionAsync(new Uri(\"https://contoso.sharepoint.com/sites/sitename\"));"
  },
  "using-the-sdk/admin-sharepoint-tenant.html": {
    "href": "using-the-sdk/admin-sharepoint-tenant.html",
    "title": "Tenant | PnP Core SDK",
    "keywords": "Tenant The Core SDK Admin library provides support for getting and setting relevant information of the SharePoint Online tenant that's being used. Creating Context In this article, you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and shown below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for doing SharePoint admin operations } PnP.Core.Admin dependency The functionality shown in this article depends on the PnP.Core.Admin nuget package . Once the PnP.Core.Admin nuget package has been installed you can get to the SharePoint admin features via using the GetSharePointAdmin , GetSiteCollectionAppManager , GetTenantAppManager and GetSiteCollectionManager extension methods: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Use the GetSharePointAdmin extension method on any PnPContext // to tap into the SharePoint admin features var url = context.GetSharePointAdmin().GetTenantAdminCenterUri(); } Getting the key tenant urls A SharePoint Online tenant does have a portal host, a host for the OneDrive for Business sites, a tenant admin center site and more. Using the GetTenant...UriAsync methods your code can easily get these urls: // Returns the SharePoint tenant admin center url (e.g. https://contoso-admin.sharepoint.com) var url = await context.GetSharePointAdmin().GetTenantAdminCenterUriAsync(); // Returns the SharePoint tenant portal url (e.g. https://contoso.sharepoint.com) var url = await context.GetSharePointAdmin().GetTenantPortalUriAsync(); // Returns the SharePoint tenant my site host url (e.g. https://contoso-my.sharepoint.com) var url = await context.GetSharePointAdmin().GetTenantMySiteHostUriAsync(); Note Support for discovering vanity urls is planned for later. When you're tenant is a multi-geo tenant then checkout the Microsoft 365 multi geo admin article . Getting the tenant properties Important You need to be either a SharePoint Administrator or Global Administrator to use these methods. There are more than hundred properties that control how a tenant operates and using the GetTenantProperties methods you can request these properties: var tenantProperties = await context.GetSharePointAdmin().GetTenantPropertiesAsync(); if (tenantProperties.BlockMacSync) { // syncing from Mac devices is blocked } Setting tenant properties Important You need to be either a SharePoint Administrator or Global Administrator to use these methods. There are more than hundred properties that control how a tenant operates and using the Update methods on the ITenantProperties object you can update these properties: // First get the properties var tenantProperties = await context.GetSharePointAdmin().GetTenantPropertiesAsync(); if (tenantProperties.BlockMacSync) { // syncing from Mac devices is blocked, let's unblock this tenantProperties.BlockMacSync = false; // Send the updated properties to the server await tenantProperties.UpdateAsync(); } Building a context to read data from SharePoint Tenant Admin Important You need to be either a SharePoint Administrator or Global Administrator to use these methods. The SharePoint Tenant Admin center site is not a site one typically would connect to, but in case you need it your code can use the GetTenantAdminCenterContextAsync methods: using (var tenantContext = await context.GetSharePointAdmin().GetTenantAdminCenterContextAsync()) { // do work with the SharePoint Tenant Admin Center site }"
  },
  "using-the-sdk/basics-addupdatedelete.html": {
    "href": "using-the-sdk/basics-addupdatedelete.html",
    "title": "Adding, updating or deleting data from Microsoft 365 | PnP Core SDK",
    "keywords": "Adding, updating or deleting data from Microsoft 365 Adding, updating or deleting data (e.g. a SharePoint list item or a Teams channel message) is usually needed when you write applications using the PnP Core SDK and in this article you'll get a brief overview on how to add, update or delete data. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for adding, updating and deleting data } Adding data Adding of data is usually done via an Add method on the collection to which you want to add data, so if you want to add an IListItem you would use one of the Add methods (e.g. AddAsync ) on the IListItemCollection collection. Given that each model (List Item, File, TeamChannel,..) requires different input for doing an add you'll see different add method signatures. Dictionary<string, object> item = new Dictionary<string, object>() { { \"Title\", \"Item1\" }, { \"Field A\", 25 } }; // Add the item var addedItem = await myList.Items.AddAsync(item); Another add example is adding (= uploading) a file to a document library: // Get a reference to a folder IFolder siteAssetsFolder = await context.Web.Folders.Where(f => f.Name == \"SiteAssets\").FirstOrDefaultAsync(); // Upload a file by adding it to the folder's files collection IFile addedFile = await siteAssetsFolder.Files.AddAsync(\"test.docx\", System.IO.File.OpenRead($\".{Path.DirectorySeparatorChar}TestFilesFolder{Path.DirectorySeparatorChar}test.docx\")); Updating data To update data you first need to get the data to update, see Get data to learn more on getting data. Once you've data (e.g. you did get a list) you can update the list by changing one of it's properties and then call one of the update methods (e.g. UpdateAsync). You can perform multiple updates to the model and only when you're done with updating the properties you need to call one of the update methods, the PnP Core SDK will keep track of the changes and will only use the actually changed properties in the update request. // Get the list to update var myList = await context.Web.Lists.GetByTitleAsync(\"List to update\"); // Update a list property myList.Description = \"PnP Rocks!\"; // Update another list property myList.EnableVersioning = true; // Send update to the server await myList.UpdateAsync(); Deleting data To delete data you do have two options, the first one is deleting the loaded model: like with updating you first need to have the model instance to delete available, see Get data to learn more on getting data. Once you have the model to delete available (e.g. a list item) you can use one of the delete methods to perform the delete. Below example uses the DeleteBatchAsync method to delete all items of a list with a single network request. // Assume the fields where not yet loaded, so loading them with the list var myList = await context.Web.Lists.GetByTitleAsync(\"My List\", p => p.Title, p => p.Items, p => p.Fields.QueryProperties(p => p.InternalName, p => p.FieldTypeKind, p => p.TypeAsString, p => p.Title)); // Iterate over the retrieved list items foreach (var listItem in myList.Items.AsRequested()) { // Delete all the items in \"My List\" by adding them to a batch await listItem.DeleteBatchAsync(); } // Execute the batch await context.ExecuteAsync(); The second approach does not require you to upfront load the item to delete: model collections that support this type of delete either have DeleteById methods which you simply call and provide the unique id of the item to delete. Below sample shows how to delete a list using this approach. // Delete the list with the given id await context.Web.Lists.DeleteByIdAsync(new Guid(\"E623E1A0-6786-498B-99D2-EE6355851CDB\")); // Add the delete of the list with given if to the current batch await context.Web.Lists.DeleteByIdBatchAsync(new Guid(\"E623E1A0-6786-498B-99D2-EE6355851CDB\")); // Execute the current batch await context.ExecuteAsync();"
  },
  "using-the-sdk/basics-apis.html": {
    "href": "using-the-sdk/basics-apis.html",
    "title": "APIs used by the PnP Core SDK | PnP Core SDK",
    "keywords": "APIs used by the PnP Core SDK The PnP Core SDK is an SDK that provides an abstraction over the actual API calls being made to Microsoft 365. When looking at the type of API calls the SDK uses there are 4 possible API endpoints being used: Microsoft Graph production endpoint (v1) : for all queries that require Graph and are available on the v1 endpoint. Microsoft Graph beta endpoint (beta) : for all queries that require Graph and are currently not available on the v1 endpoint. SharePoint REST endpoint : for all SharePoint specific queries, note that by default the SDK favors uses Microsoft Graph for some of the SharePoint needs (see the SharePoint REST versus Microsoft Graph chapter to change that) SharePoint client.svc endpoint (CSOM) : only called in a few cases when there's no other suitable API that can fulfill the needs Although the SDK can use these 4 API endpoints, for you as a developer there's no difference in how you write your code, but there might be cases where you want to influence the SDK's API selection behavior as explained in the next chapter. Influencing the SDK API selection SharePoint REST versus Microsoft Graph The PnP Core SDK by default is configured to favor the Microsoft Graph API when you're reading SharePoint data assuming the requested properties are available via Graph. Let's give a simple example showing two similar PnP Core SDK method calls which under the covers result in different APIs being called. using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Uses a Graph API call await context.Web.LoadAsync(p => p.Title); // Uses a SharePoint REST API call as the NoCrawl web property is not available in Graph await context.Web.LoadAsync(p => p.NoCrawl); } If you prefer a more consistent SharePoint experience you can configure the SDK to use SharePoint REST for everything that can be realized using SharePoint REST. You do this by setting the GraphFirst property on the PnPContext to false: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // turn off the graph first behavior context.GraphFirst = false; // Uses a Graph API call await context.Web.LoadAsync(p => p.Title); // Uses a SharePoint REST API call as the NoCrawl web property is not available in Graph await context.Web.LoadAsync(p => p.NoCrawl); } Above code snippet showed how to turn off GraphFirst for a single PnPContext, but you can also turn off GraphFirst for all contexts being created via the configuration system, see Configuring the PnP Core SDK for more information. Graph V1 versus Graph Beta In the PnP Core SDK we limit the usage of Microsoft Graph Beta endpoint, but in some cases we do have to use the Graph Beta endpoint. By default using Graph Beta is turned on, but if you don't want to use Graph Beta you can tell the SDK to not use it via the GraphCanUseBeta property. This obviously results in certain SDK features not working anymore. Depending on the solution you're building using the Graph beta endpoint might be perfect and you want to standardize on always using Graph Beta, which is an option as well via the GraphAlwaysUsesBeta property. using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // turn off the option to use Graph Beta context.GraphCanUseBeta = false; // Configure to use Graph Beta for all Graph requests context.GraphAlwaysUsesBeta = true; } Above code snippet showed how to configure the Microsoft Graph behavior for a single PnPContext, but you can also configure this behavior for all contexts being created using the configuration system, see Configuring the PnP Core SDK for more information."
  },
  "using-the-sdk/basics-async.html": {
    "href": "using-the-sdk/basics-async.html",
    "title": "Asynchronous versus synchronous | PnP Core SDK",
    "keywords": "Asynchronous versus synchronous Loading data (e.g. a SharePoint list or a Teams channel), updating, adding or deleting...all of these operations can be done either asynchronously (=async) or synchronously (=sync). In this chapter we explain the pro's and con's of each approach and provide some best practices. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext } Async or sync? Let's start with two code snippets which both result in a list item being loaded. The first snippet shows a sync way of loading a list via it's title followed by getting the item with id 1 from that list: using (var context = pnpContextFactory.Create(\"SiteToWorkWith\")) { IItem item = context.Web.Lists.GetByTitle(\"Site Pages\").Items.GetById(1); } In the second example we do the same but then async: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { IList list = await context.Web.Lists.GetByTitleAsync(\"Site Pages\"); IItem item = await list.Items.GetByIdAsync(1); } Note Both approaches use 2 queries, there's no difference between async and sync when it comes to query efficiency. Both approaches are comparable from a coding point of view: the difference is in the method names and the await keyword. You might also notice that for the sync approach the code is more fluent as there's no need for await statements, but a similar thing can be done with async via using the AndThen method to chain async method calls or via nesting each async call with it's corresponding await keyword: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Option A: Using AndThen() to chain async method calls IItem item = await context.Web.Lists.GetByTitleAsync(\"Site Pages\").AndThen(p => p.Items.GetByIdAsync(1)); // Option B: using multiple awaits IItem item = await (await context.Web.Lists.GetByTitleAsync(\"Site Pages\")).Items.GetByIdAsync(1); } In general the recommendation is to use the async methods because: They result in better performing code Improved application responsiveness (the UI thread is not blocked when a data retrieval is ongoing) Prevents deadlocks when using the PnP Core SDK from WPF apps and Blazor Internally in the PnP Core SDK everything always happens async, the sync methods you see are wrappers over their async counterparts with a GetAwaiter().GetResult() to force the code to wait for the outcome. Important Using the async methods is strongly recommended. Use the sync methods if you're using the PnP Core SDK in an already sync code base, if not use async. If you want to learn more about async programming checkout these resources: Asynchronous programming with async and await Long Story Short: Async/Await Best Practices in .NET"
  },
  "using-the-sdk/basics-batching.html": {
    "href": "using-the-sdk/basics-batching.html",
    "title": "Using batching | PnP Core SDK",
    "keywords": "Using batching The PnP Core SDK has been built from the ground up with batching in mind, more precisely almost all requests (gets, posts, etc) are executed via the respective SharePoint REST and Microsoft Graph batch endpoints. If you for example load the Title property of an IWeb then that request is issued via the batch endpoint where the batch consists of a single request. When you write code you can however also add more requests to a batch, effectively improving performance as you're preventing unnecessary network calls. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for batching requests } A typical use case When you want to add items to a list you can do that one by one or you can group the items to add in a single batch and send that batch via one of the Execute methods, the latter approach is much faster and as easy to code as the first. using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { var list = await web.Lists.AddAsync(\"Demo\", ListTemplateType.GenericList); // Approach A: no batching for (int i = 0; i < 10; i++) { Dictionary<string, object> values = new Dictionary<string, object> { { \"Title\", $\"Item {i}\" } }; // Add \"list item add\" to the server (= roundtrip) await list.Items.AddAsync(values); } // Approach B: batching for (int i = 0; i < 10; i++) { Dictionary<string, object> values = new Dictionary<string, object> { { \"Title\", $\"Item {i}\" } }; // Add \"list item add\" to current batch (= NO roundtrip) await list.Items.AddBatchAsync(values); } // send the batch to server (= roundtrip) await context.ExecuteAsync(); } For most of the methods in the PnP Core SDK you'll find equivalent batch methods: the followed convention is adding the \"Batch\" suffix e.g. we've a Get and GetAsync but also a GetBatch and GetBatchAsync. The \"batch\" methods have an override that allows you to specify a batch to add the request to, if you don't specify a batch the request will be added to the \"current\" batch. Creating a new batch can be done using the NewBatch method on PnPContext. Using a dedicated batch object you can be 100% no other code path in your application adds requests to your batch. using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { var list = await web.Lists.AddAsync(\"Demo\", ListTemplateType.GenericList); // Approach A: batching via the current batch for (int i = 0; i < 10; i++) { Dictionary<string, object> values = new Dictionary<string, object> { { \"Title\", $\"Item {i}\" } }; // Add \"list item add\" to current batch (= NO roundtrip) await list.Items.AddBatchAsync(values); } // send the batch to server (= roundtrip) await context.ExecuteAsync(); // Approach B: batching via the specific batch var newBatch = context.NewBatch(); for (int i = 0; i < 10; i++) { Dictionary<string, object> values = new Dictionary<string, object> { { \"Title\", $\"Item {i}\" } }; // Add \"list item add\" to current batch (= NO roundtrip) await list.Items.AddBatchAsync(newBatch, values); } // send the batch to server (= roundtrip) await context.ExecuteAsync(newBatch); } Loading data in batch While above example showed how to add items in a batch it's also possible to batch queries that load data. When you want to load data into the context you can use the LoadBatch or LoadBatchAsync methods, loading data into a variable can be done using the respective GetBatchAsync and GetBatch methods. // Create a single batch that loads SharePoint Site and Web data + Teams Members. As this involves REST and Graph the net // result will issue two batch requests going to Microsoft 365. One SharePoint batch request for the web + site data, one Microsoft // Graph batch request for the Teams data var batch = context.NewBatch(); await context.Web.LoadBatchAsync(batch, p => p.Lists, p => p.Features); await context.Site.LoadBatchAsync(batch, p => p.Features, p => p.IsHubSite); await context.Team.LoadBatchAsync(batch, p => p.Members); await context.ExecuteAsync(batch); // Pick a list from the in batch loaded lists var myList = context.Web.Lists.AsRequested().FirstOrDefault(l => l.Title == \"Site Pages\"); // Iterate over the in batch loaded Teams members foreach(var member in context.Team.Members.AsRequested()) { // do something with the members } While the above approach loads data via a batch request it does load all data in a collection, all lists, features and members were loaded. What if you would want to perform a filtered batch load? For that you can use the AsBatchAsync and AsBatch methods. When you batch load data into a variable you can use the IsAvailable property of the variable to check if the batch was executed before consuming the data. In case of a collection the returned variable (e.g. siteAssets in below sample) simply allows you to query the results. // Do a two list gets with filter and custom properties specifying the data to load var siteAssets = await context.Web.Lists.QueryProperties( p => p.Title, p => p.TemplateType, p => p.ContentTypes.QueryProperties( p => p.Name, p => p.FieldLinks.QueryProperties(p => p.Name))) .Where(p => p.Title == \"Site Assets\") .AsBatchAsync(); var sitePages = await context.Web.Lists.QueryProperties( p => p.Title, p => p.TemplateType, p => p.ContentTypes.QueryProperties( p => p.Name, p => p.FieldLinks.QueryProperties(p => p.Name))) .Where(p => p.Title == \"Site Pages\") .AsBatchAsync(); // Batch results are not available right now Assert.IsFalse(siteAssets.IsAvailable); Assert.IsFalse(sitePages.IsAvailable); // Execute the batch await context.ExecuteAsync(); // Batch results are now available Assert.IsTrue(siteAssets.IsAvailable); Assert.IsTrue(sitePages.IsAvailable); // Get the loaded data to use it var siteAssetsList = siteAssets.AsEnumerable().First(); var sitePagesList = sitePages.AsEnumerable().First(); In case of a collection the returned variable (e.g. siteAssets in above sample) simply allows you to query the results. When you're returning a simple type or a single model (e.g. web and site in below sample) you can access the batch loaded data via the Result property. Checking whether the batch was executed still happens via the IsAvailable property. var batch = context.NewBatch(); var web = await context.Web.GetBatchAsync(batch, p => p.Lists, p => p.Features); var site = await context.Site.GetBatchAsync(batch, p => p.Features, p => p.IsHubSite); // Batch results are not available right now Assert.IsFalse(web.IsAvailable); // Execute the batch await context.ExecuteAsync(batch); // Batch results are now available Assert.IsTrue(web.IsAvailable); // Pick a list from the in batch loaded lists var myList = web.Result.Lists.AsRequested().FirstOrDefault(l => l.Title == \"Site Pages\"); Batch limits PnP Core SDK is not imposing limits on the number of requests you can add to a single batch before executing the batch, but internally the SDK uses the official limits being maximum 20 requests for a Graph batch and 100 requests for a SharePoint REST batch. What that means is that you for example can add 1000 items into a single batch and execute that batch, during execution that batch will then be split into 10 batches of 100 items and each of these 10 batches will be executed sequentially resulting in 10 network calls to the respective batch endpoint. Handling batch failures The default behavior is that whenever a batch response is processed and a failing request inside the batch was detected an exception is thrown. This default mode is useful when you build small batches. However, when you perform bulk adds or bulk deletions then you don't want your batch processing being interrupted on a single failure. A sample case could be this: imagine you've created a batch to delete all list items from a list, but in parallel someone else already deleted an item you're also deleting via the submitted batch. With the default batch behavior you'll get an exception stating an item was not found, but you can turn off the ThrowOnError setting by providing it to the ExecuteAsync method and then the batch continues and you'll get a list of BatchResult (= the errors) which you then have to handle in your code. // Create a list var myList = await context.Web.Lists.AddAsync(listTitle, ListTemplateType.GenericList); // Add 150 items to the list for (int i = 1; i <= 150; i++) { Dictionary<string, object> values = new Dictionary<string, object> { { \"Title\", $\"Item {i}\" } }; await myList.Items.AddBatchAsync(values); } await context.ExecuteAsync(); // Delete some items from within both 1..100 and 101..150 sets await myList.Items.DeleteByIdBatchAsync(5); await myList.Items.DeleteByIdBatchAsync(50); await myList.Items.DeleteByIdBatchAsync(125); await context.ExecuteAsync(); // Build a batch to delete all 150 items for (int i = 1; i <= 150; i++) { await myList.Items.DeleteByIdBatchAsync(i); } // Execute the batch without throwing an error, gets you a collection of errors back var batchResponse = await context.ExecuteAsync(false); foreach(var batchResponse in batchResponses) { // Do something with the failed request }"
  },
  "using-the-sdk/basics-context.html": {
    "href": "using-the-sdk/basics-context.html",
    "title": "Advanced PnPContext use | PnP Core SDK",
    "keywords": "Advanced PnPContext use Requesting a PnPContext is something each application does, using the PnPContextFactory as explained in the overview article . Whereas the overview article describes how to get a PnPContext there are additional possibilities when requesting and working with a PnPContext . Loading additional IWeb and ISite properties when creating a PnPContext When a PnPContext is created two calls are issued to SharePoint Online. In a first call the IWeb is loaded with following properties: Id , Url and RegionalSettings . In the second call ISite is loaded with the Id and GroupId properties. If your application needs additional IWeb or ISite properties you can optimize the number of server roundtrips by adding the extra needed properties to the already planned requests for loading IWeb and ISite . To do this you can provide a PnPContextOptions object specifying the additional IWeb and ISite properties to load. var options = new PnPContextOptions() { AdditionalSitePropertiesOnCreate = new Expression<Func<ISite, object>>[] { s => s.Url, s => s.HubSiteId }, AdditionalWebPropertiesOnCreate = new Expression<Func<IWeb, object>>[] { w => w.ServerRelativeUrl } }; using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\", options)) { // the created context has besides the default properties also the Url and HubSiteId ISite properties loaded + // the ServerRelativeUrl IWeb property. } While above sample just loaded some basic IWeb and ISite properties you can also do more complex LINQ expressions. var options = new PnPContextOptions() { AdditionalSitePropertiesOnCreate = new Expression<Func<ISite, object>>[] { s => s.Url, s => s.HubSiteId, s => s.Features }, AdditionalWebPropertiesOnCreate = new Expression<Func<IWeb, object>>[] { w => w.ServerRelativeUrl, w => w.Fields, w => w.Features, w => w.Lists.QueryProperties(r => r.Title, r => r.RootFolder.QueryProperties(p => p.ServerRelativeUrl)) } }; using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\", options)) { // the created context has besides the default properties also the Url, HubSiteId and Features ISite // properties loaded + the ServerRelativeUrl, Fields, Features, Lists with RootFolder IWeb properties. } Any expression that you'd normally would write to retrieve data can also be specified to be included in the default context creation. Cloning a PnPContext Once you've created a PnPContext you might want to clone it for the same site or for a new web. Cloning a PnPContext for a new web When you clone contexts for a new web the context settings (e.g. GraphFirst ) are copied over. If you've specified additional properties to load on context creation these properties will also be loaded for the cloned context. So the cloned context will be exactly configured like the original site, but then for the other web url. using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Clone this context using a configuration using (var contextClone = await context.CloneAsync(\"OtherSite\")) { // Use the cloned context } // Clone this context using a URL using (var contextClone = await context.CloneAsync(new Uri(\"https://contoso.sharepoint.com/sites/anothersite\"))) { // Use the cloned context } } Cloning a PnPContext for the same web Sometimes you want to use a new PnPContext for the same web. You can obviously create a new PnPContext via the context factory, but then you do get the initialization cost again. When you clone a PnPContext the initialization data will be copied across contexts, just like the settings, so you'll get a functioning PnPContext without calling back into SharePoint Online. If you've specified additional properties to load on context creation then only the extra properties which are basic (so no model classes) are copied into the cloned context. var options = new PnPContextOptions() { AdditionalSitePropertiesOnCreate = new Expression<Func<ISite, object>>[] { s => s.Url, s => s.HubSiteId, s => s.Features }, AdditionalWebPropertiesOnCreate = new Expression<Func<IWeb, object>>[] { w => w.ServerRelativeUrl, w => w.Fields, w => w.Features, w => w.Lists.QueryProperties(r => r.Title, r => r.RootFolder.QueryProperties(p => p.ServerRelativeUrl)) } }; using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\" , options)) { // Clone this context using a configuration using (var contextClone = await context.CloneAsync(\"SiteToWorkWith\")) { // Use the cloned context. Without going to the server the default IWeb and ISite properties are loaded // + the ISite Url and HubSiteId properties // + the IWeb ServerRelativeUrl property // Other extra initialization properties are model classes and are not copied over } }"
  },
  "using-the-sdk/basics-csom-vs-pnp.html": {
    "href": "using-the-sdk/basics-csom-vs-pnp.html",
    "title": "SharePoint CSOM vs PnP Core SDK | PnP Core SDK",
    "keywords": "SharePoint CSOM vs PnP Core SDK Some PnP Core SDK code looks very similar to the SharePoint CSOM code. While it feels like the PnP Core SDK works the same as CSOM, in some situations, it's not the case. Let's explore the similarities/differences between CSOM and PnP Core SDK. The context In the same way as for CSOM, in the PnP Core SDK it's all starts with the context: CSOM: using (var csomContext = new ClientContext(siteUrl)) { } PnP Core SDK: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { } PnPContext is the starting point for all PnP Core SDK-related operations. However you have a lot more options on how to instantiate a PnPContext - using configuration name, site url, group id, using default or custom authentication provider and so on. All the method overloads are available at the PnpContextFactory . See the Getting started page to learn more about instantiating a PnPContext . Loading objects Loading data into the context You can load data directly to the PnPContext , which is very similar to the CSOM. In the PnP Core SDK all Load* methods are available on the SharePoint model objects themselves. CSOM: using (var csomContext = new ClientContext(siteUrl)) { csomContext.Load(csomContext.Web, w => w.Title, w => w.Id); csomContext.ExecuteQuery(); // executes the actual HTTP request Console.WriteLine(csomContext.Web.Title); } PnP Core SDK: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { await context.Web.LoadAsync(w => w.Title, w => w.Id); // HTTP request is executed immediately Console.WriteLine(context.Web.Title); } Here we can see the very first and the very important difference: Note All Load* methods in PnP Core SDK immediately execute the request, in contradiction to the CSOM where you should explicitly call ExecuteQuery . The only exception from this rule is batching ( LoadBatch* methods). If you use batching, you should explicitly call Execute method: PnP Core SDK: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { await context.Web.LoadBatchAsync(w => w.Title, w => w.Id); await context.ExecuteAsync(); // executes the actual HTTP request with all batched queries Console.WriteLine(context.Web.Title); } Loading data into the variable With CSOM you can also load data into the variable: CSOM: using (var csomContext = new ClientContext(siteUrl)) { var web = csomContext.Web; csomContext.Load(web, w => w.Title, w => w.Id); var list = web.Lists.GetByTitle(\"Documents\"); csomContext.Load(list); csomContext.ExecuteQuery(); // executes the actual HTTP request Console.WriteLine(list.Title); Console.WriteLine(web.Title); } The PnP Core SDK equivalent will be: PnP Core SDK: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { var web = await context.Web.GetAsync(w => w.Title, w => w.Id); // executes the first HTTP request var list = await context.Web.Lists.GetByTitleAsync(\"Documents\"); // executes the second HTTP request Console.WriteLine(list.Title); Console.WriteLine(web.Title); } The key difference is that the PnP Core SDK always creates a new variable when you use Get* methods, whereas in the CSOM sometimes you cannot do the same and can only reference a variable from the context. In the latter sample, the PnP Core SDK sends two HTTP requests to get data whereas the CSOM sends only one. If you want fewer HTTP requests in your code consider batching approach. Also consider a code to get an item by its id: CSOM: using (var csomContext = new ClientContext(siteUrl)) { var item = csomContext.Web.Lists.GetByTitle(\"AddTest\").GetItemById(1); csomContext.Load(item); csomContext.ExecuteQuery(); } PnP Core SDK: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { var item = context.Web.Lists.GetByTitle(\"AddTest\").Items.GetById(1); } In the latter case the code sends two HTTP requests to get the item. This is because we write it in a synchronous way. To learn more why it happens, check out async vs sync page. Loading collections The differences in loading collections between the CSOM and the PnP Core SDK are somewhat similar to the regular object loading. You can either load it into the context or as a separate variable. CSOM: using (var csomContext = new ClientContext(siteUrl)) { // load the list collection into the context csomContext.Load(csomContext.Web.Lists, lists => lists.Include( l => l.Id, l => l.Title, l => l.RootFolder)); // load into the variable var lists = csomContext.LoadQuery(csomContext.Web.Lists.Where(l => !l.Hidden)); // execute the request csomContext.ExecuteQuery(); } PnP Core SDK: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // load the list collection into the context await context.Web.Lists.LoadAsync(l => l.Id, l => l.Title, l => l.RootFolder); // immediately executes the request // load into the variable var lists = await context.Web.Lists.Where(l => l.Hidden == false).ToListAsync(); // immediately executes the request } In the PnP Core SDK, if you need to filter a collection, you can apply the LINQ filter query directly to the collection. Upon execution, the LINQ will be translated to the REST OData filter. CRUD operations CRUD operations are very similar in both libraries. Consider the code to update a list item: CSOM: using (var csomContext = new ClientContext(siteUrl)) { var list = csomContext.Web.Lists.GetByTitle(\"ListTitle\"); var item = list.GetItemById(1); item[\"Title\"] = \"new title\"; item.Update(); csomContext.ExecuteQuery(); } PnP Core SDK: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { var list = await context.Web.Lists.GetByTitleAsync(\"AddTest\"); var item = await list.Items.GetByIdAsync(1); item[\"Title\"] = \"new value\"; await item.UpdateAsync(); // sends HTTP request to update the item } In the PnP Core SDK an item is updated immediately at the UpdateAsync line, in the CSOM you have to call Update and ExecuteQuery to commit the changes. If you need to CRUD multiple elements, consider batching ."
  },
  "using-the-sdk/basics-customapirequests.html": {
    "href": "using-the-sdk/basics-customapirequests.html",
    "title": "Making custom API calls | PnP Core SDK",
    "keywords": "Making custom API calls PnP Core SDK uses a strongly typed model allowing you to interact with SharePoint and Microsoft Teams using either SharePoint REST, Microsoft Graph or SharePoint CSOM requests. If the provided functionality is not meeting your needs you do have the option to execute SPO REST or Microsoft Graph requests yourselves, as explained in this article. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext } General concepts To perform a custom API request you use the ExecuteRequestAsync or ExecuteRequest methods providing as input a ApiRequest holding the information for making the API call. You can use these methods on any domain model object (e.g. Web , List , Team ) and this will not impact the call. However calling the ExecuteRequestAsync or ExecuteRequest methods on the correct domain model object enables you to use the tokens in your API call. Following tokens can be used: Token Description {Id} Value of the SharePoint Id property of the current model instance (e.g. List). {Parent.Id} Value of the SharePoint Id property of the current model's parent instance (e.g. Web for a List --> ListCollection is skipped in this approach). {GraphId} Value of the Microsoft Graph Id property of the current model instance (e.g. TeamChannel). {Parent.GraphId} Value of the Microsoft Graph Id property of the current model's parent instance (e.g. Team for a TeamChannel --> TeamChannelCollection is skipped in this approach). {Site.GroupId} Id value of the Microsoft 365 Group connected to the Site loaded in the current PnPContext (Id is the same for SharePoint REST as Microsoft Graph usage). {Site.Id} SharePoint Id value of the Site loaded in the current PnPContext. {Web.Id} SharePoint Id value of the Web loaded in the current PnPContext. {Web.GraphId} Microsoft Graph Id value of the Web loaded in the current PnPContext. {List.Id} SharePoint Id value of the List loaded in the current PnPContext (works only when the target object is of type List or ListItem). {hostname} Host name of the current site (so for https://contoso.sharepoint.com/sites/team1 this is contoso.sharepoint.com) {serverrelativepath} Server relative path of the current site (so for https://contoso.sharepoint.com/sites/team1 this is /sites/team1) The returned response is of type ApiRequestResponse and contains the JSON result, the HTTP result code, the original ApiRequest instance and optional extra HTTP headers returned by the call. Making a custom SPO REST request Below sample shows how you can perform a custom REST request on the current web and on a web in another site collection: // Custom SPO REST request for the current connected web // Will result in a GET https://contoso.sharepoint.com/sites/currentsite/_api/web var apiRequest = new ApiRequest(ApiRequestType.SPORest, \"_api/web\"); var response = context.Web.ExecuteRequest(apiRequest); // Parse the json response returned via response.Response // Custom SPO REST Request for another web // Will result in a GET https://contoso.sharepoint.com/sites/anothersite/_api/web var apiRequest = new ApiRequest(ApiRequestType.SPORest, \"https://contoso.sharepoint.com/sites/anothersite/_api/web\"); var response = await context.Web.ExecuteRequestAsync(apiRequest); Note When you're using text content (e.g. json for the request body) then you need to ensure it's correctly encoded. Using the default System.Text.Json library will handle unicode characters automatically. When using Newtonsoft then use the JsonSerializerSettings.StringEscapeHandling property of the JsonSerializerSettings class. Making a custom Microsoft Graph request Below sample shows how to make a custom Microsoft Graph request: // Custom Microsoft Graph request // Will result in a GET \"https://graph.microsoft.com/v1.0/me\" var apiRequest = new ApiRequest(ApiRequestType.Graph, \"me\"); var response = context.Team.ExecuteRequest(apiRequest); // Parse the json response returned via response.Response Note When you're using text content (e.g. json for the request body) then you need to ensure it's correctly encoded. Using the default System.Text.Json library will handle unicode characters automatically. When using Newtonsoft then use the JsonSerializerSettings.StringEscapeHandling property of the JsonSerializerSettings class. Batching custom API requests To optimize performance it's recommended to limit the amount of server roundtrips and therefore batching custom API requests can be used. Batching requests is quite similar to interactive requests, you simply use one of the available ExecuteRequestBatch methods. Since batching requests implies that you'll only get a result once the batch is executed you do not get back a JSON string, instead you get an IBatchSingleResult<BatchResultValue<string>> which allows you to check if the batch was executed and if so get the batch result via the Value property. // Create a new batch var batch = context.NewBatch(); // Add requests to the batch var meResponse = context.Web.ExecuteRequestBatch(batch, new ApiRequest(ApiRequestType.Graph, \"me\")); // Note: meResponse.IsAvailable is false var drivesResponse = context.Web.ExecuteRequestBatch(batch, new ApiRequest(ApiRequestType.Graph, \"drives\")); // Note: drivesResponse.IsAvailable is false // Execute the batch await context.ExecuteAsync(batch); // Use the batch results if (meResponse.IsAvailable) { string meJsonResonse = meResponse.Result.Value; } if (drivesResponse.IsAvailable) { string drivesJsonResponse = drivesResponse.Result.Value; } Batching can be used with an dedicated batch like shown in above example, but it's also possible to use the implicit batch which is always available, in that case you'd just leave out the batch parameter in the ExecuteRequestBatch methods: // Add requests to the batch var meResponse = await context.Web.ExecuteRequestBatchAsync(new ApiRequest(ApiRequestType.Graph, \"me\")); var drivesResponse = await context.Web.ExecuteRequestBatchAsync(new ApiRequest(ApiRequestType.Graph, \"drives\")); // Execute the batch await context.ExecuteAsync(); // Use the batch results if (meResponse.IsAvailable) { string meJsonResonse = meResponse.Result.Value; } if (drivesResponse.IsAvailable) { string drivesJsonResponse = drivesResponse.Result.Value; } Handling failing requests in a batch What if one of the requests in a batch fails? The default behavior is that a SharePointRestServiceException or MicrosoftGraphServiceException exception is thrown when the first failed request is processed, but you can also choose to get back a list of failed batch requests and then handle the follow-up in your code. To do this you need to tell the Execute methods to not throw an exception and collect the output of the Execute method. Following snippet shows how to do this: // Create a new batch var batch = context.NewBatch(); // Add requests to the batch var meResponse = await context.Web.ExecuteRequestBatchAsync(batch, new ApiRequest(ApiRequestType.Graph, \"me\")); var drivesResponse = await context.Web.ExecuteRequestBatchAsync(batch, new ApiRequest(ApiRequestType.Graph, \"thiswillgiveanerror\")); // Execute the batch, notice we tell here to not throw an exception and we collect the possible errors in a collection var batchErrors = await context.ExecuteAsync(batch, false); // Use the batch results if (batchErrors.Any()) { // there were errors } else { // all good } Can I mix custom API requests with out-the-box API requests in a single batch? Yes, this is perfectly possible, below example combines a custom API with an API request that will load a set of lists. // Create a new batch var batch = context.NewBatch(); // Add requests to the batch var result1 = await context.Web.ExecuteRequestBatchAsync(batch, new ApiRequest(ApiRequestType.Graph, \"_api/web\")); var result2 = await context.Web.Lists .Where(p => p.TemplateType == ListTemplateType.GenericList) .QueryProperties( p => p.Title, p => p.TemplateType, p => p.ContentTypes.QueryProperties( p => p.Name, p => p.FieldLinks.QueryProperties(p => p.Name))) .AsBatchAsync(batch); // Execute the batch await context.ExecuteAsync(batch); I want to specify custom request headers or read the response headers To specify request headers you can use the WithHeaders extension method from the PnP.Core.Model namespace: using a Dictionary<string,string> you provide input headers and using a delegate your code get notified of the resulting response headers. Below are some sample: Dictionary<string, string> extraHeaders = new Dictionary<string, string>() { { \"myheader\", \"myheadervalue\" } }; // Use WithHeaders on custom API request, process the returned response headers var meResponse = await context.Web.WithHeaders(extraHeaders, (responseHeaders) => { /* process the response headers */ }).ExecuteRequestBatchAsync(batch, new ApiRequest(ApiRequestType.Graph, \"me\")); // Use WithHeaders on OOB API request, ignore the response headers context.Web.WithHeaders(extraHeaders).Load(p => p.All);"
  },
  "using-the-sdk/basics-debug.html": {
    "href": "using-the-sdk/basics-debug.html",
    "title": "Debugging PnP Core SDK | PnP Core SDK",
    "keywords": "Debugging PnP Core SDK The typical way to use the PnP Core SDK is by adding a reference to it via the PnP Core SDK NuGet package . The common way for folks to debug a library shipped via NuGet is to pull down the source, compile it and then connect your app to your own compiled version. This approach works, but is not ideal as you need to do a lot of work plus things get more complex if you want to debug an older version of the package. To address the above the PnP Core SDK packages support Source Link , which makes it possible for you to step through the PnP Core SDK without doing any extra downloads or compilations. The only thing needed is a one time Visual Studio configuration and you're good to go. Important This is a really easy way to understand what the PnP Core SDK does without any extra setup, so highly recommended! Configuring Visual Studio to support debugging PnP Core SDK packages via Source Link By default Visual Studio is not configured to work with Source Link , follow below one-time configuration to make Source Link work: Launch Visual Studio and go to Tools -> Options and select the General page in the Debugging category. On that page: Uncheck the \"Enable Just My Code\" check box Check the \"Enable source server support\" check box Check the \"Enable Source Link support\" Select the Symbols page in the Debugging category. On that page: Check the \"NuGet.org Symbol Server\" option nas possible PDB location Using Source Link Once you've setup Source Link when you're debugging you can simply press F11 on any PnP Core SDK code construct and Visual Studio will automatically fetch the correct code from GitHub and allow you to step into the code."
  },
  "using-the-sdk/basics-errorhandling.html": {
    "href": "using-the-sdk/basics-errorhandling.html",
    "title": "Error handling | PnP Core SDK",
    "keywords": "Error handling PnP Core SDK, like any other library, will throw exceptions when something unexpected happens. Typically exceptions are throw due to failing service calls or configuration mistakes. PnP Core SDK uses different exception types allowing you to have more control over the exception. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext } What type of exceptions are thrown by PnP Core SDK Exceptions being thrown can be grouped into a number of buckets: Standard .NET exceptions (e.g. ArgumentNullException , ArgumentOutOfRangeException , InvalidCastException , InvalidOperationException , ApplicationException , ...) when validating user input and running Standard .NET exceptions for currently unsupported features (e.g. NotSupportedException , NotImplementedException ) PnP Core SDK specific exceptions for general SDK failures: ClientException PnP Core SDK specific exceptions for authentication failures: AuthenticationException PnP Core SDK specific exceptions for service calls: For failing SharePoint REST calls: SharePointRestServiceException For failing Microsoft Graph calls: MicrosoftGraphServiceException For failing SharePoint CSOM calls: CsomServiceException All PnP Core exceptions inherit from PnPException , for service calls there's an extra base exception named ServiceException which enables you to filter out all service call related exceptions. Catching a PnP Core SDK exception and getting the exception details All PnP Core SDK specific exceptions inherit from PnPException making it easy for you to filter them out. Also each PnPException does have an Error property holding detailed exception information. As PnPException is an abstract base class you'd typically want to work with the actual exceptions like ClientException , AuthenticationException , SharePointRestServiceException , MicrosoftGraphServiceException and CsomServiceException as shown in below code snippets. The first snippet shows how to log the detailed exception information, when you call ToString() on the exception a stacktrace will be included, calling ToString() on an Error object will just get you the error details. try { // Make service call } // Catch all service exceptions catch (ServiceException ex) { // Option 1: Dump full error information to your log, including exception stacktrace Console.WriteLine(ex.ToString()); // Option 2: Only handle SharePoint REST exceptions if (ex is SharePointRestServiceException) { // Let's get the detailed error information SharePointRestError error = ex.Error as SharePointRestError; // Write detailed error information to a log Console.WriteLine(error.ToString()); } // Option 3: handle all service errors Console.WriteLine(ex.Error.ToString()); } Having the detailed exception information sometimes is also needed to 'eat' expected exceptions as shown in this sample working with files: IFile image = null; bool fileExists = false; try { image = await clientContext.Web.GetFileByServerRelativeUrlAsync(\"/sites/hrweb/siteassets/image1.png\"); fileExists = true; } catch(SharePointRestServiceException ex) { var error = ex.Error as SharePointRestError; // Indicates the file did not exist if (error.HttpResponseCode == 404 && error.ServerErrorCode == -2130575338) { Console.WriteLine(\"File does not exist...we're eating the exception and continue\"); } else { throw } } if (fileExists) { // Do something with the image }"
  },
  "using-the-sdk/basics-getdata.html": {
    "href": "using-the-sdk/basics-getdata.html",
    "title": "Requesting data from Microsoft 365 | PnP Core SDK",
    "keywords": "Requesting data from Microsoft 365 Requesting data (e.g. a SharePoint list or a Teams channel) is usually needed when you write applications using the PnP Core SDK. There are different methods to request data, ones that request data for a given model instance (e.g. an IList ), but also ones that populate a collection of model instances (e.g. an IListCollection ) In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for requesting data } Requesting model data The PnPContext is an entry point to the connected Site, Web, Team and more...but it's also an in-memory domain model. When you're requesting data you do have a choice: you can load the data into the domain model so it stays available as long as you keep your PnPContext or you can load the data into a variable which stays available for lifetime of the variable. I want to load data into the PnPContext To load model data into the PnPContext you need to use one of the Load methods. The following Load methods exist on each model, allowing you to perform a direct query or add a query to a batch for a grouped execution (see the batch article ). LoadAsync Load LoadBatchAsync LoadBatch These methods allow you to perform a default load or a controlled load in which you specify which properties you want to get loaded. Doing a controlled load allows you to only retrieve what your applications needs and typically is faster compared to doing a default load. Note When loading data the SDK will automatically load the primary key property of a model, even if you've not requested that when doing a controlled load. When you create a PnPContext the SDK already loads the relevant IWeb and ISite properties of the PnPContext . When loading these IWeb and ISite properties, a controlled load is done to only retrieve what's needed to support the internal workings of the SDK. See also Advanced PnPContext use to learn more about how to use your PnPContext . Below sample shows some of the above discussed data loads. using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // The Id property of the IWeb was loaded when the context was created var webId = context.Web.Id; // Do a default load of the IWeb // Data is loaded into the context await context.Web.LoadAsync(); // Do a controlled load of the IWeb, only the web title is loaded // Data is loaded into the context await context.Web.LoadAsync(p => p.Title); // Do a controlled load of the IWeb, only the web title and all the lists in the web are loaded // Data is loaded into the context await context.Web.LoadAsync(p => p.Title, p => p.Lists); // We're using AsRequested() to query the already loaded domain models, if not a new query would // issued to load the lists foreach (var list in context.Web.Lists.AsRequested()) { // do something with the list } } I want to load data into a variable The Load methods do load data into the PnPContext and that's not always what you might need: doing a Get method will be equivalent to the Load method but instead of populating the data in the PnPContext the data is loaded into a variable. The following Get methods exist on each model: GetAsync Get GetBatchAsync GetBatch using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Load the data into variable var web = await context.Web.GetAsync(p => p.Title, p => p.Lists); // We're using AsRequested() to query the already loaded domain models, if not a new query would // issued to load the lists foreach (var list in web.Lists.AsRequested()) { // do something with the list } } Requesting model collections Previous chapter showed how to load data starting from a single model (e.g. loading the Title property of IWeb ), but what if you need to load the lists of a web? One approach for loading a model collection is loading the full collection via loading the relevant parent domain model property (e.g. loading the Lists property on the IWeb ) as shown in previous chapter. Using this approach you can either load the data in the PnPContext (when using a Load method) or into a variable (when using a Get method), but this approach however does not allow you to apply a filter to reduce the data being returned. Writing queries against collections is possible via the PnP Core SDK LINQ provider as shown in below sample. Note that LINQ queries always result in data loaded into a variable and not into the PnPContext . using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Option A: Load the Lists using a model load => no filtering option var lists = await context.Web.GetAsync(p => p.Title, p => p.Lists); // Option B: Load the Lists using a LINQ query ==> filtering is possible, // only lists with title \"Site Pages\" are returned var lists = await context.Web.Lists.Where(p => p.Title == \"Site Pages\").ToListAsync(); // Option C: we assume there's only one list with that title so we can use FirstOrDefaultAsync var sitePagesList = await context.Web.Lists.FirstOrDefaultAsync(p => p.Title == \"Site Pages\"); } Like with loading the model in the previous chapter you've two ways of using the data: query the data that was loaded in the context or query the data loaded into a variable: Below sample shows the various options for loading and using collections. Note When you want to enumerate or query (via LINQ) already loaded data you need to first use the AsRequested() method to return the domain model objects as an IList . IQueryable is an interface used by almost all collections (like Lists , Fields , etc.) in PnP Core SDK. It's very powerful, but should be used carefully to avoid some common performance pitfalls. Read IQueryable performance considerations to learn more. using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Option A: Load all lists into the context and use the loaded lists await context.Web.LoadAsync(p => p.Lists); foreach(var list in context.Web.Lists.AsRequested()) { // Use list } // Option B: Use the lists from the returned collection, you're // only working with the effectively returned lists. These lists // are not loaded into the context var lists = await context.Web.Lists.Where(p => p.Title == \"Site Pages\").ToListAsync(); foreach(var list in lists) { // Use list } // Option C: directly enumerate the lists, these lists are not loaded into the context await foreach(var list in context.Web.Lists) { // Use List } } If you want to run a LINQ query on an already loaded collection of model objects you need to use the AsRequested() method to return the domain model objects as an IEnumerable so that you can then query them via LINQ: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // All lists loaded into the context await context.Web.LoadAsync(p => p.Lists); // Query the lists in the context using LINQ var sitePagesList = context.Web.Lists.AsRequested().FirstOrDefault(p => p.Title == \"Site Pages\"); } Loading additional data in a single request When you perform a model or model collection get/load you can do a controlled load specifying the model properties to return, but sometimes you want to also specify what to return from a returned property (e.g. you're loading a list and want to also load the content types and their field links). The PnP Core SDK supports these type of additional data loads via the QueryProperties method . This method can be used with model data loads as well as with model collection data loads as shown here: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Load the Site with the RootWeb model populated with the Title, NoCrawl and List properties, // for each list load the the Title property await context.Site.LoadAsync(p => p.RootWeb.QueryProperties(p => p.Title, p => p.NoCrawl, p => p.Lists.QueryProperties(p => p.Title))); // Loads all lists with // their content types controlled loaded and // for each content type the field links are controlled loaded // with the name property var lists = await context.Web.Lists.QueryProperties( p => p.Title, p => p.TemplateType, p => p.ContentTypes.QueryProperties( p => p.Name, p => p.FieldLinks.QueryProperties(p => p.Name))) .ToListAsync(); // Loads all document libraries // their content types controlled loaded and // for each content type the field links are controlled loaded // with the name property var lists = await context.Web.Lists.Where(p => p.TemplateType == ListTemplateType.DocumentLibrary) .QueryProperties( p => p.Title, p => p.TemplateType, p => p.ContentTypes.QueryProperties( p => p.Name, p => p.FieldLinks.QueryProperties(p => p.Name))) .ToListAsync(); // Loads the first hidden document library // their content types controlled loaded and // for each content type the field links are controlled loaded // with the name property var list = await context.Web.Lists.Where(p => p.TemplateType == ListTemplateType.DocumentLibrary && p.Hidden) .QueryProperties( p => p.Title, p => p.TemplateType, p => p.ContentTypes.QueryProperties( p => p.Name, p => p.FieldLinks.QueryProperties(p => p.Name))) .FirstOrDefaultAsync(); } Important When the API uses Microsoft Graph (e.g. when working with Microsoft Teams), you cannot use nested QueryProperties statements and you can't load a given properties that depend on a separate query to work. At that point you'll see a ClientException being thrown with as ErrorType Unsupported . What about those GetByxxx methods? In the domain model you quite often see a GetByxxx method (e.g. GetByTitleAsync and GetByIdAsync on an IList): these methods are simply shorthands for their respective PnP Core SDK LINQ method calls. There's no functional difference between both approaches and you can use whatever \"feels\" the best for you. using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Using this GetByTitle method is... var list = await context.Web.Lists.GetByTitleAsync(\"Site Pages\", p => p.Title, p => p.TemplateType, p => p.ContentTypes.QueryProperties( p => p.Name, p => p.FieldLinks.QueryProperties(p => p.Name))); // ...identical to this GetFirstOrDefaultAsync call var list = await context.Web.Lists.Where(p => p.Title == \"Site Pages\") .QueryProperties(p => p.Title, p => p.TemplateType, p => p.ContentTypes.QueryProperties( p => p.Name, p => p.FieldLinks.QueryProperties(p => p.Name))) .FirstOrDefaultAsync(); } Cascading data loads Depending on the scenario you might need to perform two or more data loads to reach the model instance you need (e.g. you need to load the list before you can get the list items). You can write the code for these cascading loads in multiple ways, but each of the approaches results in two queries being sent. using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Async approach: recommended // Option A: using an intermediate variable IList list = await context.Web.Lists.GetByTitleAsync(\"Site Pages\"); IItem item = await list.Items.GetByIdAsync(1); // Option B: using the AndThen method to chain async method calls IItem item = await context.Web.Lists.GetByTitleAsync(\"Site Pages\").AndThen(p => p.Items.GetByIdAsync(1)); // Option C: using multiple awaits IItem item = await (await context.Web.Lists.GetByTitleAsync(\"Site Pages\")).Items.GetByIdAsync(1); // Synchronous approach IItem item = context.Web.Lists.GetByTitle(\"Site Pages\").Items.GetById(1); }"
  },
  "using-the-sdk/basics-getdata-paging.html": {
    "href": "using-the-sdk/basics-getdata-paging.html",
    "title": "Using paging | PnP Core SDK",
    "keywords": "Using paging Being able to retrieve data in a paged manner is important when you want to use the first data rows while you're loading still additional data, but also when you're loading large data sets. When you page data you can start from a LINQ query or from a whole collection of items. Either way, PnP Core SDK provides you \"implicit paging\", meaning that when you browse (for example with a foreach constructor) the items in the collection, under the cover PnP Core SDK will retrieve data page by page, giving you back data like it was already in memory (continuous querying with implicit paging). If you rather want to have full control on paging data, you can use the Take() method and from that point on PnP Core SDK will handle paging for you. Note In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for getting paged data } Implicit paging In this example the messages in a Team channel are queried continuously, using implicit paging. When doing so the underlying Graph API call will return a \"next page link\" automatically and if so this will be used to get the next messages. The paging dynamics will be completely transparent to you, and you will simply get back the data that you are looking for, with an optimized and paged querying approach. using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Retrieve the already created channel var channelForPaging2 = context.Team.Channels.FirstOrDefault(p => p.DisplayName == \"My Channel\"); // Retrieve the messages page by page and asynchronously in a transparent way await foreach(var message in channelForPaging2.Messages) { // do something with the message } } As you can see, you can just focus on consuming data, while under the cover PnP Core SDK will retrieve the items for you, page by page, optimizing bandwidth and requests. Notice the await keyword just before the foreach constructor, in order to make the continuous query fully asynchronous and highly optimized. This is the suggested pattern for consuming large collections of items. If your query needs to apply filters or properties selection on the queried data, you can leverage the AsAsyncEnumerable method to keep the query asynchronous and paged with continuous implicit paging. Here is an example. using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Efficient, dynamic and asynchronous with whatever LINQ query you like await foreach(var list in context.Web.Lists.Where(l => l.Title == \"Documents\").AsAsyncEnumerable()) { // do something with the list } } If your code is not asynchronous, and as such you cannot rely on the await keyword just before the foreach constructor, you can still use the synchronous enumeration of items, like it is illustrated in the following sample. using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Retrieve the already created channel var channelForPaging2 = context.Team.Channels.FirstOrDefault(p => p.DisplayName == \"My Channel\"); // Retrieve the messages page by page, synchronously in a transparent way foreach(var message in channelForPaging2.Messages) { // do something with the message } } You will still get the whole set of items (messages in the previous example) with multiple REST queries page by page. However, the querying of all the items will be synchronous and your code will be blocked while waiting for the whole set of items to be queried. This is a sub-optimal scenario, that you should try to avoid, preferring the asynchronous model. Full load of items Another option that you have is to load in memory the whole set of items, using any of the Load methods available in PnP Core SDK. In the following sample, you can see how to load in memory the whole set of messages of a Teams channel. using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Retrieve the already created channel var channelForPaging2 = context.Team.Channels.FirstOrDefault(p => p.DisplayName == \"My Channel\"); // Load the messages, this will load all messages via paged requests await channelForPaging2.LoadAsync(p => p.Messages); // Consume the in-memory items foreach(var message in channelForPaging2.Messages.AsRequested()) { // do something with the message } } The AsRequested method will browse the already in-memory items. The items will be loaded just once by the Load method. Paging via the Take()/Skip() extension methods If you want to have full control on paging data, you can rely on the Take / Skip extension methods. In the following example you can see how to use manual paging to load lists. using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Get a first page of lists of size 2 var lists = await context.Web.Lists.Take(2).QueryProperties(p => p.Title).ToListAsync(); // Get the next page lists = await context.Web.Lists.Take(2).Skip(2).QueryProperties(p => p.Title).ToListAsync(); } In the above sample only the Title property of the lists is requested, if you do not provide the expression then the list default properties are loaded. In the following code excerpt you can see a complete logic to manually page items in a collection using Take / Skip extension methods. int pageCount = 0; int pageSize = 10; while (true) { var page = context.Web.Lists.Skip(pageSize * pageCount).Take(pageSize).ToArray(); // Use the current page ... pageCount++; if (page.Length < pageSize) { break; } } Notice that the above sample relies on you for requesting the pages. As such, unless you really need to manually control paging, you should avoid this approach and rather use the continuous paging with asynchronous code. Using Take() extension method with a filter and complex data load expression This example builds on top of the previous but shows some additional capabilities: A complex expression is used to define which List properties to load A filter expression is specified so that only a subset of lists are returned The returned, paged, data is made available via the method call output using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Get a first page of lists of size 2 // filtered to generic lists // returning list properties // - Title and TemplateType // - ContentTypes // - For each content type the FieldLinks loaded // - For each FieldLink the Name property var lists = await context.Web.Lists.Take(2) .Where(p => p.TemplateType == ListTemplateType.GenericList) .QueryProperties(p => p.Title, p => p.TemplateType, p => p.ContentTypes.QueryProperties( p => p.Name, p => p.FieldLinks.QueryProperties(p => p.Name))) .ToListAsync(); }"
  },
  "using-the-sdk/basics-graphsdk.html": {
    "href": "using-the-sdk/basics-graphsdk.html",
    "title": "Interop with the Microsoft Graph SDK | PnP Core SDK",
    "keywords": "Interop with the Microsoft Graph SDK While the focus of PnP Core SDK is mainly on SharePoint and Teams features, using a mix of Microsoft Graph, SharePoint REST and SharePoint CSOM API's, you might also want to perform additional Microsoft Graph calls. A convenient way to do so is by using the Microsoft Graph SDK as explained in this article. Using the Microsoft Graph SDK when the PnP Core SDK was already configured In PnP Core SDK a PnPContext is used while in the Microsoft Graph SDK a GraphServiceClient is used. Below sample shows how create a GraphServiceClient for a given PnPContext. using (var pnpCoreContext = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Use PnP Core SDK (Microsoft Graph / SPO Rest) to load the web title var web = pnpCoreContext.Web.Get(p => p.Title); // Create a Graph Service client and perform a Graph call using the Microsoft Graph .NET SDK var graphServiceClient = new GraphServiceClient(new DelegateAuthenticationProvider((requestMessage) => { return pnpCoreContext.AuthenticationProvider.AuthenticateRequestAsync(new Uri(\"https://graph.microsoft.com\"), requestMessage); })); var me = await graphServiceClient.Me.Request().GetAsync(); } Using the PnP Core SDK when the Microsoft Graph SDK was already configured When you configure the Microsoft Graph SDK using MSAL you typically have code that gets an access token. This access token is then used via the DelegateAuthenticationProvider Microsoft Graph authentication provider, but the same approach can be taken using the PnP Core SDK ExternalAuthenticationProvider . Below console application shows Microsoft Graph and PnP Core SDK sharing the same code to get access tokens: using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Microsoft.Graph; using Microsoft.Identity.Client; using PnP.Core.Auth; using PnP.Core.Services; using System; using System.Collections.Generic; using System.Linq; using System.Net.Http.Headers; using System.Threading.Tasks; namespace HelloGraph { class Program { private static readonly string[] scopes = new string[] { \"user.read\", \"sites.fullcontrol.all\" }; private const string clientId = \"<Azure AD application id>\"; private const string tenant = \"organizations\"; // Alternatively tenant name, e.g. contoso.onmicrosoft.com\" private const string authority = \"https://login.microsoftonline.com/\" + tenant; private static IPublicClientApplication publicClientApp; private static string msGraphURL = \"https://graph.microsoft.com/v1.0/\"; private static AuthenticationResult authResult; public static async Task Main(string[] args) { var host = Host.CreateDefaultBuilder() // Configure PnP services .ConfigureServices((hostingContext, services) => { services.AddPnPCore(); }) // Let the builder know we're running in a console .UseConsoleLifetime() // Add services to the container .Build(); // Build the host await host.StartAsync(); // Sign-in user using MSAL and obtain an access token for MS Graph GraphServiceClient graphClient = new GraphServiceClient( msGraphURL, new DelegateAuthenticationProvider(async (requestMessage) => { requestMessage.Headers.Authorization = new AuthenticationHeaderValue(\"bearer\", await SignInUserAndGetTokenUsingMSAL(scopes)); })); // Call the /me endpoint of Graph User graphUser = await graphClient.Me.Request().GetAsync(); Console.WriteLine($\"User UPN: {graphUser.UserPrincipalName}\"); // Create a PnP Core SDK context var pnpContextFactory = host.Services.GetRequiredService<IPnPContextFactory>(); using (var pnpContext = await pnpContextFactory.CreateAsync( new Uri(\"https://contoso.sharepoint.com/sites/teamB\"), new ExternalAuthenticationProvider((resourceUri, scopes) => { return SignInUserAndGetTokenUsingMSAL(scopes).GetAwaiter().GetResult(); })) ) { var web = await pnpContext.Web.GetAsync(p => p.Title); Console.WriteLine($\"Web title: {web.Title}\"); } host.Dispose(); } private static async Task<string> SignInUserAndGetTokenUsingMSAL(string[] scopes) { if (publicClientApp == null) { // Initialize the MSAL library by building a public client application publicClientApp = PublicClientApplicationBuilder.Create(clientId) .WithAuthority(authority) .WithRedirectUri(\"http://localhost\") .Build(); } // It's good practice to not do work on the UI thread, so use ConfigureAwait(false) whenever possible. IEnumerable<IAccount> accounts = await publicClientApp.GetAccountsAsync().ConfigureAwait(false); try { authResult = await publicClientApp.AcquireTokenSilent(scopes, accounts.FirstOrDefault()) .ExecuteAsync(); } catch (MsalUiRequiredException) { // A MsalUiRequiredException happened on AcquireTokenSilentAsync. // This indicates you need to call AcquireTokenAsync to acquire a token authResult = await publicClientApp.AcquireTokenInteractive(scopes) .ExecuteAsync() .ConfigureAwait(false); } return authResult.AccessToken; } } }"
  },
  "using-the-sdk/basics-iqueryable.html": {
    "href": "using-the-sdk/basics-iqueryable.html",
    "title": "IQueryable performance considerations | PnP Core SDK",
    "keywords": "IQueryable performance considerations In the Requesting model collections section you saw quite a lot of different examples of how to query collections. Almost all collections inside PnP Core SDK implement an IQueryable interface. Thanks to this you can use LINQ expressions to dynamically filter or asynchronously load collection elements on demand. All your LINQ expressions will be accurately translated to the REST OData query operations (like $filter , $select , $expand , etc). Having below code: var lists = await context.Web.Lists .Where(l => l.Hidden == false && l.TemplateType == ListTemplateType.DocumentLibrary) .QueryProperties(p => p.Title, p => p.TemplateType, p => p.ContentTypes.QueryProperties(p => p.Name)).ToListAsync(); upon execution will be translated to the below REST OData query: _api/web/lists?$select=Id,Title,BaseTemplate,ContentTypes/Name,ContentTypes/StringId&$expand=ContentTypes&$filter=(BaseTemplate+eq+101) It's a very powerful feature, however let's take a closer look at this technique to avoid some common performance issues. Important The most important rule of IQueryable is that an IQueryable doesn't fire a request when it's declared, but only when it's enumerated over (inside foreach cycle or when calling ToList() / ToListAsync() ). Loading collections into the PnPContext Let's have a sample query to get a web's lists: ❌ not efficient: // All lists loaded into the context await context.Web.LoadAsync(p => p.Lists); foreach (var list in context.Web.Lists) { // do something with the list here } What's wrong with this code? It works just fine, however it sends two identical HTTP requests to the SharePoint server to get lists (one in LoadAsync(p => p.Lists) and the second one in the foreach cycle). Why does it happen? Because Lists property implements IQueryable , inside foreach cycle you effectively enumerate the IQueryable , as a result, it sends an HTTP request to get data. How to fix the code? Use AsRequested() : ✅ better: // All lists loaded into the context await context.Web.LoadAsync(p => p.Lists); foreach (var list in context.Web.Lists.AsRequested()) { // do something with the list here } As mentioned earlier, AsRequested() method returns an already loaded collection of items, you should use this method to avoid multiple unnecessary HTTP requests. In this case, we enumerate a collection loaded in memory before. Alternatively, you can also use just one cycle without LoadAsync(p => p.Lists) : ✅ better: await foreach (var list in context.Web.Lists) { // do something with list here } In this case, list collection will be requested at the beginning of the foreach cycle. Do remember though, that if you iterate over collection again somewhere in your code path, an additional request will be sent. Load related properties The below code has a similar problem with the query efficiency: ❌ not efficient: var list = await context.Web.Lists.GetByTitleAsync(\"Documents\", l => l.Fields); var fields = await list.Fields.Where(l => l.InternalName.StartsWith(\"tax\")).ToListAsync(); The first line loads a list by title and also loads related property - all list fields. On the second line we again send HTTP request to further filter fields. But what we need instead is to filter already loaded fields: var fields = list.Fields.AsRequested().Where(l => l.InternalName.StartsWith(\"tax\")).ToList(); To make it even more efficient, you should change it like this: ✅ better: var list = await context.Web.Lists.GetByTitleAsync(\"Documents\"); var fields = await list.Fields.Where(l => l.InternalName.StartsWith(\"tax\")).ToListAsync(); It doesn't make sense to load all related fields with the list request. Thus we simply send a separate request with a filter (will be translated to the $filter=startswith OData query) to get desired fields. Cycles and/or method calls Could you guess what's the problem with the below code: ❌ not efficient: var filteredList = context.Web.Lists.Where(l => l.TemplateType == ListTemplateType.DocumentLibrary); for (int i = 0; i < 10; i++) { DoSmth(filteredList); } private bool DoSmth(IEnumerable<IList> lists) { foreach (var list in lists) { // do smth with list } } It also works just fine, however has an issue, that the above code sends 10 HTTP requests to get lists data. The filteredList is an instance of IQueryable<IList> , that's why it doesn't execute the request immediately, but only inside the foreach cycle in the Check function. Every time we visit the function, we send an HTTP request to get lists. How to fix it? Change the filter query so that it executes immediately using ToList() or ToListAsync() methods: ✅ better: var filteredList = await context.Web.Lists.Where(l => l.TemplateType == ListTemplateType.DocumentLibrary).ToListAsync(); The code above executes the request instantly and loads all items into the memory, thus we don't have the issue with multiple HTTP queries. The type of filteredList will be IList , not IQueryable ."
  },
  "using-the-sdk/basics-pnpframework.html": {
    "href": "using-the-sdk/basics-pnpframework.html",
    "title": "Interop with PnP Framework | PnP Core SDK",
    "keywords": "Interop with PnP Framework The PnP Core SDK is always used when PnP Framework is used as it's a dependency of PnP Framework, e.g. the Pages API implementation of PnP Core SDK is used in PnP Framework. When you're code is using PnP Framework you might also want to use additional PnP Core SDK features, or vice versa when you're using PnP Core SDK you might want to use SharePoint CSOM. Both options are discussed in this article. Using PnP Core SDK when PnP Framework was already configured In PnP Core SDK a PnPContext is used while in PnP Framework a CSOM context is used. When you have a CSOM context you can create a PnPContext using the PnPCoreSDK.Instance.GetPnPContext() method. var authManager = new AuthenticationManager(\"<Azure AD client id>\", \"joe@contoso.onmicrosoft.com\", \"Pwd as SecureString\"); using (var csomContext = authManager.GetContext(\"https://contoso.sharepoint.com\")) { // Use CSOM to load the web title csomContext.Load(csomContext.Web, p => p.Title); csomContext.ExecuteQueryRetry(); using (PnPContext pnpCoreContext = PnPCoreSdk.Instance.GetPnPContext(csomContext)) { // Use PnP Core SDK (Microsoft Graph / SPO Rest) to load the web title var web = pnpCoreContext.Web.Get(p => p.Title); } } Using PnP Framework when the PnP Core SDK was already configured If you already have a PnP Core SDK context and you want also use PnP Framework and/or SharePoint CSOM then you can create a CSOM ClientContext from your PnP Context via the PnPCoreSDK.Instance.GetContext() method. using (var pnpCoreContext = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Use PnP Core SDK (Microsoft Graph / SPO Rest) to load the web title var web = pnpCoreContext.Web.Get(p => p.Title); using (ClientContext csomContext = PnPCoreSdk.Instance.GetClientContext(pnpCoreContext)) { // Use CSOM to load the web title csomContext.Load(csomContext.Web, p => p.Title); csomContext.ExecuteQueryRetry(); } }"
  },
  "using-the-sdk/basics-settings.html": {
    "href": "using-the-sdk/basics-settings.html",
    "title": "Configuring the PnP Core SDK via settings | PnP Core SDK",
    "keywords": "Configuring the PnP Core SDK via settings The PnP Core SDK uses a default configuration and as such you're not required to provide specific settings. However, if you want to change the settings, then providing the custom settings via a settings service (e.g. settings file) is the way to go. Sample settings file Below snippet shows the settings which are used by the PnP Core SDK, you can simply include this snippet in your application settings file next to your custom settings. { \"PnPCore\": { \"DisableTelemetry\": \"false\", \"Environment\": \"Production\", \"HttpRequests\": { \"UserAgent\": \"ISV|Contoso|ProductX\", \"Timeout\": \"100\", \"SharePointRest\": { \"UseRetryAfterHeader\": \"false\", \"MaxRetries\": \"10\", \"DelayInSeconds\": \"3\", \"UseIncrementalDelay\": \"true\", \"DefaultPageSize\": 100 }, \"MicrosoftGraph\": { \"UseRetryAfterHeader\": \"true\", \"MaxRetries\": \"10\", \"DelayInSeconds\": \"3\", \"UseIncrementalDelay\": \"true\" } }, \"PnPContext\": { \"GraphFirst\": \"true\", \"GraphCanUseBeta\": \"true\", \"GraphAlwaysUseBeta\": \"false\" }, \"Credentials\": { \"CredentialManagerAuthentication\": { \"CredentialManagerName\": \"mycreds\" } }, \"Sites\": { \"SiteToWorkWith\": { \"SiteUrl\": \"https://contoso.sharepoint.com/sites/pnp\", \"AuthenticationProviderName\": \"CredentialManagerAuthentication\" }, } }, // Not really library related, but since the library assumes logging is connected it's being shown here \"Logging\": { \"LogLevel\": { \"Default\": \"Debug\" } } } Settings overview Setting Default value Description Logging:LogLevel:Default Information Allows you to change log level. See the .Net Logging article for more details. Common levels are Debug and Information. PnPCore:PnPContext:GraphFirst true If for a given request the library can choose between a SharePoint REST or a Microsoft Graph call then it will favor the Microsoft Graph call. Settings this to false will prefer SharePoint REST for all SharePoint related API calls. PnPCore:PnPContext:GraphCanUseBeta true When you ask for data that can only be provided via the Microsoft Graph beta API the PnP Core SDK will use the beta endpoint for that specific request. All other requests will still use the v1.0 endpoint. If you set this to false, then any request that requires Microsoft Graph beta will not provide any result. PnPCore:PnPContext:GraphAlwaysUsesBeta false The library by default uses the production v1.0 Microsoft Graph API. Use this setting to default it to the beta Microsoft Graph API. PnPCore:HttpRequests:UserAgent NONISV|SharePointPnP |PnPCoreSDK Value set as user agent when the request is sent to Microsoft 365. PnPCore:HttpRequests:Timeout 100 Timeout in seconds for HTTP requests. Set higher if you need to for example download large files. Setting to -1 will result in an infinite timeout. PnPCore:HttpRequests:SharePointRest:UseRetryAfterHeader false Use retry-after http header when calculating the wait time in seconds for SharePoint Rest request retry. PnPCore:HttpRequests:SharePointRest:MaxRetries 10 Maximum number of retries before retrying a SharePoint Rest request throws an exception. PnPCore:HttpRequests:SharePointRest:DelayInSeconds 3 Delay in seconds between SharePoint Rest request retries. PnPCore:HttpRequests:SharePointRest:IncrementalDelay true Delays get incrementally longer with each retry. PnPCore:HttpRequests:SharePointRest:DefaultPageSize 100 Page size using when paging is automatically applied during data querying via the PnP Core SDK LINQ support. PnPCore:HttpRequests:MicrosoftGraph:UseRetryAfterHeader true Use retry-after http header when calculating the wait time in seconds for Microsoft Graph request retry. PnPCore:HttpRequests:MicrosoftGraph:MaxRetries 10 Maximum number of retries before retrying a Microsoft Graph request throws an exception. PnPCore:HttpRequests:MicrosoftGraph:DelayInSeconds 3 Delay in seconds between Microsoft Graph request retries. PnPCore:HttpRequests:MicrosoftGraph:IncrementalDelay true Delays get incrementally longer with each retry. PnPCore:Environment Production Use this setting if you are using a cloud environment different from the standard production cloud: possible values are Production , PreProduction , USGovernment (a.k.a GCC), USGovernmentHigh (a.k.a GCC High), USGovernmentDoD (a.k.a DoD), China and Germany . Important: use the correct casing when using these values. PnPCore:DisableTelemetry false Allows to turn off telemetry being sent. Telemetry is used to improve this open source library and it's recommended to keep it on, but you can disable it, if required. PnPCore:Credentials This section defines the settings for the Authentication Providers and it will be updated in the near future. PnPCore:Sites This section defines the site collections to consume using the PnP Core SDK. Every single item of the array has a name, which can then be used with the PnPContextFactory to retrieve an instance of PnPContext for that specific site, a SiteUrl and the AuthenticationProviderName that maps to the corresponding Authentication Provider to use for accessing the target site."
  },
  "using-the-sdk/basics-threading.html": {
    "href": "using-the-sdk/basics-threading.html",
    "title": "Multi-threading with PnP Core SDK | PnP Core SDK",
    "keywords": "Multi-threading with PnP Core SDK The key PnP Core SDK classes like PnPContext , the model classes (e.g. IWeb , ITeamChannel ,...) and model collection classes (e.g. IListCollection , ITeamChannelCollection ) are not thread-safe and therefore it's not recommended to build solutions that have multiple threads sharing these classes. Doing so may lead to unexpected results and exceptions. Important While threading is a very attractive option to speed up operations do keep in mind that your application might get throttled sooner as throttling protection kicks in whenever the amount of requests an application makes in a given time window exceeds a certain threshold. The threshold itself is a dynamic one that depends on many factors. See the Avoid getting throttled or blocked in SharePoint Online article for more details. What options do I have to parallelize operations? The main thing to do is to create a PnPContext per thread by either creating a new one (e.g. if you're running a thread per site/web) or by cloning the current one in case you're parallelizing work inside the same site/web. Below code samples show two implementations of running operations for a given IWeb in parallel: var urls = new[] { \"https://contoso.sharepoint.com/sites/siteA\", \"https://contoso.sharepoint.com/sites/siteB\" }; var parallelOps = new List<Task>(); foreach (var url in urls) { var contextForSite = await context.CloneAsync(new Uri(url)); parallelOps.Add(DoWork(contextForSite)); } await Task.WhenAll(parallelOps); private async Task DoWork(PnPContext context) { await foreach (var list in context.Web.Lists.Where(p => p.Hidden == false).AsAsyncEnumerable()) { // do something with the list context.Logger.LogInformation($\"Thread: {Thread.CurrentThread.ManagedThreadId}, list {list.Title}\"); } context.Dispose(); } Slightly more complicated sample to setup, but once configured using a parallel async operation becomes really simple. // AsyncParallelForEach extension method public static class ParallelExtensions { public static async Task AsyncParallelForEach<T>(this IAsyncEnumerable<T> source, Func<T, Task> body, int maxDegreeOfParallelism = DataflowBlockOptions.Unbounded, TaskScheduler scheduler = null) { var options = new ExecutionDataflowBlockOptions { MaxDegreeOfParallelism = maxDegreeOfParallelism }; if (scheduler != null) options.TaskScheduler = scheduler; var block = new ActionBlock<T>(body, options); await foreach (var item in source) block.Post(item); block.Complete(); await block.Completion; } } // Simple code to return test data as IAsyncEnumerable public static async IAsyncEnumerable<string> GetUrlsToProcess() { yield return \"https://contoso.sharepoint.com/sites/siteA\"; yield return \"https://contoso.sharepoint.com/sites/siteB\"; await Task.CompletedTask; } private async Task DoWorkAsync(PnPContext context) { await foreach (var list in context.Web.Lists.Where(p => p.Hidden == false).AsAsyncEnumerable()) { // do something with the list context.Logger.LogInformation($\"Thread: {Thread.CurrentThread.ManagedThreadId}, list {list.Title}\"); } context.Dispose(); } // Perform async parallel foreach await GetUrlsToProcess().AsyncParallelForEach(async url => { var contextForSite = await context.CloneAsync(new Uri(url)); await DoWorkAsync(contextForSite); });"
  },
  "using-the-sdk/branding-intro.html": {
    "href": "using-the-sdk/branding-intro.html",
    "title": "Updating your site's branding | PnP Core SDK",
    "keywords": "Updating your site's branding Each modern SharePoint site has a branding defined that consists out of a theme and site header configuration options. Depending on the type of site there are also additional footer and navigation branding options. The site header, navigation and footer branding is also called the site's chrome. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with pages } The branding features shown in this article can be used via the GetBrandingManager() method on your PnPContext instance. List the available themes SharePoint Online sites do offer a set of out of the box themes (like Teal, Blue,...) but also custom themes can be used if available. Typically custom themes are added by an administrator and can be used to provide a company specific branding across many sites. When loading the available themes via one of the GetAvailableThemes methods both the out of the box themes as the custom themes are returned, for custom themes the IsCustomTheme property is set to true . var themes = await context.Web.GetBrandingManager().GetAvailableThemesAsync(); foreach(var theme in themes) { if (theme.IsCustomTheme) { // this is a custom theme } } Set a theme to a site You can set a theme to a site using the SetTheme methods, when you want to apply an out of the box theme you can simply provide the needed theme via the SharePointTheme enum, when you want to set a custom theme you'll first need to load the theme using one of the GetAvailableThemes methods and then pass the ITheme instance for the theme you want to set: // Set an out of the box theme await context.Web.GetBrandingManager().SetThemeAsync(SharePointTheme.Teal); // Set a custom theme var themes = await context.Web.GetBrandingManager().GetAvailableThemesAsync(); var customTheme = themes.FirstOrDefault(p => p.IsCustomTheme); if (customTheme != null) { await context.Web.GetBrandingManager().SetThemeAsync(customTheme); } Get the site's chrome options Each site has a site chrome consisting out of site header, navigation and footer branding options . The latter two are only available for sites that have communication site features enabled, the header options are available for any type of site. To list the current site chrome options you can use one of the GetChromeOptions methods. var chrome = await context.Web.GetBrandingManager().GetChromeOptionsAsync(); // for sites with communication site features enabled the returned chrome options // will contain header, navigation and footer objects. Other sites will only have // the header object loaded. Set the site's chrome options To set the chrome options for a site you first need to load the existing chrome options using one of the GetChromeOptions methods, update the resulting IChromeOptions instance and finally use one of the SetChromeOptions to persist the new chrome options. var chrome = await context.Web.GetBrandingManager().GetChromeOptions(); // Update chrome options for a site without communication site features chrome.Header.Emphasis = VariantThemeType.Strong; chrome.Header.HideTitle = true; chrome.Header.Layout = HeaderLayoutType.Extended; chrome.Header.LogoAlignment = LogoAlignment.Middle; await context.Web.GetBrandingManager().SetChromeOptionsAsync(chrome); // Update chrome options for a site with communication site features chrome.Header.Emphasis = VariantThemeType.Strong; chrome.Header.HideTitle = true; chrome.Header.Layout = HeaderLayoutType.Extended; chrome.Header.LogoAlignment = LogoAlignment.Middle; chrome.Navigation.MegaMenuEnabled = true; chrome.Navigation.Visible = false; chrome.Footer.Enabled = true; chrome.Footer.Emphasis = FooterVariantThemeType.None; chrome.Footer.Layout = FooterLayoutType.Extended; await context.Web.GetBrandingManager().SetChromeOptionsAsync(chrome);"
  },
  "using-the-sdk/changes-sharepoint.html": {
    "href": "using-the-sdk/changes-sharepoint.html",
    "title": "Enumerating changes that happened in SharePoint | PnP Core SDK",
    "keywords": "Enumerating changes that happened in SharePoint SharePoint Online does track many of the changes made to sites, lists, list items, folders and more. Using the GetChanges methods you can enumerate these changes and use them in your application: a common scenario is using a web hook on a library that notifies your code a change has happened and then your code uses a GetChanges call to figure out the exact change details. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with files } Scoping the change query To get changes you issue a query via one of the GetChanges methods and to configure the change query you have to pass in a ChangeQueryOptions instance. Via the ChangeQueryOptions you specify for which SharePoint objects (e.g. Item, List,...) you need changes and which change types (e.g. Add, Update, ...) you're interested in. The possible SharePoint objects are: Item List Web Site File Folder Alert User Group ContentType Field SecurityPolicy View And the possible change types are: Add Update DeleteObject Rename Move Restore RoleDefinitionAdd RoleDefinitionDelete RoleDefinitionUpdate RoleAssignmentAdd RoleAssignmentDelete GroupMembershipAdd GroupMembershipDelete SystemUpdate Navigation Performing a change query A change query is performed via one of the GetChanges methods, passing in a configured ChangeQueryOptions instance. The GetChanges methods are available on these SharePoint model classes: ISite IWeb IList IListItem IFolder The model on which you call GetChanges scopes the result: calling GetChanges on an IList will only return changes for that particular list. Below sample gets all types of changes for all SharePoint objects scoped to a web. // Get all type of changes for all SharePoint objects var changes = context.Web.GetChanges(new ChangeQueryOptions(true, true)); Below sample shows how to get all ContentType and Field adds, updates and deletes for a site collection: // Get adds, updates and deletes for contenttypes and fields var changes = context.Site.GetChanges(new ChangeQueryOptions() { ContentType = true, Field = true, Add = true, Update = true, DeleteObject = true } ); In this example the last 50 changes, regardless of change type, for items in a list are returned: // Get all type of changes for a SharePoint list limited to the 50 most recent changes var list = await context.Web.Lists.GetByTitleAsync(\"Documents\"); var changes = await context.Site.GetChangesAsync(new ChangeQueryOptions(false, true) { List = true, FetchLimit = 50 } ); When getting changes you often want to just get the changes since you previously asked for changes and this can be done by using change tokens. Each change you get contains a change token and when making a next change query you can get all changes starting from a given change token: // Get all type of changes for all SharePoint objects var changes = context.Web.GetChanges(new ChangeQueryOptions(true, true)); // Store the change token received with the last change var lastChangetoken = changes.Last().ChangeToken; // Get all changes that happened after the last change var changes2 = await context.Web.GetChangesAsync(new ChangeQueryOptions(true, true) { ChangeTokenStart = firstChangeToken }); The lastChangeToken in previous example is of type IChangeToken , if you've stored the actual change token (e.g.\"1;2;8c8e101c-1b0d-4253-85e7-c30039bf46e2;637577313637500000;563287977\") you can construct an IChangeToken for it as follows: var lastChangetoken = new ChangeTokenOptions(\"1;2;8c8e101c-1b0d-4253-85e7-c30039bf46e2;637577313637500000;563287977\"); Processing the returned changes The returned collection of changes all inherit of the same base model IChange , but depending on the changed object you get different model. Changes on a web result in a IChangeWeb instance, changes on a list in a IChangeList instance and so on. When iterating over the changes you can check for the type and cast it as shown in below example. When a change is returned not all properties of the returned object are always populated, use the IsPropertyAvailable method to verify a property is populated before using it (in case the property is not always populated). // Get adds, updates and deletes for contenttypes and fields var changes = context.Site.GetChanges(new ChangeQueryOptions() { ContentType = true, Field = true, Add = true, Update = true, DeleteObject = true } ); foreach (var change in changes) { if (change is IChangeItem changeItem) { DateTime changeTime = changeItem.Time; if (changeItem.IsPropertyAvailable<IChangeItem>(p => p.ListId)) { // do something with the returned list id } if (changeItem.ChangeType == ChangeType.Add) { // do something \"add\" specific } } else if (change is IChangeField changeField) { // process the change } }"
  },
  "using-the-sdk/configuring authentication.html": {
    "href": "using-the-sdk/configuring authentication.html",
    "title": "Configuring authentication | PnP Core SDK",
    "keywords": "Configuring authentication The PnP Core SDK works with both SharePoint REST as Microsoft Graph in a transparent way, this also means that the authentication model used must work for both. The chosen authentication model is Azure Active Directory (a.k.a. Azure AD), using Azure Active Directory you can define an application and grant it permissions to access Microsoft 365 workloads like SharePoint, Teams,... Configuring your own application is the recommended approach , but you can also use a multi-tenant application that the PnP team created. Both options are detailed in the next chapters I want to configure my own Azure AD application (recommended) Delegated Permissions (acting in the name of the user) In this section you can learn how to register an application in Azure Active Directory and how to use it in your .NET code, in order to use the PnP Core SDK with interactive login in a Console application, running your requests in the name of the authenticated user. Configuring the application in Azure AD In this step by step guide you will register an application in Azure Active Directory, in order to consume the PnP Core SDK in the name of the user connected to your app (i.e. with a delegated access token) from within a .NET Core Console application. Follow below steps to configure an application in Azure AD: Navigate to https://aad.portal.azure.com/ Click on Azure Active Directory from the left navigation Click on App registrations in the Manage left navigation group Click on New registration Give the application a name (e.g. PnP Core SDK) and click on Register Copy the Application ID (Client ID) from the Overview page, you'll need this GUID value later on Copy the Directory ID (Tenant ID) from the Overview page, you'll need this GUID value later on Click on the API Permissions in the Manage left navigation group Click on Add Permissions and add the permissions you want to give to this application. Below list is a recommendation, you can grant less permissions but that might result in some PnP Core SDK calls to fail due getting access denied errors. SharePoint -> Delegated Permissions -> AllSites -> AllSites.FullControl SharePoint -> Delegated Permissions -> Sites -> Sites.Search.All SharePoint -> Delegated Permissions -> TermStore -> TermStore.ReadWrite.All SharePoint -> Delegated Permissions -> User -> User.ReadWrite.All Microsoft Graph -> Delegated Permissions -> User -> User.Read Microsoft Graph -> Delegated Permissions -> Directory -> Directory.ReadWrite.All Microsoft Graph -> Delegated Permissions -> Directory -> Directory.AccessAsUser.All Microsoft Graph -> Delegated Permissions -> Group -> Group.ReadWrite.All Click on the Grant admin consent for button to consent to these permissions for the users in your organization Click on Authentication in the Manage left navigation group Change Default client type to Treat application as public client and hit Save (this step is optional and you should do that if and only if you are planning to use the UsernamePasswordAuthenticationProvider or the CredentialManagerAuthenticationProvider for authentication) If you want to configure support for interactive login you should also configure the Platform and the redirect URI in the Authentication panel. You can read further details here . Click on Authentication and then click on Add a platform , choose Mobile and desktop applications and provide http://localhost as the Redirect URI Configuring PnP Core SDK to use the configured application When you're configuring your application to use the PnP Core SDK you will have to configure the PnP.Core services and the PnP.Core.Auth services using the AddPnPCore and AddPnPCoreAuthentication methods, respectively. The ClientId and TenantId are those of the application that you just registered in Azure Active Directory. The value for the CredentialManagerName property is the name of the item stored in the Windows Credential Manager. // Add the PnP Core SDK library services.AddPnPCore(options => { options.PnPContext.GraphFirst = true; options.HttpRequests.UserAgent = \"ISV|Contoso|ProductX\"; options.Sites.Add(\"SiteToWorkWith\", new PnPCoreSiteOptions { SiteUrl = \"https://contoso.sharepoint.com/sites/pnp\" }); }); services.AddPnPCoreAuthentication( options => { // Configure an Authentication Provider relying on Windows Credential Manager options.Credentials.Configurations.Add(\"interactive\", new PnPCoreAuthenticationCredentialConfigurationOptions { ClientId = \"{your_client_id}\", TenantId = \"{your_tenant_id}\", Interactive = new PnPCoreAuthenticationInteractiveOptions { RedirectUri = new Uri(\"http://localhost\") } }); // Configure the default authentication provider options.Credentials.DefaultConfiguration = \"interactive\"; // Map the site defined in AddPnPCore with the // Authentication Provider configured in this action options.Sites.Add(\"SiteToWorkWith\", new PnPCoreAuthenticationSiteOptions { AuthenticationProviderName = \"interactive\" }); }); Application Permissions (acting as an app account with app-only permissions) In this section you can learn how to register an application in Azure Active Directory and how to use it in your .NET code, in order to use the PnP Core SDK within a background job/service/function, running your requests with an app account. Configuring the application in Azure AD The easiest way to register an application in Azure Active Directory for app-only is to use the PnP PowerShell cmdlets. Specifically you can use the Register-PnPAzureADApp command with the following syntax: $app = Register-PnPAzureADApp -ApplicationName \"PnP.Core.SDK.Consumer\" -Tenant contoso.onmicrosoft.com -OutPath c:\\temp -CertificatePassword (ConvertTo-SecureString -String \"password\" -AsPlainText -Force) -Scopes \"MSGraph.Group.ReadWrite.All\",\"MSGraph.User.ReadWrite.All\",\"SPO.Sites.FullControl.All\",\"SPO.TermStore.ReadWrite.All\",\"SPO.User.ReadWrite.All\" -Store CurrentUser With SharePoint PnP PowerShell Online cmdlets version 3.29.2101.0 and higher. $app = Register-PnPAzureADApp -Interactive -ApplicationName \"PnP.Core.SDK.Consumer\" -Tenant contoso.onmicrosoft.com -OutPath d:\\temp -CertificatePassword (ConvertTo-SecureString -String \"password\" -AsPlainText -Force) -GraphApplicationPermissions \"Group.ReadWrite.All, User.ReadWrite.All\" -SharePointApplicationPermissions \"Sites.FullControl.All, TermStore.ReadWrite.All, User.ReadWrite.All\" -Store CurrentUser The above command will register for you in Azure Active Directory an app with name PnP.Core.SDK.Consumer , with a self-signed certificate that will be also saved on your filesystem under the c:\\temp folder (remember to create the folder or to provide the path of an already existing folder), with a certificate password value of password (you should provide your own strong password, indeed). Remember to replace contoso.onmicrosoft.com with your Azure AD tenant name, which typically is company.onmicrosoft.com . The permissions granted to the app will be: SharePoint -> Application Permissions -> Sites -> Sites.FullControl.All SharePoint -> Application Permissions -> TermStore -> TermStore.ReadWrite.All SharePoint -> Application Permissions -> User -> User.ReadWrite.All Microsoft Graph -> Application Permissions -> User -> User.ReadWrite.All Microsoft Graph -> Application Permissions -> Group -> Group.ReadWrite.All Executing the command you will first have to authenticate against the target tenant, providing the credentials of a Global Tenant Admin. Then you will see a message like the following one: Waiting 60 seconds to launch consent flow in a browser window. This wait is required to make sure that Azure AD is able to initialize all required artifacts......... Almost 60 seconds later, the command will prompt you for authentication again and to grant the selected permissions to the app you are registering. Once you have done that, in the $app variable you will find information about the just registered app. You can copy in your clipboard the Application ID (Client ID) executing the following command: $app.'AzureAppId/ClientId'| clip And you can copy in your clipboard the thumbprint of the generated X.509 certificate executing the following command: $app.'Certificate Thumbprint' | clip Paste this copied values in a safe place, because you will need them soon. In the c:\\temp folder (or whatever else folder you will choose) there will also be a file named PnP.Core.SDK.Consumer.pfx , which includes the private key of the self-signed certificate generated for you, as well as a file named PnP.Core.SDK.Consumer.cer , which includes the public key of the self-signed certificate generated for you. Note If you can't use PowerShell to generate a self-signed certificate then checkout Generate self-signed certificates with the .NET CLI . It for example shows how to use OpenSSL on Linux to create a self-signed certificate. Configuring PnP Core SDK to use the configured application When you're configuring your application to use the PnP Core SDK you will have to configure the PnP.Core services and the PnP.Core.Auth services using the AddPnPCore and AddPnPCoreAuthentication methods, respectively. The ClientId and TenantId are those of the application that you just registered in Azure Active Directory.. // Add the PnP Core SDK library services.AddPnPCore(options => { options.PnPContext.GraphFirst = true; options.HttpRequests.UserAgent = \"ISV|Contoso|ProductX\"; options.Sites.Add(\"SiteToWorkWith\", new PnPCoreSiteOptions { SiteUrl = \"https://contoso.sharepoint.com/sites/pnp\" }); }); services.AddPnPCoreAuthentication( options => { // Configure an Authentication Provider relying on Windows Credential Manager options.Credentials.Configurations.Add(\"x509certificate\", new PnPCoreAuthenticationCredentialConfigurationOptions { ClientId = \"{your_client_id}\", TenantId = \"{your_tenant_id}\", X509Certificate = new PnPCoreAuthenticationX509CertificateOptions { StoreName = StoreName.My, StoreLocation = StoreLocation.CurrentUser, Thumbprint = \"{certificate_thumbprint}\" } }); // Configure the default authentication provider options.Credentials.DefaultConfiguration = \"x509certificate\"; // Map the site defined in AddPnPCore with the // Authentication Provider configured in this action options.Sites.Add(\"SiteToWorkWith\", new PnPCoreAuthenticationSiteOptions { AuthenticationProviderName = \"x509certificate\" }); }); Note If you're using PnP Core SDK on Linux you can use https://github.com/gsoft-inc/dotnet-certificate-tool as tool to import your certificate. Using the multi-tenant PnP Azure AD application Azure AD has the concept of multi-tenant applications allowing you to re-use an application created in another Azure AD tenant. The PnP team did setup a general purpose Azure AD application (named \"PnP Office 365 Management Shell\") configured with the needed permissions, and you can reuse this application. It means that you don't need to create your own Azure AD application, instead you simply need to consent permissions to the already created multi-tenant application. Step 1: Consent to the PnP Office 365 Management Shell application To consent permissions to the PnP multi-tenant application first update below content URL: replace contoso.onmicrosoft.com with your Azure AD tenant name, which typically is company.onmicrosoft.com. https://login.microsoftonline.com/contoso.onmicrosoft.com/adminconsent?client_id=31359c7f-bd7e-475c-86db-fdb8c937548e&state=12345&redirect_uri=https://aka.ms/sppnp Login to your Microsoft 365 tenant (e.g. by browsing to SharePoint Online), open a new browser tab and paste the URL you've just created. Azure AD will eventually ask you to login, and then it will prompt you to consent permissions to the app: Click on Accept to accept the requested permissions. At that point you will be redirected to the PnP Site ( https://aka.ms/sppnp ). You've now successfully registered the PnP multi-tenant application in your Azure AD environment and you can use it with the PnP Core SDK. The PnP Core SDK defaults to this application, so if you're not specifying any Azure AD application details when setting up authentication for the application, then the PnP Core SDK automatically uses the PnP application (application id 31359c7f-bd7e-475c-86db-fdb8c937548e). Note If you get errors during this consent process it's most likely because you are not an Azure AD tenant administrator. Please contact your admins and check with them for further steps. Step 2: Configure your project authentication settings If you're using the PnP Management Shell Azure AD application then you can leave out the application id and tenant id from your authentication setup. Below samples show how to use the InteractiveAuthenticationProvider in combination with the PnP Management Shell Azure AD application. Using code you can configure authentication like this: var host = Host.CreateDefaultBuilder() // Configure logging .ConfigureLogging((hostingContext, logging) => { logging.AddEventSourceLogger(); logging.AddConsole(); }) .ConfigureServices((hostingContext, services) => { // Add the PnP Core SDK library services services.AddPnPCore(); // Add the PnP Core SDK library services configuration from the appsettings.json file services.Configure<PnPCoreOptions>(hostingContext.Configuration.GetSection(\"PnPCore\")); // Add the PnP Core SDK Authentication Providers services.AddPnPCoreAuthentication(options => { options.Credentials.Configurations.Add(\"Default\", new PnPCoreAuthenticationCredentialConfigurationOptions { Interactive = new PnPCoreAuthenticationInteractiveOptions { }, }); options.Credentials.DefaultConfiguration = \"Default\"; }); }) // Let the builder know we're running in a console .UseConsoleLifetime() // Add services to the container .Build(); This snippet show the JSON authentication section to use: \"Credentials\": { \"DefaultConfiguration\": \"myAuthConfig\", \"Configurations\": { \"myAuthConfig\": { \"Interactive\": { \"RedirectUri\": \"http://localhost\" } } } } Using the credential manager Another supported option to authenticate to a created Azure AD application, configured for delegated permissions, is via username and password, through the UsernamePasswordAuthenticationProvider . To configure this in a secure way it's recommended to setup a credential manager entry and to use the CredentialManagerAuthenticationProvider . Below steps walk you through the setup on Windows, but a similar credential manager concepts exists on other platforms as well. Click on the Windows Start button in the taskbar and type credential manager . Click on the Credential Manager link. Go to Windows Credentials and click on Add a generic credential . Give the credential a name (e.g. Contoso), a user name (e.g. joe@contoso.onmicrosoft.com) and a password. Hit OK to save. Use the credential manager name (Contoso in this example) in the settings of the CredentialManagerAuthenticationProvider provider."
  },
  "using-the-sdk/contenttypes-intro.html": {
    "href": "using-the-sdk/contenttypes-intro.html",
    "title": "Working with content types | PnP Core SDK",
    "keywords": "Working with content types Each SharePoint site uses content types , a site comes pre-populated with a set of content types and a set of lists and libraries that use these content types. You can also create your own content types, either being a site content type or list content type. A site content type can be reused across multiple lists in the site collection and this is the preferred model. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with content types } Getting content types To get the existing content types you need to load the site's ContentTypes collection or the list's content type collection . // Get site content types, also load the content types field links in one go await context.Web.LoadAsync(p => p.ContentTypes.QueryProperties(p => p.Name, p => p.Description, p => p.FieldLinks.QueryProperties(p => p.Name))); var contentTypes = context.Web.ContentTypes; // Get list content types var contentTypes = (await context.Web.Lists.GetByTitleAsync(\"Documents\", p => p.ContentTypes)).ContentTypes; foreach (var contentType in contentTypes.AsRequested()) { // do something } Adding content types Adding a content type is done by using one of the Add methods on the site's ContentTypes collection or the list's content type collection . When adding a content type you need to specify a content type id as explained in the Content Type IDs documentation . Note Before you can add content types to a list the list needs to be enabled for content types by setting the ContentTypesEnabled property to true. // Add a site content type var contentType = await context.Web.ContentTypes.AddAsync(\"0x0100302EF0D1F1DB4C4EBF58251BCCF5968F\", \"MyContentType\"); // Add a list content type, start with getting a reference to the list var list = await context.Web.Lists.GetByTitleAsync(\"Documents\", p => p.ContentTypes); // Ensure content type are enabled for the list list.ContentTypesEnabled = true; await list.UpdateAsync(); // Add the content type await list.ContentTypes.AddAsync(\"0x0100302EF0D1F1DB4C4EBF58251BCCF5968F\", \"MyContentType\"); Adding site fields to a site content type Once the content type is added you typically also want to add fields to it, this is done by adding the needed field links in the content type's IFieldLinkCollection via the AddAsync methods. // Get site content types, also load the content types field links in one go await context.Web.LoadAsync(p => p.Fields, p => p.ContentTypes.QueryProperties(p => p.Name, p => p.Description, p => p.FieldLinks.QueryProperties(p => p.Name))); // Get the content type to update var contentType = context.Web.ContentTypes.AsRequested().FirstOrDefault(p => p.Name == \"MyContentType\"); // Get the field to add to the content type var field = context.Web.Fields.AsRequested().First(p => p.InternalName == \"myField\"); // Add existing field with internal name \"MyField\" to the content type's field link collection as a required field await contentType.FieldLinks.AddAsync(field, required: true); Adding fields to a list content type Once a content type has been added to a list you can also add list fields to that content type, the flow is similar to adding site fields but this time the list field collection is queried. // Add a list content type, start with getting a reference to the list var list = await context.Web.Lists.GetByTitleAsync(\"Documents\", p => p.ContentTypes, p => p.Fields); // Get the content type to update var contentType = list.ContentTypes.AsRequested().FirstOrDefault(p => p.Name == \"MyContentType\"); // Get the field to add to the content type var field = list.Fields.AsRequested().First(p => p.InternalName == \"myField\"); // Add existing field with internal name \"MyField\" to the content type's field link collection as a required field await contentType.FieldLinks.AddAsync(field, required: true); Updating content types Updating a content type comes down to getting a reference to the content type to update, update the needed properties and call the UpdateAsync method. await context.Web.LoadAsync(p => p.ContentTypes.QueryProperties(p => p.Name, p => p.Description, p => p.FieldLinks.QueryProperties(p => p.Name))); var contentTypes = context.Web.ContentTypes; // Get the content type to update var contentType = contentTypes.AsRequested().FirstOrDefault(p => p.Name == \"MyContentType\"); // Update the content type contentType.Description = \"PnP Rocks!\"; await contentType.UpdateAsync(); // Adding a new field to the existing content type, mark it as required await contentType.FieldLinks.AddAsync(\"MyRequiredField\", required: true); Updating site content type field To update the settings of a field added to a content type one can update its field link: // Get site content types, also load the content types field links in one go await context.Web.LoadAsync(p => p.ContentTypes.QueryProperties(p => p.Name, p => p.Description, p => p.FieldLinks.QueryProperties(p => p.Name, p => p.ReadOnly))); // Get the content type to update var contentType = context.Web.ContentTypes.AsRequested().FirstOrDefault(p => p.Name == \"MyContentType\"); // Get the content type field link to update var fieldLink = await contentType.FieldLinks.AsRequested().First(p => p.Name == \"myField\"); // Set the field in the content type to be readonly fieldLink.ReadOnly = true; await fieldLink.UpdateAsync(); Updating a list content type field To update the settings of a field added to a content type one can update its field link: // Add a list content type, start with getting a reference to the list var list = await context.Web.Lists.GetByTitleAsync(\"Documents\", p => p.ContentTypes.QueryProperties( p => p.Name, p => p.Description, p => p.FieldLinks.QueryProperties(p => p.Name, p => p.ReadOnly)), p => p.Fields); // Get the content type to update var contentType = list.ContentTypes.AsRequested().FirstOrDefault(p => p.Name == \"MyContentType\"); // Get the content type field link to update var fieldLink = await contentType.FieldLinks.AsRequested().First(p => p.Name == \"myField\"); // Set the field in the content type to be readonly fieldLink.ReadOnly = true; await fieldLink.UpdateAsync(); Deleting content types To delete a content type you need to get a reference to the content type to delete followed by calling one of the Delete methods. await context.Web.LoadAsync(p => p.ContentTypes.QueryProperties(p => p.Name, p => p.Description, p => p.FieldLinks.QueryProperties(p => p.Name))); var contentTypes = context.Web.ContentTypes; // Get the content type to update var contentType = contentTypes.AsRequested().FirstOrDefault(p => p.Name == \"MyContentType\"); // Delete the content type await contentType.DeleteAsync(); Removing a site content type field To remove a field added to a content type one can remove its field link: // Get site content types, also load the content types field links in one go await context.Web.LoadAsync(p => p.ContentTypes.QueryProperties(p => p.Name, p => p.Description, p => p.FieldLinks.QueryProperties(p => p.Name, p => p.ReadOnly))); // Get the content type to update var contentType = context.Web.ContentTypes.AsRequested().FirstOrDefault(p => p.Name == \"MyContentType\"); // Get the content type field link to remove var fieldLink = await contentType.FieldLinks.AsRequested().First(p => p.Name == \"myField\"); // Delete the field from the content type await fieldLink.DeleteAsync(); Removing a list content type field To remove a field added to a content type one can remove its field link: // Add a list content type, start with getting a reference to the list var list = await context.Web.Lists.GetByTitleAsync(\"Documents\", p => p.ContentTypes.QueryProperties( p => p.Name, p => p.Description, p => p.FieldLinks.QueryProperties(p => p.Name, p => p.ReadOnly)), p => p.Fields); // Get the content type to update var contentType = list.ContentTypes.AsRequested().FirstOrDefault(p => p.Name == \"MyContentType\"); // Get the content type field link to delete var fieldLink = await contentType.FieldLinks.AsRequested().First(p => p.Name == \"myField\"); // Delete the field from the content type await fieldLink.DeleteAsync();"
  },
  "using-the-sdk/custom-authentication-provider.html": {
    "href": "using-the-sdk/custom-authentication-provider.html",
    "title": "Creating a custom Authentication Provider for PnP.Core | PnP Core SDK",
    "keywords": "Creating a custom Authentication Provider for PnP.Core There might be implementations where the default provided authentication providers do not offer the needed features (e.g. when authenticating Blazor WebAssembly applications). If that's the case, you always have the option to write your own authentication provider and use that when working with the PnP Core SDK. Creating a custom authentication provider When using Blazor WebAssembly applications we want to ask the Blazor framework to deliver us an access token for the logged on user and then use that access token in the PnP Core SDK. There's no default authentication provider in PnP.Core.Auth for that, so let's roll our own. Writing an authentication provider comes down to implementing the IAuthenticationProvider interface defined in the PnP.Core.Services namespace (in the PnP.Core assembly). This interface requires 3 methods to be implemented: Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) : authenticates a web requests by adding an access token to it Task<string> GetAccessTokenAsync(Uri resource, String[] scopes) : gets an access token for the requested resource and scope Task<string> GetAccessTokenAsync(Uri resource) : gets an access token for the requested resource and its default scopes Below sample shows a custom authentication provider that can be used in Blazor WebAssembly applications: using Microsoft.AspNetCore.Components.WebAssembly.Authentication; using PnP.Core.Services; using System; using System.Net.Http; using System.Net.Http.Headers; using System.Threading.Tasks; namespace Demo.Blazor { /// <summary> /// Custom authentication provider that uses the WebAssembly access token provider to obtain an access token /// </summary> public class MsalWrappedTokenProvider : IAuthenticationProvider { private readonly IAccessTokenProvider _accessTokenProvider; /// <summary> /// Default constructor /// </summary> /// <param name=\"accessTokenProvider\">WebAssembly access token provider instance</param> public MsalWrappedTokenProvider(IAccessTokenProvider accessTokenProvider) { _accessTokenProvider = accessTokenProvider; } private const string MicrosoftGraphScope = \"Sites.FullControl.All\"; private const string SharePointOnlineScope = \"AllSites.FullControl\"; private string[] GetRelevantScopes(Uri resourceUri) { if (resourceUri.ToString() == \"https://graph.microsoft.com\") { return new[] { $\"{resourceUri}/{MicrosoftGraphScope}\" }; } else { string resource = $\"{resourceUri.Scheme}://{resourceUri.DnsSafeHost}\"; return new[] { $\"{resource}/{SharePointOnlineScope}\" }; } } /// <summary> /// Authenticate the web request /// </summary> /// <param name=\"resource\">Resource to get an access token for</param> /// <param name=\"request\">Request to add the access token on</param> /// <returns></returns> public async Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) { if (request == null) { throw new ArgumentNullException(nameof(request)); } if (resource == null) { throw new ArgumentNullException(nameof(resource)); } request.Headers.Authorization = new AuthenticationHeaderValue(\"bearer\", await GetAccessTokenAsync(resource).ConfigureAwait(false)); } /// <summary> /// Gets an access token for the requested resource and scopes /// </summary> /// <param name=\"resource\">Resource to get access token for</param> /// <param name=\"scopes\">Scopes to use when getting the access token</param> /// <returns>Obtained access token</returns> public async Task<string> GetAccessTokenAsync(Uri resource, string[] scopes) { if (resource == null) { throw new ArgumentNullException(nameof(resource)); } if (scopes == null) { throw new ArgumentNullException(nameof(scopes)); } var tokenResult = await _accessTokenProvider.RequestAccessToken(new AccessTokenRequestOptions() { // The scopes must specify the needed permissions for the app to work Scopes = scopes, }).ConfigureAwait(false); if (!tokenResult.TryGetToken(out AccessToken accessToken)) { throw new Exception(\"An error occured while trying to acquire the access token...\"); } return accessToken.Value; } /// <summary> /// Gets an access token for the requested resource /// </summary> /// <param name=\"resource\">Resource to get access token for</param> /// <returns>Obtained access token</returns> public async Task<string> GetAccessTokenAsync(Uri resource) { if (resource == null) { throw new ArgumentNullException(nameof(resource)); } return await GetAccessTokenAsync(resource, GetRelevantScopes(resource)); } } } Using a custom authentication provider Once you've added the custom authentication provider to your project, you need to configure it in the pipeline of PnP Core SDK. This is done by passing an authentication provider instance to the CreateAsync or Create methods of the IPnPContextFactory you're using . using(var context = await pnpContextFactory.CreateAsync(new Uri(\"https://contoso.sharepoint.com/sites/siteA\"), myCustomAuthProvider)) { // use context to read/update Microsoft 365 data }"
  },
  "using-the-sdk/fields-add.html": {
    "href": "using-the-sdk/fields-add.html",
    "title": "Adding Site and List fields | PnP Core SDK",
    "keywords": "Adding Site and List fields Using PnP Core SDK you can configure and add the commonly used SharePoint fieldtypes as either a site field or list field. The approach to configure and add a field is quite similar, but given different fields do have different options there are some differences. In this chapter you'll learn how to add site and list fields. Before we start it's important to understand that all fields share a common set of properties that can be set at configuration time which are described in the CommonFieldOptions class . Commonly used field configuration options are AddToDefaultView , Group , Required , ShowInEditForm . When adding a field you can optionally also set the Id property of the field. Adding fields typically is done using one of the Add FieldType or Add FieldType Async methods, but if the provided options are not sufficient for your use case you can always add a field by providing the raw field XML as described in the last chapter of this article. Note The code samples create field on a list \"myList\" by adding the fields to the list's Fields collection. The same logic applies for adding site fields by adding them to the web's Fields collection. Text fields When adding a text field you use the FieldTextOptions class which allows to define the MaxLenght of a text field. IField myField = await myList.Fields.AddTextAsync(\"My Field\", new FieldTextOptions() { Group = \"Custom Fields\", AddToDefaultView = true, MaxLength = 30 }); Multiline text fields The FieldMultiLineTextOptions class is used to configure Multiline fields. Commonly used options are RichText and NumberOfLines . IField myField = await myList.Fields.AddMultilineTextAsync(\"My Field\", new FieldMultilineTextOptions() { Group = \"Custom Fields\", AddToDefaultView = true, RichText = true }); Number For adding number fields you need to provide the field configuration using the FieldNumberOptions class , setting the number of Decimals is the most commonly used number configuration. IField myField = await myList.Fields.AddNumberAsync(\"My Field\", new FieldNumberOptions() { Group = \"Custom Fields\", AddToDefaultView = true, MinimumValue = 0, MaximumValue = 100 }); Boolean Boolean fields are added using the FieldBooleanOptions class , but in contrast to the other fields there are no specific Boolean field configuration properties. IField myField = await myList.Fields.AddBooleanAsync(\"My Field\", new FieldBooleanOptions() { Group = \"Custom Fields\", AddToDefaultView = true, }); DateTime Use the FieldDateTimeOptions class to add a DateTime field. Setting the DisplayFormat to choose between displaying date and time or just date is often used. IField myField = await myList.Fields.AddDateTimeAsync(\"My Field\", new FieldDateTimeOptions() { Group = \"Custom Fields\", AddToDefaultView = true, }); Currency Currency fields are less frequently used but in case you want to create the currency field the FieldCurrencyOptions class will allow you to configure the field. IField myField = await myList.Fields.AddCurrencyAsync(\"My Field\", new FieldCurrencyOptions() { Group = \"Custom Fields\", AddToDefaultView = true, Decimals = 2 }); Calculated Calculated are a special kind of field as you're specifying a formula that dynamically calculates the field value. To configure a calculated field you'd use the FieldCalculatedOptions class and setting the Formula is a required thing to do. In below sample a very simple formula is used as does a calculation always resulting in a value of 0.5 shown as a percentage. Another formula example is =[Date Completed]-[Start Date] returning a DateTime value. See the Examples of common formulas in lists article to learn more about how to write formulas. IField myField = await myList.Fields.AddCalculatedAsync(\"My Field\", new FieldCalculatedOptions() { Group = \"Custom Fields\", AddToDefaultView = true, Formula = @\"=1-0.5\", OutputType = FieldType.Number, ShowAsPercentage = true, }); Choice Choice fields allow the user to select a value from a list of possible options. Configuring choice fields can be done via the FieldChoiceOptions class which allows to choose for example between displaying the choice field as DropDown or RadioButtons by setting the EditFormat property. Possible choices themselves are added via the Choices property. IField myField = await myList.Fields.AddChoiceAsync(\"My Field\", new FieldChoiceOptions() { Group = \"Custom Fields\", AddToDefaultView = true, Choices = new List<string>() { \"Option A\", \"Option B\", \"Option C\" }.ToArray(), DefaultChoice = \"Option B\" }); Multi choice Choice fields also can allow the user to select multiple options and then they're called multi choice fields. Use the FieldChoiceMultiOptions class to configure your multi choice fields. IField myField = await myList.Fields.AddChoiceMultiAsync(\"My Field\", new FieldChoiceOptions() { Group = \"Custom Fields\", AddToDefaultView = true, Choices = new List<string>() { \"Option A\", \"Option B\", \"Option C\", \"Option D\", \"Option E\" }.ToArray(), }); Url Url fields store an URL and you can configure them via the DisplayFormat property to display either the URL as a link or show the image defined by the URL. The configuration class to use is FieldUrlOptions . IField myField = await myList.Fields.AddUrlAsync(\"My Field\", new FieldUrlOptions() { Group = \"Custom Fields\", AddToDefaultView = true, DisplayFormat = UrlFieldFormatType.Hyperlink }); User A user field stores the reference to a user or group and to configure it the FieldUserOptions class is needed. Key configuration to set is the SelectionMode as it determines what type of principals (users, groups) can be added in this field. IField myField = await myList.Fields.AddUserAsync(\"My Field\", new FieldUserOptions() { Group = \"Custom Fields\", AddToDefaultView = true, SelectionMode = FieldUserSelectionMode.PeopleAndGroups }); Multi user This field is identical to the User field but with as difference that you can add multiple users/groups. IField myField = await myList.Fields.AddUserMultiAsync(\"My Field\", new FieldUserOptions() { Group = \"Custom Fields\", AddToDefaultView = true, SelectionMode = FieldUserSelectionMode.PeopleAndGroups }); Lookup Lookup fields allow you to configure a lookup to another list and then show a field from the looked value. These fields are configured via the FieldLookupOptions class , key properties to set are the id of the list to lookup from ( LookupListId ) and the field of the looked up list for of which the value will be shown in this field ( LookupFieldName ). IList listToLookupFrom = await context.Web.Lists.GetByTitleAsync(\"ListWithInterestingData\"); IField myField = await myList.Fields.AddLookupAsync(\"My Field\", new FieldLookupOptions() { Group = \"Custom Fields\", AddToDefaultView = true, LookupListId = listToLookupFrom.Id, LookupFieldName = \"Title\", }); Multi lookup When you want to be able to select multiple lookup items you need a multi lookup field. Configuration wise this is very similar to the Lookup field described previously. IList listToLookupFrom = await context.Web.Lists.GetByTitleAsync(\"ListWithInterestingData\"); IField myField = await myList.Fields.AddLookupMultiAsync(\"My Field\", new FieldLookupOptions() { Group = \"Custom Fields\", AddToDefaultView = true, LookupListId = listToLookupFrom.Id, LookupFieldName = \"Title\", }); Taxonomy Customers often use the SharePoint managed metadata feature to setup their enterprise metadata and when configuring your SharePoint site it's often needed to use fields that provide a lookup to a given termset. These type of fields are called Taxonomy fields and they can be configured via the FieldTaxonomyOptions class . You're required to provide the id's for a TermStore and TermSet . IField myField = await myList.Fields.AddTaxonomyAsync(\"My Field\", new FieldTaxonomyOptions() { Group = \"Custom Fields\", AddToDefaultView = true, TermStoreId = new Guid(\"437b86fc-1258-45a9-85ea-87a29156ce3c\"), TermSetId = new Guid(\"d50ec969-cb27-4a49-839f-3c25d1d607d5\") }); Multi taxonomy If you want to be able to select multiple taxonomy values to fill your field you need a multi taxonomy field, configuration wise this is the same as for the single value Taxonomy field but now you'd use the AddTaxonomyMultiAsync method . IField myField = await myList.Fields.AddTaxonomyMultiAsync(\"My Field\", new FieldTaxonomyOptions() { Group = \"Custom Fields\", AddToDefaultView = true, TermStoreId = new Guid(\"437b86fc-1258-45a9-85ea-87a29156ce3c\"), TermSetId = new Guid(\"d50ec969-cb27-4a49-839f-3c25d1d607d5\") }); Add field via field XML While above options should cover majority of the field creation needs it might happen that you need to be able to configure additional options and for that there's a solution allowing you to specify the field XML that will create the field yourselve. Adding the field is done via the AddFieldAsXml methods . You can learn more about the possible options for fields to understand how the field XML needs to be crafted. IField myField = await myList.Fields.AddFieldAsXmlAsync(@\"<Field Type=\"\"Text\"\" Name=\"\"ADDEDFIELD\"\" DisplayName=\"\"ADDED FIELD\"\"/>\", true);"
  },
  "using-the-sdk/fields-intro.html": {
    "href": "using-the-sdk/fields-intro.html",
    "title": "Site and List fields | PnP Core SDK",
    "keywords": "Site and List fields Each SharePoint site uses fields , a site comes prepopulated with a set of site fields and a set of lists and libraries that use these fields. You can also create your own fields, either being a site field or list field. A site field can be reused across multiple lists in the site collection, whereas a list field only can be used in the list for which the field was created. Creating site and list fields is from a developer point of view quite similar so both options are discussed together in this article. The PnP Core SDK does support the common fields SharePoint offers: Text Multiline text Number Boolean DateTime Currency Calculated Choice Multi choice Url User Multi user Lookup Multi lookup Taxonomy Multi taxonomy Location (by GA timeframe) In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with fields } Getting the current site and list fields Getting the currently defined fields on a web can be done by loading the Fields property as that will return an IFieldCollection : // Get site fields var web = await context.Web.GetAsync(l => l.Fields); foreach(var field in web.Fields.AsRequested()) { // do something with the field } For a list similar logic applies, you can load the Fields property on an IList : // Get documents library with fields loaded var documents = await context.Web.Lists.GetByTitleAsync(\"Documents\", l => l.Fields); foreach(var field in documents.Fields.AsRequested()) { // do something with the field } Above samples do load all the default Field properties, but what if you are only interested in a few properties or the property you need is not loaded by default? For that purpose the best approach is using the QueryProperties method as that allows for getting the needed field data in a single roundtrip to the server. Below code snippets show this method in action for loading specific field properties // Get site fields var web = await context.Web.GetAsync(l => l.Fields.QueryProperties(l => l.Id, l => l.InternalName, l => l.FieldTypeKind)); foreach(var field in web.Fields.AsRequested()) { // do something with the field } // Get documents library with fields loaded var documents = await context.Web.Lists.GetByTitleAsync(\"Documents\", l => l.Fields.QueryProperties(l => l.Id, l => l.InternalName, l => l.FieldTypeKind)); foreach(var field in documents.Fields.AsRequested()) { // do something with the field } Adding site and list fields Adding fields is described in the Adding fields article. Updating site and list fields To update a field you simply update it's value and call the Update or UpdateAsync methods: // Find a field with a given id Guid titleFieldId = new Guid(\"fa564e0f-0c70-4ab9-b863-0177e6ddd247\"); IField field = await context.Web.Fields.Where(f => f.Id == titleFieldId).FirstOrDefaultAsync(); if (field != null) { field.Hidden = true; await field.UpdateAsync(); } Deleting site and list fields Deleting a field can be done using the Delete or DeleteAsync methods: // Find a field with a given id Guid titleFieldId = new Guid(\"fa564e0f-0c70-4ab9-b863-0177e6ddd247\"); IField field = await context.Web.Fields.Where(f => f.Id == titleFieldId).FirstOrDefaultAsync(); if (field != null) { await field.DeleteAsync(); }"
  },
  "using-the-sdk/files-intro.html": {
    "href": "using-the-sdk/files-intro.html",
    "title": "Working with files | PnP Core SDK",
    "keywords": "Working with files Working with files (documents) is a core aspect of working with SharePoint. Learn how to add/upload files, set metadata and download files again and much more. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with files } Getting files In PnP Core SDK files are represented via an IFile interface . Before you get perform a file operation (e.g. like publish or download) you need to get the file as IFile . There are a number of ways to get an IFile like loading a single file via a lookup or enumerating the files in library / folder. Getting a single file If you know the name and location of a file you can get a reference to it via the IWeb method named GetFileByServerRelativeUrl . This method takes a server relative path of the file and optionally allows you to specify which properties to load on the file. string documentUrl = $\"{context.Uri.PathAndQuery}/Shared Documents/document.docx\"; // Get a reference to the file IFile testDocument = await context.Web.GetFileByServerRelativeUrlAsync(documentUrl); // Get a reference to the file, loading extra properties of the IFile IFile testDocument = await context.Web.GetFileByServerRelativeUrlAsync(documentUrl, f => f.CheckOutType, f => f.CheckedOutByUser); Getting the file of a list item A document in a document library is an IListItem holding the file metadata with an IFile holding the actual file. If you have an IListItem you can load the connected file via File property: var myList = await context.Web.Lists.GetByTitleAsync(\"My List\"); // Load list item with id 1 with it's file var first = await myList.Items.GetByIdAsync(1, li => li.All, li => li.File); // Use the loaded IFile, e.g. for downloading it byte[] downloadedContentBytes = await first.File.GetContentBytesAsync(); Enumerating files Files do live in an IFolder , document libraries do have a RootFolder property allowing you to enumerate files, but also the IWeb has a collection of Folders , a RootFolder and GetFolderByIdAsync and GetFolderByServerRelativeUrlAsync methods. Once you've a folder you can enumerate the files inside it. // Get root folder of a library IFolder folder = await context.Web.Folders.GetFirstOrDefaultAsync(f => f.Name == \"SiteAssets\"); // Get root folder of the web (for files living outside of a document library) IFolder folder = (await context.Web.GetAsync(p => p.RootFolder)).RootFolder; // Get folder collection of a web and pick the SiteAssets folder await context.Web.LoadAsync(p => p.Folders); var folder = context.Web.Folders.AsRequested().FirstOrDefault(p=>p.Name == \"SiteAssets\"); // Load files property of the folder await folder.LoadAsync(p => p.Files); foreach(var file in folder.Files.AsRequested()) { // Do something with the file } Getting file properties A file in SharePoint has properties which can be requested by loading them on the IFile . Below snippet shows some ways on how to load file properties. string documentUrl = $\"{context.Uri.PathAndQuery}/Shared Documents/document.docx\"; // Sample 1: Get a reference to the file IFile testDocument = await context.Web.GetFileByServerRelativeUrlAsync(documentUrl); // Sample 2: Get a reference to the file, loading the file Author and ModifiedBy properties IFile testDocument = await context.Web.GetFileByServerRelativeUrlAsync(documentUrl, w => w.Author, w => w.ModifiedBy); // Sample 3: Get files by loading it's folder and the containing files with their selected properties var folder = await context.Web.GetFolderByServerRelativeUrlAsync($\"{context.Uri.PathAndQuery}/SiteAssets\", p => p.Name, p => p.Files.QueryProperties(p => p.Name, p => p.Author, p => p.ModifiedBy)); foreach(var file in folder.Files.AsRequested()) { // Do something with the file, properties Name, Author and ModifiedBy are loaded } File property bag Each file also has a so called property bag, a list key/value pairs providing more information about the file. You can read this property bag, provided via the IFile Properties property , and add new key/value pairs to it. string documentUrl = $\"{context.Uri.PathAndQuery}/Shared Documents/document.docx\"; // Get a reference to the file, load the file property bag IFile testDocument = await context.Web.GetFileByServerRelativeUrlAsync(documentUrl, f => f.Properties); // Enumerate the file property bag foreach(var property in testDocument.Properties) { // Do something with the property } // Add a new property testDocument[\"myPropertyKey\"] = \"Some value\"; await testDocument.Properties.UpdateAsync(); Publishing and un-publishing files Publishing a file will move the file from draft into published status and increase it's major version by one. Publishing can be done using the PublishAsync method , un-publishing a file will bring the file back to draft status and can be done using the UnPublishAsync method . Note Publishing a file requires the library to be configured to support major versions. See the EnableVersioning property on the IList interface . string documentUrl = $\"{context.Uri.PathAndQuery}/Shared Documents/document.docx\"; // Get a reference to the file, load the file property bag IFile testDocument = await context.Web.GetFileByServerRelativeUrlAsync(documentUrl); // Publish the file await testDocument.PublishAsync(\"Optional publish message\"); // Un-publish the file await testDocument.UnpublishAsync(\"Optional un-publish message\"); Checking out, undoing check out and checking in files In SharePoint a file can be checked out by a user to \"lock\" the file and then later on checked in again. The same can be done using code, including undoing a checked out of another user via the CheckoutAsync , CheckinAsync and UndoCheckout methods. Note Publishing a file requires the library to be configured to support major versions. See the ForceCheckout property on the IList interface . string documentUrl = $\"{context.Uri.PathAndQuery}/Shared Documents/document.docx\"; // Get a reference to the file IFile testDocument = await context.Web.GetFileByServerRelativeUrlAsync(documentUrl); // Check out the file await testDocument.CheckoutAsync(); // Check in the file await testDocument.CheckinAsync(); Undoing a checkout: // Get the default document library root folder string documentUrl = $\"{context.Uri.PathAndQuery}/Shared Documents/document.docx\"; // Get a reference to the file, load the check out information as that can be needed before undoing the check out IFile testDocument = await context.Web.GetFileByServerRelativeUrlAsync(documentUrl, f => f.CheckOutType, f => f.CheckedOutByUser); // Checkout the file await testDocument.UndoCheckoutAsync(); Deleting and recycling files You can delete a file (permanent operation) or move it to the site's recycle bin (the file can be restored). Deleting a file is done using the typical Delete methods like DeleteAsync , recycling is done via RecycleAsync . string documentUrl = $\"{context.Uri.PathAndQuery}/Shared Documents/document.docx\"; // Get a reference to the file IFile testDocument = await context.Web.GetFileByServerRelativeUrlAsync(documentUrl); // Recycle the file await testDocument.RecycleAsync(); // Delete the file await testDocument.DeleteAsync(); Adding files (=uploading) Adding a file comes down to create a file reference and uploading the file's bytes and this can be done via the AddAsync method on a Files collection . This method takes a stream of bytes as input for the file contents. Note See the working with large files page for some more complete file upload/download samples. Don't forget to load the ListItemFields property if you want to set the file properties after adding. This can be done in multiple ways await addedFile.ListItemAllFields.LoadAsync() , await addedFile.LoadAsync(p => p.ListItemAllFields) or addedFile = await context.Web.GetFileByServerRelativeUrlAsync(addedFile.ServerRelativeUrl, p => p.ListItemAllFields) . // Get a reference to a folder IFolder siteAssetsFolder = await context.Web.Folders.Where(f => f.Name == \"SiteAssets\").FirstOrDefaultAsync(); // Upload a file by adding it to the folder's files collection IFile addedFile = await siteAssetsFolder.Files.AddAsync(\"test.docx\", System.IO.File.OpenRead($\".{Path.DirectorySeparatorChar}TestFilesFolder{Path.DirectorySeparatorChar}test.docx\")); Updating file metadata The library in which you've uploaded a file might have additional columns to store metadata about the file. To update this metadata you first need to load the IListItem linked to the added file via the ListItemAllFields property, followed by setting the metadata and updating the IListItem . Note See the working with list items page for information on how to update an IListItem . // Get a reference to a folder IFolder documentsFolder = await context.Web.Folders.Where(f => f.Name == \"Documents\").FirstOrDefaultAsync(); // Upload a file by adding it to the folder's files collection IFile addedFile = await documentsFolder.Files.AddAsync(\"test.docx\", System.IO.File.OpenRead($\".{Path.DirectorySeparatorChar}TestFilesFolder{Path.DirectorySeparatorChar}test.docx\")); // Load the corresponding ListItem await addedFile.ListItemAllFields.LoadAsync(); // Set the metadata addedFile.ListItemAllFields[\"Field1\"] = \"Hi there\"; addedFile.ListItemAllFields[\"Field2\"] = true; // Persist the ListItem changes await addedFile.ListItemAllFields.UpdateAsync(); Updating the file Author, Editor, Created or Modified properties Each file has an Author property (the one who created the file), an Editor property (the one who last changed the file), a Created property (when was the file added) and a Modified property (when was the file changed). These are system properties and they cannot be simply overwritten. Using the UpdateOverwriteVersion methods this however is possible as shown in below code snippet: // Load the default documents folder of the site var doc = await context.Web.Lists.GetByTitleAsync(\"Documents\", p => p.Fields); // Upload a file var file = await doc.RootFolder.Files.AddAsync(\"demo.docx\", System.IO.File.OpenRead($\".{System.IO.Path.DirectorySeparatorChar}demo.docx\"), true); // Load the file metadata again to get the ListItemFields populated await file.LoadAsync(p => p.ListItemAllFields) // Get a user to use as author/editor var currentUser = await context.Web.GetCurrentUserAsync(); // The new Created/Modified date to set var newDate = new DateTime(2020, 10, 20); // Get the earlier loaded Author and Editor fields var author = doc.Fields.AsRequested().FirstOrDefault(p => p.InternalName == \"Author\"); var editor = doc.Fields.AsRequested().FirstOrDefault(p => p.InternalName == \"Editor\"); // Update file properties file.ListItemAllFields[\"Title\"] = \"new title\"; file.ListItemAllFields[\"Created\"] = newDate; file.ListItemAllFields[\"Modified\"] = newDate; file.ListItemAllFields[\"Author\"] = author.NewFieldUserValue(currentUser); file.ListItemAllFields[\"Editor\"] = editor.NewFieldUserValue(currentUser); // Persist the updated properties await file.ListItemAllFields.UpdateOverwriteVersionAsync(); Downloading files If you want to download a file you do need to use either the GetContentAsync method if you prefer a Stream as result type or GetContentBytesAsync if you prefer a byte array. Note See the working with large files page for some more complete file upload/download samples. string documentUrl = $\"{context.Uri.PathAndQuery}/Shared Documents/document.docx\"; // Get a reference to the file IFile testDocument = await context.Web.GetFileByServerRelativeUrlAsync(documentUrl); // Download the file as stream Stream downloadedContentStream = await testDocument.GetContentAsync(); // Download the file as an array of bytes byte[] downloadedContentBytes = await testDocument.GetContentBytesAsync(); Copying and moving files A file can be copied or moved into another SharePoint location and this can be done using the CopyToAsync and MoveToAsync methods. string documentUrl = $\"{context.Uri.PathAndQuery}/Shared Documents/document.docx\"; // Get a reference to the file IFile testDocument = await context.Web.GetFileByServerRelativeUrlAsync(documentUrl); // Copy the file, overwrite if existing on the destination await testDocument.CopyToAsync($\"{context.Uri.PathAndQuery}/MyDocuments/document.docx\", true); // Move the file, overwrite if needed await testDocument.MoveToAsync($\"{context.Uri.PathAndQuery}/MyDocuments/document.docx\", MoveOperations.Overwrite); Getting file versions When versioning on a file is enabled a file can have multiple versions and PnP Core SDK can be used to work with the older file versions. Each file version is represented via an IFileVersion in an IFileVersionCollection . Loading file versions can be done by requesting the Versions property of the file. Once you've an IFileVersion you can also download that specific version of the file by using one of the GetContent methods as shown in the example. Note For a file to have versions the library needs to be configured to support major versions and/or minor versions. See the EnableVersioning and EnableMinorVersions properties on the IList interface. string documentUrl = $\"{context.Uri.PathAndQuery}/Shared Documents/document.docx\"; // Get a reference to the file, also request the Versions property IFile testDocument = await context.Web.GetFileByServerRelativeUrlAsync(documentUrl, f => f.Versions); foreach(var fileVersion in testDocument.Versions) { // Download the file version content as stream Stream fileVersionContent = await fileVersion.GetContentAsync(); } Getting file IRM settings A SharePoint document library can be configured with an Information Rights Management (IRM) policy which then stamps an IRM policy on the documents obtained from that library. Use the InformationRightsManagementSettings property to read the file's IRM settings. Note The library holding files you want to protect need to be first setup for IRM by enabling IRM on it via the IrmEnabled property . string documentUrl = $\"{context.Uri.PathAndQuery}/Shared Documents/document.docx\"; // Get a reference to the file, also request the Versions property IFile testDocument = await context.Web.GetFileByServerRelativeUrlAsync(documentUrl, f => f.InformationRightsManagementSettings); var fileAccessExpirationTimeInDays = testDocument.InformationRightsManagementSettings.DocumentAccessExpireDays;"
  },
  "using-the-sdk/files-large.html": {
    "href": "using-the-sdk/files-large.html",
    "title": "Working with large files | PnP Core SDK",
    "keywords": "Working with large files SharePoint supports up to 100GB files and uploading and downloading those requires some additional steps. Uploading large files Uploading of files is done via the AddAsync method on a Files collection . This method takes a stream of bytes as input for the file contents and when working with files larger than 10MB this API will automatically switch to a chunked upload, meaning it will upload the large file in chunks of 10MB. For a developer no special actions are required. // Get a reference to a folder IFolder siteAssetsFolder = await context.Web.Folders.Where(f => f.Name == \"SiteAssets\").FirstOrDefaultAsync(); // Upload a file by adding it to the folder's files collection, the file will be uploaded in chunks of 10MB IFile addedFile = await siteAssetsFolder.Files.AddAsync(\"2gbfile.test\", System.IO.File.OpenRead($\".{Path.DirectorySeparatorChar}TestFilesFolder{Path.DirectorySeparatorChar}2gbfile.test\")); Downloading large files If you want to download a large file you do need to use the GetContentAsync method as that method allows you to specify you want to use a streamed download by specifying this in the GetContentAsync method . In a streamed download the API will return the call whenever the first bytes have arrived from the server allowing you to process the file in chunks without the full file being loaded in the process's memory. Important The default HTTP timeout is 100 seconds, which is not enough for large file downloads. You can increase this time out in the PnP Core SDK configuration up to an infinite timeout. IFolder parentFolder = await context.Web.Folders.Where(f => f.Name == \"SiteAssets\").FirstOrDefaultAsync(); // Get a reference to the file to download IFile fileToDownload = await context.Web.GetFileByServerRelativeUrlAsync($\"{parentFolder.ServerRelativeUrl}/2gbfile.test\"); // Start the download Stream downloadedContentStream = await fileToDownload.GetContentAsync(true); // Download the file bytes in 2MB chunks and immediately write them to a file on disk // This approach avoids the file being fully loaded in the process memory var bufferSize = 2 * 1024 * 1024; // 2 MB buffer using (var content = System.IO.File.Create(\"2gb.test.downloaded\")) { var buffer = new byte[bufferSize]; int read; while ((read = await downloadedContentStream.ReadAsync(buffer, 0, buffer.Length)) != 0) { content.Write(buffer, 0, read); } } Note The above also applies to downloading older versions of large files, the same GetContent methods exist on the IFileVersion model."
  },
  "using-the-sdk/folders-intro.html": {
    "href": "using-the-sdk/folders-intro.html",
    "title": "Working with folders | PnP Core SDK",
    "keywords": "Working with folders A list or library can use folders to build a structure to manage the list items or files. Folders can also exist at the IWeb level, so outside the context of a list or library. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with folders } Getting folders Lists and libraries do have a RootFolder property allowing you to enumerate content inside, but also the IWeb has a collection of Folders , a RootFolder and GetFolderByIdAsync and GetFolderByServerRelativeUrlAsync methods. All of these approach either give you an IFolder or an IFolderCollection that you can use to work with. // Get a folder by loading it via it's server relative url var folder = await context.Web.GetFolderByServerRelativeUrlAsync($\"{context.Uri.PathAndQuery}/SiteAssets\"); // Get a folder by id var folder = await context.Web.GetFolderByIdAsync(new Guid(\"d50ec969-cb27-4a49-839f-3c25d1d607d5\")); // Get a folder via the list var folder = (await context.Web.Lists.GetByTitleAsync(\"Documents\", p => p.RootFolder)).RootFolder; // Get root folder of a library IFolder folder = await context.Web.Folders.Where(f => f.Name == \"SiteAssets\").FirstOrDefaultAsync(); // Get root folder of the web (for files living outside of a document library) IFolder folder = (await context.Web.GetAsync(p => p.RootFolder)).RootFolder; // Get folder collection of a web and pick the SiteAssets folder await context.Web.LoadAsync(p => p.Folders); var folder = context.Web.Folders.AsRequested().FirstOrDefault(p=>p.Name == \"SiteAssets\"); The Folder property bag Each folder also has a so called property bag, a list key/value pairs providing more information about the folder. You can read this property bag, provided via the IFolder Properties property , and add new key/value pairs to it. // Get a folder by loading it via it's server relative url, also load the properties (= property bag) var folder = await context.Web.GetFolderByServerRelativeUrlAsync($\"{context.Uri.PathAndQuery}/SiteAssets\", f => f.Properties); // Enumerate the folder property bag foreach(var property in folder.Properties) { // Do something with the property } // Add a new property folder[\"myPropertyKey\"] = \"Some value\"; await folder.Properties.UpdateAsync(); Adding folders When working with folders there always is a root folder or folder collection present, a web has a root folder and folders collection and lists and libraries have a root folder. Adding folders implies adding folder as sub folder of an existing folder and this can be done by adding a new IFolder into an IFolderCollection by using the Add methods or using EnsureFolderAsync . Note Before you can add folders to a list the list needs to be enabled for folder creation by setting the EnableFolderCreation property to true. // Get the root folder of the Documents library var folder = (await context.Web.Lists.GetByTitleAsync(\"Documents\", p => p.RootFolder)).RootFolder; // Add a folder var subFolder = await folder.Folders.AddAsync(\"My folder\"); Ensure a folder path When adding folders a very convenient method to use is the EnsureFolderAsync method as this one can take a folder path and verify each part of the path and create it if needed. // Get the root folder of the Site Pages library IFolder folder = (await context.Web.Lists.GetByTitleAsync(\"Site Pages\", p => p.RootFolder)).RootFolder; // Below command will result in a folder hierarchy sub1/sub2/sub3/sub4/sub5, 5 levels deep var subFolder = await folder.EnsureFolderAsync(\"sub1/sub2/sub3/sub4/sub5\"); Adding content in folders Folders can contain other folders, but the common use case for folders is to hold files, see the Files documentation to learn how to add a file into a folder. Updating folders All but one IFolder properties are readonly, the only one that can be set is the WelcomePage property and setting this property only makes sense on the web's RootFolder as that property determines the web's home page to load. // Check if the RootFolder property was loaded, if not request it from the server await context.Web.EnsurePropertiesAsync(p => p.RootFolder); // Set the WelcomePage and update the folder context.Web.RootFolder.WelcomePage = \"sitepages/myhomepage.aspx\"; await context.Web.RootFolder.UpdateAsync(); Deleting folders // Get the root folder of the Site Pages library IFolder folder = (await context.Web.Lists.GetByTitleAsync(\"Site Pages\", p => p.RootFolder)).RootFolder; // Add a folder var subFolder = await folder.Folders.AddAsync(\"My folder\"); // Delete the folder again await subFolder.DeleteAsync(); Getting changes for a folder You can use the GetChanges methods on an IFolder to list all the changes. See Enumerating changes that happened in SharePoint to learn more."
  },
  "using-the-sdk/fragments/creating-context.html": {
    "href": "using-the-sdk/fragments/creating-context.html",
    "title": "Creating Context | PnP Core SDK",
    "keywords": "Creating Context In this article, you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with Teams }"
  },
  "using-the-sdk/fragments/setup-admin-m365.html": {
    "href": "using-the-sdk/fragments/setup-admin-m365.html",
    "title": "Creating Context | PnP Core SDK",
    "keywords": "Creating Context In this article, you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for doing Microsoft 365 admin operations } PnP.Core.Admin dependency The functionality shown in this article depends on the PnP.Core.Admin nuget package . Once the PnP.Core.Admin nuget package has been installed you can get to the Microsoft 365 admin features via using the GetMicrosoft365Admin extension method: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Use the GetMicrosoft365Admin extension method on any PnPContext // to tap into the Microsoft 365 admin features var isMultiGeo = await context.GetMicrosoft365Admin().IsMultiGeoTenantAsync(); }"
  },
  "using-the-sdk/fragments/setup-admin-sharepoint.html": {
    "href": "using-the-sdk/fragments/setup-admin-sharepoint.html",
    "title": "Creating Context | PnP Core SDK",
    "keywords": "Creating Context In this article, you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and shown below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for doing SharePoint admin operations } PnP.Core.Admin dependency The functionality shown in this article depends on the PnP.Core.Admin nuget package . Once the PnP.Core.Admin nuget package has been installed you can get to the SharePoint admin features via using the GetSharePointAdmin , GetSiteCollectionAppManager , GetTenantAppManager and GetSiteCollectionManager extension methods: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Use the GetSharePointAdmin extension method on any PnPContext // to tap into the SharePoint admin features var url = context.GetSharePointAdmin().GetTenantAdminCenterUri(); }"
  },
  "using-the-sdk/fragments/sharepoint-admin-required.html": {
    "href": "using-the-sdk/fragments/sharepoint-admin-required.html",
    "title": "| PnP Core SDK",
    "keywords": "Important You need to be either a SharePoint Administrator or Global Administrator to use these methods."
  },
  "using-the-sdk/listitems-attachments.html": {
    "href": "using-the-sdk/listitems-attachments.html",
    "title": "Working with list item attachments | PnP Core SDK",
    "keywords": "Working with list item attachments List items can have one or more attachments. This chapter explains how to load the attachments, how to add them and how to delete or recycle them. Note Some of the samples assume you've loaded a list into the variable mylist , the code that shows how to do so is listed in the first examples. Loading the list item attachments List item attachments are handled via the AttachmentFiles property of an IListItem . Simply requesting this property will get you the needed information about all the attachments on the IListItem . Once you've requested the attachments you can also download them using one of the GetContent methods. // Load the list item with attachments var item = await mylist.Items.GetByIdAsync(1, p => p.AttachmentFiles); // Enumerate over the attachments and download them foreach (var attachment in item.AttachmentFiles.AsRequested()) { // Download the attachment as stream Stream downloadedContentStream = await attachment.GetContentAsync(); // Download the attachment as an array of bytes byte[] downloadedContentBytes = await attachment.GetContentBytesAsync(); } Adding a list item attachment Adding attachments to an IListItem can be done using the Add methods on the attachment collection. // Load the list item with attachments var item = await mylist.Items.GetByIdAsync(1, p => p.AttachmentFiles); // Add an attachment by adding it the attachment collection var addedAttachment = await itemLoaded.AttachmentFiles.AddAsync(\"test.docx\", System.IO.File.OpenRead($\".{Path.DirectorySeparatorChar}test.docx\")); Deleting or recycling list item attachments To remove a list item attachment you can either delete it, which is permanent, or recycle it so that it can still be restored. // Load the list item with attachments var item = await mylist.Items.GetByIdAsync(1, p => p.AttachmentFiles); // Delete the attachment await item.AttachmentFiles.AsRequested().First().Delete(); // Recycle the attachment await item.AttachmentFiles.AsRequested().First().Recycle();"
  },
  "using-the-sdk/listitems-fields.html": {
    "href": "using-the-sdk/listitems-fields.html",
    "title": "Working with list item fields | PnP Core SDK",
    "keywords": "Working with list item fields When getting and setting list item values you'll need to work with the various field types SharePoint and PnP Core SDK support. Depending on the field type you'll need to work with different objects as you can see in below chapters. Note The samples assume you've loaded a list into the variable mylist . When referencing a field keep in mind that you need to use the field's StaticName . If you've created a field with name Version Tag then the StaticName will be Version_x0020_Tag , so you will be using myItem[\"Version_x0020_Tag\"] to work with the field. Text and Multiline text fields Working with text fields is one of the most common tasks and is easy as shown in the sample. // Create a list item key/value pair collection Dictionary<string, object> values = new Dictionary<string, object>() { { \"Title\", \"Item1\" }, }; // Add a text field values.Add(\"MyField\", \"some text\"); // Persist the item var addedItem = await myList.Items.AddAsync(values); // Update the text field addedItem[\"MyField\"] = \"updated text\"; // Or clear the text field addedItem[\"MyField\"] = \"\"; // Update the item on the server await addedItem.UpdateAsync(); // Using the value when not cleared if (addedItem[\"MyField\"] != null) { addedItem[\"MyField\"] = \"PnP Rocks! \" + addedItem[\"MyField\"].ToString(); } Number and Currency fields Number fields can hold both integer and double values and when working with them you can add either an integer or double value, when processing a field value it's best to cast the number field to the type you need. // Create a list item key/value pair collection Dictionary<string, object> values = new Dictionary<string, object>() { { \"Title\", \"Item1\" }, }; // Add a text field values.Add(\"MyField\", 25); // or values.Add(\"MyField\", 25.123); // Persist the item var addedItem = await myList.Items.AddAsync(values); // Update the text field addedItem[\"MyField\"] = 100; // Or clear the text field addedItem[\"MyField\"] = 0; // Update the item on the server await addedItem.UpdateAsync(); // Using the value if (addedItem[\"MyField\"] is double doubleValue) { // do something with the field value as double addedItem[\"MyField\"] = addedItem[\"MyField\"] + doubleValue; } else { // do something with the field value as integer addedItem[\"MyField\"] = ((int)addedItem[\"MyField\"]) + 20; } Boolean fields Boolean fields are straightforward to use: // Create a list item key/value pair collection Dictionary<string, object> values = new Dictionary<string, object>() { { \"Title\", \"Item1\" }, }; // Add a text field values.Add(\"MyField\", true); // Persist the item var addedItem = await myList.Items.AddAsync(values); // Update the text field addedItem[\"MyField\"] = false; // Update the item on the server await addedItem.UpdateAsync(); // Using the value addedItem[\"MyField\"] = !((bool)addedItem[\"MyField\"]); DateTime fields DateTime are slightly special to work with as a SharePoint site can be configured to use a different timezone then the process running the PnP Core SDK is. When you provide a DateTime value as input you need to provide the value in the current timezone running in the process or as UTC time. PnP Core SDK will, if needed, translate the time to the site's timezone before submitting. When reading DateTime values from the server you'll get time back as local time, unless you've used one of the DatesInUtc property when using the GetItemsByCamlQueryAsync or GetListDataAsStreamAsync approaches to read data. // Create a list item key/value pair collection Dictionary<string, object> values = new Dictionary<string, object>() { { \"Title\", \"Item1\" }, }; // Add a text field values.Add(\"MyField\", DateTime.Now); // Persist the item var addedItem = await myList.Items.AddAsync(values); // Update the DateTime field addedItem[\"MyField\"] = DateTime.Now.Subtract(new TimeSpan(10,0,0,0)); // Or clear the text field addedItem[\"MyField\"] = null; // Update the item on the server await addedItem.UpdateAsync(); // Using the value when not cleared if (addedItem[\"MyField\"] != null) { addedItem[\"MyField\"] = DateTime.Now - ((DateTime)addedItem[\"MyField\"]); } Calculated fields You never set or update calculated fields, you however might use it's output. // Using the value when not cleared if (addedItem[\"MyField\"] != null) { // Cast to the type you need var a = addedItem[\"MyField\"].ToString(); } Choice fields Setting a choice field is quite identical as working with text fields, you set a string value. Only difference is that the string you use to set a value needs to be known value in the list of choices unless you've configured the choice field to allow the user to add values via the FillInChoice property . // Create a list item key/value pair collection Dictionary<string, object> values = new Dictionary<string, object>() { { \"Title\", \"Item1\" }, }; // Add a choice field values.Add(\"MyField\", \"Choice B\"); // Persist the item var addedItem = await myList.Items.AddAsync(values); // Update the choice value addedItem[\"MyField\"] = \"Choice A\"; // Or clear the choice field addedItem[\"MyField\"] = \"\"; // Update the item on the server await addedItem.UpdateAsync(); // Using the value when not cleared if (addedItem[\"MyField\"] != null) { var a = \"My choice was:\" + addedItem[\"MyField\"].ToString(); } Multi choice fields A multi choice field allows a user to select multiple values from the offered choices, so to handle that you're working with a List<string> : // Create a list item key/value pair collection Dictionary<string, object> values = new Dictionary<string, object>() { { \"Title\", \"Item1\" }, }; // Add a multi choice field values.Add(\"MyField\", new List<string> { \"Choice A\", \"Choice B\" } ); // Persist the item var addedItem = await myList.Items.AddAsync(values); // Update the multi choice field addedItem[\"MyField\"] = new List<string> { \"Choice A\", \"Choice B\" , \"Choice C\", \"Choice D\"}; // Or clear the multi choice field addedItem[\"MyField\"] = new List<string>(); // Update the item on the server await addedItem.UpdateAsync(); // Using the value when not cleared if (addedItem[\"MyField\"] != null) { foreach(var choice in (addedItem[\"MyField\"] as List<string>) ) { // do something with the choice } } Url fields Url fields can be used to display a hyperlink with description or show an image from a hyperlink. Working with Url fields involves working with the IFieldUrlValue interface for field setting and the NewFieldUrlValue method on the IField or NewFieldUrlValue method on the IListItem methods to instantiate a FieldUrlValue class. // Add a url field IField myField = await myList.Fields.AddUrlAsync(\"MyField\", new FieldUrlOptions() { Group = \"Custom Fields\", AddToDefaultView = true, }); // Create a list item key/value pair collection Dictionary<string, object> values = new Dictionary<string, object>() { { \"Title\", \"Item1\" }, }; // Add a url field values.Add(\"MyField\", myField.NewFieldUrlValue(\"https://aka.ms/m365pnp\", \"PnP Rocks!\")); // Persist the item var addedItem = await myList.Items.AddAsync(values); // Update the url field (addedItem[\"MyField\"] as IFieldUrlValue).Url = \"https://aka.ms/pnp/coresdk\"; // Or clear the url field (addedItem[\"MyField\"] as IFieldUrlValue).Url = \"\"; (addedItem[\"MyField\"] as IFieldUrlValue).Url = \"\"; // Update the item on the server await addedItem.UpdateAsync(); // Using the value when not cleared if (addedItem[\"MyField\"] != null) { string urlToUse = (addedItem[\"MyField\"] as IFieldUrlValue).Url; } User fields User fields hold a value to a user or group. Working with user fields involves working with the IFieldUserValue interface for field setting and the NewFieldUserValue method on the IField or NewFieldUserValue method on the IListItem methods to instantiate a FieldUserValue class. // Add a user field IField myField = await myList.Fields.AddUserAsync(\"MyField\", new FieldUserOptions() { Group = \"Custom Fields\", AddToDefaultView = true, }); // Create a list item key/value pair collection Dictionary<string, object> values = new Dictionary<string, object>() { { \"Title\", \"Item1\" }, }; // Ensure a user can be used on a site var myUser = await context.Web.EnsureUserAsync(\"ann@contoso.onmicrosoft.com\"); // Add a user field values.Add(\"MyField\", myField.NewFieldUserValue(myUser)); // Persist the item var addedItem = await myList.Items.AddAsync(values); // Update the url field (addedItem[\"MyField\"] as IFieldUserValue).Principal = await context.Web.EnsureUserAsync(\"Everyone except external users\"); // Or clear the url field addedItem[\"MyField\"] = null; // Update the item on the server await addedItem.UpdateAsync(); // Using the value when not cleared if (addedItem[\"MyField\"] != null) { // Get the stored user lookup id value int userId = (addedItem[\"MyField\"] as IFieldUserValue).LookupId; } Multi user fields Working with multi user fields builds on top of working with user fields, you still use the IFieldUserValue interface for field setting and the NewFieldUserValue method on the IField or NewFieldUserValue method on the IListItem methods, but since you need to store multiple users you need to manage them via an IFieldValueCollection . Note It's important to create an IFieldValueCollection (e.g. via IField.NewFieldValueCollection() ) per IListItem you're adding as the IFieldValueCollection handles the change tracking for that specific IListItem . // Add a multi user field IField myField = await myList.Fields.AddUserMultiAsync(\"MyField\", new FieldUserOptions() { Group = \"Custom Fields\", AddToDefaultView = true, }); // Create a list item key/value pair collection Dictionary<string, object> values = new Dictionary<string, object>() { { \"Title\", \"Item1\" }, }; // Ensure a user can be used on a site var myUser1 = await context.Web.EnsureUserAsync(\"ann@contoso.onmicrosoft.com\"); var myUser2 = await context.Web.EnsureUserAsync(\"pat@contoso.onmicrosoft.com\"); // Add a multi user field var userCollection = myField.NewFieldValueCollection(); userCollection.Values.Add(myField.NewFieldUserValue(myUser1)); userCollection.Values.Add(myField.NewFieldUserValue(myUser2)); values.Add(\"MyField\", userCollection); // Persist the item var addedItem = await myList.Items.AddAsync(values); // Update the multi user field var myUser3 = await context.Web.EnsureUserAsync(\"bob@contoso.onmicrosoft.com\"); (addedItem[\"MyField\"] as IFieldValueCollection).Values.Add(myField.NewFieldUserValue(myUser3)); // Or clear the multi user field addedItem[\"MyField\"] = (addedItem[\"MyField\"] as IFieldValueCollection).Values.Clear(); // Update the item on the server await addedItem.UpdateAsync(); // Using the value when not cleared if (addedItem[\"MyField\"] != null) { foreach(IFieldUserValue user in (addedItem[\"MyField\"] as IFieldValueCollection).Values) { // Get the stored user lookup id value int userId = user.LookupId; } } Lookup fields Lookup fields point to another list item in another list. Working with lookup fields involves working with the IFieldLookupValue interface for field setting and the NewFieldLookupValue method on the IField or NewFieldLookupValue method on the IListItem methods to instantiate a FieldLookupValue class. IList sitePages = await context.Web.Lists.GetByTitleAsync(\"Site Pages\"); // Add a lookup field IField myField = await myList.Fields.AddLookupAsync(\"MyField\", new FieldLookupOptions() { Group = \"Custom Fields\", AddToDefaultView = true, LookupListId = sitePages.Id, LookupFieldName = \"Title\", }); // Create a list item key/value pair collection Dictionary<string, object> values = new Dictionary<string, object>() { { \"Title\", \"Item1\" }, }; // Add a lookup field to an item in the connected lookup list with id 4 values.Add(\"MyField\", myField.NewFieldLookupValue(4)); // Persist the item var addedItem = await myList.Items.AddAsync(values); // Update the lookup field (addedItem[\"MyField\"] as IFieldLookupValue).LookupId = 8; // Or clear the lookup field addedItem[\"MyField\"] = null; // Update the item on the server await addedItem.UpdateAsync(); // Using the value when not cleared if (addedItem[\"MyField\"] != null) { // Get the stored user lookup id value int userId = (addedItem[\"MyField\"] as IFieldLookupValue).LookupId; } Multi lookup fields Working with multi lookup fields builds on top of working with lookup fields, you still use the IFieldLookupValue interface for field setting and the NewFieldLookupValue method on the IField or NewFieldLookupValue method on the IListItem methods, but since you need to store multiple lookups you need to manage them via an IFieldValueCollection . Note It's important to create an IFieldValueCollection (e.g. via IField.NewFieldValueCollection() ) per IListItem you're adding as the IFieldValueCollection handles the change tracking for that specific IListItem . IList sitePages = await context.Web.Lists.GetByTitleAsync(\"Site Pages\"); // Add a multi lookup field IField myField = await myList.Fields.AddLookupMultiAsync(\"MyField\", new FieldLookupOptions() { Group = \"Custom Fields\", AddToDefaultView = true, LookupListId = sitePages.Id, LookupFieldName = \"Title\", }); // Create a list item key/value pair collection Dictionary<string, object> values = new Dictionary<string, object>() { { \"Title\", \"Item1\" }, }; // Add a multi user field var lookupCollection = myField.NewFieldValueCollection(); lookupCollection.Values.Add(myField.NewFieldLookupValue(4)); lookupCollection.Values.Add(myField.NewFieldLookupValue(8)); values.Add(\"MyField\", lookupCollection); // Persist the item var addedItem = await myList.Items.AddAsync(values); // Update the multi lookup field (addedItem[\"MyField\"] as IFieldValueCollection).Values.Add(myField.NewFieldLookupValue(12)); // Or clear the multi user field addedItem[\"MyField\"] = (addedItem[\"MyField\"] as IFieldValueCollection).Values.Clear(); // Update the item on the server await addedItem.UpdateAsync(); // Using the value when not cleared if (addedItem[\"MyField\"] != null) { foreach(IFieldLookupValue lookup in (addedItem[\"MyField\"] as IFieldValueCollection).Values) { // Get the stored lookup id value int lookupId = lookup.LookupId; } } Taxonomy fields Taxonomy fields make it possible to select a value from a term set in your tenants managed metadata system. This involves working with the IFieldTaxonomyValue interface for field setting and the NewFieldTaxonomyValue method on the IField or NewFieldTaxonomyValue method on the IListItem methods to instantiate a FieldTaxonomyValue class. // Add a taxonomy field IField myField = await myList.Fields.AddTaxonomyAsync(\"MyField\", new FieldTaxonomyOptions() { Group = \"Custom Fields\", AddToDefaultView = true, TermStoreId = new Guid(\"437b86fc-1258-45a9-85ea-87a29156ce3c\"), TermSetId = new Guid(\"d50ec969-cb27-4a49-839f-3c25d1d607d5\") }); // Create a list item key/value pair collection Dictionary<string, object> values = new Dictionary<string, object>() { { \"Title\", \"Item1\" }, }; // Add a taxonomy field to a term with the given id and label \"Dutch\" values.Add(\"MyField\", myField.NewFieldTaxonomyValue(new Guid(\"108b34b1-87af-452d-be13-881a29477965\", \"Dutch\"))); // Persist the item var addedItem = await myList.Items.AddAsync(values); // Update the taxonomy field (addedItem[\"MyField\"] as IFieldTaxonomyValue).TermId = new Guid(\"8246e3c1-19ea-4b22-8ae3-df9cbc150a74\"); (addedItem[\"MyField\"] as IFieldTaxonomyValue).Label = \"English\"; // Or clear the taxonomy field addedItem[\"MyField\"] = null; // Update the item on the server await addedItem.UpdateAsync(); // Using the value when not cleared if (addedItem[\"MyField\"] != null) { // Get the stored term id value Guid termId = (addedItem[\"MyField\"] as IFieldTaxonomyValue).TermId; } Multi taxonomy fields Working with multi taxonomy fields builds on top of working with taxonomy fields, you still use the IFieldTaxonomyValue interface for field setting and the NewFieldTaxonomyValue method on the IField or NewFieldTaxonomyValue method on the IListItem methods, but since you need to store multiple taxonomy fields you need to manage them via an IFieldValueCollection . Note It's important to create an IFieldValueCollection (e.g. via IField.NewFieldValueCollection() ) per IListItem you're adding as the IFieldValueCollection handles the change tracking for that specific IListItem . // Add a multi taxonomy field IField myField = await myList.Fields.AddTaxonomyMultiAsync(\"MyField\", new FieldTaxonomyOptions() { Group = \"Custom Fields\", AddToDefaultView = true, TermStoreId = new Guid(\"437b86fc-1258-45a9-85ea-87a29156ce3c\"), TermSetId = new Guid(\"d50ec969-cb27-4a49-839f-3c25d1d607d5\") }); // Create a list item key/value pair collection Dictionary<string, object> values = new Dictionary<string, object>() { { \"Title\", \"Item1\" }, }; // Add a taxonomy field to a term with the given id and label \"Dutch\" values.Add(\"MyField\", myField.NewFieldTaxonomyValue(new Guid(\"108b34b1-87af-452d-be13-881a29477965\", \"Dutch\"))); var taxonomyCollection = myField.NewFieldValueCollection(); taxonomyCollection.Values.Add(myField.NewFieldTaxonomyValue(new Guid(\"108b34b1-87af-452d-be13-881a29477965\", \"Dutch\"))); taxonomyCollection.Values.Add(myField.NewFieldTaxonomyValue(new Guid(\"8246e3c1-19ea-4b22-8ae3-df9cbc150a74\", \"English\"))); values.Add(\"MyField\", taxonomyCollection); // Persist the item var addedItem = await myList.Items.AddAsync(values); // Update the multi taxonomy field (addedItem[\"MyField\"] as IFieldValueCollection).Values.Add(myField.NewFieldTaxonomyValue(new Guid(\"3f773e87-24c3-4d0d-a07f-96eb0c1e905e\", \"French\"))); // Or clear the multi taxonomy field addedItem[\"MyField\"] = (addedItem[\"MyField\"] as IFieldValueCollection).Values.Clear(); // Update the item on the server await addedItem.UpdateAsync(); // Using the value when not cleared if (addedItem[\"MyField\"] != null) { foreach(IFieldTaxonomyValue taxField in (addedItem[\"MyField\"] as IFieldValueCollection).Values) { // Get the stored term id value Guid termId = taxField.TermId; } }"
  },
  "using-the-sdk/listitems-intro.html": {
    "href": "using-the-sdk/listitems-intro.html",
    "title": "Working with list items | PnP Core SDK",
    "keywords": "Working with list items List items are a key part of SharePoint and reading, creating, updating and deleting list items is commonly used. In this chapter we'll explain how you use the PnP Core SDK to work with list items. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with list items } Reading list items The PnP Core SDK supports multiple ways to read list items and what approach to use depends on your list size and your use case. For a large list you need to use a paged approach and it's also recommended to write a query that only returns the items you really need versus loading all list items. When writing custom queries you also should consider only returning the list fields you need in your application, the lesser rows and fields to return the faster the response will come from the server. Important When processing list item responses from the server the SDK will translate the server response into a easy to use field value classes in case of complex field types. This feature depends on the List field information being present, you can load your list field information once when you get load your list like ( var myList = context.Web.Lists.GetByTitle(\"My List\", p => p.Title, p => p.Fields.QueryProperties(p => p.InternalName, p => p.FieldTypeKind, p => p.TypeAsString, p => p.Title)); ). The minimal required field properties are InternalName , FieldTypeKind , TypeAsString and Title . Use below information to help pick the best option for reading list items. No need to read 'system properties' like FileLeafRef, FileDirRef and you've no need to filter list items Requirements Recommended approach List item count <= 100 Option A : expand the items via a Get or Load method List item count > 100 Option B : iterate over the list items using implicit paging You need to read 'system properties' like FileLeafRef, FileDirRef or you need to filter list items or you want to define the returned fields Requirements Recommended approach You want to also 'expand' list item collections like RoleAssignments Option C : use a CAML query via the LoadItemsByCamlQuery methods You want to have more details on the list item properties (e.g. author name instead of only the author id) Option D : use a CAML query via the ListDataAsStream methods A. Getting list items (max 100 items) If you simply want to load all list items in a small list (< 100 items) you load the Items property of your list. // Assume the fields where not yet loaded, so loading them with the list. // Also expand the items when loading the list var myList = context.Web.Lists.GetByTitle(\"My List\", p => p.Title, p => p.Items, p => p.Fields.QueryProperties(p => p.InternalName, p => p.FieldTypeKind, p => p.TypeAsString, p => p.Title)); // Get the item with title \"Item1\" var addedItem = myList.Items.AsRequested().FirstOrDefault(p => p.Title == \"Item1\"); // Iterate over the retrieved list items foreach (var listItem in myList.Items.AsRequested()) { // Do something with the list item if (listItem[\"MyStatus\"].ToString() == \"Pending\") { // take action } } If you'd like to load list item properties then this is possible via QueryProperties : // Assume the fields where not yet loaded, so loading them with the list // Also expand the items when loading the list, including specific item properties var myList = context.Web.Lists.GetByTitle(\"My List\", p => p.Title, p => p.Items.QueryProperties(p => p.RoleAssignments.QueryProperties(p => p.PrincipalId, p => p.RoleDefinitions)), p => p.Fields.QueryProperties(p => p.InternalName, p => p.FieldTypeKind, p => p.TypeAsString, p => p.Title)); Note When list items are loaded in this manner SharePoint Online will only return 100 items, to get more you'll need to use a paged approach When referencing a field keep in mind that you need to use the field's StaticName . If you've created a field with name Version Tag then the StaticName will be Version_x0020_Tag , so you will be using myItem[\"Version_x0020_Tag\"] to work with the field. When referencing a field ensure to use the correct field name casing: version_x0020_tag is not the same as Version_x0020_Tag . Filtering on the HasUniqueRoleAssignments and FileSystemObjectType fields is not allowed by SharePoint. B. Getting list items via paging (no item limit) If your list contains more than 100 items and you don't have a need to specify a query to limit the returned list items then iterating over the list item collection is the recommended model as that will automatically page the list items using a configurable page size: // Assume the fields where not yet loaded, so loading them with the list var myList = await context.Web.Lists.GetByTitleAsync(\"My List\", p => p.Title, p => p.Fields.QueryProperties(p => p.InternalName, p => p.FieldTypeKind, p => p.TypeAsString, p => p.Title)); // Do a paged retrieval of the list items await foreach(var listItem in myList.Items) { // Do something with the list item if (listItem[\"MyStatus\"].ToString() == \"Pending\") { // take action } } If you'd like to load list item properties then this is possible via QueryProperties : // Assume the fields where not yet loaded, so loading them with the list var myList = context.Web.Lists.GetByTitle(\"My List\", p => p.Title, p => p.Fields.QueryProperties(p => p.InternalName, p => p.FieldTypeKind, p => p.TypeAsString, p => p.Title)); // Do a paged retrieval (non async sample) of the list items with additional collection loads foreach(var listItem in myList.Items.QueryProperties( p => p.RoleAssignments.QueryProperties(p => p.PrincipalId, p => p.RoleDefinitions)) { // Do something with the list item if (listItem[\"MyStatus\"].ToString() == \"Pending\") { // Do something with the list item and the per // item loaded RoleAssignments and RoleDefinitions } } Note When referencing a field keep in mind that you need to use the field's StaticName . If you've created a field with name Version Tag then the StaticName will be Version_x0020_Tag , so you will be using myItem[\"Version_x0020_Tag\"] to work with the field. When referencing a field ensure to use the correct field name casing: version_x0020_tag is not the same as Version_x0020_Tag . Filtering on the HasUniqueRoleAssignments and FileSystemObjectType fields is not allowed by SharePoint. C. Getting list items via the LoadItemsByCamlQuery approach SharePoint CAML queries allow you to express a filter when loading list item data and scope down the loaded fields to the ones you need. You can use call the LoadItemsByCamlQueryAsync method on an IList for this purpose. When using this method you can either provide the CAML query directly or use the CamlQueryOptions class for more fine-grained control. If you use this class you typically would use the ViewXml property , but also FolderServerRelativeUrl is used a lot to scope the query to given folder in the list. // Assume the fields where not yet loaded, so loading them with the list var myList = context.Web.Lists.GetByTitle(\"My List\", p => p.Title, p => p.Fields.QueryProperties(p => p.InternalName, p => p.FieldTypeKind, p => p.TypeAsString, p => p.Title)); // Build a query that only returns the Title field for items where the Title field starts with \"Item1\" string viewXml = @\"<View> <ViewFields> <FieldRef Name='Title' /> <FieldRef Name='FileRef' /> </ViewFields> <Query> <Where> <BeginsWith> <FieldRef Name='Title'/> <Value Type='text'>Item1</Value> </BeginsWith> </Where> </Query> <OrderBy Override='TRUE'><FieldRef Name= 'ID' Ascending= 'FALSE' /></OrderBy> </View>\"; // Execute the query await myList.LoadItemsByCamlQueryAsync(new CamlQueryOptions() { ViewXml = viewXml, DatesInUtc = true }, p => p.RoleAssignments.QueryProperties(p => p.PrincipalId, p => p.RoleDefinitions)); // Iterate over the retrieved list items foreach (var listItem in myList.Items.AsRequested()) { // Do something with the list item and the per // item loaded RoleAssignments and RoleDefinitions } Note When referencing a field keep in mind that you need to use the field's StaticName . If you've created a field with name Version Tag then the StaticName will be Version_x0020_Tag , so you will be using myItem[\"Version_x0020_Tag\"] to work with the field. When referencing a field ensure to use the correct field name casing: version_x0020_tag is not the same as Version_x0020_Tag . Filtering on the HasUniqueRoleAssignments field is not allowed by SharePoint. Using paging with LoadItemsByCamlQuery By setting a row limit in the CAML query combined with using the the PagingInfo attribute of the CamlQueryOptions class you can use CAML queries to load data in a paged manner. Below snippet loads all pages in memory and then iterates over the loaded items: // Assume the fields where not yet loaded, so loading them with the list var myList = context.Web.Lists.GetByTitle(\"My List\", p => p.Title, p => p.Fields.QueryProperties(p => p.InternalName, p => p.FieldTypeKind, p => p.TypeAsString, p => p.Title)); int pageSize = 500; // Filter on files and load 'system' properties like FileRef string viewXml = @$\"<View> <ViewFields> <FieldRef Name='Title' /> <FieldRef Name='FileRef' /> <FieldRef Name='FileLeafRef' /> <FieldRef Name='FSObjType'/> <FieldRef Name='File_x0020_Size' /> </ViewFields> <Query> <Where> <Eq> <FieldRef Name='FSObjType'/> <Value Type='Integer'>0</Value> </Eq> </Where> </Query> <OrderBy Override='TRUE'><FieldRef Name= 'ID' Ascending= 'FALSE' /></OrderBy> <RowLimit>{pageSize}</RowLimit> </View>\"; // Load all the needed data using paged requests bool paging = true; string nextPage = null; int pages = 0; while (paging) { // Execute the query await myList.LoadItemsByCamlQueryAsync(new CamlQueryOptions() { ViewXml = viewXml, DatesInUtc = true, PagingInfo = nextPage }, // Load list item collections (e.g. RoleAssignments) p => p.RoleAssignments.QueryProperties(p => p.PrincipalId, p => p.RoleDefinitions.QueryProperties(rd => rd.Id, rd => rd.Name)), // Load FieldValuesAsText to get access to 'system' properties p => p.FieldValuesAsText, // Load the HasUniqueRoleAssignments property p => p.HasUniqueRoleAssignments); pages++; if (myList.Items.Length == pages * pageSize) { nextPage = $\"Paged=TRUE&p_ID={myList.Items.AsRequested().Last().Id}\"; } else { paging = false; } } // Iterate over ALL the retrieved list items foreach (var listItem in myList.Items.AsRequested()) { // Do something with the list item and the per // item loaded RoleAssignments and RoleDefinitions var fileSize = listItem.FieldValuesAsText[\"File_x005f_x0020_x005f_Size\"]; } Note If you're query is ordered by one or more fields these fields also have to specified in the PagingInfo, e.g. if ordered on Title the PagingInfo would be $\"Paged=TRUE&p_ID={list2.Items.AsRequested().Last().Id}&p_Title=${list2.Items.AsRequested().Last().Title}\" . If you want to load the previous page you also need to add &PagedPrev=TRUE . When using the LoadListDataAsStream methods the paging info is automatically returned. Sometimes loading all pages in memory is not what you need (e.g. due to memory/performance constraints) and you'd rather want to read a page, process it and then read the next page. This can be done by clearing the loaded items collection while paging as shown in this sample: bool paging = true; string nextPage = null; int pages = 0; int totalItemsLoaded = 0; while (paging) { // Clear the previous page (if any) myList.Items.Clear(); // Execute the query, this populates a page of list items await myList.LoadItemsByCamlQueryAsync(new CamlQueryOptions() { ViewXml = viewXml, DatesInUtc = true, PagingInfo = nextPage }, // Load list item collections (e.g. RoleAssignments) p => p.RoleAssignments.QueryProperties(p => p.PrincipalId, p => p.RoleDefinitions.QueryProperties(rd => rd.Id, rd => rd.Name)), // Load FieldValuesAsText to get access to 'system' properties p => p.FieldValuesAsText, // Load the HasUniqueRoleAssignments property p => p.HasUniqueRoleAssignments); pages++; totalItemsLoaded = totalItemsLoaded + myList.Items.Length; if (totalItemsLoaded == pages * pageSize) { nextPage = $\"Paged=TRUE&p_ID={myList.Items.AsRequested().Last().Id}\"; } else { paging = false; } // Iterate over the retrieved page of list items foreach (var listItem in myList.Items.AsRequested()) { } } D. Using the ListDataAsStream approach Using the LoadListDataAsStreamAsync method gives you the most control over how to query the list and what data to return. Using this method is similar to the above described LoadItemsByCamlQueryAsync method as you typically specify a CAML query when using this method. To configure the input of this method you need to use the RenderListDataOptions class . Defining the CAML query to run can be done via the ViewXml property and telling what type of data to return can be done via the RenderOptions property. // Assume the fields where not yet loaded, so loading them with the list var myList = context.Web.Lists.GetByTitle(\"My List\", p => p.Title, p => p.Fields.QueryProperties(p => p.InternalName, p => p.FieldTypeKind, p => p.TypeAsString, p => p.Title)); // Build a query that only returns the Title field for the top 5 items where the Title field starts with \"Item1\" string viewXml = @\"<View> <ViewFields> <FieldRef Name='Title' /> <FieldRef Name='FileLeafRef' /> </ViewFields> <Query> <Where> <BeginsWith> <FieldRef Name='Title'/> <Value Type='text'>Item1</Value> </BeginsWith> </Where> </Query> <OrderBy Override='TRUE'><FieldRef Name= 'ID' Ascending= 'FALSE' /></OrderBy> <RowLimit>5</RowLimit> </View>\"; // Execute the query var output = await myList.LoadListDataAsStreamAsync(new RenderListDataOptions() { ViewXml = viewXml, RenderOptions = RenderListDataOptionsFlags.ListData }); // If needed do something with the output, e.g. (int)result[\"LastRow\"] tells you the last loaded row // Iterate over the retrieved list items foreach (var listItem in myList.Items.AsRequested()) { // Do something with the list item } Note When referencing a field keep in mind that you need to use the field's StaticName . If you've created a field with name Version Tag then the StaticName will be Version_x0020_Tag , so you will be using myItem[\"Version_x0020_Tag\"] to work with the field. When referencing a field ensure to use the correct field name casing: version_x0020_tag is not the same as Version_x0020_Tag . Filtering on the HasUniqueRoleAssignments field is not allowed by SharePoint. Using paging with ListDataAsStream // Assume the fields where not yet loaded, so loading them with the list var myList = context.Web.Lists.GetByTitle(\"My List\", p => p.Title, p => p.Fields.QueryProperties(p => p.InternalName, p => p.FieldTypeKind, p => p.TypeAsString, p => p.Title)); // Build a query that only returns the Title field for the first 20 items where the Title field starts with \"Item1\" string viewXml = @\"<View> <ViewFields> <FieldRef Name='Title' /> <FieldRef Name='FileLeafRef' /> </ViewFields> <Query> <Where> <BeginsWith> <FieldRef Name='Title'/> <Value Type='text'>Item1</Value> </BeginsWith> </Where> </Query> <OrderBy Override='TRUE'><FieldRef Name= 'ID' Ascending= 'FALSE' /></OrderBy> <RowLimit Paged='TRUE'>20</RowLimit> </View>\"; // Load all the needed data using paged requests bool paging = true; string nextPage = null; while (paging) { var output = await pagesLibrary.LoadListDataAsStreamAsync(new RenderListDataOptions() { ViewXml = viewXml, RenderOptions = RenderListDataOptionsFlags.ListData, Paging = nextPage ?? null, }).ConfigureAwait(false); if (output.ContainsKey(\"NextHref\")) { nextPage = output[\"NextHref\"].ToString().Substring(1); } else { paging = false; } } // Iterate over the retrieved list items foreach (var listItem in myList.Items.AsRequested()) { // Do something with the list item } Sometimes loading all pages in memory is not what you need (e.g. due to memory/performance constraints) and you'd rather want to read a page, process it and then read the next page. This can be done by clearing the loaded items collection while paging as shown in this sample: // Load all the needed data using paged requests bool paging = true; string nextPage = null; while (paging) { // Clear the previous page (if any) myList.Items.Clear(); // Execute the query, this populates a page of list items var output = await pagesLibrary.LoadListDataAsStreamAsync(new RenderListDataOptions() { ViewXml = viewXml, RenderOptions = RenderListDataOptionsFlags.ListData, Paging = nextPage ?? null, }).ConfigureAwait(false); if (output.ContainsKey(\"NextHref\")) { nextPage = output[\"NextHref\"].ToString().Substring(1); } else { paging = false; } // Iterate over the retrieved page of list items foreach (var listItem in myList.Items.AsRequested()) { } } Adding list items Adding list items is done using one of the Add methods on the ListItemCollection class , e.g. the AddAsync method and requires two steps: You fill a Dictionary<string, object> with fields and their needed value You send the assembled data to the server via one of the Add methods Note Below examples use simple fields like a Text and Number field, check out the working with complex list item fields article to learn more about how to use complex fields (e.g. Taxonomy, User,...) with list items. // Fill a dictionary with fields and their value Dictionary<string, object> item = new Dictionary<string, object>() { { \"Title\", \"Item1\" }, { \"Field A\", 25 } }; // Persist the item var addedItem = await myList.Items.AddAsync(item); When you add list items you quite often need to add multiple items and the best way to do that is using the Batch methods (e.g. AddBatchAsync ), the lesser server roundtrips the faster your code will be. // Add 20 items to the list for (int i = 0; i < 20; i++) { Dictionary<string, object> values = new Dictionary<string, object> { { \"Title\", $\"Item {i}\" } }; // Use the AddBatch method to add the request to the current batch await myList.Items.AddBatchAsync(values); } // Execute all added batch requests as a single request to the server await context.ExecuteAsync(); Note When referencing a field keep in mind that you need to use the field's StaticName . If you've created a field with name Version Tag then the StaticName will be Version_x0020_Tag , so you will be using myItem[\"Version_x0020_Tag\"] to work with the field. When referencing a field ensure to use the correct field name casing: version is not the same as Version . Updating list items Updating a list item comes down to updating the field values followed by calling an IListItem Update method such as UpdateAsync . Depending on how you want to do the update you do have alternative methods: Methods Description Update, UpdateAsync Regular update, this will result in a new version being created and the modified and editor list item fields will be updated SystemUpdate, SystemUpdateAsync Updates the item without creating a new version and without updating the modified and editor list item fields UpdateOverWriteVersion, UpdateOverWriteVersionAsync Updates the item without creating a new version and the modified and editor list item fields will be updated Note Below examples use simple fields like a Text and Number field, check out the working with complex list item fields article to learn more about how to use complex fields (e.g. Taxonomy, User,...) with list items. // Fill a dictionary with fields and their value Dictionary<string, object> item = new Dictionary<string, object>() { { \"Title\", \"Item1\" }, { \"Field A\", 25 } }; // Persist the item var addedItem = await myList.Items.AddAsync(item); // Update the item values addedItem[\"Field A\"] = 100; // Update the item in SharePoint await addedItem.UpdateAsync(); Note When referencing a field keep in mind that you need to use the field's StaticName . If you've created a field with name Version Tag then the StaticName will be Version_x0020_Tag , so you will be using myItem[\"Version_x0020_Tag\"] to work with the field. When referencing a field ensure to use the correct field name casing: version is not the same as Version . Updating the list item Author, Editor, Created and Modified system properties A common request is to change the list item Author , Editor , Created and Modified system properties, which is allowed via the UpdateOverWriteVersion methods. Note The Azure AD application you're using must have the Sites.FullControl.All permission to make updating the Author , Editor , Created and Modified system properties work. // Load the list var myList = context.Web.Lists.GetByTitle(\"My List\", p => p.Title, p => p.Fields.QueryProperties( p => p.InternalName, p => p.FieldTypeKind, p => p.TypeAsString, p => p.Title)); // Grab first item var firstItem = myList.Items.AsRequested().FirstOrDefault(); if (firstItem != null) { // Load the Author and Editor fields var author = myList.Fields.AsRequested().FirstOrDefault(p => p.InternalName == \"Author\"); var editor = myList.Fields.AsRequested().FirstOrDefault(p => p.InternalName == \"Editor\"); // Load the user to set as Author/Editor var currentUser = await context.Web.GetCurrentUserAsync(); // Define the new date for Created/Modified var newDate = new DateTime(2020, 10, 20); // Update the properties firstItem.Values[\"Author\"] = author.NewFieldUserValue(currentUser); firstItem.Values[\"Editor\"] = editor.NewFieldUserValue(currentUser); firstItem.Values[\"Created\"] = newDate; firstItem.Values[\"Modified\"] = newDate; // Persist the changes await firstItem.UpdateOverwriteVersionAsync(); } Deleting list items Using the Delete methods like DeleteAsync or DeleteBatchAsync you can delete one or more list items in a single server roundtrip. Batching is preferred if you need to delete multiple list items. // Assume the fields where not yet loaded, so loading them with the list var myList = context.Web.Lists.GetByTitle(\"My List\", p => p.Title, p => p.Items, p => p.Fields.QueryProperties(p => p.InternalName, p => p.FieldTypeKind, p => p.TypeAsString, p => p.Title)); // Iterate over the retrieved list items foreach (var listItem in myList.Items.AsRequested()) { // Delete all the items in \"My List\" by adding them to a batch await listItem.DeleteBatchAsync(); } // Execute the batch await context.ExecuteAsync(); Getting changes for a list item You can use the GetChanges methods on an IListItem to list all the changes. See Enumerating changes that happened in SharePoint to learn more. Getting list item versions Depending on the list versioning settings an IListItem can have multiple versions. If you want to enumerate these versions you need to first load the Versions property: var myList = await context.Web.Lists.GetByTitleAsync(\"My List\"); // Load list item with id 1 var first = await myList.Items.GetByIdAsync(1, li => li.All, li => li.Versions); // Iterate over the retrieved list items foreach (var version in first.Versions.AsRequested()) { // do something with the file version } Getting the file of a list item A document in a document library is an IListItem holding the file metadata with an IFile holding the actual file. If you have an IListItem you can load the connected file via File property: var myList = await context.Web.Lists.GetByTitleAsync(\"My List\"); // Load list item with id 1 with it's file var first = await myList.Items.GetByIdAsync(1, li => li.All, li => li.File); // Download the content of the actual file byte[] downloadedContentBytes = await first.File.GetContentBytesAsync(); Getting the file version of a list item version If there's a file for the list item then there's also a version of that file for each list item version. To access that file version you need to load the FileVersion property on the IListItemVersion instance. var myList = await context.Web.Lists.GetByTitleAsync(\"My List\"); // Load list item with id 1, also load the FileVersion var first = await myList.Items.GetByIdAsync(1, li => li.All, li => li.Versions.QueryProperties(p => p.FileVersion)); // Iterate over the retrieved list items foreach (var version in first.Versions.AsRequested()) { // do something with the file version, e.g. download it Stream downloadedContentStream = await version.FileVersion.GetContentAsync(); downloadedContentStream.Seek(0, SeekOrigin.Begin); // Get string from the content stream string downloadedContent = await new StreamReader(downloadedContentStream).ReadToEndAsync(); }"
  },
  "using-the-sdk/listitems-social.html": {
    "href": "using-the-sdk/listitems-social.html",
    "title": "Commenting list item fields | PnP Core SDK",
    "keywords": "Commenting list item fields List items can have comments and replies in SharePoint. This chapter explains how to enable or disable list item commenting and how to work with comments and replies. Note Some of the samples assume you've loaded a list into the variable mylist , the code that shows how to do so is listed in the first examples. Enabling/Disabling list item comments List items can have comments in SharePoint and using the SetCommentsDisabledAsync method you can turn off commenting for a given list item. This method goes hand in hand with the AreCommentsDisabledAsync method to get the current commenting status of a list item. // Assume the fields where not yet loaded, so loading them with the list var myList = context.Web.Lists.GetByTitle(\"My List\", p => p.Title, p => p.Items, p => p.Fields.QueryProperties(p => p.InternalName, p => p.FieldTypeKind, p => p.TypeAsString, p => p.Title)); // Get the item with title \"Item1\" var addedItem = myList.Items.AsRequested().FirstOrDefault(p => p.Title == \"Item1\"); // Check if commenting was turned off if (!(await addedItem.AreCommentsDisabledAsync())) { // Turn commenting of the list item on await addedItem.SetCommentsDisabledAsync(false); } Getting comments To work with list item comments you first need to get a reference to the list item comments collection. Once you've done that, you can enumerate the existing comments, add new comments or delete comments. Below code snippet shows how the comments can be enumerated. // Assume the fields where not yet loaded, so loading them with the list var myList = context.Web.Lists.GetByTitle(\"My List\", p => p.Title, p => p.Items, p => p.Fields.QueryProperties(p => p.InternalName, p => p.FieldTypeKind, p => p.TypeAsString, p => p.Title)); // Get the item with title \"Item1\" var myItem = myList.Items.AsRequested().FirstOrDefault(p => p.Title == \"Item1\"); // Get the comments for this list item var comments = await myItem.GetCommentsAsync(); // Loop over the comments foreach(var comment in comments.AsRequested()) { // Do something with the comment } Adding a comment Once you've load a comments collection via one of the GetComments methods you can add new comments or delete comments. // Get the comments for this list item var comments = await myItem.GetCommentsAsync(); // Add a comment var comment = await comments.AddAsync(\"this is great\"); Adding a reply to a comment Comments can also have replies and since the collection of replies is similar to the collections of comments to code to add a reply is the same: // Get the comments for this list item var comments = await myItem.GetCommentsAsync(); // Add a comment var comment = await comments.AddAsync(\"this is great\"); // Add a reply to the comment var reply = await comment.Replies.AddAsync(\"yes this is great!\"); Removing a comment or reply Once you've load a comments collection via one of the GetComments methods you can delete comments and/or their replies using one of the Delete methods. // Load the comments with replies comments = await myItem.GetCommentsAsync(p => p.Author, p => p.Text, p => p.Replies); // Get first comment var firstComment = comments.AsRequested().First(); // Get first reply on the first comment var firstCommentReply = firstComment.Replies.AsRequested().First(); // Delete the reply await firstCommentReply.DeleteAsync(); // Delete the comment await firstComment.DeleteAsync(); Liking\\Unliking comments and replies A comment or reply can be liked by the authenticated user, this is done using one of the Like or Unlike methods on either the comment or reply. // Load the comments with replies comments = await myItem.GetCommentsAsync(p => p.Author, p => p.Text, p => p.Replies); // Get first comment var firstComment = comments.AsRequested().First(); // Like the comment await firstComment.LikeAsync(); // Unlike the comment await firstComment.UnlikeAsync(); // Get first reply on the first comment var firstCommentReply = firstComment.Replies.AsRequested().First(); // Like the reply await firstCommentReply.LikeAsync(); // Unlike the reply await firstCommentReply.UnlikeAsync(); Enumerating likes on comments and replies A comment or reply can be liked by multiple persons and you can enumerate the \"likers\" by loading the LikedBy collection of a comment or reply. // Load the comments with replies comments = await myItem.GetCommentsAsync(p => p.Author, p => p.Text, p => p.Replies, p => p.LikedBy); // Get first comment var firstComment = comments.AsRequested().First(); // Enumerate the likes on this comment foreach (var like on firstComment.LikedBy.AsRequested()) { // do something with the comment like information }"
  },
  "using-the-sdk/lists-intro.html": {
    "href": "using-the-sdk/lists-intro.html",
    "title": "Working with lists | PnP Core SDK",
    "keywords": "Working with lists All data in SharePoint lives in lists: list items belong is lists and documents belong in document libraries which are based upon lists. Being able to find a list is needed to work with the list content (items, documents) and adding/updating lists is often used by apps working with SharePoint. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with lists } Since a list can be seen as a container defining a schema (fields) and having content (list items, documents, folders or pages) most of the relevant documentation lives elsewhere: Scenario List property/method Documentation List schema: fields Fields Fields documentation List schema: views Views List view documentation List schema: content types ContentTypes Content types documentation List schema: webhooks Webhooks Webhooks documentation Content: items Items List item documentation Content: files Items Files documentation Content: pages Items Pages documentation Content: folders Items Folders documentation Getting lists Lists live inside an IWeb and you can either get a specific list or enumerate the available lists. Getting a specific list To get a specific list you can use multiple methods on the IListCollection : GetByServerRelativeUrlAsync , GetByTitleAsync or GetByIdAsync . Alternatively you can also write a LINQ query. Mentioned approaches are shown in below sample code. // Get Documents list via title var myList = await context.Web.Lists.GetByTitleAsync(\"Documents\"); // Get Documents list via title var myList = await context.Web.Lists.GetByServerRelativeUrlAsync($\"{context.Uri.PathAndQuery}/Shared Documents\"); // Get Documents list via id, only load the needed properties var myList = await context.Web.Lists.GetByIdAsync(new Guid(\"d50ec969-cb27-4a49-839f-3c25d1d607d5\"), p => p.TemplateType, p => p.Title); // Query on the collection var myList = await context.Web.Lists.Where(p=>p.Title == \"Documents\").FirstOrDefaultAsync(); Enumerating lists Loading all lists is needed when you don't upfront know which list you want to process, or maybe you want to run over all lists of a given type. Doing an enumeration can be done by requesting the Lists property of an IWeb or via a LINQ query. // Sample 1: Load all lists in the web with their default properties await context.Web.GetAsync(p => p.Lists); // Sample 2: Load the web content types + all lists with their content types and the content type field links await context.Web.GetAsync(p => p.Title, p => p.ContentTypes.QueryProperties(p => p.Name), p => p.Lists.QueryProperties(p => p.Id, p => p.TemplateType, p => p.Title, p => p.DocumentTemplate, p => p.ContentTypes.QueryProperties(p => p.Name, p => p.FieldLinks.QueryProperties(p => p.Name))) ); // Process the document libraries foreach(var list in context.Web.Lists.AsRequested().Where(p => TemplateType == ListTemplateType.DocumentLibrary)) { // Use the list } Using LINQ to load multiple lists is also possible: // Turning off the Graph first feature (temp fix, will be not be needed by GA) context.GraphFirst = false; // Option 1 to write the LINQ query var query = (from i in context.Web.Lists where i.TemplateType == ListTemplateType.DocumentLibrary select i).Load(p => p.Title, p => p.Id); // Option 2 to write the LINQ query var query = context.Web.Lists.Where(p => p.TemplateType == ListTemplateType.DocumentLibrary) .QueryProperties(p => p.Title, p => p.Id); // Execute the LINQ query var lists = await query.ToListAsync(); foreach(var list in lists) { // Use the list } Adding lists Adding lists comes down to adding a new list to the Web's IListCollection using the AddAsync method . // Add a list var myList = await context.Web.Lists.AddAsync(\"MyList\", ListTemplateType.GenericList); // Add a document library var myDocumentLibrary = await context.Web.Lists.AddAsync(\"myDocumentLibrary\", ListTemplateType.DocumentLibrary); Updating lists A list has a lot of properties to update and updating them comes down to setting the new property value and then calling one of the update methods like UpdateAsync. // Get the list to update var myList = await context.Web.Lists.GetByTitleAsync(\"List to update\"); // Update a list property myList.Description = \"PnP Rocks!\"; // Send update to the server await myList.UpdateAsync(); Deleting lists To delete a list you can either permanently delete the list using the DeleteAsync method or you can move the list into the site's recycle bin using the RecycleAsync method . // Get the list to delete var myList = await context.Web.Lists.GetByTitleAsync(\"List to delete\"); // Delete the list await myList.DeleteAsync(); // Recycle the list await myList.RecycleAsync(); Getting changes for a list You can use the GetChanges methods on an IList to list all the changes. See Enumerating changes that happened in SharePoint to learn more."
  },
  "using-the-sdk/lists-views.html": {
    "href": "using-the-sdk/lists-views.html",
    "title": "Working with list views | PnP Core SDK",
    "keywords": "Working with list views Each list has one or more views whereas a view presents the list data in certain manner: which fields are shown in which order, sorting and grouping and more is all defined in a view. A list can have multiple views and using PnP Core SDK you can manage views via the IView interface . Getting the views To get a view you need to load the Views property of an IList and then enumerate over the returned views to find the one you want to work with. // Get Documents list with views via title var myList = await context.Web.Lists.GetByTitleAsync(\"Documents\", p => p.Views); // Get Documents list with views via title var myList = await context.Web.Lists.GetByServerRelativeUrlAsync($\"{context.Uri.PathAndQuery}/Shared Documents\", p => p.Views); // Get Documents list views via id, only load the needed properties var myList = await context.Web.Lists.GetByIdAsync(new Guid(\"d50ec969-cb27-4a49-839f-3c25d1d607d5\"), p => p.Views); // Do something with the views foreach(var view in myList.Views.AsRequested()) { // Do something } Adding a view To add a view you need to use the AddAsync method on the IViewCollection and specify the ViewOptions for the view to add. Common properties to use when you're adding a view are Title , ViewFields and ViewTypeKind . // Get Documents list with views via title var myList = await context.Web.Lists.GetByTitleAsync(\"Documents\", p => p.Views); var myView = myList.Views.Add(new ViewOptions() { Title = \"My custom view\", RowLimit = 10, Query = \"<Where><Eq><FieldRef Name='LinkFilename' /><Value Type='Text'>General</Value></Eq></Where>\", ViewFields = new string[] { \"DocIcon\", \"LinkFilenameNoMenu\", \"Modified\" } }); Updating a view To update a view you set the view properties you need and then call UpdateAsync. // Get Documents list with views via title var myList = await context.Web.Lists.GetByTitleAsync(\"Documents\", p => p.Views); // Get the view to update var viewToUpdate = myList.Views.AsRequested().FirstOrDefault(p => p.Title == \"All Documents\"); // Update the view viewToUpdate.Title = \"All\"; await viewToUpdate.UpdateAsync(); Deleting a view Deleting a view can be done using the regular Delete methods. // Get Documents list with views via title var myList = await context.Web.Lists.GetByTitleAsync(\"Documents\", p => p.Views); // Get the view to update var viewToDelete = myList.Views.AsRequested().FirstOrDefault(p => p.Title == \"View to delete\"); await viewToDelete.DeleteAsync();"
  },
  "using-the-sdk/lists-webhooks.html": {
    "href": "using-the-sdk/lists-webhooks.html",
    "title": "Working with list webhooks | PnP Core SDK",
    "keywords": "Working with list webhooks PnP Core SDK allows you to perform all needed CRUD operations with list webhooks in a convenient fluent manner. The webhook instance is represented via the IListSubscription interface. Fetch and filter webhooks To get all list webhooks, you can use regular Load methods. Load webhooks as part of the list request: var list = await context.Web.Lists.GetByTitleAsync(\"My List\", l => l.Webhooks); Or load webhooks explicitly: var list = await context.Web.Lists.GetByTitleAsync(\"My List\"); list.Webhooks.Load(); Or load using list instance: var list = await context.Web.Lists.GetByTitleAsync(\"My List\"); list.Load(l => l.Webhooks); Later on you can iterate over the webhooks collection: foreach (var webhook in list.Webhooks.AsRequested()) { // do something } You can also use LINQ to filter webhooks by their properties. For example, to get all webhooks, where the client state contains specific string: var webhooks = await list.Webhooks.Where(w => w.ClientState.Contains(\"state\")).ToListAsync(); foreach (var webhook in webhooks) { // do something } Get webhook by Id To get a webhook by its Id, you can use a dedicated method: var list = await context.Web.Lists.GetByTitleAsync(\"My List\"); // get by id var webhook = await list.Webhooks.GetByIdAsync(new Guid(\"<webhook id>\")); Or you can use LINQ filter: var webhookId = new Guid(\"<id>\"); var webhook = await list.Webhooks.FirstOrDefaultAsync(w => w.Id == webhookId); Add a webhook To add a webhook, you should provide notification url, expiration date and optionally client state. You can use client state for validating notifications, tagging different subscriptions, or other reasons. There are a few different method overloads available in PnP Core SDK to add a new webhook: var list = await context.Web.Lists.GetByTitleAsync(\"My List\"); // creates a new webhook subscription with validity period of 180 days (maximum possible), doesn't set client state var webhook = await list.Webhooks.AddAsync(\"https://my-handler.url\"); // creates a new webhook subscription with validity period of 1 month, doesn't set client state var webhook = await list.Webhooks.AddAsync(\"https://my-handler.url\", 1); // creates a new webhook subscription with validity period of 1 month and sets client state. var webhook = await list.Webhooks.AddAsync(\"https://my-handler.url\", DateTime.UtcNow.AddMonths(1), \"tag:client\"); Note The maximum expiration time for SharePoint list webhooks is 180 days. Update a webhook To update a webhook, you should set properties you want to change and then call the Update method: var list = await context.Web.Lists.GetByTitleAsync(\"My List\"); var webhook = await list.Webhooks.GetByIdAsync(new Guid(\"<webhook id>\")); // change expiration for the webhook webhook.ExpirationDateTime = DateTime.UtcNow.AddDays(180); // update it await webhook.UpdateAsync(); Delete a webhook To delete a webhook just call the Delete method on the webhook instance: var list = await context.Web.Lists.GetByTitleAsync(\"My List\"); var webhook = await list.Webhooks.GetByIdAsync(new Guid(\"<guid>\")); // delete it await webhook.DeleteAsync();"
  },
  "using-the-sdk/pages-header.html": {
    "href": "using-the-sdk/pages-header.html",
    "title": "Configuring the page header | PnP Core SDK",
    "keywords": "Configuring the page header When you create pages you can also configure the page header. There are various options to configure a page header: you can add a nice image, change the header layout mode and more. What you can do via the SharePoint UI can also be done using the pages API, as explained in this chapter. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with pages } Creating a page without header Sometimes the header takes up too much space and you prefer to create a page with a minimal header. You can do this by calling the RemovePageHeader method on a page: // Create the page var newPage = await context.Web.NewPageAsync(); // configure the page newPage.RemovePageHeader(); // Save the page await newPage.SaveAsync(\"PageWithMinimalHeader.aspx\"); Configuring the default page header When you create a new page it will be configured to use the default page header which contains the default background image and title. If you want to switch a page to the default header you can use the SetDefaultPageHeader method . The default page header can also be customized by setting the page header properties. Below is an example: // Create the page var page = await context.Web.NewPageAsync(); // Configure the page page.SetDefaultPageHeader(); page.PageHeader.LayoutType = PageHeaderLayoutType.CutInShape; page.PageHeader.ShowTopicHeader = true; page.PageHeader.TopicHeader = \"I'm a topic header\"; page.PageHeader.TextAlignment = PageHeaderTitleAlignment.Center; page.PageHeader.ShowPublishDate = true; // Save the page await page.SaveAsync(\"PageWithCustomizedDefaultHeader.aspx\"); Above sample will switch the header to use the Cut in Shape layout option with a topic header. We're also changing the page title alignment to be centered versus the default left alignment and we're showing the date when the page was published in the header. Configuring a custom header The previous section already showed some cool page header features, but we can do better 😊 You can also use a full custom header, which next to the options presented in the previous example, also allows you to configure the background image of the header. To configure a header with an image you can use the SetCustomPageHeader method which takes the server relative url to the image to use as input. // Create the page var page = await context.Web.NewPageAsync(); // Upload the header image to site assets library IFolder parentFolder = await context.Web.Folders.GetFirstOrDefaultAsync(f => f.Name == \"SiteAssets\"); IFile headerImage = await parentFolder.Files.AddAsync(\"pageheader.jpg\", System.IO.File.OpenRead($\".{Path.DirectorySeparatorChar}pageheader.jpg\")); // Configure the page page.SetCustomPageHeader(headerImage.ServerRelativeUrl, 5.3, 6.2); page.PageHeader.LayoutType = PageHeaderLayoutType.ColorBlock; page.PageHeader.ShowTopicHeader = true; page.PageHeader.TopicHeader = \"I'm a topic header\"; page.PageHeader.TextAlignment = PageHeaderTitleAlignment.Center; page.PageHeader.ShowPublishDate = true; // Save the page await page.SaveAsync(\"PageWithCustomHeader.aspx\"); Note Note that you can control the header image offset by providing the needed X and Y offset values when calling the SetCustomPageHeader method ."
  },
  "using-the-sdk/pages-intro.html": {
    "href": "using-the-sdk/pages-intro.html",
    "title": "Working with pages: an introduction | PnP Core SDK",
    "keywords": "Working with pages: an introduction Each SharePoint site uses pages, being modern pages or classic pages like wiki, webpart or publishing pages. PnP Core SDK does not support editing those classic pages, but there's extensive support for modern pages. In this article you'll learn how to load pages, how to create, update, configure and delete them. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with pages } Loading an existing page Quite often you need to update an previously created page, so you'll first need to load the existing page. Loading existing pages can be done using the GetPagesAsync method . Load all the pages on a site var pages = await context.Web.GetPagesAsync(); Load pages filtered on page name Below call will get all the pages on the site for which the name starts with PageA . var pages = await context.Web.GetPagesAsync(\"PageA\"); If you want to only find one page then provide the actual page name with the .aspx extension: var pages = await context.Web.GetPagesAsync(\"PageABC.aspx\"); var pageABC = pages.First(); Load pages in a given folder Modern pages can be organized in folders, if you want to load a page from a given folder (the previous samples loaded pages across all folders) then you need to prepend the folder path to the page when searching for it: string pageName = \"folder1/PageInFolder.aspx\"; var pages = await context.Web.GetPagesAsync(pageName); var pageInFolder = pages.First(); If the page lives in a nested folder you can provide the nest path: string pageName = \"folder1/folder2/folder3/PageInFolder3.aspx\"; var pages = await context.Web.GetPagesAsync(pageName); var pageInFolder3 = pages.First(); Note that when a page was loaded from a folder the Folder property of the retuned page will contain the folder: string pageName = \"folder1/folder2/folder3/PageInFolder3.aspx\"; var pages = await context.Web.GetPagesAsync(pageName); var pageInFolder3 = pages.First(); // Outputs folder1/folder2/folder3 Console.WriteLine(pagesInFolder3.Folder); Adding a new page Adding a new page always consists out of two steps: you first create a new page via the NewPageAsync method and persist the created page via the SaveAsync method . // Create the page var newPage = await context.Web.NewPageAsync(); // configure the page // Save the page await newPage.SaveAsync(\"MyPage.aspx\"); When you create a new page the default will be an Article page, but you can also create other types of pages. The pages API supports these common types of pages: Article page : this is typical page you'd create using the SharePoint user interface Repost page : this page is a re-posting of existing content where existing content can be a link to a resource on the internet or an other page in your SharePoint environment Home page : this is a page created with as purpose to become the home page of the site, this page has no page header by design and has no page commenting Spaces page : SharePoint Spaces pages can host mixed reality content To pick another page type during creation specify the type as input of the NewPageAsync method : // Create the page var newPage = await context.Web.NewPageAsync(PageLayoutType.RepostPage); Adding a page in a given folder When you want to create a page in a folder you need to prepend the folder to the page name on save: // Create the page var newPage = await context.Web.NewPageAsync(); // configure the page // Save the page await newPage.SaveAsync(\"folder1/folder2/MyPageInFolder2.aspx\"); Saving a page as a template A page can also be saved as a template, when users of the site want to create a new page they can base themselves of a template page. To save a page as a template you instead of the SaveAsync() use the SaveAsTemplateAsync method : // Create the page var newPage = await context.Web.NewPageAsync(); // configure the page // Save the page await newPage.SaveAsTemplateAsync(\"MyTemplatePage.aspx\"); Note You do not need to specify the templates folder, the page API will ensure the templates folder does exist and automatically use it. Configuring a page Whenever you've created a new page or loaded an existing page, you often need to also configure the page by adding content to it. In this chapter you'll learn how to do so. Setting up your page layout A modern page exists out of one or more sections of a given type: One column section: section contain one column One column fullwidth section: section containing one column that's covering the full width of the page (you can only have one of these per page) Two column section: section with two equally sized columns Two column left section: section with the left column 2/3 in size and the right one 1/3 Two column right section: section with the left column 1/3 in size and the right one 2/3 Three column section: section with three equally sized columms The above sections, except one column fullwidth, are also available in a variant that includes a page wide vertical column on the right side. You can only use one \"vertical column\" section on a page and it's mutually exclusive with the one column fullwidth section. Adding sections is done using the AddSection method : // Create the page var page = await context.Web.NewPageAsync(); // adding sections to the page page.AddSection(CanvasSectionTemplate.OneColumnFullWidth, 1); page.AddSection(CanvasSectionTemplate.OneColumn, 2); page.AddSection(CanvasSectionTemplate.TwoColumn, 3); page.AddSection(CanvasSectionTemplate.TwoColumnLeft , 4); page.AddSection(CanvasSectionTemplate.TwoColumnRight, 5); page.AddSection(CanvasSectionTemplate.ThreeColumn, 6); // Save the page await page.SaveAsync(\"MyPage.aspx\"); You can also control the emphasis (background color) of the section and vertical column via specifying the needed emphasis in the AddSection method : page.AddSection(CanvasSectionTemplate.TwoColumnVerticalSection, 1, VariantThemeType.Neutral, VariantThemeType.Strong); Configuring page sections Adding a section to a page gets you a default, non-collapsible, section. If you want your section to be collapsible then simply set the Collapsible property to true and optionally configure the additional settings for collapsible sections: page.AddSection(CanvasSectionTemplate.TwoColumn, 1, VariantThemeType.Soft); page.Sections[0].Collapsible = true; page.Sections[0].DisplayName = \"My collapsible section\"; page.Sections[0].IsExpanded = false; page.Sections[0].ShowDividerLine = false; page.Sections[0].IconAlignment = IconAlignment.Right; Adding controls to the page A control is either a piece of text or a web part and can be added in one of the section columns. Below sample shows how to add the text part to an existing section column. It boils down to these two steps: Creating a text part via the NewTextPart method Adding the text part into a previously created section column via the AddControl method // Create the page var page = await context.Web.NewPageAsync(); // adding sections to the page page.AddSection(CanvasSectionTemplate.OneColumn, 1); // Adding text control to the first section, first column page.AddControl(page.NewTextPart(\"PnP Rocks!\"), page.Sections[0].Columns[0]); // Save the page await page.SaveAsync(\"MyPage.aspx\"); Adding web parts to the page Adding web parts is quite similar to adding text parts, but there's more work needed to prep a web part before it can be added. Before you can add a web part you need to get a 'blueprint' of the web part to add. This needs to be done via the AvailablePageComponentsAsync method . Once you've the list of possible web parts to add you need to pick the one you need. If you're adding an out of the box web part then using the DefaultWebPartToWebPartId method to map a readable name into a web part id works best. The final step is using the 'blueprint' with the NewWebPart method to create a web part instance that can be added. Below sample shows all these steps: // Create the page var page = await context.Web.NewPageAsync(); // adding sections to the page page.AddSection(CanvasSectionTemplate.OneColumn, 1); // get the web part 'blueprint' var availableComponents = await page.AvailablePageComponentsAsync(); var imageWebPartComponent = availableComponents.FirstOrDefault(p => p.Id == page.DefaultWebPartToWebPartId(DefaultWebPart.Image)); // add the web part to the first column of the first section page.AddControl(page.NewWebPart(imageWebPartComponent), page.Sections[0].Columns[0]); // Save the page await page.SaveAsync(\"MyPage.aspx\"); Updating the page Author, Editor, Created and Modified system properties A common request is to change the list item Author , Editor , Created and Modified system properties of a page, which is allowed via the UpdateOverWriteVersion methods. Note The Azure AD application you're using must have the Sites.FullControl.All permission to make updating the Author , Editor , Created and Modified system properties work. // Load the page you want to update var pages = await context.Web.GetPagesAsync(\"mypage.aspx\"); var myPage = pages.AsEnumerable().First(); // Load the page file with it's associated list item var pageFile = await myPage.GetPageFileAsync(p => p.ListItemAllFields); // Load the Author and Editor fields var author = myPage.PagesLibrary.Fields.AsRequested().FirstOrDefault(p => p.InternalName == \"Author\"); var editor = myPage.PagesLibrary.Fields.AsRequested().FirstOrDefault(p => p.InternalName == \"Editor\"); // Load the user to set as Author/Editor var currentUser = await context.Web.GetCurrentUserAsync(); // Define the new date for Created/Modified var newDate = new DateTime(2020, 10, 20); // Update the properties pageFile.ListItemAllFields[\"Author\"] = author.NewFieldUserValue(currentUser); pageFile.ListItemAllFields[\"Editor\"] = editor.NewFieldUserValue(currentUser); pageFile.ListItemAllFields[\"Created\"] = newDate; pageFile.ListItemAllFields[\"Modified\"] = newDate; // Persist the changes await pageFile.ListItemAllFields.UpdateOverwriteVersionAsync(); Deleting a page You can delete pages via the DeleteAsync method : await page.DeleteAsync();"
  },
  "using-the-sdk/pages-multilingual.html": {
    "href": "using-the-sdk/pages-multilingual.html",
    "title": "Working with multilingual pages | PnP Core SDK",
    "keywords": "Working with multilingual pages SharePoint does support multilingual pages in communication sites and the page API has some handy methods to help with that. Important Multilingual pages only work on SharePoint Communication sites. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with pages } Ensuring your site is correctly configured for multilingual pages Before you use multilingual pages on a site you need to ensure the site is configured to support multilingual pages. There are 2 pre-requisites: The page needs to support the needed languages The multilingual page feature must have been activated The easiest approach to ensuring a site is ready for multilingual is calling the EnsureMultilingualAsync method on the web object . // Enable this site for multilingual pages await context.Web.EnsureMultilingualAsync(new List<int>() { 1043, 1036 }); Above sample enables the site for Dutch (1043) and French (1036) and enables the multilingual page feature if it was not yet enabled. Note Paul Bullock's blog article on SharePoint Online language ids is a useful resource to pick the right id for the language you need. Getting the available translations of an existing page If you load a page on a site you do not always know which translated versions are available and in what state those translations are. Calling the GetPageTranslationsAsync method will get you a IPageTranslationStatusCollection object that contains a list of languages for which the page was not yet translated and a collection of IPageTranslationStatus objects giving you information about the existing page translations. Note A page needs to be saved before you can use the multilingual API. // Enable this site for multilingual pages await context.Web.EnsureMultilingualAsync(new List<int>() { 1043, 1036 }); // Create the page var page = await context.Web.NewPageAsync(); // Save the page await page.SaveAsync(\"PageA.aspx\"); // Page should not yet have translations var pageTranslations = await newPage.GetPageTranslationsAsync(); Create translations of a given page If you've created a new page or when you've added a new language for your site you might want to also create the page translations for the new page or backfill the existing pages with a translation for the added language. Both of these tasks can be achieved by using the TranslatePagesAsync method . When you call this method without input it will automatically create page translations for each site language for which there was not yet a translated page. You can also pass in a PageTranslationOptions object specifying the languages to generate a translation for. Note A page needs to be saved before you can use the multilingual API. // Enable this site for multilingual pages await context.Web.EnsureMultilingualAsync(new List<int>() { 1043, 1036 }); // Create the page var page = await context.Web.NewPageAsync(); // Save the page await page.SaveAsync(\"PageA.aspx\"); // Generate page translations: will create a page translations in the respective nl and fr folders pageTranslations = await page.TranslatePagesAsync();"
  },
  "using-the-sdk/pages-promote.html": {
    "href": "using-the-sdk/pages-promote.html",
    "title": "Publishing and promoting pages as news | PnP Core SDK",
    "keywords": "Publishing and promoting pages as news Once a page has been created it sits in draft status and it will not be seen as news on the site's home page. You can publish a page and promote it by posting the page as news or you can make the page the home page of your site. Note A page needs to be saved before you can use any of the \"promotion\" APIs. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with pages } Publishing a page After a page has been created, publishing it is as simple as calling the PublishAsync method . // Create the page var page = await context.Web.NewPageAsync(); // Configure the page // Save the page await page.SaveAsync(\"PageA.aspx\"); // Publish the page await page.PublishAsync(); Scheduling the publishing of a page After a page has been created you can immediately publish the page as described above, but you can also choose to schedule the page publication for a certain date. To do so, you need to use one of the SchedulePublish methods. These methods will verify if the pages library does have scheduled publishing turned on via calling the EnsurePageScheduling method on the connected IWeb . To verify if a page has a pending publication scheduled you can use the ScheduledPublishDate property. This property is a nullable property, if there was no publication scheduled this property will not contain a value. If you want to remove the scheduled publication of a page you need to use one of the RemoveSchedulePublish methods. // Create the page var page = await context.Web.NewPageAsync(); // Configure the page // Save the page await page.SaveAsync(\"PageA.aspx\"); // Schedule the publication of the page for 24 hours later var scheduleDate = DateTime.Now + new TimeSpan(24, 0, 0); await page.SchedulePublishAsync(scheduleDate); // Verify the set the page publication date if (ScheduledPublishDate.HasValue) { var pagePublicationDate = page.ScheduledPublishDate.Value; } // Removed the scheduled publication again await page.RemoveSchedulePublishAsync(); Posting a page as news article A page can get more visibility by posting it as a news post. Calling the PromoteAsNewsArticleAsync method is all you need to do. // Create the page var page = await context.Web.NewPageAsync(); // Configure the page // Save the page await page.SaveAsync(\"PageA.aspx\"); // Post as news await page.PromoteAsNewsArticleAsync(); // Publish the page (recommended after posting as news but not required) await page.PublishAsync(); Demoting a news article back to a regular page Demoting an existing news post to a regular page can be done with the DemoteNewsArticleAsync method . // demote as news article await page.DemoteNewsArticleAsync(); Promoting a page as site home page If you want to set your page as the site's home page you have two options: you can use the convenient PromoteAsHomePageAsync method on the page object or you can load the web's RootFolder and set the WelcomePage property to the page you want to set as home page. The first approach is the recommended manner. // Promote as home page of the site // OPTION 1 await page.PromoteAsHomePageAsync(); // OPTION 2 var web = await context.Web.GetAsync(p => p.RootFolder); web.RootFolder.WelcomePage = \"SitePages/PageA.aspx\"; await web.RootFolder.UpdateAsync();"
  },
  "using-the-sdk/pages-social.html": {
    "href": "using-the-sdk/pages-social.html",
    "title": "Using the \"social\" features of a page | PnP Core SDK",
    "keywords": "Using the \"social\" features of a page A SharePoint Page can have comments, replies and likes. This chapter explains how to enable or disable page commenting and how to work with comments, replies and likes. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with pages } Disabling/Enabling page comments By default commenting is enabled on article pages and for the majority of use cases this default is fine. You can however also turn off commenting by calling the DisableCommentsAsync method . Getting the current commenting status can be done using the AreCommentsDisabledAsync method and turning on commenting again is done via the EnableCommentsAsync method . Note A page needs to be saved before you can configure it's commenting settings. // Create the page var page = await context.Web.NewPageAsync(); // Save the page await page.SaveAsync(\"PageA.aspx\"); // Are comments disabled? var commentsDisabled = await newPage.AreCommentsDisabledAsync(); // disable comments await page.DisableCommentsAsync(); // enabled comments again await page.EnableCommentsAsync(); Liking/unliking a page The currently authenticated user can like/unlike a page using one of the Like or Unlike methods on the page. Note A page needs to be published before it can be liked. // Create the page var page = await context.Web.NewPageAsync(); // Save the page await page.SaveAsync(\"PageA.aspx\"); // Publish the page, required before it can be liked await newPage.PublishAsync(); // Like the page await newPage.LikeAsync(); // Unlike the page await newPage.UnlikeAsync(); Enumerating page likes If you want to understand who liked a page you can load the LikedByInformation of page which tell you if the page like count, whether the current user liked the page and which users liked the page: // Create the page var page = await context.Web.NewPageAsync(); // Save the page await page.SaveAsync(\"PageA.aspx\"); // Publish the page, required before it can be liked await newPage.PublishAsync(); // Like the page await newPage.LikeAsync(); // Get a list of users who liked this page var pageLikeInformation = await newPage.GetLikedByInformationAsync(); // Was page liked by the current user? bool pageLikedByCurrentUser = pageLikeInformation.IsLikedByUser; // Enumerate the persons that liked this page foreach(var likedByUser in pageLikeInformation.LikedBy.AsRequested()) { // do something with the information about the user who liked this page } Getting comments To work with page comments you first need to get a reference to the page comments collection. Once you've done that, you can enumerate the existing comments, add new comments or delete comments. Below code snippet shows how the comments can be enumerated. // Create the page var page = await context.Web.NewPageAsync(); // Save the page await page.SaveAsync(\"PageA.aspx\"); // Publish the page, required before it can be commented await newPage.PublishAsync(); // Get the comments for this page var comments = await newPage.GetCommentsAsync(); // Loop over the comments foreach(var comment in comments.AsRequested()) { // Do something with the comment } Adding a comment Once you've load a comments collection via one of the GetComments methods you can add new comments or delete comments. // Get the comments for this page var comments = await newPage.GetCommentsAsync(); // Add a comment var comment = await comments.AddAsync(\"this is great\"); Adding a comment containing an at-mentioning Page comments can at mention other users and this is done by inserting a html snippet in the comment text. To construct this html snippet you can use the GetAtMentioningString method on the ICommentCollection : // Get the comments for this page var comments = await newPage.GetCommentsAsync(); // Get information about the current user var currentUser = await context.Web.GetCurrentUserAsync(); // Add a comment var comment = await comments.AddAsync($\"This is great {comments.GetAtMentioningString(\"Bert\", currentUser.UserPrincipalName)}!\"); To understand which users are at-mentioned in a comment or reply you can inspect the Mention collection on the IComment . Adding a reply to a comment Comments can also have replies and since the collection of replies is similar to the collections of comments to code to add a reply is the same: // Get the comments for this page var comments = await newPage.GetCommentsAsync(); // Add a comment var comment = await comments.AddAsync(\"this is great\"); // Add a reply to the comment var reply = await comment.Replies.AddAsync(\"yes this is great!\"); Removing a comment or reply Once you've load a comments collection via one of the GetComments methods you can delete comments and/or their replies using one of the Delete methods. // Load the comments with replies comments = await newPage.GetCommentsAsync(p => p.Author, p => p.Text, p => p.Replies); // Get first comment var firstComment = comments.AsRequested().First(); // Get first reply on the first comment var firstCommentReply = firstComment.Replies.AsRequested().First(); // Delete the reply await firstCommentReply.DeleteAsync(); // Delete the comment await firstComment.DeleteAsync(); Liking\\Unliking comments and replies A comment or reply can be liked by the authenticated user, this is done using one of the Like or Unlike methods on either the comment or reply. // Load the comments with replies comments = await newPage.GetCommentsAsync(p => p.Author, p => p.Text, p => p.Replies); // Get first comment var firstComment = comments.AsRequested().First(); // Like the comment await firstComment.LikeAsync(); // Unlike the comment await firstComment.UnlikeAsync(); // Get first reply on the first comment var firstCommentReply = firstComment.Replies.AsRequested().First(); // Like the reply await firstCommentReply.LikeAsync(); // Unlike the reply await firstCommentReply.UnlikeAsync(); Enumerating likes on comments and replies A comment or reply can be liked by multiple persons and you can enumerate the \"likers\" by loading the LikedBy collection of a comment or reply. // Load the comments with replies comments = await newPage.GetCommentsAsync(p => p.Author, p => p.Text, p => p.Replies, p => p.LikedBy); // Get first comment var firstComment = comments.AsRequested().First(); // Enumerate the likes on this comment foreach (var like on firstComment.LikedBy.AsRequested()) { // do something with the comment like information }"
  },
  "using-the-sdk/pages-webparts.html": {
    "href": "using-the-sdk/pages-webparts.html",
    "title": "Working with web parts and text parts | PnP Core SDK",
    "keywords": "Working with web parts and text parts A page is a canvas with a layout (the sections and columns) and on that canvas you can add controls: simple text parts or more complex web parts. This chapter shows how you can create, configure and add a control on a page. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with pages } Working with text parts When you need to put (formatted) text on a page you need to create a text part , configure it and add it to a column of a section on the page. Below sample shows how a simple text can be added to a page with a one column section. // Create the page var page = await context.Web.NewPageAsync(); // adding sections to the page page.AddSection(CanvasSectionTemplate.OneColumn, 1); // Adding text control to the first section, first column page.AddControl(page.NewTextPart(\"PnP Rocks!\"), page.Sections[0].Columns[0]); // Save the page await page.SaveAsync(\"MyPage.aspx\"); The modern page text part however also supports formatted text, for that you need to \"reverse engineer\" the needed html syntax. The easiest approach is using simply configuring the formatted text on a page (e.g. named \"sample\") and then use PnP PowerShell to read the raw text value. Connect-PnPOnline -url https://contoso.sharepoint.com/sites/demo -PnPManagementShell // show the components on the page Get-PnPClientSideComponent -Page \"sample\" // get a reference to the component you want to inspect $text = Get-PnPClientSideComponent -Page \"sample\" -InstanceId 1ae36bd9-1635-447e-a77c-87621e2016c3 // output the text value to the clipboard $text.Text | clip Below sample shows formatted text being added // Create the page var page = await context.Web.NewPageAsync(); // adding sections to the page page.AddSection(CanvasSectionTemplate.OneColumn, 1); // Adding formatted text control to the first section, first column page.AddControl(page.NewTextPart(\"PnP <span class=\\\"fontSizeXLargePlus\\\"><span class=\\\"fontColorRed\\\"><strong>rocks!</strong></span></span>\"), page.Sections[0].Columns[0]); // Save the page await page.SaveAsync(\"MyPage.aspx\"); Using inline images in text parts During fall 2021 inline images were added to SharePoint providing users the option to include images inside the their text parts. To add an inline image to your text you can use the GetInlineImage methods to configure an image to be added inline. The method returns a html snippet that you can add add to your text part. // Create the page var page = await context.Web.NewPageAsync(); // adding sections to the page page.AddSection(CanvasSectionTemplate.OneColumn, 1); // Create text part var textPart = page.NewTextPart(); // Prepare inline image for inserting var inlineImage = await page.GetInlineImageAsync(textPart, \"/sites/prov-2/siteassets/__siteicon__.png\", new PageImageOptions() { Alignment = PageImageAlignment.Left}); // Insert the inline image in the text part text textPart.Text = $\"<H1>My header</H1>{inlineImage}<p>Text after image</p>\"; // Adding text part control to the first section, first column page.AddControl(textPart, page.Sections[0].Columns[0]); // Save the page await page.SaveAsync(\"MyPage.aspx\"); Working with web parts Generic instructions that apply for all web parts Adding web parts is quite similar to adding text parts, but the configuration of web parts takes more work. When creating a web part you start from a blueprint of that web part, using the AvailablePageComponentsAsync method you can get a list of all the possible web parts that can be added on a page. If you've installed custom web parts on the site hosting the page then these will show up as well in that list. Important The AvailablePageComponentsAsync method is a call that takes quite some time and returns a large chunk of data. It's best to do this call only once and use the result while you configure pages in your application. Below sample shows the basics of adding an out of the box web part on a page. Note that the DefaultWebPartToWebPartId method is used to translate out of the box web parts to their respective internal web part names (guids). // Create the page var page = await context.Web.NewPageAsync(); // adding sections to the page page.AddSection(CanvasSectionTemplate.OneColumn, 1); // get the web part 'blueprint' var availableComponents = await page.AvailablePageComponentsAsync(); var imageWebPartComponent = availableComponents.FirstOrDefault(p => p.Id == page.DefaultWebPartToWebPartId(DefaultWebPart.Image)); // add the web part to the first column of the first section page.AddControl(page.NewWebPart(imageWebPartComponent), page.Sections[0].Columns[0]); // Save the page await page.SaveAsync(\"MyPage.aspx\"); An alternative approach to above is using the InstantiateDefaultWebPart method which internally handles the available component loading and enum mapping. Note Each call to InstantiateDefaultWebPart will result in the AvailablePageComponentsAsync method being called, performance wise it's better to use the above approach as that will limit the number of AvailablePageComponentsAsync calls. // Create the page var page = await context.Web.NewPageAsync(); // adding sections to the page page.AddSection(CanvasSectionTemplate.OneColumn, 1); // get the web part 'blueprint' var imageWebPartToAdd = await page.InstantiateDefaultWebPartAsync(DefaultWebPart.Image); // add the web part to the first column of the first section page.AddControl(imageWebPartToAdd, page.Sections[0].Columns[0]); // Save the page await page.SaveAsync(\"MyPage.aspx\"); Above code adds an unconfigured image web part to the page, but what if you wanted to add a configured web part? The web part configuration is stored in a json blob and configuring the web part on a page and copying the json blob is often the easiest approach. The easiest approach to do this is using the WorkBench : take your site url and append _layouts/15/workbench.aspx and you'll see an editor opening up. Put the web part you need on the page and configure it. Once that's done click on the Web part data button on the toolbar and you should should see this: Copy the json shown in the Modern Pages tab without the surrounding square brackets . Once you've the web part configuration json you need to escape the double quotes, simply doing a replace of \" with \\\" does the trick. // Create the page var page = await context.Web.NewPageAsync(); // adding sections to the page page.AddSection(CanvasSectionTemplate.OneColumn, 1); // get the web part 'blueprint' var availableComponents = await page.AvailablePageComponentsAsync(); var imageWebPartComponent = availableComponents.FirstOrDefault(p => p.Id == page.DefaultWebPartToWebPartId(DefaultWebPart.Image)); var image = page.NewWebPart(imageWebPartComponent); image.PropertiesJson = \"{\\\"controlType\\\":3,\\\"id\\\":\\\"86a83e35-2cc1-4f62-9771-0e8b8acc6c65\\\",...dropped for clarity...,\\\"addedFromPersistedData\\\":true}\"; // add the web part to the first column of the first section page.AddControl(image, page.Sections[0].Columns[0]); // Save the page await page.SaveAsync(\"MyPage.aspx\"); Note Above approach using the workbench also works good for getting a formatted text snippet. Image web part instructions As image web parts are very commonly used on pages, PnP Core SDK provides enhanced support which makes it easier to add an image web part. This enhanced support comes in the form of the GetImageWebPart methods: // Create the page var page = await context.Web.NewPageAsync(); // adding sections to the page page.AddSection(CanvasSectionTemplate.OneColumn, 1); // configure an image web part for a given site relative url var image = await GetImageWebPartAsync(\"/sites/prov-2/siteassets/__siteicon__.png\", new PageImageOptions { Alignment = PageImageAlignment.Left }); // add the web part to the first column of the first section page.AddControl(image, page.Sections[0].Columns[0]); // Save the page await page.SaveAsync(\"MyPage.aspx\");"
  },
  "using-the-sdk/readme.html": {
    "href": "using-the-sdk/readme.html",
    "title": "Getting started with the PnP Core SDK | PnP Core SDK",
    "keywords": "Getting started with the PnP Core SDK The PnP Core SDK is designed to be used in modern .Net development, hence it relies on dependency injection ( generic host ) for its core services. This implies that before you can actually use the PnP Core SDK you need to configure the needed services. Once that's done you can obtain a PnPContext from the PnPContextFactory and start using the library. Where is the code? The PnP Core SDK is maintained in the PnP GitHub repository: https://github.com/pnp/pnpcore . You'll find: The code of the PnP Core SDK in the src\\sdk folder Examples of how to use the PnP Core SDK in the samples folder The source of the documentation you are reading right now in the docs folder Referencing the PnP Core SDK in your project The recommended approach is to use the preview PnP.Core nuget package together with the PnP.Core.Auth nuget package . The former is the actual PnP Core SDK library, while the latter is an helper library that provides a useful set of Authentication Providers to authenticate against Azure Active Directory. Each night these preview packages are refreshed, so you can always upgrade to the latest dev bits by upgrading your nuget package to the latest version. Note If you want to use the PnP Core SDK authentication providers then simply add the PnP.Core.Auth nuget package , the correct PnP.Core nuget package will be automatically added as it's a dependency of the PnP.Core.Auth nuget package . Configuring the needed services In order to configure the needed services in a .Net Core console app, you can rely on the AddPnPCore extension method (defined in the PnP.Core nuget package) and on the AddPnPCoreAuthentication method (defined in the PnP.Core.Auth nuget package), like in the following code excerpt: var host = Host.CreateDefaultBuilder() // Configure logging .ConfigureServices((hostingContext, services) => { // Add the PnP Core SDK library services services.AddPnPCore(); // Add the PnP Core SDK library services configuration from the appsettings.json file services.Configure<PnPCoreOptions>(hostingContext.Configuration.GetSection(\"PnPCore\")); // Add the PnP Core SDK Authentication Providers services.AddPnPCoreAuthentication(); // Add the PnP Core SDK Authentication Providers configuration from the appsettings.json file services.Configure<PnPCoreAuthenticationOptions>(hostingContext.Configuration.GetSection(\"PnPCore\")); }) // Let the builder know we're running in a console .UseConsoleLifetime() // Add services to the container .Build(); And you will also need to provide the configuration in the appsettings.json file, using a configuration section like the following one: { \"PnPCore\": { \"DisableTelemetry\": \"false\", \"HttpRequests\": { \"UserAgent\": \"ISV|Contoso|ProductX\", \"Timeout\": \"100\", \"SharePointRest\": { \"UseRetryAfterHeader\": \"false\", \"MaxRetries\": \"10\", \"DelayInSeconds\": \"3\", \"UseIncrementalDelay\": \"true\" }, \"MicrosoftGraph\": { \"UseRetryAfterHeader\": \"true\", \"MaxRetries\": \"10\", \"DelayInSeconds\": \"3\", \"UseIncrementalDelay\": \"true\" } }, \"PnPContext\": { \"GraphFirst\": \"true\", \"GraphCanUseBeta\": \"true\", \"GraphAlwaysUseBeta\": \"false\" }, \"Credentials\": { \"DefaultConfiguration\": \"interactive\", \"Configurations\": { \"interactive\": { \"ClientId\": \"{your_client_id}\", \"TenantId\": \"{your_tenant_id}\", \"Interactive\": { \"RedirectUri\": \"http://localhost\" } } } }, \"Sites\": { \"SiteToWorkWith\": { \"SiteUrl\": \"https://contoso.sharepoint.com/sites/pnp\", \"AuthenticationProviderName\": \"interactive\" }, } } } Note Ensure you've set \"Copy to output directory\" to \"Copy always\" for the appsettings.json file as otherwise the config file is not used. You should provide the ClientId and TenantId for an application registered in Azure Active Directory and configured with proper permissions, accordingly to your needs. For example, you could register an app in Azure Active Directory with delegated permission for: Microsoft Graph: Group.ReadWrite.All Microsoft Graph: User.ReadWrite.All SharePoint Online: AllSites.FullControl SharePoint Online: TermStore.ReadWrite.All SharePoint Online: User.ReadWrite.All As the Redirect URI, in Web platform enter http://localhost . If you don't want to register a custom app in your target Azure Active Directory, you can skip the ClientId and TenantId properties and the PnP Core SDK will rely on a multi-tenant application that will be registered on your tenant, upon admin consent. In the above example, the authentication will rely on the InteractiveAuthenticationProvider (defined in the PnP.Core.Auth nuget package) so that you will simply need to authenticate with a set of valid credentials for your target tenant. If you like to configure the .Net Core console app in code, without relying on the appsettings.json file, you can also use the following syntax: var host = Host.CreateDefaultBuilder() // Configure logging .ConfigureServices((hostingContext, services) => { // Add the PnP Core SDK library services.AddPnPCore(options => { options.PnPContext.GraphFirst = true; options.HttpRequests.UserAgent = \"ISV|Contoso|ProductX\"; options.Sites.Add(\"SiteToWorkWith\", new PnPCoreSiteOptions { SiteUrl = \"https://contoso.sharepoint.com/sites/pnp\" }); }); services.AddPnPCoreAuthentication( options => { // Configure an Authentication Provider relying on the interactive authentication options.Credentials.Configurations.Add(\"interactive\", new PnPCoreAuthenticationCredentialConfigurationOptions { ClientId = \"{your_client_id}\", TenantId = \"{your_tenant_id}\", Interactive = new PnPCoreAuthenticationInteractiveOptions { RedirectUri = new Uri(\"http://localhost\") } }); // Configure the default authentication provider options.Credentials.DefaultConfiguration = \"interactive\"; // Map the site defined in AddPnPCore with the // Authentication Provider configured in this action options.Sites.Add(\"SiteToWorkWith\", new PnPCoreAuthenticationSiteOptions { AuthenticationProviderName = \"interactive\" }); } ); }) // Let the builder know we're running in a console .UseConsoleLifetime() // Add services to the container .Build(); In advanced scenarios, you can consider using code-based configuration of registered services, like in the following code excerpt. Typically you would also include logging as well. var host = Host.CreateDefaultBuilder() // Set environment to use .UseEnvironment(\"demo\") // you can eventually read it from environment variables // Configure logging .ConfigureServices((hostingContext, services) => { // Read the custom configuration from the appsettings.<environment>.json file var customSettings = new CustomSettings(); hostingContext.Configuration.Bind(\"CustomSettings\", customSettings); // Create an instance of the Interactive Authentication Provider var authenticationProvider = new InteractiveAuthenticationProvider( customSettings.ClientId, customSettings.TenantId, customSettings.RedirectUri); // Add the PnP Core SDK services services .AddPnPCore(options => { // You can explicitly configure all the settings, or you can // simply use the default values options.PnPContext.GraphFirst = true; options.PnPContext.GraphCanUseBeta = true; options.PnPContext.GraphAlwaysUseBeta = false; options.HttpRequests.UserAgent = \"NONISV|SharePointPnP|PnPCoreSDK\"; options.HttpRequests.MicrosoftGraph = new PnPCoreHttpRequestsGraphOptions { UseRetryAfterHeader = true, MaxRetries = 10, DelayInSeconds = 3, UseIncrementalDelay = true, }; options.HttpRequests.SharePointRest = new PnPCoreHttpRequestsSharePointRestOptions { UseRetryAfterHeader = true, MaxRetries = 10, DelayInSeconds = 3, UseIncrementalDelay = true, }; options.DefaultAuthenticationProvider = authenticationProvider; options.Sites.Add(\"DemoSite\", new PnP.Core.Services.Builder.Configuration.PnPCoreSiteOptions { SiteUrl = customSettings.DemoSiteUrl, AuthenticationProvider = authenticationProvider }); }); }) // Let the builder know we're running in a console .UseConsoleLifetime() // Add services to the container .Build(); In above sample the following configuration file is used: appsettings.demo.json { \"CustomSettings\": { \"ClientId\": \"{client_id}\", \"TenantId\": \"{tenant_id}\", \"DemoSiteUrl\": \"https://contoso.sharepoint.com/sites/pnp\", \"RedirectUri\": \"http://localhost\" }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\" } } } Note To learn more about how to setup authentication check the Configuring authentication article. Obtaining a PnPContext The PnPContext is the entry point for using the PnP Core SDK, you can create a PnPContext from either a SharePoint site URL or the id of a Microsoft 365 group. Note You'll get a PnPContext for the root web of the site collection. Checkout the Getting sub webs content to learn how to get a PnPContext for the sub webs of the root web. // Start console host await host.StartAsync(); using (var scope = host.Services.CreateScope()) { // Obtain a PnP Context factory var pnpContextFactory = scope.ServiceProvider.GetRequiredService<IPnPContextFactory>(); // Use the PnP Context factory to get a PnPContext for the given configuration using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext } using (var context = await pnpContextFactory.CreateAsync(\"Microsoft 365 Group guid\")) { // See next chapter on how to use the PnPContext } } // Cleanup console host host.Dispose(); If you prefer to create a PnPContext by specifying the URL you need in code or you want to be able to easily switch between authentication providers then below sample shows how to so. This snippet works without an configuration file , all you need to do is add the needed authentication provider configuration(s) and then later on in your code acquire the needed authentication providers via the IAuthenticationProviderFactory . Once you have your authentication provider you can use it in the Create methods on the context factory: var host = Host.CreateDefaultBuilder() .ConfigureServices((context, services) => { services.AddPnPCore(); services.AddPnPCoreAuthentication(options => { options.Credentials.Configurations.Add(\"interactive\", new PnPCoreAuthenticationCredentialConfigurationOptions { ClientId = \"c545f9ce-1c11-440b-812b-0b35217d9e83\", Interactive = new PnPCoreAuthenticationInteractiveOptions { RedirectUri = new Uri(\"http://localhost\") } }); options.Credentials.Configurations.Add(\"usernamepassword\", new PnPCoreAuthenticationCredentialConfigurationOptions { ClientId = \"c545f9ce-1c11-440b-812b-0b35217d9e83\", UsernamePassword = new PnPCoreAuthenticationUsernamePasswordOptions { Username = \"joe@contoso.onmicrosoft.com\", Password = \"xxx\" } }); }); }) .UseConsoleLifetime() .Build(); await host.StartAsync(); using (var scope = host.Services.CreateScope()) { var pnpContextFactory = scope.ServiceProvider.GetRequiredService<IPnPContextFactory>(); var pnpAuthenticationProviderFactory = scope.ServiceProvider.GetRequiredService<IAuthenticationProviderFactory>(); var interactiveAuthProvider = pnpAuthenticationProviderFactory.Create(\"interactive\"); var passwordManagerAuthProvider = pnpAuthenticationProviderFactory.Create(\"usernamepassword\"); using (var context = await pnpContextFactory.CreateAsync(new Uri(\"https://contoso.sharepoint.com/sites/prov-1\"), interactiveAuthProvider)) { await context.Web.LoadAsync(p => p.Title); Console.WriteLine($\"The title of the web is {context.Web.Title}\"); using (var context2 = await pnpContextFactory.CreateAsync(new Uri(\"https://contoso.sharepoint.com/sites/prov-1\"), passwordManagerAuthProvider)) { await context2.Web.LoadAsync(p => p.Title); Console.WriteLine($\"The title of the web is {context2.Web.Title}\"); } } } Next to creating a new PnPContext you can also clone an existing one, cloning is very convenient if you for example created a context for the root web of your site collection but now want to work with a sub site. Below snippet shows how to use cloning: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { var web = await context.Web.GetAsync(); Console.WriteLine($\"Title: {web.Title}\"); using (var subSiteContext = await context.CloneAsync(new Uri(\"https://contoso.sharepoint.com/sites/siteA/subsite\"))) { var subWeb = await subSiteContext.Web.GetAsync(); Console.WriteLine($\"Sub site title: {subWeb.Title}\"); } } Using the PnPContext for operations on Microsoft 365 All operations on Microsoft 365 start from the PnPContext instance you've obtained from the PnPContextFactory . Below sample shows a simple get operation that requests data from Microsoft 365 and outputs it to the console: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { var web = await context.Web.GetAsync(); Console.WriteLine($\"Title: {web.Title}\"); } Here follows another example that shows how to define which properties need to be loaded while executing the request: var team = await context.Team.GetAsync(p => p.Description, p => p.FunSettings, p => p.DiscoverySettings, p => p.Members); When you see an asynchronous call being used, it means that the call is executed immediately. However, you can easily group multiple requests in a batch and send them in one call to the server via the built in batching support: var myList = await context.Web.Lists.GetByTitleAsync(\"TestList\"); if (myList != null) { // Create three list items and add them via single server request Dictionary<string, object> values = new Dictionary<string, object> { { \"Title\", \"PnP Rocks!\" } }; await myList.Items.AddBatchAsync(values); await myList.Items.AddBatchAsync(values); await myList.Items.AddBatchAsync(values); // Send batch to the server await context.ExecuteAsync(); } To update Microsoft 365 you simply update the needed properties in your model and then call UpdateAsync or UpdateBatchAsync (used for batching): var myList = await context.Web.Lists.GetByTitleAsync(\"Documents\"); if (myList != null) { myList.Description = $\"Updated on UTC {DateTime.UtcNow}\"; await myList.UpdateAsync(); } Deleting follows a similar pattern, but now you use DeleteAsync or Delete : var myList = await context.Web.Lists.GetByTitleAsync(\"ListToDelete\"); if (myList != null) { await myList.DeleteAsync(); } If you like, you can also leverage a fluent syntax enriched with LINQ (Language Integrated Query). For example, in the following code excerpt you can see how to write a query for the items of a list. var list = await context.Web.Lists.GetByTitleAsync(\"Documents\"); var document = await list.Items.Where(i => i.Title == \"Sample Document\") .QueryProperties(i => i.Id, i => i.Title) .FirstOrDefaultAsync(); if (document != null) { Console.WriteLine($\"Document Title: {document.Title}\"); } Another approach to mainly limit the data that's being pulled from Microsoft 365 is using the QueryProperties() method on the properties specified in the lambda expression(s), below example shows using QueryProperties() in a recursive manner: next to the Title property of the Web this request also loads the Lists for the Web and for each List it loads the Id, Title, DocumentTemplate and ContentTypes property. Given List ContentTypes is a collection, the Name and FieldLinks properties of each content type are loaded and, in turn, for ContentType FieldLinks, the Name property is loaded. await context.Web.LoadAsync(p => p.Title, p => p.ContentTypes.QueryProperties(p => p.Name), p => p.Lists.QueryProperties(p => p.Id, p => p.Title, p => p.DocumentTemplate, p => p.ContentTypes.QueryProperties(p => p.Name, p => p.FieldLinks.QueryProperties(p => p.Name))) ); The QueryProperties() method can also be combined with the various GetBy methods: below call will load the list with as title \"Documents\" and for that list all ContentTypes are loaded with all their respective FieldLinks . var web = context.Web; var list = await web.Lists.GetByTitleAsync(\"Documents\", p => p.Title, p => p.ListExperience, p => p.ContentTypes.QueryProperties(p => p.Id, p => p.Name, p=>p.FieldLinks.QueryProperties(p=>p.Id, p=>p.Name)));"
  },
  "using-the-sdk/security-groups.html": {
    "href": "using-the-sdk/security-groups.html",
    "title": "Working with groups | PnP Core SDK",
    "keywords": "Working with groups In Microsoft 365 there's the concept of Microsoft 365 group with owners and members and there are SharePoint groups. The latter is the main topic of this page as SharePoint groups is the common model to used to grant users or other groups access to a SharePoint site. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with lists } SharePoint Groups SharePoint groups are defined at the web level and by default does each web has an owners group, a members group and a visitors group. Adding users to those default created groups is a commonly used model, but you can also add a new group with it's role definitions and users. Getting groups To get the groups on a web you query the SiteGroups property which return a collection of ISharePointGroup instances. If you want to work with the default groups you can get a reference to these groups via the AssociatedOwnerGroup , AssociatedMemberGroup or AssociatedVisitorGroup properties of an IWeb . // Option A: Load the default groups await context.Web.LoadAsync(p => p.AssociatedMemberGroup, p => p.AssociatedOwnerGroup, p => p.AssociatedVisitorGroup); await foreach(var user in context.Web.AssociatedOwnerGroup.Users.AsAsyncEnumerable()) { // do something with the user/group } // Option B: load all the groups with their users await context.Web.LoadAsync(p => p.SiteGroups.QueryProperties(u => u.Users)); foreach(var group in context.Web.SiteGroups.AsRequested()) { // do something with the group } Adding a group with a custom role definition Adding a new SharePoint group is done via the usual Add methods. When a group is added you also need to assign a role to it (see Configuring roles ) otherwise the users added to group will not have any permissions on the SharePoint site. // Add a new role definition for our new group, a limited reader role var roleDefinition = await context.Web.RoleDefinitions.AddAsync(roleDefName, Model.SharePoint.RoleType.Reader, new Model.SharePoint.PermissionKind[] { Model.SharePoint.PermissionKind.Open }); // Add the new SharePoint group var siteGroup = await context.Web.SiteGroups.AddAsync(\"Limited readers\"); // Add the role definition to our group await siteGroup.AddRoleDefinitionsAsync(roleDefinition.Name); Editing a group To update a group you first change the needed properties and then call one of the Update methods. Note As a group's description cannot contain html characters the provided html is turned into text automatically. Also is the description length automatically truncated at 511 characters. // First get the group to update var siteGroup = await context.Web.SiteGroups.FirstOrDefaultAsync(g => g.Title == \"Limited readers\"); // Update the group, e.g. the Description property siteGroup.Description = \"Group for users with limited read access to this site\"; await siteGroup.UpdateAsync(); Deleting a group To delete a group use one of the Delete methods. // First get the group to delete var siteGroup = await context.Web.SiteGroups.FirstOrDefaultAsync(g => g.Title == \"Limited readers\"); // Delete the group await siteGroup.DeleteAsync(); Adding users/groups to a group Once a group has been created adding users or other groups is a common task which can be done using one of the AddUser methods. // First get the group to add users to var siteGroup = await context.Web.SiteGroups.FirstOrDefaultAsync(g => g.Title == \"Limited readers\"); // Get the user to add var currentUser = await context.Web.GetCurrentUserAsync(); // Add the user await addedGroup.AddUserAsync(currentUser.LoginName); Listing the users in a group To query the users in a group you need to load/get the Users property of the group. // Notice how the users are loaded var myGroup = await context.Web.SiteGroups.QueryProperties(p => p.Users).FirstOrDefaultAsync(g => g.Title == \"Limited readers\"); foreach(var user in myGroup.Users.AsRequested()) { // do something with the group user } Removing users/groups from a group Removing users from a group is done using the RemoveUser methods. // First get the group to remove users from var siteGroup = await context.Web.SiteGroups.FirstOrDefaultAsync(g => g.Title == \"Limited readers\"); // Get the user to remove var currentUser = await context.Web.GetCurrentUserAsync(); // Remove the user await addedGroup.RemoveUserAsync(currentUser.Id); Microsoft 365 groups When a site is connected to a Microsoft 365 group then the Microsoft 365 group's owners are also site collection administrators and are part of the site's default \"Owners\" SharePoint group. The Microsoft's 365 group members will be automatically part of the site's default \"Members\" SharePoint group. Important to understand is that the Microsoft 365 group's owners and members complement the existing SharePoint security model, meaning it's perfectly possible to define add a SharePoint group with members in a Microsoft 365 group connected site (e.g. a team site). Important to understand is the permissions set of the SharePoint site via SharePoint groups do not apply to the Microsoft 365 group and it's other connected resources (e.g. a mailbox, Yammer group etc). Go here to learn more."
  },
  "using-the-sdk/security-intro.html": {
    "href": "using-the-sdk/security-intro.html",
    "title": "Configuring site security | PnP Core SDK",
    "keywords": "Configuring site security In SharePoint the definition of what a user or group can do on a securable object (Web, List, ListItem) is defined as a role (a.k.a. permission level). For example the role \"Full Control\" has many permissions like \"Manage Lists\", \"View Items\" and more. The default owners group of a site has the \"Full Control\" role granting all users and groups part of the owners group the related permissions like \"Manage Lists\", \"View Items\" and more. Roles are always managed at the root web level, meaning there's only one set of roles defined per site collection. By default securable objects inherit permissions: the permissions set on the site are inherited by each list and the are again inherited by each list item. If a user is then added to the site's contributors group he immediately has the \"Full Control\" role on all of the content in the site. However, sometimes it's need to provide other permissions for a sub site, for a list or for a list item which is implemented by breaking the permission inheritance for the securable object followed by setting the correct permissions on the securable object. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with lists } Configuring roles Listing the existing roles To query the roles defined on the IWeb instance load the RoleDefinitions property on the root web of the site collection. var roleDefinitions = (await context.Web.GetAsync(p => p.RoleDefinitions)).RoleDefinitions; foreach(role in roleDefinitions) { // do something with the role // Typical roles are \"Full Control\", \"Edit\", \"Contribute\", ... } Understanding if a role has a permission To verify if a role has a given permission level you can use // Context is a root web context var roleDefinition = await context.Web.RoleDefinitions.FirstOrDefaultAsync(d => d.Name == \"Full Control\"); if (roleDefinition.BasePermissions.Has(PermissionKind.ViewPages)) { // The \"Full Control\" role has the \"View Pages\" permission } Adding a custom role If the default roles and their associated permissions do not fit your needs you can create a new role. Note It's not recommended to change the out of the box provided roles. // Load the roles, context is a root web context var roleDefinitions = (await context.Web.GetAsync(p => p.RoleDefinitions)).RoleDefinitions; // Add a custom role var customRole = await roleDefinitions.AddAsync(\"My custom role\", RoleType.None, new PermissionKind[] { PermissionKind.ViewPages, PermissionKind.ViewListItems }, \"Limited viewing only\"); Updating a role A role can also be updated, simply call one of the Update methods after having changed the role. The change the permissions a role has use the Clear and Set methods on the BasePermissions property: var customRole = await context.Web.RoleDefinitions.FirstOrDefaultAsync(d => d.Name == \"My custom role\"); customRole.BasePermissions.Clear(PermissionKind.ViewPages); customRole.BasePermissions.Set(PermissionKind.AddListItems); customRole.Description = \"Custom role\"; // Send update to server await customRole.UpdateAsync(); Deleting a role Deleting a role can be done via the Delete methods: var customRole = await context.Web.RoleDefinitions.FirstOrDefaultAsync(d => d.Name == \"My custom role\"); // Delete the role await customRole.DeleteAsync(); Assigning roles To actually grant a permission a role needs to be assigned to a user or group. By default the groups and user and their assigned roles are maintained at the root web level, but it's possible to break permission inheritance and have different permissions at sub web, list or list item level. In PnP Core SDK the three objects that can be secured ( IWeb , IList and IListItem ) all implement the ISecurableObject interface providing the needed properties and methods to configure security. Note The below chapters use an IList as sample but they apply to either IWeb , IList and IListItem . Breaking permission inheritance By default permissions are inherited, so each securable object inherits from it's securable object parent. If you want to configure different permissions for let's say an IList then you need to first break permission inheritance using one of the BreakRoleInheritance methods. Using the first method parameter copyRoleAssignments can opt to copy over the current permissions so that you can edit them later on. If set to false then no permissions are copied over. The second parameter clearSubscopes determines what will happen with the existing custom permissions: imagine the scenario where that a list in a sub has custom permissions set and then the custom permissions are defined on the web which is the list's ISecurableObject parent. When clearSubscopes is set to true then existing custom permissions on securable child objects are dropped in favor of the current one, if set to false the existing custom permissions are left as is. var myList = await context.Web.Lists.GetByTitleAsync(\"mylist\"); // Break permission inheritance await myList.BreakRoleInheritanceAsync(false, true); Restoring permission inheritance If a securable object again needs to inherit the permissions from it's securable parent object then use one of the ResetRoleInheritance methods. var myList = await context.Web.Lists.GetByTitleAsync(\"mylist\"); // Reset permission inheritance await myList.ResetRoleInheritanceAsync(); Listing the current roles a user or group has on a securable object To get a list of the currently assigned roles for a securable object use the GetRoleDefinitions methods. Simply pass in the id of principal (= user or group) you want to get the roles for. var myList = await context.Web.Lists.GetByTitleAsync(\"mylist\"); // Load the role assignments on this list, also load the role definitions await myList.LoadAsync(w => w.RoleAssignments.QueryProperties(p => p.RoleDefinitions)); foreach (var roleAssignment in myList.RoleAssignments.AsRequested()) { // do something with the role assignment } Checking if custom permissions are defined Checking if a securable object has custom role assignments is done via the HasUniqueRoleAssignments . Note When loading data you can apply a filter (via the where() LINQ operator) and you can filter on HasUniqueRoleAssignments == true when querying webs and lists, however this is not possible when querying list items. var myList = await context.Web.Lists.GetByTitleAsync(\"mylist\"); // Load the role assignments on this list, also load the role definitions await myList.LoadAsync(w => w.HasUniqueRoleAssignments); if (myList.HasUniqueRoleAssignments) { // List has custom permissions set, let's reset them await myList.ResetRoleInheritanceAsync(); } Assigning roles to a user or group Once you've broken permissions inheritance you will often assign roles for one or more users and groups to the securable object. To do so there are approaches: doing a bulk role assignment via the AddRoleDefinitions methods or assigning one role via the AddRoleDefinition methods. Both are shown in below example. var myList = await context.Web.Lists.GetByTitleAsync(\"mylist\"); // Get current user var currentUser = await context.Web.GetCurrentUserAsync(); // Approach A: adding single role to the current user var roleDefinitions = (await context.Web.GetAsync(p => p.RoleDefinitions)).RoleDefinitions; var editRole = roleDefinitions.AsRequested().FirstOrDefault(p => p.Name == \"Edit\"); await myList.AddRoleDefinitionAsync(currentUser.Id, editRole); // Approach B: adding multiple roles at once await myList.AddRoleDefinitionsAsync(currentUser.Id, new string[] { \"Full Control\", \"Edit\" }); Removing roles from a user or group Just like adding roles there's also options for removing roles from a user or group for a securable object: doing a bulk role removal via the RemoveRoleDefinitions methods or removing one role via the RemoveRoleDefinition methods. Both are shown in below example. var myList = await context.Web.Lists.GetByTitleAsync(\"mylist\"); // Get current user var currentUser = await context.Web.GetCurrentUserAsync(); // Approach A: remove single role to the current user var roleDefinitions = (await context.Web.GetAsync(p => p.RoleDefinitions)).RoleDefinitions; var editRole = roleDefinitions.AsRequested().FirstOrDefault(p => p.Name == \"Edit\"); await myList.RemoveRoleDefinitionAsync(currentUser.Id, editRole); // Approach B: Removing multiple roles at once await myList.RemoveRoleDefinitionsAsync(currentUser.Id, new string[] { \"Full Control\", \"Edit\" });"
  },
  "using-the-sdk/security-users.html": {
    "href": "using-the-sdk/security-users.html",
    "title": "Working with users | PnP Core SDK",
    "keywords": "Working with users Using SharePoint groups is the common model to used to grant users or other groups access to a SharePoint site, but you can also directly grant access to a user . When a user or group is assigned a role then that user has to exist in the web's user table. In this article you'll learn how query and add users to the web's user table. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with lists } SharePoint users SharePoint Online uses Azure Active Directory as the source of regular users to work with, but before you can grant a user a role the user needs to exist in the root web's user table which is implemented as a hidden list named User Information List . Besides the regular users there are also special user accounts, below are the common ones you can work with. There are other system users (e.g. i:0#.w|nt service\\spsearch ) that should be left untouched. User account Login name Description Everyone c:0(.s|true Use this user to represent all users in your organization Everyone except external users c:0-.f|rolemanager|spo-grid-all-users/<guid> Use this user to represent all users except the internal users in your organization As you can't simply update the user table list to add users, use the approaches as outlined below. Getting users To get the user's defined for the current site load the web's SiteUsers property. await context.Web.LoadAsync(p => p.SiteUsers); foreach(var group in context.Web.SiteUsers.AsRequested()) { // do something with the user } To get the current user use one of the GetCurrentUser methods: var currentUser = await context.Web.GetCurrentUserAsync(); To verify if a specific user exists you can use the GetUserById methods: var foundUser = await context.Web.GetUserByIdAsync(userId); Adding/ensuring a user Before a user can be used the user needs to exist and the best way to ensure a user exists is by using the EnsureUser methods. // Regular user var user = await context.Web.EnsureUserAsync(\"joe@contoso.onmicrosoft.com\"); // Special user var specialUser = await context.Web.EnsureUserAsync(\"Everyone except external users\"); Microsoft 365 users When working with SharePoint sites you use a SharePoint user, but when you for example want to add a user to a Microsoft 365 group's owners you need to use a Microsoft Graph user object. When you either have a SharePoint user or Microsoft Graph user you can translate that user via AsGraphUser and AsSharePointUser methods. Below example shows how a user granted access to a Microsoft Teams team can be translated into a SharePoint user. // Load the Team owners, returns a collection of `IGraphUser` objects var team = await context.Team.GetAsync(p => p.Owners); // Get the first owner var graphUser = team.Owners.AsRequested().FirstOrDefault(); // Get sharepoint user for graph user var sharePointUser = await graphUser.AsSharePointUserAsync(); The opposite flow is also possible: // Get the users defined for this web var web = await context.Web.GetAsync(p => p.SiteUsers); // Get the first \"regular\" user var testUser = web.SiteUsers.AsRequested().FirstOrDefault(p => p.PrincipalType == PrincipalType.User); // Get that user as a Graph user var graphUser = await testUser.AsGraphUserAsync();"
  },
  "using-the-sdk/sites-hubsites.html": {
    "href": "using-the-sdk/sites-hubsites.html",
    "title": "Working with Hub Sites | PnP Core SDK",
    "keywords": "Working with Hub Sites In SharePoint, site collections support hub sites, that allow you to create logical groupings of multiple sites with a hub site. When using the PnP Core SDK, the ISite interface has methods to register, join, unjoin and unregister hub sites. Creating Context In this article, you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with Teams } A PnPContext always has a reference to the ISite of the underlying site collection. Using the site object the following operations can be called when working with hub sites: Get Hub Site Data Firstly, you will need a connection to a site, then you can either call a method to get the current Site Hub data OR specify an Id for another HubSite ID, to get the details. This is shown in the example below: var hubResult = await context.Site.GetHubSiteData(site.HubSiteId); var title = hubResult.Title; var siteUrl = hubResult.SiteUrl; Register a hub site This registers a site as the primary hub site, using this code to apply this to a site: ISite site = await context.Site.GetAsync( p => p.HubSiteId, p => p.IsHubSite); if(!site.IsHubSite){ var result = await site.RegisterHubSiteAsync(); } Join a hub site This associates the site to an existing hub site, using this code to apply this to a site: Note Ignore the section \"creating a context\", this is included in the code below. using (var contextPrimaryHub = await pnpContextFactory.CreateAsync(\"PrimaryHubSite\")) { // Get the primary hub site details ISite primarySite = await contextPrimaryHub.Site.GetAsync( p => p.HubSiteId, p => p.IsHubSite); // Associate group site to the hub using (var context = await pnpContextFactory.CreateAsync(\"AnyExistingSite\")) { ISite assocSite = await context.Site.GetAsync( p => p.HubSiteId, p => p.IsHubSite); if(assocSite.HubSiteId == Guid.Empty){ var resultJoin = await assocSite.JoinHubSiteAsync(primarySite.HubSiteId); } } } Unjoin a hub site This removes the association on the site to an existing hub site, using this code to apply this to a site: ISite site = await context.Site.GetAsync( p => p.HubSiteId, p => p.IsHubSite); if(assocSite.HubSiteId != Guid.Empty){ var result = await site.UnJoinHubSiteAsync(); } Unregister a hub site This unregisters a site as the primary hub site, using this code to apply this to a site: ISite site = await context.Site.GetAsync( p => p.HubSiteId, p => p.IsHubSite); if(site.IsHubSite){ var result = await site.UnregisterHubSiteAsync(); }"
  },
  "using-the-sdk/sites-intro.html": {
    "href": "using-the-sdk/sites-intro.html",
    "title": "Working with sites | PnP Core SDK",
    "keywords": "Working with sites In SharePoint there are site collections and inside a site collection you have at least one web (the root web), which on it's own can have other webs (child webs). Quite often when talking about a web the term site or sub site is used. When using the PnP Core SDK a site collection is referred to via the ISite interface while a web (root web, child web or sub web) is defined via the IWeb interface . In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with sites } Getting a site A PnPContext always has a reference to the ISite of the underlying site collection and the IWeb of the connected site, so getting the current Site is as a simple as using the Site property on the PnPContext. When a context is created the Site and Web properties are loaded with some elementary properties like Id and GroupId. var site = context.site; var id = site.Id; If you want to load additional site properties you can do that via using one of the Get methods: // Load the root folder await context.Web.LoadAsync(p => p.RootFolder); // Load the hub site id var site = await context.Site.GetAsync(p => p.HubSiteId); Console.WriteLine(site.HubSiteId); Getting changes for a site You can use the GetChanges methods on an ISite to list all the changes. See Enumerating changes that happened in SharePoint to learn more."
  },
  "using-the-sdk/social-following.html": {
    "href": "using-the-sdk/social-following.html",
    "title": "Content following APIs | PnP Core SDK",
    "keywords": "Content following APIs Content following APIs allow you to manage different aspects of content following: follow/stop following users, docs, sites and tags, getting followers and checking whether you follow specific content or not. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and shown below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { } Get the general social following information for the current user This information contains MyFollowedDocumentsUri - the url to see all documents the user is following, MyFollowedSitesUri - the url to see all sites the user is following, and the SocialActor - an object, which represents information about the current user (account name, email, status and other properties). To get the social following information, call GetFollowingInfo : var info = await context.Social.Following.GetFollowingInfoAsync(); Follow the content You can follow 4 types of entities in SharePoint using social API: a tag, a site, a document and a user. To follow the content, use the corresponding method Follow . As an argument you should pass an instance of an object, which represents specific following request: // follow a site var result = await context.Social.Following.FollowAsync(new FollowSiteData { ContentUri = context.Uri.AbsoluteUri }); // follow a document var result = await context.Social.Following.FollowAsync(new FollowDocumentData { ContentUri = $\"{siteUrl}/Shared Documents/test.docx\" }); // follow a user var accountName = \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com\"; var result = await context.Social.Following.FollowAsync(new FollowPersonData { AccountName = accountName }); // follow a tag var result = await context.Social.Following.FollowAsync(new FollowTagData { TagGuid = new Guid(\"4fd0d107-8df7-4ace-bffc-72aa0f9a736a\") }); The result is an enum, which contains the outcome - either Ok , AlreadyFollowing , LimitReached or InternalError if something went wrong. Stop following the content From the code perspective stop following works very similarly to the Follow , except that the method name is StopFollowing . For example, to stop following a site, you should call: await context.Social.Following.StopFollowingAsync(new FollowSiteData { ContentUri = context.Uri.AbsoluteUri }); To stop following another object just use the right FollowData instance. Check whether you follow specific content var followData = new FollowSiteData { ContentUri = context.Uri.AbsoluteUri }; var isFollowed = await context.Social.Following.IsFollowed(followData); The code above checks if the current user is following a site. To check other content (persons, docs and tags) you should use the corresponding FollowData object. Get people, who follow the specified user To get a list of people, who follow the specified user, use code below: var accountName = \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com\"; IList<IPersonProperties> followers = await context.Social.Following.GetFollowersForAsync(accountName); Gets the people who the specified user is following As an opposite to GetFollowersFor , the below method returns a collection of people, who the specified user is following: var accountName = \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com\"; IList<IPersonProperties> followers = await context.Social.Following.GetPeopleFollowedByAsync(accountName); Check if the current user is following another user var accountName = \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com\"; bool isFollowing = await context.Social.Following.AmIFollowingAsync(accountName); The code checks whether the current user is following the specified user. Check if the current user is followed by another user The opposite to AmIFollowing is AmIFollowedBy . It checks whether the current user is in the followers list for another user: var accountName = \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com\"; bool followed = context.Social.Following.AmIFollowedBy(accountName); Get the content, followed by me As shown before, a user can follow a tag, a document, a person or a site. The FollowedByMe method returns the content, which the current user is following: IList<ISocialActor> myFollowingSites = await context.Social.Following.FollowedByMeAsync(SocialActorTypes.Sites); In the parameter you can specify which content you want to receive back. If you need more than one content type per request, you can apply bitwise operation, i.e.: IList<ISocialActor> myFollowingSitesAndUsers = await context.Social.Following.FollowedByMeAsync(SocialActorTypes.Users | SocialActorTypes.Sites); SocialActorTypes also contains some special content types like WithinLast24Hours , All and some other. Count the number of following content To count on how many sites, tags, documents or users you're following, use FollowedByMeCount . This method counts following content and returns a number: int count = await context.Social.Following.FollowedByMeCountAsync(SocialActorTypes.Users | SocialActorTypes.Sites); It accepts the same SocialActorTypes enum so that you can filter on the following content according to your needs. Get my followers With social following API you can get all current user's followers: IList<ISocialActor> followers = await context.Social.Following.MyFollowersAsync(); Get user suggestions It's possible to get the list of users, who the current user might want to follow: IList<ISocialActor> suggestions = await context.Social.Following.MySuggestionsAsync();"
  },
  "using-the-sdk/social-user-profiles.html": {
    "href": "using-the-sdk/social-user-profiles.html",
    "title": "User profiles APIs | PnP Core SDK",
    "keywords": "User profiles APIs User profiles APIs allow you to read and write user profile properties, change profile picture url, manage OneDrive quotas and other profile-related operations. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and shown below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { } Getting user's properties To get the current user's properties use below code: IPersonProperties properties = await context.Social.UserProfile.GetMyPropertiesAsync(); The return value contains user properties - such as AccountName , Email , PersonalSiteHostUrl , Title , DirectReports , etc. and the profile properties - the set of properties coming and configuring under the user profile service. This set of properties is available under UserProfileProperties property. The amount of return data is quite big, since it includes UserProfileProperties by default. If you need only a few properties, you can apply a select query: IPersonProperties properties = await context.Social.UserProfile.GetMyPropertiesAsync(p => p.DisplayName, p => p.AccountName); In the case above only DisplayName and AccountName will be initialized. You can also query user properties for the specific person by account's name using GetPropertiesFor : var accountName = \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com\"; IPersonProperties properties = await context.Social.UserProfile.GetPropertiesForAsync(accountName, p => p.DisplayName, p => p.AccountName); Finally, if you have a need to get only one specific user profile property, you can use the method GetPropertyFor : var accountName = \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com\"; string propertyValue = await context.Social.UserProfile.GetPropertyForAsync(accountName, \"FirstName\"); Some properties contain multiple values, in this case they will be separated with \" | \" character. Setting user profile properties PnP Core SDK allows you to set user profile properties. To do so, you should call corresponding method: var accountName = \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com\"; await context.Social.UserProfile.SetSingleValueProfilePropertyAsync(accountName, \"FirstName\", \"John\"); The code above changes the first name for the account. If you have a need to change multi-value property, use SetMultiValuedProfileProperty : var accountName = \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com\"; var skills = new List<string>() { \"csharp\", \"typescript\" }; await context.Social.UserProfile.SetMultiValuedProfilePropertyAsync(accountName, \"SPS-Skills\", skills); Please note, that the code above replaces a property with a new value. To add a new value to the list, you should first retrieve the property value with GetPropertyFor and then update it. Setting profile picture To set a user's profile picture: var fileBytes = System.IO.File.ReadAllBytes(\"path/to the picture.jpg\"); await context.Social.UserProfile.SetMyProfilePictureAsync(fileBytes); Due to some caching mechanism, the image might not be available immediately on the UI. Working with OneDrive quotas You can also manipulate OneDrive quotas for a user. To get user's OneDrive max quota: var accountName = \"i:0#.f|membership|admin@m365x790252.onmicrosoft.com\"; var result = await context.Social.UserProfile.GetUserOneDriveQuotaMaxAsync(accountName); To reset quota to its defaults: var outcome = await context.Social.UserProfile.ResetUserOneDriveQuotaToDefaultAsync(accountName); To set quota: // set quota to approx. 5TB and warning to 4TB var outcome = await context.Social.UserProfile.SetUserOneDriveQuotaAsync(accountName, 5497558138880, 4497558138880);"
  },
  "using-the-sdk/syntex-intro.html": {
    "href": "using-the-sdk/syntex-intro.html",
    "title": "Working with SharePoint Syntex | PnP Core SDK",
    "keywords": "Working with SharePoint Syntex SharePoint Syntex provides content services to capture and scale your expertise. SharePoint Syntex uses advanced AI and machine teaching to amplify human expertise, automate content processing, and transform content into knowledge. PnP Core SDK does provide support to help you with content models: you can list content models and deploy them inside your tenant using the provided support. Note PnP Core SDK uses the SharePoint Syntex REST APIs, checkout the SharePoint Syntex document understanding model REST API article for more details on them. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with Syntex Models } Checking if SharePoint Syntex is enabled for the tenant SharePoint Syntex is an add-on to Microsoft 365 that has to be acquired separately, so you can't assume every tenant can use SharePoint Syntex. To check for the SharePoint Syntex enabled you can use the IsSyntexEnabled methods: if (await context.Web.IsSyntexEnabledAsync()) { // Syntex is enabled } else { // No Syntex :-( } Checking if SharePoint Syntex is enabled for the current user SharePoint Syntex is an add-on to Microsoft 365 that has to be acquired separately and licensed to users, so you can't assume every tenant user can use SharePoint Syntex. To check for the SharePoint Syntex enabled for the current user you can use the IsSyntexEnabledForCurrentUser methods: if (await context.Web.IsSyntexEnabledForCurrentUserAsync()) { // SharePoint Syntex is enabled for the current user } else { // No Syntex :-( } Connecting to a Syntex Content Center site Connecting to a SharePoint Syntex Content Center site is an essential step when you're using the PnP Core SDK Syntex support. The SharePoint Syntex Content Center site is special type of site that contains content understanding models: via a content understanding model you teach SharePoint Syntex to read your content the way you would using machine teaching to build AI models with no code. SharePoint Syntex can automatically suggest or create metadata, invoke custom Power Automate workflows, and attach compliance labels to enforce retention or record management policies. To verify if a site is a Syntex Content Center site you can use the IsSyntexContentCenterAsync method on your web. When you want to work with a SharePoint Syntex Content Center site you need to first load it, this can be done using the AsSyntexContentCenterAsync method: // is the site I'm connected to a Syntex Content Center site? bool isContentCenter = await context.Web.IsSyntexContentCenterAsync() // Load the site as content center model var contentCenter = await context.Web.AsSyntexContentCenterAsync(); if (contentCenter != null) { // Use the content center site } Listing the available models To list the available content understanding models in a Syntex Content Center you can use the GetSyntexModelsAsync call that will result in a list of ISyntexModel instances. var cc = await context.Web.AsSyntexContentCenterAsync(); var models = await cc.GetSyntexModelsAsync(); foreach(var model in models) { // do something with the Syntex model } Working with Syntex Content understanding models Once you've loaded a Syntex Content Center site you can work with the content understanding models defined in that Syntex Content Center site: you can publish a model to one or more libraries, you can unpublish a model from a library and you can list the libraries to which a model was published. Publishing a model to a library Syntex content understanding models extract metadata from unstructured content (documents) and therefore to use them you need to publish a model to a document library. Once the model is published to a document library and a new document is added to the library the model will process the added document and will populate the defined metadata. To publish a model via PnP Core SDK you do have several option you can chose to publish to a single library or to multiple libraries in one go. For both publish options you have the choice to provide either an IList or to define SyntexModelPublishOptions as shown in below code snippet. var cc = await context.Web.AsSyntexContentCenterAsync(); var models = await cc.GetSyntexModelsAsync(); // let's work with the first Syntex model var modelToRegister = models.First(); // Get a list reference from a context created for the site hosting the list var documents = await contextForSiteWithData.Web.Lists.GetByTitleAsync(\"Documents\"); var invoices = await contextForSiteWithData.Web.Lists.GetByTitleAsync(\"Invoices\"); // Option A: publish a model to a single library var result = await modelToRegister.PublishModelAsync(documents, MachineLearningPublicationViewOption.NewViewAsDefault); // Option B: publish a model to multiple libraries List<IList> libraries = new(); libraries.Add(documents); libraries.Add(invoices); var result = await modelToRegister.PublishModelAsync(libraries); // Option C: publish to a single library via SyntexModelPublishOptions var result = await modelToRegister.PublishModelAsync( new SyntexModelPublishOptions() { TargetLibraryServerRelativeUrl = $\"/sites/contosoHR/documents\", TargetSiteUrl = \"https://contoso-sharepoint.com/sites/contosoHR\", TargetWebServerRelativeUrl = \"/sites/contosoHR\", }); // Option D: publish a model to multiple libraries via SyntexModelPublishOptions List<SyntexModelPublishOptions> publications = new(); publications.Add(new SyntexModelPublishOptions() { TargetLibraryServerRelativeUrl = $\"/sites/contosoHR/documents\", TargetSiteUrl = \"https://contoso-sharepoint.com/sites/contosoHR\", TargetWebServerRelativeUrl = \"/sites/contosoHR\", ViewOption = MachineLearningPublicationViewOption.NewViewAsDefault }); publications.Add(new SyntexModelPublicationOptions() { TargetLibraryServerRelativeUrl = $\"/sites/contosoHR/invoices\", TargetSiteUrl = \"https://contoso-sharepoint.com/sites/contosoHR\", TargetWebServerRelativeUrl = \"/sites/contosoHR\", ViewOption = MachineLearningPublicationViewOption.NoNewView }); var result = await modelToRegister.PublishModelAsync(publications); Unpublish a model from a library Unpushing models from a library follows the same pattern as publishing them: you can either use an IList or define SyntexModelUnPublishOptions and then unpublish a model from a single library or from multiple. var cc = await context.Web.AsSyntexContentCenterAsync(); var models = await cc.GetSyntexModelsAsync(); // let's work with the first Syntex model var modelToRegister = models.First(); // Get a list reference from a context created for the site hosting the list var documents = await contextForSiteWithData.Web.Lists.GetByTitleAsync(\"Documents\"); var invoices = await contextForSiteWithData.Web.Lists.GetByTitleAsync(\"Invoices\"); // Option A: unpublish a model from a single library var result = await modelToRegister.UnPublishModelAsync(documents); // Option B: unpublish a model from multiple libraries List<IList> libraries = new(); libraries.Add(documents); libraries.Add(invoices); var result = await modelToRegister.UnPublishModelAsync(libraries); // Option C: unpublish from a single library via SyntexModelUnPublishOptions var result = await modelToRegister.UnPublishModelAsync( new SyntexModelUnPublishOptions() { TargetLibraryServerRelativeUrl = $\"/sites/contosoHR/documents\", TargetSiteUrl = \"https://contoso-sharepoint.com/sites/contosoHR\", TargetWebServerRelativeUrl = \"/sites/contosoHR\", }); // Option D: unpublish a model from multiple libraries via SyntexModelUnPublicationOptions List<SyntexModelUnPublishOptions> publications = new(); publications.Add(new SyntexModelUnPublishOptions() { TargetLibraryServerRelativeUrl = $\"/sites/contosoHR/documents\", TargetSiteUrl = \"https://contoso-sharepoint.com/sites/contosoHR\", TargetWebServerRelativeUrl = \"/sites/contosoHR\", }); publications.Add(new SyntexModelUnPublishOptions() { TargetLibraryServerRelativeUrl = $\"/sites/contosoHR/invoices\", TargetSiteUrl = \"https://contoso-sharepoint.com/sites/contosoHR\", TargetWebServerRelativeUrl = \"/sites/contosoHR\", }); var result = await modelToRegister.UnPublishModelAsync(publications); List the libraries to which a model was published If you want to know to which libraries a Syntex model was deployed then you can use the GetModelPublicationsAsync method to get a list of libraries to which the model was published. var cc = await context.Web.AsSyntexContentCenterAsync(); var models = await cc.GetSyntexModelsAsync(); // let's work with the first Syntex model var modelToRegister = models.First(); // Get libraries to which this model was published var libraries = await modelToRegister.GetModelPublicationsAsync(); foreach(var library in libraries) { // Do something with the library publication } Classify and extract individual files When there are one or more models published to a library any newly added document is processed via these models automatically. Existing content however is not, but using the ClassifyAndExtractAsync method you can request an existing IFile to be classified and extracted. string documentUrl = $\"{context.Uri.PathAndQuery}/Shared Documents/document.docx\"; // Get a reference to the file IFile testDocument = await context.Web.GetFileByServerRelativeUrlAsync(documentUrl); // Classify and extract the file var classifyAndExtractResult = await testDocument.ClassifyAndExtractAsync(); Classify and extract all files in a library When you've published a Syntex model to an existing library the files in that library are not automatically classified and extracted by that model, only newly added files will be classified and extracted. Previous chapter showed how you can trigger this for a single file, but you can also classify and extract all files in a library using the ClassifyAndExtractAsync method on the IList . Note For libraries containing 5000 items or more it's strongly recommended to use the off peak SharePoint Syntex queue. See the ClassifyAndExtractOffPeak methods in the next chapter to learn how to use the off peak queue. // Get a reference to the list to be classified and extracted var invoices = await context.Web.Lists.GetByTitleAsync(\"Invoices\"); // Request classification and extraction for all files that were never classified and extracted var classifyAndExtractResults = await invoices.ClassifyAndExtractAsync(); Note You can set the optional ClassifyAndExtractAsync method parameter force to true to have all files in the library (again) classified and extracted. Classify and extract all files in a library or folder using the off-peak queue When you've published a Syntex model to an existing library the files in that library are not automatically classified and extracted by that model, only newly added files will be classified and extracted. Previous chapter showed how you can trigger this for a single file or for all files by enumerating all files and submitting them. For very large libraries enumerating files is time consuming and using the option to classify and extract the library during off-peak hours is better // Get a reference to the list to be classified and extracted var invoices = await context.Web.Lists.GetByTitleAsync(\"Invoices\", p => p.RootFolder); // Request classification and extraction for all files in the Invoices list that were never classified and extracted var classifyAndExtractResults = await invoices.ClassifyAndExtractOffPeakAsync(); // Only request classification and extraction for all files in the folder named 2021/Q1/Jan var jan2021 = await invoices.RootFolder.EnsureFolderAsync(\"2021/Q1/Jan\"); var classifyAndExtractResultsForJan2021 = await jan2021.ClassifyAndExtractOffPeakAsync();"
  },
  "using-the-sdk/taxonomy-advanced.html": {
    "href": "using-the-sdk/taxonomy-advanced.html",
    "title": "Working with taxonomy: advanced concepts | PnP Core SDK",
    "keywords": "Working with taxonomy: advanced concepts Whereas the introduction article got you started working with taxonomy data, this article will cover some additional scenarios like term set and term properties, pinning and reusing terms. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for adding, updating and deleting data } Working with term set properties A term set has a property bag implemented via the Properties property on an ITermSet . This property bag is of type ITermSetPropertyCollection and you can perform CRUD operations on it. To read the term set properties you can read all properties of a term set or use a LINQ query to load specific properties // Load a term set with all it's properties var termSet = await myTermGroup.Sets.GetByIdAsync(termSet.Id, p => p.Properties); foreach (var property in termSet.Properties.AsRequested()) { // Do something with the property } // Load a specific property of a term set var property = termSet.Properties.FirstOrDefault(p => p.KeyField == \"property1\"); To add new properties you use one of the AddProperty methods on the ITermSet // Add a new property await termSet.AddPropertyAsync(\"property2\", \"property 2 value\"); // Persist the added property await termSet.UpdateAsync(); Once you've loaded a property you can also update it using the same AddPropertyAsync method, the method will update the property if it already existed in the property bag or add it when it was not yet available. // Update property2 with a new value await termSet.AddPropertyAsync(\"property2\", \"updated property 2 value\"); // Persist the updated property await termSet.UpdateAsync(); To delete properties you remove them from the ITermSetPropertyCollection and then use one of the Update methods. // Delete all properties termSet.Properties.Clear(); // Persist the change await termSet.UpdateAsync(); Working with term properties Working with term properties is identical to working with term set properties. Pinning and reusing a term Pinning a term makes linked copies of the term and its children available at the destination. The children of a pinned term can only be created or edited at the source and the changes will reflect everywhere the term is used. Reusing a term makes linked copies of the term and its children available at the destination. Children can be created for a reused term anywhere it is used but will exist only in the term set they were created. Both pinning a term or reusing a term comes down to adding a term relation of either type TermRelationType.Pin or TermRelationType.Reuse . // Pin term A in term set A under term B in term set B await termA.Relations.AddAsync(TermRelationType.Pin, termSetB, termB); // Reuse TermA under TermSetB await termA.Relations.AddAsync(TermRelationType.Reuse, termSetB);"
  },
  "using-the-sdk/taxonomy-intro.html": {
    "href": "using-the-sdk/taxonomy-intro.html",
    "title": "Working with taxonomy data: an introduction | PnP Core SDK",
    "keywords": "Working with taxonomy data: an introduction The application that create might need taxonomy data or you might need to create taxonomy data like term groups, term sets and terms. All of this is possible using PnP Core SDK as explained in this article. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for adding, updating and deleting data } Working the term store All taxonomy objects like term groups, term sets and terms live in a term store. This term store can be access via the TermStore property of the PnPContext you're using: var termStore = await context.TermStore.GetAsync(); The TermStore property is the entry point to all the taxonomy data, but it can also be configured. Typical configurations on a term store are adding additional languages or updating the default term store language. var termStore = await context.TermStore.GetAsync(); if (!termStore.Languages.Contains(\"nl-NL\")) { // Add a new language termStore.Languages.Add(\"nl-NL\"); await termStore.UpdateAsync(); } Removing a term language can be done as well: var termStore = await context.TermStore.GetAsync(); if (termStore.Languages.Contains(\"nl-NL\")) { // Remove a language termStore.Languages.Remove(\"nl-NL\"); await termStore.UpdateAsync(); } Working with term groups Term groups are used to organize term sets and define permissions on who can manage or author new term sets and terms in the group. To get term groups you can either load all term groups, use a LINQ query to load specific groups or get a term group by id or name: // Load all term groups await context.TermStore.LoadAsync(p => p.Groups); // Load specific term groups using a LINQ query var myTermGroup = await context.TermStore.Groups.Where(p => p.Name == \"MyTermSets\").FirstOrDefaultAsync(); // Get a term group by name (equivalent to previous LINQ query) var myTermGroup = await context.TermStore.Groups.GetByNameAsync(\"MyTermSets\"); // Get a term group by id var myTermGroup = await context.TermStore.Groups.GetByIdAsync(\"0e8f395e-ff58-4d45-9ff7-e331ab728beb\"); Adding a term group is done using the Add methods on the ITermGroupCollection : var myNewGroup = await context.TermStore.Groups.AddAsync(\"My New Group\", \"Optional group description\"); Once you've a reference to a term group you can also update that term group: myNewGroup.Name = \"Updated name!\"; await myNewGroup.UpdateAsync(); Deleting a term group can be done using the Delete methods: await myNewGroup.DeleteAsync(); Working with term sets Term sets are the container for the terms and term sets themselves always are part of a term group. So to work with term sets you always have to go via the term group. You can opt to load all term sets in a term group, write a LINQ query or get a term set by id: // Get the term group hosting the needed term set var myTermGroup = await context.TermStore.Groups.GetByIdAsync(\"0e8f395e-ff58-4d45-9ff7-e331ab728beb\"); // Load all term sets in the group await myTermGroup.LoadAsync(p => p.Sets); foreach(var termSet in myTermGroup.Sets.AsRequested()) { // Use the term set } // Write a LINQ query to load a term set var termSet = await myTermGroup.Sets.Where(p => p.Id == \"2374aacb-8c25-4991-aa94-7585bcedf38d\").FirstOrDefaultAsync(); // Get a term set by id, identical to above LINQ approach var termSet = await myTermGroup.Sets.GetByIdAsync(\"2374aacb-8c25-4991-aa94-7585bcedf38d\"); Adding a term set to a term group is done using the Add methods on the ITermSetCollection : var termSet = await myTermGroup.Sets.AddAsync(\"MyTermSet\", \"Optional set description\"); Once you've a reference to a term set you can also update that term set: // Update the term set description termSet.Description = \"updated description\"; // Add a new localized label for the term set (termSet.LocalizedNames as TermSetLocalizedNameCollection).Add(new TermSetLocalizedName() { LanguageTag = \"nl-NL\", Name = \"Dutch name\" }); // Send the updates to the server await termSet.UpdateAsync(); Deleting a term set can be done using the Delete methods: await termSet.DeleteAsync(); Working with terms A term set can hold one or more terms and each term on it's own can hold other terms...so you can have a term hierarchy. As terms live in a term set working with terms means first getting the term set, like shown in previous chapter. If you want to work with terms you first need to load them and this can be done by loading all terms, by writing a LINQ query or by getting a term by id: // Load all terms in a term set that have the term set as parent await termSet.LoadAsync(p => p.Terms); foreach (var term in termSet.Terms.AsRequested()) { // Load the child terms of this term await term.LoadAsync(p => p.Terms); foreach (var childTerm in term.Terms.AsRequested()) { // Do something with the term } // Do something with the term } // Load terms via a LINQ query var term = await termSet.Terms.Where(p => p.Id == \"6b39335d-1975-4fd7-9696-b40d57c9bde7\").FirstOrDefaultAsync(); // Get a term by id from a term set var term = await termSet.Terms.GetByIdAsync(\"6b39335d-1975-4fd7-9696-b40d57c9bde7\"); // Get a term by id from another term var childTerm = await term.Terms.GetByIdAsync(\"2dd726ce-1f14-4113-be57-5e0bc2d28914\"); Adding a term to a term set or another term is done using the Add methods on the ITermCollection : // Add term at term set level, the default term store language will be assumed for the language of the name/description var newTerm = await termSet.Terms.AddAsync(\"MyTerm\", \"Optional term description\"); // Add child term to another term, the default term store language will be assumed for the language of the name/description var childTerm = await newTerm.Terms.AddAsync(\"MyChildTerm\", \"Optional term description\"); Once you've a reference to a term you can also update that term: // Add a new term label for language fr-FR // Note: fr-FR must be a language allowed in the term store newTerm.AddLabelAndDescription(\"French label\", \"fr-FR\", false, \"Optional term description\"); await newTerm.UpdateAsync(); Deleting a term can be done using the Delete methods: await term.DeleteAsync();"
  },
  "using-the-sdk/teams-archiving.html": {
    "href": "using-the-sdk/teams-archiving.html",
    "title": "Working with Teams: Team Archiving | PnP Core SDK",
    "keywords": "Working with Teams: Team Archiving The Core SDK provides support for archiving and unarchiving Teams. Creating Context In this article, you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with Teams } Archiving a Team To archive a Team, use the Archive method. The following examples show how a Team can be archived including waiting for an operation to complete: // Get the Team var team = await context.Team.GetAsync(); // Perform the archiving operation var archiveOperation = await team.ArchiveAsync(); // lets wait for the operation to complete await archiveOperation.WaitForCompletionAsync(); // reload from the server team = await context.Team.GetAsync(); // Server side should be archived as well now var archiveStatus = team.IsArchived; Unarchiving a Team To perform an operation to unarchive a Team use the following example to show you how to do it: // Get the Team var team = await context.Team.GetAsync(); // Perform the unarchiving operation var unarchiveOperation = await team.UnarchiveAsync(); // lets wait for the operation to complete await unarchiveOperation.WaitForCompletion(); // reload from the server team = context.Team.GetAsync(); // Server side should be archived as well now var archiveStatus = team.IsArchived;"
  },
  "using-the-sdk/teams-channel-chat.html": {
    "href": "using-the-sdk/teams-channel-chat.html",
    "title": "Working with a Team Channel Chat messages | PnP Core SDK",
    "keywords": "Working with a Team Channel Chat messages The Core SDK provides support for working with chat messages within a Teams Channel allowing you to post messages. Creating Context In this article, you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with Teams } Getting Chat Messages The following example will show you how to retrieve all the messages within a channel chat: // Get the Team var team = await context.Team.GetAsync(o => o.Channels); // Get the channel var channel = team.Channels.AsRequested().FirstOrDefault(i => i.DisplayName == \"General\"); channel = await channel.GetAsync(o => o.Messages); var chatMessages = channel.Messages; Adding Chat Messages You can post messages to the chat within a channel, the following code demonstrates how this can be done: // Get the Team var team = await context.Team.GetAsync(o => o.Channels); // Get the channel var channel = team.Channels.AsRequested().FirstOrDefault(i => i.DisplayName == \"General\"); channel = await channel.GetAsync(o => o.Messages); var chatMessages = channel.Messages; var body = \"Hello, I'm posting a message - PnP Rocks!\"; // Perform the add operation await chatMessages.AddAsync(body); Add Chat Messages with HTML You can add chat messages that contain a HTML body, the following code sample will demonstrate how to do this: // Get the Team var team = await context.Team.GetAsync(o => o.Channels); // Get the channel var channel = team.Channels.AsRequested().FirstOrDefault(i => i.DisplayName == \"General\"); channel = await channel.GetAsync(o => o.Messages); var chatMessages = channel.Messages; var body = $\"<h1>Hello</h1><br />Example posting a HTML message - <strong>PnP Rocks!</strong>\"; // Perform the add operation await chatMessages.AddAsync(body, ChatMessageContentType.Html); Adding Chat Messages with Attachments Chat messages can support file attachments. The following code shows an example of how an attachment is done: // Get the Team var team = await context.Team.GetAsync(o => o.Channels); // Get the channel var channel = team.Channels.AsRequested().FirstOrDefault(i => i.DisplayName == \"General\"); channel = await channel.GetAsync(o => o.Messages); var chatMessages = channel.Messages; // Upload File to SharePoint Library IFolder folder = await context.Web.Lists.GetByTitle(\"Documents\").RootFolder.GetAsync(); IFile existingFile = await folder.Files.GetFirstOrDefaultAsync(o => o.Name == \"test_added.docx\"); if(existingFile == default) { existingFile = await folder.Files.AddAsync(\"test_added.docx\", System.IO.File.OpenRead($\"<path-to-file>test.docx\")); } // Prepare the attachment ID var attachmentId = existingFile.ETag.AsGraphEtag(); ; // Needs to be the documents eTag - just the GUID part - use this extension method var body = $\"<h1>Hello</h1><br />Example posting a message with a file attachment - <attachment id=\\\"{attachmentId}\\\"></attachment>\"; var fileUri = new Uri(existingFile.LinkingUrl); await chatMessages.AddAsync(new ChatMessageOptions{ Content = body, ContentType = ChatMessageContentType.Html, Attachments = { new ChatMessageAttachmentOptions { Id = attachmentId, ContentType = \"reference\", // Cannot have the extension with a query graph doesn't recognise and think its part of file extension - include in docs. ContentUrl = new Uri(fileUri.ToString().Replace(fileUri.Query, \"\")), Name = $\"{existingFile.Name}\", ThumbnailUrl = null, Content = null } } }); For advanced information about the specific area of the Graph that handles sending messages with attachments visit: https://docs.microsoft.com/en-us/graph/api/chatmessage-post?view=graph-rest-beta&tabs=http#example-4-file-attachments Note There two areas you should be aware about this feature related to how the Graph works: The Graph produces a eTag reference in the format \"{GUID},ID\" with quotes, however this has to be stripped down to just the GUID element, without the surrounding braces, comma, quotes and ID for this to be recognised. An extension method has been created to avoid having to write this adaption to the eTag. File used to upload, must not have a query string parameter, this will not be recognised and the Graph treats this as part of the extension and thus will fail if the Name extension is different. Adding Chat Messages with Cards Adding a chat message can be done using a Card, see below adaptive card example: // Get the Team var team = await context.Team.GetAsync(o => o.Channels); // Get the channel var channel = team.Channels.AsRequested().FirstOrDefault(i => i.DisplayName == \"General\"); channel = await channel.GetAsync(o => o.Messages); var chatMessages = channel.Messages; // Attachment ID must be unique, but the same in both body and content properties var attachmentId = \"74d20c7f34aa4a7fb74e2b30004247c5\"; var body = $\"<attachment id=\\\"{attachmentId}\\\"></attachment>\"; await chatMessages.AddAsync(new ChatMessageOptions { Content = body, ContentType = ChatMessageContentType.Html, Attachments = { new ChatMessageAttachmentOptions { Id = attachmentId, ContentType = \"application/vnd.microsoft.card.adaptive\", // Adaptive Card Content = \"{\\\"$schema\\\":\\\"http://adaptivecards.io/schemas/adaptive-card.json\\\",\\\"type\\\":\\\"AdaptiveCard\\\",\\\"version\\\":\\\"1.0\\\",\\\"body\\\":[{\\\"type\\\":\\\"Container\\\",\\\"items\\\":[{\\\"type\\\":\\\"TextBlock\\\",\\\"text\\\":\\\"Adaptive Card Unit Test\\\",\\\"weight\\\":\\\"bolder\\\",\\\"size\\\":\\\"medium\\\"},{\\\"type\\\":\\\"ColumnSet\\\",\\\"columns\\\":[{\\\"type\\\":\\\"Column\\\",\\\"width\\\":\\\"auto\\\",\\\"items\\\":[{\\\"type\\\":\\\"Image\\\",\\\"url\\\":\\\"https://pbs.twimg.com/profile_images/3647943215/d7f12830b3c17a5a9e4afcc370e3a37e_400x400.jpeg\\\",\\\"size\\\":\\\"small\\\",\\\"style\\\":\\\"person\\\"}]},{\\\"type\\\":\\\"Column\\\",\\\"width\\\":\\\"stretch\\\",\\\"items\\\":[{\\\"type\\\":\\\"TextBlock\\\",\\\"text\\\":\\\"Matt Hidinger\\\",\\\"weight\\\":\\\"bolder\\\",\\\"wrap\\\":true},{\\\"type\\\":\\\"TextBlock\\\",\\\"spacing\\\":\\\"none\\\",\\\"text\\\":\\\"Created {{DATE(2017-02-14T06:08:39Z,SHORT)}}\\\",\\\"isSubtle\\\":true,\\\"wrap\\\":true}]}]}]},{\\\"type\\\":\\\"Container\\\",\\\"items\\\":[{\\\"type\\\":\\\"TextBlock\\\",\\\"text\\\":\\\"Now that we have defined the main rule sand features of the format ,we need to produce a schema and publish it to GitHub.The schema will be the starting point of our reference documentation.\\\",\\\"wrap\\\":true},{\\\"type\\\":\\\"FactSet\\\",\\\"facts\\\":[{\\\"title\\\":\\\"Board:\\\",\\\"value\\\":\\\"Adaptive Card\\\"},{\\\"title\\\":\\\"List:\\\",\\\"value\\\":\\\"Backlog\\\"},{\\\"title\\\":\\\"Assigned to:\\\",\\\"value\\\":\\\"Matt Hidinger\\\"},{\\\"title\\\":\\\"Duedate:\\\",\\\"value\\\":\\\"Not set\\\"}]}]}],\\\"actions\\\":[{\\\"type\\\":\\\"Action.ShowCard\\\",\\\"title\\\":\\\"Set due date\\\",\\\"card\\\":{\\\"type\\\":\\\"AdaptiveCard\\\",\\\"body\\\":[{\\\"type\\\":\\\"Input.Date\\\",\\\"id\\\":\\\"dueDate\\\"}],\\\"actions\\\":[{\\\"type\\\":\\\"Action.Submit\\\",\\\"title\\\":\\\"OK\\\"}]}},{\\\"type\\\":\\\"Action.ShowCard\\\",\\\"title\\\":\\\"Comment\\\",\\\"card\\\":{\\\"type\\\":\\\"AdaptiveCard\\\",\\\"body\\\":[{\\\"type\\\":\\\"Input.Text\\\",\\\"id\\\":\\\"comment\\\",\\\"isMultiline\\\":true,\\\"placeholder\\\":\\\"Enter your comment\\\"}],\\\"actions\\\":[{\\\"type\\\":\\\"Action.Submit\\\",\\\"title\\\":\\\"OK\\\"}]}}]}\", ContentUrl = null, Name = null, ThumbnailUrl = null } } }); For advanced information about the specific area of the Graph that handles sending messages with cards visit: https://docs.microsoft.com/en-us/graph/api/chatmessage-post?view=graph-rest-beta&tabs=http#example-3-cards Additionally, there are different types of cards, such as Adaptive Cards and Thumbnail - these have been tested with unit tests but not all types have yet. For information about the different types of cards, visit: https://docs.microsoft.com/en-us/microsoftteams/platform/task-modules-and-cards/cards/cards-reference Adding Chat Messages with Inline Images Chat messages can also include inline images. The following example demonstrates this option: // Get the Team var team = await context.Team.GetAsync(o => o.Channels); // Get the channel var channel = team.Channels.AsRequested().FirstOrDefault(i => i.DisplayName == \"General\"); channel = await channel.GetAsync(o => o.Messages); var chatMessages = channel.Messages; var body = $\"<div><div><h1>Hello</h1><p>Example posting a message with inline image</p><div><span><img height=\\\"392\\\" src=\\\"../hostedContents/1/$value\\\" width=\\\"300\\\" style=\\\"vertical-align:bottom; width:300px; height:392px\\\"></span></div></div></div>\"; await chatMessages.AddAsync(new ChatMessageOptions { Content = body, ContentType = ChatMessageContentType.Html, HostedContents = { new ChatMessageHostedContentOptions { Id = \"1\", ContentBytes = \"<base64-encoded bytes>\", ContentType = \"image/png\" } } }); For advanced information about the specific area of the Graph that handles sending messages with inline images visit: https://docs.microsoft.com/en-us/graph/api/chatmessage-post?view=graph-rest-beta&tabs=http#example-5-sending-inline-images-along-with-the-message"
  },
  "using-the-sdk/teams-channels.html": {
    "href": "using-the-sdk/teams-channels.html",
    "title": "Working with Teams: Channels | PnP Core SDK",
    "keywords": "Working with Teams: Channels Within Teams, you have one or more channels. This page will show you how you can Get, Create, Update and Delete channels. Creating Context In this article, you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with Teams } Getting Channels Channels is a collection part of the ITeam interface, so when you get a team, you can include the channels on the request. // Get the Team var team = await context.Team.GetAsync(o => o.Channels); // Get the Channels var channels = team.Channels; Getting Channels with specific properties When you want to load the Team and Channels with specific properties populated, you can specify which properties to include by: // Get the Team var team = await context.Team.GetAsync( p => p.Channels.QueryProperties(p => p.DisplayName)); Getting a specific Channel If you would like to get a specific channel you can use the extension method GetByDisplayNameAsync to get the channel by name. // Get the Team var team = await context.Team.GetAsync(o => o.Channels); // Get the Channel var generalChannel = await team.Channels.GetByDisplayNameAsync(\"General\"); Getting the default channel Alternatively, if you are looking for the default channel within a Team, you can retrieve this with the following: // Get the Team var team = await context.Team.GetAsync(o => o.PrimaryChannel); // Get the primary channel var primaryChannel = await team.PrimaryChannel; Creating Channels To add a new channel, call the Add method, specifying a name and optionally a description. var team = await context.Team.GetAsync(p => p.Channels); // Get the Team string channelName = $\"My Cool New Channel\"; // Check if the channel exists var channelFound = team.Channels.Where(p => p.DisplayName == channelName).FirstOrDefault(); if (channelFound == null) { // Add a new channel channelFound = await team.Channels.AddAsync(channelName, \"This is my cool new Channel, check this out!\"); } Tip When working with channels these are some tips to help: Channel Names must be unique Check if the channel already exists, to avoid trying to add a Channel with an existing name Updating Channels You can update the channel by changing the properties you wish update and call the update method: // Get the Team var team = await context.Team.GetAsync(p => p.Channels); string channelName = $\"My Cool New Channel\"; // Get the channel you wish to update var channelToUpdate = team.Channels.Where(p => p.DisplayName == channelName).FirstOrDefault(); if(channelToUpdate != default){ string newChannelDescription = $\"This cool channel is being updated!\"; channelToUpdate.Description = newChannelDescription; // Perform the update to the channel await channelToUpdate.UpdateAsync(); } Deleting Channels You can delete the channel with the following example: var team = await context.Team.GetAsync(p => p.Channels); string channelName = $\"My Cool New Channel\"; // Get the channel you wish to delete var channelToDelete = team.Channels.Where(p => p.DisplayName == channelName).FirstOrDefault(); if(channelToDelete != default){ // Perform the delete operation await channelToUpdate.DeleteAsync(); } Note You cannot delete the General Channel, this operation is not supported by the service. Additionally, channels are soft-deleted for 30 days, before which counts towards the total limit of channels per Team, for further details on the limits, please refer to Limits and specifications for Microsoft Teams"
  },
  "using-the-sdk/teams-channel-tabs.html": {
    "href": "using-the-sdk/teams-channel-tabs.html",
    "title": "Working with Teams: Channel Tabs | PnP Core SDK",
    "keywords": "Working with Teams: Channel Tabs The Core SDK provides support for working with Microsoft Teams channel tabs allowing you to retrieve, create, update and delete tabs from the channel. Creating Context In this article, you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with Teams } Getting Channel Tabs To load the channel tabs, the SharePoint site must be associated with a Team in the context, then load the Team and the Channel. From here you can load all the tabs to allow you to work with the existing tabs, see this example: // Get the Team var team = await context.Team.GetAsync(o => o.Channels); // Get the channel var channel = team.Channels.Where(i => i.DisplayName == \"General\").FirstOrDefault(); // Load the tabs in the channel channel = await channel.GetAsync(o => o.Tabs); // Collection of Tabs var tabs = channel.Tabs; Creating Channel Tabs The following code is an example of creating a channel tab that links to a document library: // Get the Team var team = await context.Team.GetAsync(o => o.Channels); // Get the Channel \"General\" var channel = await team.Channels.Where(i => i.DisplayName == \"General\").FirstOrDefaultAsync(); // Load the channel tab collection channel = await channel.GetAsync(o => o.Tabs); var siteDocLib = $\"{context.Uri.OriginalString}/Shared%20Documents\"; var tabName = \"Important Documents\"; // Perform the add tab operation var newDocTab = channel.Tabs.AddDocumentLibraryTabAsync(tabName, new Uri(siteDocLib)); Updating Channel Tabs Channel Tabs can be updated using the standard Update() method, see code example: // Get the Team var team = await context.Team.GetAsync(o => o.Channels); // Get the Channel \"General\" var channel = await team.Channels.Where(i => i.DisplayName == \"General\").FirstOrDefaultAsync(); channel = await channel.GetAsync(o => o.Tabs); var tabName = \"Important Documents\"; var tab = channel.Tabs.AsRequested().FirstOrDefault(i => i.DisplayName == tabName); // Update the display name of the tab tab.DisplayName = \"Most Important Documents\"; // Perform the update operation await tab.Update(); Deleting Channel Tabs You can delete the channel tab by getting a reference to the channel tab and running the standard delete operation in the code example below: // Get the Team var team = await context.Team.GetAsync(o => o.Channels); // Get the Channel \"General\" var channel = await team.Channels.Where(i => i.DisplayName == \"General\").FirstOrDefaultAsync(); // Get the Tabs channel = await channel.GetAsync(o => o.Tabs); var tab = channel.Tabs.AsRequested().FirstOfDefault(i => i.DisplayName == \"Important Documents\"); if (tab != default) { // Perform the delete operation await tab.DeleteAsync(); }"
  },
  "using-the-sdk/teams-intro.html": {
    "href": "using-the-sdk/teams-intro.html",
    "title": "Working with Teams: Introduction | PnP Core SDK",
    "keywords": "Working with Teams: Introduction The PnP Core SDK provides support for working with Microsoft Teams, in this set of articles, you will learn to use the SDK to interact with the service to work with Teams, Channels, Tabs, Chat Messages and more. Creating Context In this article, you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with Teams } When you want to get a Team, the SDK uses the associated Office 356 group ID attached to the current SharePoint Site to retrieve the Team from the Graph, you must connect to an existing site first that is associated to a Microsoft 365 group and has been 'Teamified'. Loading existing Team Getting a Team can be achieved with the following: var team = await context.Team.GetAsync(); If a Team is not set for the site referenced in the context, you will get an exception. Getting Team Settings Each Team has settings to control which features are enabled. The following code shows examples of accessing those: // Get the Team var team = await context.Team.GetAsync(x => x.FunSettings); var giphyRating = team.FunSettings.GiphyContentRating; var allowStickersAndMemes = team.FunSettings.AllowStickersAndMemes; var allowCustomMemes = team.FunSettings.AllowCustomMemes; var allowGiphy = team.FunSettings.AllowGiphy; To retrieve the other properties, include the property within the expression in the 'GetAsync' call to add more properties to include. Note The Classification property will always return null, the Microsoft Graph does not currently return a value, however, you can retrieve this by finding the property of the underlying Microsoft 365 group. Updating Team Settings You can update the settings of a Team, the following code example shows updating the Fun Settings for a Team, this principle can be used for the other properties. // Get the Team var team = await context.Team.GetAsync(x => x.FunSettings); team.FunSettings.GiphyContentRating = TeamGiphyContentRating.Moderate; team.FunSettings.AllowStickersAndMemes = true; team.FunSettings.AllowCustomMemes = true; team.FunSettings.AllowGiphy = true; // Perform the update to the Team await team.UpdateAsync(); Note The DiscoverySettings property cannot be updated. The Microsoft Graph does not currently support this operation."
  },
  "using-the-sdk/transformation-getting-started.html": {
    "href": "using-the-sdk/transformation-getting-started.html",
    "title": "PnP Transformation Framework - Getting Started | PnP Core SDK",
    "keywords": "PnP Transformation Framework - Getting Started The PnP Transformation Framework is a library to transform content pages from any source platform into Microsoft SharePoint Online modern pages. At the time of this writing, there is native support for transforming SharePoint classic pages from SharePoint 2013, 2016, 2019, and Online into SharePoint modern pages in SharePoint Online. However, the architecture of the framework is open and extensible and can be used to create any custom data source for reading content pages from any third party platform. You can use the PnP Transformation Framework either via PnP PowerShell or in your own .NET code as a referenced library. Transforming SharePoint pages via PnP PowerShell In order to use the PnP Transformation Framework in PnP PowerShell, you need to install the latest build of the PowerShell library. Once you have done that, you can simply invoke the Invoke-PnPTransformation cmdlet to trigger a page transformation. Here you can see a sample code excerpt to transform a page from a SharePoint Online classic site into another SharePoint Online modern site. # Connect to the target site $targetConnection = Connect-PnPOnline https://target-tenant.sharepoint.com/sites/TargetModernSite/ -ReturnConnection # Connect to the source site Connect-PnPOnline https://source-tenant.sharepoint.com/sites/SourceClassicSite/ # Trigger transformation Invoke-PnPTransformation -Identity source-page.aspx -TargetConnection $targetConnection The Invoke-PnPTransformation cmdlet supports a rich set of options to easily customize the transformation behavior. In the following example, you can see an invocation with additional settings levaraging the parameters splatting capability of PowerShell and reusing the same settings to transform multiple pages. # Connect to the target site $targetConnection = Connect-PnPOnline https://target-tenant.sharepoint.com/sites/TargetModernSite/ -ReturnConnection # Connect to the source site Connect-PnPOnline https://source-tenant.sharepoint.com/sites/SourceClassicSite/ # Or you can use parameter splatting $transformationParams = @{ LocalStoragePath = \"c:\\temp\" CopyPageMetadata = $true KeepPageCreationModificationInformation = $true KeepPageSpecificPermissions = $true Overwrite = $true SetAuthorInPageHeader = $true TargetPagePrefix = \"Migrated_\" RemoveEmptySectionsAndColumns = $true HandleWikiImagesAndVideos = $true AddTableListImageAsImageWebPart = $true IncludeTitleBarWebPart = $true SkipHiddenWebParts = $true TargetConnection = $targetConnection } Invoke-PnPTransformation -Identity first-page.aspx @transformationParams Invoke-PnPTransformation -Identity second-page.aspx @transformationParams Notice that the Invoke-PnPTransformation cmdlet supports SharePoint classic as the unique data source, so you cannot use it to plug into the PnP Transformation Framework a custom data source of your own. Transforming SharePoint pages with custom .NET code If you want to use the PnP Transformation Framework in your own custom developed solutions, or eventually leveraging a custom data source that you implemented, you can reference the PnP Transformation Framework NuGet package in your .NET solution. In particular, if you like to transform classic SharePoint content pages to SharePoint Online, you can reference the PnP Transformation Framework library for SharePoint , which includes a dependency on the main PnP Transformation Framework NuGet package. Note PnP Transformation Framework library for SharePoint relies on the SharePoint Client-Side Object Model (CSOM) to read the classic content pages from the source. The PnP Transformation Framework is based on the PnP Core SDK and relies on dependency injection, so in order to start using it in your code, you need to setup a host context. In the following code excerpt, you can see an example of a console application to transform a SharePoint classic page. var host = Host.CreateDefaultBuilder() // Configure logging .ConfigureServices((hostingContext, services) => { // Add the PnP Core SDK library services.AddPnPCore(options => { options.PnPContext.GraphFirst = true; options.HttpRequests.UserAgent = \"ISV|Contoso|ProductX\"; options.Sites.Add(\"TargetSite\", new PnPCoreSiteOptions { SiteUrl = \"https://target-tenant.sharepoint.com/sites/TargetModernSite/\" }); }); services.AddPnPCoreAuthentication( options => { // Configure an Authentication Provider relying on the interactive authentication options.Credentials.Configurations.Add(\"interactive\", new PnPCoreAuthenticationCredentialConfigurationOptions { ClientId = \"{your_client_id}\", TenantId = \"{your_tenant_id}\", Interactive = new PnPCoreAuthenticationInteractiveOptions { RedirectUri = new Uri(\"http://localhost\") } }); // Configure the default authentication provider options.Credentials.DefaultConfiguration = \"interactive\"; // Map the site defined in AddPnPCore with the // Authentication Provider configured in this action options.Sites.Add(\"TargetSite\", new PnPCoreAuthenticationSiteOptions { AuthenticationProviderName = \"interactive\" }); } ); // Register the transformation services for SharePoint as the data source services.AddPnPSharePointTransformation( pnpOptions => // Global settings { pnpOptions.DisableTelemetry = false; pnpOptions.PersistenceProviderConnectionString = @\"c:\\temp\"; }, pageOptions => // Target modern page creation settings { pageOptions.CopyPageMetadata = true; pageOptions.KeepPageCreationModificationInformation = true; pageOptions.PostAsNews = false; pageOptions.PublishPage = false; pageOptions.DisablePageComments = false; pageOptions.KeepPageSpecificPermissions = true; pageOptions.Overwrite = true; pageOptions.ReplaceHomePageWithDefaultHomePage = true; pageOptions.SetAuthorInPageHeader = true; pageOptions.TargetPagePrefix = \"Migrated_\"; pageOptions.TargetPageTakesSourcePageName = true; }, spOptions => // SharePoint classic source settings { spOptions.RemoveEmptySectionsAndColumns = true; spOptions.ShouldMapUsers = true; spOptions.HandleWikiImagesAndVideos = true; spOptions.AddTableListImageAsImageWebPart = true; spOptions.IncludeTitleBarWebPart = true; spOptions.SkipHiddenWebParts = true; spOptions.SkipUrlRewrite = true; } ); }) // Let the builder know we're running in a console .UseConsoleLifetime() // Add services to the container .Build(); // Start console host await host.StartAsync(); using (var scope = host.Services.CreateScope()) { // Obtain a PnP Context factory var pnpContextFactory = scope.ServiceProvider.GetRequiredService<IPnPContextFactory>(); var pageTransformator = scope.ServiceProvider.GetRequiredService<IPageTransformator>(); using (var sourceContext = new ClientContext(\"https://source-tenant.sharepoint.com/sites/SourceClassicSite/\")) { var targetContext = await pnpContextFactory.CreateAsync(\"TargetSite\"); var sourceUri = new Uri(\"https://source-tenant.sharepoint.com/sites/SourceClassicSite/sitepages/source-page.aspx\"); var result = await pageTransformator.TransformSharePointAsync(sourceContext, targetContext, sourceUri); Console.WriteLine(result.AbsoluteUri); } } Aside from the dependency injection plumbing and from all the configuration settings for the transformation framework, the real code is all about getting a reference to the data source, which is a CSOM ClientContext object, and the target, which is PnPContext of PnP Core SDK. Then, you simply invoke the TransformSharePointAsync method providing the source context ( ClientContext of CSOM), the target context ( PnPContext of PnP Core SDK), and the URL of the page to transform (as a Uri type instance). Under the cover the transformation will take place for you and will return you back the URL of the transformed page. Note Supporting dependency injection and the service-oriented model makes really simple to use the PnP Transformation Framework in .NET Core and modern cloud-hosted solutions like Azure Functions, Containers, etc."
  },
  "using-the-sdk/upgrade-to-beta3.html": {
    "href": "using-the-sdk/upgrade-to-beta3.html",
    "title": "Upgrade to Beta3 or later | PnP Core SDK",
    "keywords": "Upgrade to Beta3 or later Beta3 introduces some fundamental changes which will require minor updates in your code base. These changes are done to provide a more consistent experience while also doing internal refactoring to centralize to a common query engine regardless of the entry point. In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { } Getting data Working with PnP Core SDK starts from a PnPContext which provides you with access to the connected Site, Web and Team but which also acts as an in memory domain model. Before Beta 3 all data you requested got loaded into the PnPContext . Any Get call on either a model (e.g. doing context.Web.GetAsync(p => p.Title) ) or a collection (e.g. doing context.Web.Lists.GetAsync(p => p.Title, p => p.TemplateType) ) loaded data into the PnPContext whereas now the default behavior for Get calls is to load the data into a variable. Loading data into the PnPContext is still possible using the new Load calls. Requesting a single model (e.g. a Web, List,...) When requesting a model you can choose whether data is loaded into the PnPContext or not: Pre Beta3 Beta3 and later Loads data into PnPContext GetAsync() LoadAsync() Yes Get() Load() Yes GetBatchAsync() LoadBatchAsync() Yes GetBatch() LoadBatch() Yes N/A GetAsync() No N/A Get() No N/A GetBatchAsync() No N/A GetBatch() No Note When doing a Load specifying a model collection (e.g. context.Web.LoadAsync(p => p.Lists) ) then all the data is loaded into the PnPContext . This approach is the only option to load a collection into the PnPContext , and unless it is really needed, you should avoid this technique and rather use paging. Requesting a collection of models Loads initiated from a collection always return data into a variable and never into the PnPContext because using this approach you can also apply filters (using Where ), or other query methods, which would result in an incomplete dataset in the PnPContext . You can now chain methods ( Where , QueryProperties , etc.) with a fluent syntax and trigger the collection query execution once you are ready, using methods like ToList or ToListAsync , or enumerating the result of the query. Pre Beta3 Beta3 and later Loads data into PnPContext GetAsync() ToListAsync() No Get() ToList() No GetBatchAsync() AsBatchAsync() No GetBatch() AsBatch() No GetFirstOrDefaultAsync() FirstOrDefaultAsync() No GetFirstOrDefault() FirstOrDefault() No GetFirstOrDefaultBatchAsync() Use GetBatchAsync() with filter No GetFirstOrDefaultBatch() Use GetBatch() with filter No Querying collections of models Starting from Beta3 you can easily leverage a LINQ custom query provider that translates your LINQ queries into actual REST queries for Microsoft Graph or for Microsoft SharePoint REST APIs. For example, to get the items of a SharePoint list, filtered by title and just loading their Id and Title fields, you can write a query like the following one: var query = (from i in context.Web.Lists.GetByTitle(listName).Items where i.Title == itemTitle select i) .QueryProperties(l => l.Id, l => l.Title); You will then be able to consume the collection either using an enumeration constructor or a method like ToList . Here you can see an example using an enumeration: foreach (var item in query) { Console.WriteLine($\"{item.Id} - {item.Title}\"); } While here you can see how to use the ToList method. var queryResult = query.ToList(); The above query can also be written just using the LINQ Extension Methods, rather than the LINQ query syntax, like it is illustrated in the following code excerpt: var query = context.Web.Lists.GetByTitle(listName).Items .Where(i => i.Title == itemTitle) .QueryProperties(l => l.Id, l => l.Title); Under the cover, there will be exactly the same query model, regardless the syntax you like to use. Important Since Beta3, whenever you enumerate a query or whenever you define a new query, the query provider will execute the query online targeting the back-end APIs, and you will always get fresh data. Querying loaded collections using a foreach or LINQ to Objects If you don't want to execute an online query targeting the back-end APIs, and you rather want to use data that you already loaded in memory executing a previous query, you can use the AsRequested() method applied to a pre-loaded collection. As such, you will be able to enumerate the already in-memory data, eventually using LINQ to Objects or any other object browsing technique of your choice. In fact, the AsRequested() method casts the collection to an IEnumerable and gives you access to the in-memory copy of data. // Load all lists in the PnPContext await context.Web.LoadAsync(p => p.Lists); // Query the loaded lists via LINQ to Objects, in memory with no additional query on the backend APIs var documentLibraries = context.Web.Lists.AsRequested().Where(p => p.TemplateType == ListTemplateType.DocumentLibrary); // Iterate over the loaded lists foreach(var list in context.Web.Lists.AsRequested()) { // do something with the list } Note As of beta3 you need to use QueryProperties instead of LoadProperties when you want to specify the properties to load into the model."
  },
  "using-the-sdk/webs-intro.html": {
    "href": "using-the-sdk/webs-intro.html",
    "title": "Working with webs | PnP Core SDK",
    "keywords": "Working with webs In SharePoint there are site collections and inside a site collection you have at least one web (the root web), which on it's own can have other webs (child webs). Quite often when talking about a web the term site or sub site is used. When using the PnP Core SDK a site collection is referred to via the ISite interface while a web (root web, child web or sub web) is defined via the IWeb interface . In the remainder of this article you'll see a lot of context use: in this case this is a PnPContext which was obtained via the PnPContextFactory as explained in the overview article and show below: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext for working with webs } Getting a web A PnPContext always has a reference to the ISite of the underlying site collection and the IWeb of the connected site, so getting the current Web is as a simple as using the Web property on the PnPContext. When a context is created the Site and Web properties are loaded with some elementary properties like Id, Url and RegionalSettings. var web = context.Web; var id = web.Id; If you want to load additional web properties you can do that via using one of the Load / Get methods: // Load the root folder await context.Web.LoadAsync(p => p.RootFolder); // Load the title and content types and lists. For content types ans lists load additional properties var web = await context.Web.GetAsync(p => p.Title, p => p.ContentTypes.QueryProperties(p => p.Name), p => p.Lists.QueryProperties(p => p.Id, p => p.Title, p => p.DocumentTemplate)); Getting sub webs A web can have zero or more sub webs and to load these you use the Webs property and enumerate over the sub webs of the current web: Important When you want to work with the sub web you need to create a new PnPContext for the sub web as shown in below sample // Load the sub webs await context.Web.LoadAsync(p => p.Webs); foreach (var subWeb in context.Web.Webs.AsRequested()) { using (var contextSubWeb = await pnpContextFactory.CreateAsync(subWeb.Url)) { // Work with the found web } } Adding a web Adding a web can be done using one of the Add methods in combination with specifying the information for the new web via the WebOptions class. // add a new web to the current web, uses default web template (STS#3) and default language (1033) var addedWeb = await context.Web.Webs.AddAsync(new WebOptions { Title = \"My web\", Url = \"myweb\" }); using (var contextAddedWeb = await pnpContextFactory.CreateAsync(addedWeb.Url)) { // Work with the added web } Updating a web To update a web you can set the relevant web properties and call one of the update methods: // Load the web title var web = await context.Web.GetAsync(p => p.Title); web.Title = \"PnP Rocks!\"; await web.UpdateAsync(); Web property bag Each web also has a so called property bag, a list key/value pairs providing more information about the web. You can read this property bag, provided via the IWeb AllProperties property , and add new key/value pairs to it. // Load the web property bag var web = await context.Web.GetAsync(p => p.AllProperties); // Enumerate the web property bag foreach(var property in web.AllProperties) { // Do something with the property } // Add a new property web.AllProperties[\"myPropertyKey\"] = \"Some value\"; await web.AllProperties.UpdateAsync(); // Clear a property web.AllProperties[\"myPropertyKey\"] = null; await web.AllProperties.UpdateAsync(); Deleting a web Deleting a web is a different compared to other deletes in PnP Core SDK: you can't delete the \"current\" loaded web, you can however delete another web using either the Delete or DeleteAsync methods. Note The batch methods (DeleteBatch and DeleteBatchAsync) cannot be used to delete a web. // add a new web to the current web, uses default web template (STS#3) and default language (1033) var addedWeb = await context.Web.Webs.AddAsync(new WebOptions { Title = \"My web\", Url = \"myweb\" }); // WORKS: delete added web await addedWeb.DeleteAsync(); // DOES NOT WORK: deleting the current web await context.Web.DeleteAsync(); Getting changes for a web You can use the GetChanges methods on an IWeb to list all the changes. See Enumerating changes that happened in SharePoint to learn more."
  }
}